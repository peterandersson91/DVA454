
Lab2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000005ac  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exception    00000200  80002600  80002600  00002a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a0  80002800  80002800  00002c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  5 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  6 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000128  00000000  00000000  00002cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000120  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00003442  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000052a  00000000  00000000  0000635a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000174d  00000000  00000000  00006884  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000001d4  00000000  00000000  00007fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000009ee  00000000  00000000  000081a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000285  00000000  00000000  00008b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 002c95b3  00000000  00000000  00008e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 18 .debug_ranges 000000c8  00000000  00000000  002d23d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf db 44 	sub	pc,pc,-9404

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fb 48 	sub	pc,pc,-1208

Disassembly of section .text:

80002008 <USART_init-0x14>:
	...

8000201c <USART_init>:
#include "USART_driver.h"

void USART_init(volatile avr32_usart_t * usart)
{
8000201c:	eb cd 40 80 	pushm	r7,lr
80002020:	1a 97       	mov	r7,sp
80002022:	20 2d       	sub	sp,8
80002024:	ef 4c ff f8 	st.w	r7[-8],r12
	USART_reset(); //Resets the mode register and the Control register.
80002028:	f0 1f 00 92 	mcall	80002270 <USART_init+0x254>
	// Mode register init
	usart->MR.onebit		= 0;
8000202c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002030:	72 18       	ld.w	r8,r9[0x4]
80002032:	30 0a       	mov	r10,0
80002034:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002038:	93 18       	st.w	r9[0x4],r8
	usart->MR.modsync		= 0;
8000203a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000203e:	72 18       	ld.w	r8,r9[0x4]
80002040:	30 0a       	mov	r10,0
80002042:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80002046:	93 18       	st.w	r9[0x4],r8
	usart->MR.man			= 0;
80002048:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000204c:	72 18       	ld.w	r8,r9[0x4]
8000204e:	30 0a       	mov	r10,0
80002050:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80002054:	93 18       	st.w	r9[0x4],r8
	usart->MR.filter		= 0;
80002056:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000205a:	72 18       	ld.w	r8,r9[0x4]
8000205c:	30 0a       	mov	r10,0
8000205e:	f1 da d3 81 	bfins	r8,r10,0x1c,0x1
80002062:	93 18       	st.w	r9[0x4],r8
	usart->MR.max_iteration = 0;
80002064:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002068:	72 18       	ld.w	r8,r9[0x4]
8000206a:	30 0a       	mov	r10,0
8000206c:	f1 da d3 03 	bfins	r8,r10,0x18,0x3
80002070:	93 18       	st.w	r9[0x4],r8
	usart->MR.var_sync		= 0;
80002072:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002076:	72 18       	ld.w	r8,r9[0x4]
80002078:	30 0a       	mov	r10,0
8000207a:	f1 da d2 c1 	bfins	r8,r10,0x16,0x1
8000207e:	93 18       	st.w	r9[0x4],r8
	usart->MR.dsnack		= 0;
80002080:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002084:	72 18       	ld.w	r8,r9[0x4]
80002086:	30 0a       	mov	r10,0
80002088:	f1 da d2 a1 	bfins	r8,r10,0x15,0x1
8000208c:	93 18       	st.w	r9[0x4],r8
	usart->MR.inack			= 0;
8000208e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002092:	72 18       	ld.w	r8,r9[0x4]
80002094:	30 0a       	mov	r10,0
80002096:	f1 da d2 81 	bfins	r8,r10,0x14,0x1
8000209a:	93 18       	st.w	r9[0x4],r8
	usart->MR.over          = 1;
8000209c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800020a0:	72 18       	ld.w	r8,r9[0x4]
800020a2:	30 1a       	mov	r10,1
800020a4:	f1 da d2 61 	bfins	r8,r10,0x13,0x1
800020a8:	93 18       	st.w	r9[0x4],r8
	usart->MR.clko          = 0;
800020aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800020ae:	72 18       	ld.w	r8,r9[0x4]
800020b0:	30 0a       	mov	r10,0
800020b2:	f1 da d2 41 	bfins	r8,r10,0x12,0x1
800020b6:	93 18       	st.w	r9[0x4],r8
	usart->MR.mode9         = 0;
800020b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800020bc:	72 18       	ld.w	r8,r9[0x4]
800020be:	30 0a       	mov	r10,0
800020c0:	f1 da d2 21 	bfins	r8,r10,0x11,0x1
800020c4:	93 18       	st.w	r9[0x4],r8
	usart->MR.msbf          = 0;
800020c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800020ca:	72 18       	ld.w	r8,r9[0x4]
800020cc:	30 0a       	mov	r10,0
800020ce:	f1 da d2 01 	bfins	r8,r10,0x10,0x1
800020d2:	93 18       	st.w	r9[0x4],r8
	usart->MR.chmode        = 0; //2bits
800020d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800020d8:	72 18       	ld.w	r8,r9[0x4]
800020da:	30 0a       	mov	r10,0
800020dc:	f1 da d1 c2 	bfins	r8,r10,0xe,0x2
800020e0:	93 18       	st.w	r9[0x4],r8
	usart->MR.nbstop        = 0;
800020e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800020e6:	72 18       	ld.w	r8,r9[0x4]
800020e8:	30 0a       	mov	r10,0
800020ea:	f1 da d1 82 	bfins	r8,r10,0xc,0x2
800020ee:	93 18       	st.w	r9[0x4],r8
	usart->MR.par           = 4;
800020f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800020f4:	72 18       	ld.w	r8,r9[0x4]
800020f6:	30 4a       	mov	r10,4
800020f8:	f1 da d1 23 	bfins	r8,r10,0x9,0x3
800020fc:	93 18       	st.w	r9[0x4],r8
	usart->MR.sync          = 0;
800020fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002102:	72 18       	ld.w	r8,r9[0x4]
80002104:	30 0a       	mov	r10,0
80002106:	f1 da d1 01 	bfins	r8,r10,0x8,0x1
8000210a:	93 18       	st.w	r9[0x4],r8
	usart->MR.chrl          = 3;
8000210c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002110:	72 18       	ld.w	r8,r9[0x4]
80002112:	30 3a       	mov	r10,3
80002114:	f1 da d0 c2 	bfins	r8,r10,0x6,0x2
80002118:	93 18       	st.w	r9[0x4],r8
	usart->MR.usclks        = 0;
8000211a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000211e:	72 18       	ld.w	r8,r9[0x4]
80002120:	30 0a       	mov	r10,0
80002122:	f1 da d0 82 	bfins	r8,r10,0x4,0x2
80002126:	93 18       	st.w	r9[0x4],r8
	usart->MR.mode          = 0;
80002128:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000212c:	72 18       	ld.w	r8,r9[0x4]
8000212e:	30 0a       	mov	r10,0
80002130:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
80002134:	93 18       	st.w	r9[0x4],r8
	
	// Control register init
	usart->CR.rtsdis		= 0;
80002136:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000213a:	72 08       	ld.w	r8,r9[0x0]
8000213c:	30 0a       	mov	r10,0
8000213e:	f1 da d2 61 	bfins	r8,r10,0x13,0x1
80002142:	93 08       	st.w	r9[0x0],r8
	usart->CR.rtsen         = 0;
80002144:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002148:	72 08       	ld.w	r8,r9[0x0]
8000214a:	30 0a       	mov	r10,0
8000214c:	f1 da d2 41 	bfins	r8,r10,0x12,0x1
80002150:	93 08       	st.w	r9[0x0],r8
	usart->CR.retto         = 0;
80002152:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002156:	72 08       	ld.w	r8,r9[0x0]
80002158:	30 0a       	mov	r10,0
8000215a:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
8000215e:	93 08       	st.w	r9[0x0],r8
	usart->CR.rstnack       = 0;
80002160:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002164:	72 08       	ld.w	r8,r9[0x0]
80002166:	30 0a       	mov	r10,0
80002168:	f1 da d1 c1 	bfins	r8,r10,0xe,0x1
8000216c:	93 08       	st.w	r9[0x0],r8
	usart->CR.rstit         = 0;
8000216e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002172:	72 08       	ld.w	r8,r9[0x0]
80002174:	30 0a       	mov	r10,0
80002176:	f1 da d1 a1 	bfins	r8,r10,0xd,0x1
8000217a:	93 08       	st.w	r9[0x0],r8
	usart->CR.senda         = 0;
8000217c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002180:	72 08       	ld.w	r8,r9[0x0]
80002182:	30 0a       	mov	r10,0
80002184:	f1 da d1 81 	bfins	r8,r10,0xc,0x1
80002188:	93 08       	st.w	r9[0x0],r8
	usart->CR.sttto         = 0;
8000218a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000218e:	72 08       	ld.w	r8,r9[0x0]
80002190:	30 0a       	mov	r10,0
80002192:	f1 da d1 61 	bfins	r8,r10,0xb,0x1
80002196:	93 08       	st.w	r9[0x0],r8
	usart->CR.stpbrk        = 0;
80002198:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000219c:	72 08       	ld.w	r8,r9[0x0]
8000219e:	30 0a       	mov	r10,0
800021a0:	f1 da d1 41 	bfins	r8,r10,0xa,0x1
800021a4:	93 08       	st.w	r9[0x0],r8
	usart->CR.sttbrk        = 0;
800021a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021aa:	72 08       	ld.w	r8,r9[0x0]
800021ac:	30 0a       	mov	r10,0
800021ae:	f1 da d1 21 	bfins	r8,r10,0x9,0x1
800021b2:	93 08       	st.w	r9[0x0],r8
	usart->CR.rststa        = 0;
800021b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021b8:	72 08       	ld.w	r8,r9[0x0]
800021ba:	30 0a       	mov	r10,0
800021bc:	f1 da d1 01 	bfins	r8,r10,0x8,0x1
800021c0:	93 08       	st.w	r9[0x0],r8
	usart->CR.txdis         = 0;
800021c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021c6:	72 08       	ld.w	r8,r9[0x0]
800021c8:	30 0a       	mov	r10,0
800021ca:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
800021ce:	93 08       	st.w	r9[0x0],r8
	usart->CR.txen          = 1; // enable transmit
800021d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021d4:	72 08       	ld.w	r8,r9[0x0]
800021d6:	30 1a       	mov	r10,1
800021d8:	f1 da d0 c1 	bfins	r8,r10,0x6,0x1
800021dc:	93 08       	st.w	r9[0x0],r8
	usart->CR.rxdis         = 0;
800021de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021e2:	72 08       	ld.w	r8,r9[0x0]
800021e4:	30 0a       	mov	r10,0
800021e6:	f1 da d0 a1 	bfins	r8,r10,0x5,0x1
800021ea:	93 08       	st.w	r9[0x0],r8
	usart->CR.rxen          = 1; // enable receive
800021ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021f0:	72 08       	ld.w	r8,r9[0x0]
800021f2:	30 1a       	mov	r10,1
800021f4:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
800021f8:	93 08       	st.w	r9[0x0],r8
	usart->CR.rsttx         = 0;
800021fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021fe:	72 08       	ld.w	r8,r9[0x0]
80002200:	30 0a       	mov	r10,0
80002202:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
80002206:	93 08       	st.w	r9[0x0],r8
	usart->CR.rstrx         = 0;
80002208:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000220c:	72 08       	ld.w	r8,r9[0x0]
8000220e:	30 0a       	mov	r10,0
80002210:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
80002214:	93 08       	st.w	r9[0x0],r8
	
	// BaudRateGeneratorRegister
	//Clock frequency = 115200 Hz
	usart->BRGR.fp			= 4;
80002216:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000221a:	72 88       	ld.w	r8,r9[0x20]
8000221c:	30 4a       	mov	r10,4
8000221e:	f1 da d2 03 	bfins	r8,r10,0x10,0x3
80002222:	93 88       	st.w	r9[0x20],r8
	usart->BRGR.cd          = 1;
80002224:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002228:	72 88       	ld.w	r8,r9[0x20]
8000222a:	30 1a       	mov	r10,1
8000222c:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
80002230:	93 88       	st.w	r9[0x20],r8
	
	volatile avr32_gpio_port_t * usart_gpio;
	usart_gpio = &AVR32_GPIO.port[USART_RXD_PIN/GPIO_MAX_PIN_NUMBER];
80002232:	fe 78 10 00 	mov	r8,-61440
80002236:	ef 48 ff fc 	st.w	r7[-4],r8
	usart_gpio->pmr0c = 1 << (USART_RXD_PIN & 0x1F); //Peripheral MUX register
8000223a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000223e:	32 09       	mov	r9,32
80002240:	91 69       	st.w	r8[0x18],r9
	usart_gpio->pmr1c = 1 << (USART_RXD_PIN & 0x1F); //1 << (5 & 31)
80002242:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002246:	32 09       	mov	r9,32
80002248:	91 a9       	st.w	r8[0x28],r9
	usart_gpio->gperc = 1 << (USART_RXD_PIN & 0x1F); //Disables GPIO on receiver pin.
8000224a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000224e:	32 09       	mov	r9,32
80002250:	91 29       	st.w	r8[0x8],r9
	
	usart_gpio->pmr0c = 1 << (USART_TXD_PIN & 0x1F); //1 << (6 & 31)
80002252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002256:	34 09       	mov	r9,64
80002258:	91 69       	st.w	r8[0x18],r9
	usart_gpio->pmr1c = 1 << (USART_TXD_PIN & 0x1F);
8000225a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000225e:	34 09       	mov	r9,64
80002260:	91 a9       	st.w	r8[0x28],r9
	usart_gpio->gperc = 1 << (USART_TXD_PIN & 0x1F); //Disables GPIO on transmitter pin.
80002262:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002266:	34 09       	mov	r9,64
80002268:	91 29       	st.w	r8[0x8],r9
}
8000226a:	2f ed       	sub	sp,-8
8000226c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002270:	80 00       	ld.sh	r0,r0[0x0]
80002272:	24 24       	sub	r4,66

80002274 <USART_getChar>:

char USART_getChar()
{
80002274:	eb cd 40 80 	pushm	r7,lr
80002278:	1a 97       	mov	r7,sp
8000227a:	20 1d       	sub	sp,4
	volatile avr32_usart_t * usart = USART;
8000227c:	fe 78 18 00 	mov	r8,-59392
80002280:	ef 48 ff fc 	st.w	r7[-4],r8
	while(usart->CSR.rxrdy == 0)
80002284:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002288:	70 58       	ld.w	r8,r8[0x14]
8000228a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000228e:	cf b0       	breq	80002284 <USART_getChar+0x10>
	{}
	return usart->RHR.rxchr;
80002290:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002294:	70 68       	ld.w	r8,r8[0x18]
80002296:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8000229a:	5c 88       	casts.h	r8
8000229c:	5c 58       	castu.b	r8
	
}
8000229e:	10 9c       	mov	r12,r8
800022a0:	2f fd       	sub	sp,-4
800022a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800022a6 <USART_putChar>:

void USART_putChar(char c)
{
800022a6:	eb cd 40 80 	pushm	r7,lr
800022aa:	1a 97       	mov	r7,sp
800022ac:	20 2d       	sub	sp,8
800022ae:	18 98       	mov	r8,r12
800022b0:	ef 68 ff f8 	st.b	r7[-8],r8
	volatile avr32_usart_t * usart = USART; 
800022b4:	fe 78 18 00 	mov	r8,-59392
800022b8:	ef 48 ff fc 	st.w	r7[-4],r8

	if((USART->csr & AVR32_USART_CSR_TXRDY_MASK) != 0)
800022bc:	fe 78 18 00 	mov	r8,-59392
800022c0:	70 58       	ld.w	r8,r8[0x14]
800022c2:	e2 18 00 02 	andl	r8,0x2,COH
800022c6:	c0 d0       	breq	800022e0 <USART_putChar+0x3a>
	{
		USART->THR.txchr = c; //( c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800022c8:	fe 79 18 00 	mov	r9,-59392
800022cc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800022d0:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800022d4:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
800022d8:	72 78       	ld.w	r8,r9[0x1c]
800022da:	f1 da d0 09 	bfins	r8,r10,0x0,0x9
800022de:	93 78       	st.w	r9[0x1c],r8
	}
}
800022e0:	2f ed       	sub	sp,-8
800022e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800022e6:	d7 03       	nop

800022e8 <USART_getString>:

char * USART_getString()
{
800022e8:	eb cd 40 80 	pushm	r7,lr
800022ec:	1a 97       	mov	r7,sp
800022ee:	20 8d       	sub	sp,32
	char input_string[20] = "\0";
800022f0:	4b 18       	lddpc	r8,800023b4 <USART_getString+0xcc>
800022f2:	90 08       	ld.sh	r8,r8[0x0]
800022f4:	ef 58 ff e0 	st.h	r7[-32],r8
800022f8:	ee c8 00 1e 	sub	r8,r7,30
800022fc:	30 09       	mov	r9,0
800022fe:	b0 09       	st.h	r8[0x0],r9
80002300:	2f e8       	sub	r8,-2
80002302:	30 09       	mov	r9,0
80002304:	b0 09       	st.h	r8[0x0],r9
80002306:	2f e8       	sub	r8,-2
80002308:	30 09       	mov	r9,0
8000230a:	b0 09       	st.h	r8[0x0],r9
8000230c:	2f e8       	sub	r8,-2
8000230e:	30 09       	mov	r9,0
80002310:	b0 09       	st.h	r8[0x0],r9
80002312:	2f e8       	sub	r8,-2
80002314:	30 09       	mov	r9,0
80002316:	b0 09       	st.h	r8[0x0],r9
80002318:	2f e8       	sub	r8,-2
8000231a:	30 09       	mov	r9,0
8000231c:	b0 09       	st.h	r8[0x0],r9
8000231e:	2f e8       	sub	r8,-2
80002320:	30 09       	mov	r9,0
80002322:	b0 09       	st.h	r8[0x0],r9
80002324:	2f e8       	sub	r8,-2
80002326:	30 09       	mov	r9,0
80002328:	b0 09       	st.h	r8[0x0],r9
8000232a:	2f e8       	sub	r8,-2
8000232c:	30 09       	mov	r9,0
8000232e:	b0 09       	st.h	r8[0x0],r9
80002330:	2f e8       	sub	r8,-2
	char input_char = '\0';
80002332:	30 08       	mov	r8,0
80002334:	ef 68 ff f7 	st.b	r7[-9],r8
	int i = 0;
80002338:	30 08       	mov	r8,0
8000233a:	ef 48 ff f8 	st.w	r7[-8],r8
	volatile avr32_usart_t * usart = USART;
8000233e:	fe 78 18 00 	mov	r8,-59392
80002342:	ef 48 ff fc 	st.w	r7[-4],r8
80002346:	c0 48       	rjmp	8000234e <USART_getString+0x66>
					i++;					
				}
			}
		}
		
	}
80002348:	d7 03       	nop
8000234a:	c0 28       	rjmp	8000234e <USART_getString+0x66>
8000234c:	d7 03       	nop
	char input_char = '\0';
	int i = 0;
	volatile avr32_usart_t * usart = USART;
	while (1) //Read if USART is ready 
	{		
		if(usart->CSR.rxrdy != 0)
8000234e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002352:	70 58       	ld.w	r8,r8[0x14]
80002354:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002358:	cf 80       	breq	80002348 <USART_getString+0x60>
		{
			input_char = USART_getChar();
8000235a:	f0 1f 00 18 	mcall	800023b8 <USART_getString+0xd0>
8000235e:	18 98       	mov	r8,r12
80002360:	ef 68 ff f7 	st.b	r7[-9],r8
			if(input_char == 'a')
80002364:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80002368:	36 18       	mov	r8,97
8000236a:	f0 09 18 00 	cp.b	r9,r8
8000236e:	c0 e1       	brne	8000238a <USART_getString+0xa2>
			{
				input_string[i] = '\0';
80002370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002374:	ee 08 00 09 	add	r9,r7,r8
80002378:	30 08       	mov	r8,0
8000237a:	f3 68 ff e0 	st.b	r9[-32],r8
				}
			}
		}
		
	}
	return input_string;
8000237e:	ee c8 00 20 	sub	r8,r7,32
}
80002382:	10 9c       	mov	r12,r8
80002384:	2f 8d       	sub	sp,-32
80002386:	e3 cd 80 80 	ldm	sp++,r7,pc
				input_string[i] = '\0';
				break;
			}
			else
			{	
				if (input_char != 254)
8000238a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000238e:	3f e8       	mov	r8,-2
80002390:	f0 09 18 00 	cp.b	r9,r8
80002394:	cd c0       	breq	8000234c <USART_getString+0x64>
				{
					input_string[i] = input_char;
80002396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000239a:	ee 08 00 09 	add	r9,r7,r8
8000239e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800023a2:	f3 68 ff e0 	st.b	r9[-32],r8
					i++;					
800023a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023aa:	2f f8       	sub	r8,-1
800023ac:	ef 48 ff f8 	st.w	r7[-8],r8
				}
			}
		}
		
	}
800023b0:	cc fb       	rjmp	8000234e <USART_getString+0x66>
800023b2:	00 00       	add	r0,r0
800023b4:	80 00       	ld.sh	r0,r0[0x0]
800023b6:	20 08       	sub	r8,0
800023b8:	80 00       	ld.sh	r0,r0[0x0]
800023ba:	22 74       	sub	r4,39

800023bc <USART_putString>:
	return input_string;
}

void USART_putString(int * output_string)
{
800023bc:	eb cd 40 80 	pushm	r7,lr
800023c0:	1a 97       	mov	r7,sp
800023c2:	20 3d       	sub	sp,12
800023c4:	ef 4c ff f4 	st.w	r7[-12],r12
	volatile avr32_usart_t * usart = USART;
800023c8:	fe 78 18 00 	mov	r8,-59392
800023cc:	ef 48 ff f8 	st.w	r7[-8],r8
	int i = 0;
800023d0:	30 08       	mov	r8,0
800023d2:	ef 48 ff fc 	st.w	r7[-4],r8
	while ((*(output_string + i)) != '\0')
800023d6:	c1 88       	rjmp	80002406 <USART_putString+0x4a>
	{
		if (usart->CSR.txrdy != 0)
800023d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023dc:	70 58       	ld.w	r8,r8[0x14]
800023de:	e2 18 00 02 	andl	r8,0x2,COH
800023e2:	c1 20       	breq	80002406 <USART_putString+0x4a>
		{
			USART_putChar(*(output_string + i));
800023e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800023e8:	a3 68       	lsl	r8,0x2
800023ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800023ee:	f2 08 00 08 	add	r8,r9,r8
800023f2:	70 08       	ld.w	r8,r8[0x0]
800023f4:	5c 58       	castu.b	r8
800023f6:	10 9c       	mov	r12,r8
800023f8:	f0 1f 00 0a 	mcall	80002420 <USART_putString+0x64>
			i++;
800023fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002400:	2f f8       	sub	r8,-1
80002402:	ef 48 ff fc 	st.w	r7[-4],r8

void USART_putString(int * output_string)
{
	volatile avr32_usart_t * usart = USART;
	int i = 0;
	while ((*(output_string + i)) != '\0')
80002406:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000240a:	a3 68       	lsl	r8,0x2
8000240c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002410:	f2 08 00 08 	add	r8,r9,r8
80002414:	70 08       	ld.w	r8,r8[0x0]
80002416:	58 08       	cp.w	r8,0
80002418:	ce 01       	brne	800023d8 <USART_putString+0x1c>
		{
			USART_putChar(*(output_string + i));
			i++;
		}		
	}	
}
8000241a:	2f dd       	sub	sp,-12
8000241c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002420:	80 00       	ld.sh	r0,r0[0x0]
80002422:	22 a6       	sub	r6,42

80002424 <USART_reset>:

void USART_reset()
{
80002424:	eb cd 40 80 	pushm	r7,lr
80002428:	1a 97       	mov	r7,sp
8000242a:	20 1d       	sub	sp,4
	volatile avr32_usart_t * usart = USART;
8000242c:	fe 78 18 00 	mov	r8,-59392
80002430:	ef 48 ff fc 	st.w	r7[-4],r8
	usart->mr = 0;	 //Reset Mode register	
80002434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002438:	30 09       	mov	r9,0
8000243a:	91 19       	st.w	r8[0x4],r9
	
	//Reset Control register
	usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000243c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002440:	e8 69 61 0c 	mov	r9,549132
80002444:	91 09       	st.w	r8[0x0],r9
	AVR32_USART_CR_RSTTX_MASK   |
	AVR32_USART_CR_RSTSTA_MASK  |
	AVR32_USART_CR_RSTIT_MASK   |
	AVR32_USART_CR_RSTNACK_MASK |
	AVR32_USART_CR_RTSDIS_MASK;
80002446:	2f fd       	sub	sp,-4
80002448:	e3 cd 80 80 	ldm	sp++,r7,pc

8000244c <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
8000244c:	eb cd 40 80 	pushm	r7,lr
80002450:	1a 97       	mov	r7,sp
80002452:	20 3d       	sub	sp,12
80002454:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002458:	fe 78 08 00 	mov	r8,-63488
8000245c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002460:	f2 09 11 03 	rsub	r9,r9,3
80002464:	28 09       	sub	r9,-128
80002466:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000246a:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000246e:	fe 78 08 00 	mov	r8,-63488
80002472:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002476:	2c 09       	sub	r9,-64
80002478:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000247c:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002480:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002484:	58 08       	cp.w	r8,0
80002486:	c1 30       	breq	800024ac <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002488:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000248c:	48 b8       	lddpc	r8,800024b8 <_get_interrupt_handler+0x6c>
8000248e:	a1 79       	lsl	r9,0x1
80002490:	2f f9       	sub	r9,-1
80002492:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80002496:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000249a:	f0 08 12 00 	clz	r8,r8
8000249e:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800024a2:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800024a4:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800024a8:	70 08       	ld.w	r8,r8[0x0]
800024aa:	c0 28       	rjmp	800024ae <_get_interrupt_handler+0x62>
800024ac:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800024ae:	10 9c       	mov	r12,r8
800024b0:	2f dd       	sub	sp,-12
800024b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800024b6:	00 00       	add	r0,r0
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	28 00       	sub	r0,-128

800024bc <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800024bc:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800024c0:	fe c0 fe c0 	sub	r0,pc,-320

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800024c4:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800024c8:	d5 53       	csrf	0x15
  cp      r0, r1
800024ca:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800024cc:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
800024ce:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800024d0:	c0 72       	brcc	800024de <idata_load_loop_end>
  st.d    r0++, r4
800024d2:	fe c2 fc 32 	sub	r2,pc,-974

800024d6 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
800024d6:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800024d8:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
800024da:	02 30       	cp.w	r0,r1
  cp      r0, r1
800024dc:	cf d3       	brcs	800024d6 <idata_load_loop>

800024de <idata_load_loop_end>:
  brhs    udata_clear_loop_end
800024de:	30 80       	mov	r0,8
  mov     r2, 0
800024e0:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800024e4:	02 30       	cp.w	r0,r1
  cp      r0, r1
800024e6:	c0 62       	brcc	800024f2 <udata_clear_loop_end>
  brlo    udata_clear_loop
800024e8:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800024ea:	30 03       	mov	r3,0

800024ec <udata_clear_loop>:
800024ec:	a1 22       	st.d	r0++,r2
800024ee:	02 30       	cp.w	r0,r1
800024f0:	cf e3       	brcs	800024ec <udata_clear_loop>

800024f2 <udata_clear_loop_end>:
800024f2:	fe cf ff 96 	sub	pc,pc,-106
800024f6:	d7 03       	nop

800024f8 <initLED>:
#define BUTTON_PORT (GPIO_PUSH_BUTTON_2 / GPIO_MAX_PIN_NUMBER)
// Pin for the button
#define BUTTON2_PIN (1 << (GPIO_PUSH_BUTTON_2 & (GPIO_MAX_PIN_NUMBER - 1)))

void initLED (void)
{
800024f8:	eb cd 40 80 	pushm	r7,lr
800024fc:	1a 97       	mov	r7,sp
800024fe:	20 1d       	sub	sp,4
	// LED port pointer
	volatile avr32_gpio_port_t * led_port;
	// pointing to the correct port
	led_port = &AVR32_GPIO.port[LED_PORT];
80002500:	fe 78 11 00 	mov	r8,-61184
80002504:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Enables the registers for the LEDs
	led_port->gpers = LED0_BIT_VALUE;
80002508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000250c:	fc 19 08 00 	movh	r9,0x800
80002510:	91 19       	st.w	r8[0x4],r9

	// Turning all LEDs off
	led_port->ovrs = LED0_BIT_VALUE;
80002512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002516:	fc 19 08 00 	movh	r9,0x800
8000251a:	f1 49 00 54 	st.w	r8[84],r9
	
	// setting the led pins to outputs
	led_port->oders = LED0_BIT_VALUE;
8000251e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002522:	fc 19 08 00 	movh	r9,0x800
80002526:	f1 49 00 44 	st.w	r8[68],r9
}
8000252a:	2f fd       	sub	sp,-4
8000252c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002530 <initButton>:
// Initializes the button
void initButton (void)
{
80002530:	eb cd 40 80 	pushm	r7,lr
80002534:	1a 97       	mov	r7,sp
80002536:	20 1d       	sub	sp,4
	// Button port pointer
	volatile avr32_gpio_port_t * button_port;
	button_port = &AVR32_GPIO.port[BUTTON_PORT];
80002538:	fe 78 12 00 	mov	r8,-60928
8000253c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Enables the register
	button_port->gpers = BUTTON2_PIN;
80002540:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002544:	e4 69 00 00 	mov	r9,262144
80002548:	91 19       	st.w	r8[0x4],r9
	// Sets the pin to an input
	button_port->oderc = BUTTON2_PIN;
8000254a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000254e:	e4 69 00 00 	mov	r9,262144
80002552:	f1 49 00 48 	st.w	r8[72],r9
	
}
80002556:	2f fd       	sub	sp,-4
80002558:	e3 cd 80 80 	ldm	sp++,r7,pc

8000255c <main>:
		milliseconds--;
	}
}

int main(void)
{
8000255c:	eb cd 40 80 	pushm	r7,lr
80002560:	1a 97       	mov	r7,sp
80002562:	20 3d       	sub	sp,12
	volatile avr32_usart_t * usart = USART;
80002564:	fe 78 18 00 	mov	r8,-59392
80002568:	ef 48 ff f4 	st.w	r7[-12],r8
	// Initialize USART in RS232 mode.	
	USART_init(usart);		
8000256c:	ee fc ff f4 	ld.w	r12,r7[-12]
80002570:	f0 1f 00 0c 	mcall	800025a0 <main+0x44>
	
	// Initialization
	initLED();
80002574:	f0 1f 00 0c 	mcall	800025a4 <main+0x48>
	initButton();
80002578:	f0 1f 00 0c 	mcall	800025a8 <main+0x4c>
	
	char c = 'a';
8000257c:	36 18       	mov	r8,97
8000257e:	ef 68 ff fb 	st.b	r7[-5],r8
	char * input_string = NULL; 
80002582:	30 08       	mov	r8,0
80002584:	ef 48 ff fc 	st.w	r7[-4],r8
	
	while(1)
	{		
		input_string = USART_getString();
80002588:	f0 1f 00 09 	mcall	800025ac <main+0x50>
8000258c:	18 98       	mov	r8,r12
8000258e:	ef 48 ff fc 	st.w	r7[-4],r8
		USART_putString(input_string);
80002592:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002596:	10 9c       	mov	r12,r8
80002598:	f0 1f 00 06 	mcall	800025b0 <main+0x54>
	}
8000259c:	cf 6b       	rjmp	80002588 <main+0x2c>
8000259e:	00 00       	add	r0,r0
800025a0:	80 00       	ld.sh	r0,r0[0x0]
800025a2:	20 1c       	sub	r12,1
800025a4:	80 00       	ld.sh	r0,r0[0x0]
800025a6:	24 f8       	sub	r8,79
800025a8:	80 00       	ld.sh	r0,r0[0x0]
800025aa:	25 30       	sub	r0,83
800025ac:	80 00       	ld.sh	r0,r0[0x0]
800025ae:	22 e8       	sub	r8,46
800025b0:	80 00       	ld.sh	r0,r0[0x0]
800025b2:	23 bc       	sub	r12,59

Disassembly of section .exception:

80002600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002600:	c0 08       	rjmp	80002600 <_evba>
	...

80002604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002604:	c0 08       	rjmp	80002604 <_handle_TLB_Multiple_Hit>
	...

80002608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002608:	c0 08       	rjmp	80002608 <_handle_Bus_Error_Data_Fetch>
	...

8000260c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000260c:	c0 08       	rjmp	8000260c <_handle_Bus_Error_Instruction_Fetch>
	...

80002610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002610:	c0 08       	rjmp	80002610 <_handle_NMI>
	...

80002614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002614:	c0 08       	rjmp	80002614 <_handle_Instruction_Address>
	...

80002618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002618:	c0 08       	rjmp	80002618 <_handle_ITLB_Protection>
	...

8000261c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000261c:	c0 08       	rjmp	8000261c <_handle_Breakpoint>
	...

80002620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002620:	c0 08       	rjmp	80002620 <_handle_Illegal_Opcode>
	...

80002624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002624:	c0 08       	rjmp	80002624 <_handle_Unimplemented_Instruction>
	...

80002628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002628:	c0 08       	rjmp	80002628 <_handle_Privilege_Violation>
	...

8000262c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000262c:	c0 08       	rjmp	8000262c <_handle_Floating_Point>
	...

80002630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002630:	c0 08       	rjmp	80002630 <_handle_Coprocessor_Absent>
	...

80002634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002634:	c0 08       	rjmp	80002634 <_handle_Data_Address_Read>
	...

80002638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002638:	c0 08       	rjmp	80002638 <_handle_Data_Address_Write>
	...

8000263c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000263c:	c0 08       	rjmp	8000263c <_handle_DTLB_Protection_Read>
	...

80002640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002640:	c0 08       	rjmp	80002640 <_handle_DTLB_Protection_Write>
	...

80002644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002644:	c0 08       	rjmp	80002644 <_handle_DTLB_Modified>
	...

80002650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002650:	c0 08       	rjmp	80002650 <_handle_ITLB_Miss>
	...

80002660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002660:	c0 08       	rjmp	80002660 <_handle_DTLB_Miss_Read>
	...

80002670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002670:	c0 08       	rjmp	80002670 <_handle_DTLB_Miss_Write>
	...

80002700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002700:	c0 08       	rjmp	80002700 <_handle_Supervisor_Call>
80002702:	d7 03       	nop

80002704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002704:	30 0c       	mov	r12,0
80002706:	ca 3e       	rcall	8000244c <_get_interrupt_handler>
80002708:	58 0c       	cp.w	r12,0
8000270a:	f8 0f 17 10 	movne	pc,r12
8000270e:	d6 03       	rete

80002710 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002710:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002712:	c9 de       	rcall	8000244c <_get_interrupt_handler>
80002714:	58 0c       	cp.w	r12,0
80002716:	f8 0f 17 10 	movne	pc,r12
8000271a:	d6 03       	rete

8000271c <_int2>:
8000271c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000271e:	c9 7e       	rcall	8000244c <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002720:	58 0c       	cp.w	r12,0
80002722:	f8 0f 17 10 	movne	pc,r12
80002726:	d6 03       	rete

80002728 <_int3>:
80002728:	30 3c       	mov	r12,3
8000272a:	c9 1e       	rcall	8000244c <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000272c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000272e:	f8 0f 17 10 	movne	pc,r12
80002732:	d6 03       	rete
80002734:	d7 03       	nop
80002736:	d7 03       	nop
80002738:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000273a:	d7 03       	nop
8000273c:	d7 03       	nop
8000273e:	d7 03       	nop
80002740:	d7 03       	nop
80002742:	d7 03       	nop
80002744:	d7 03       	nop
80002746:	d7 03       	nop
80002748:	d7 03       	nop
8000274a:	d7 03       	nop
8000274c:	d7 03       	nop
8000274e:	d7 03       	nop
80002750:	d7 03       	nop
80002752:	d7 03       	nop
80002754:	d7 03       	nop
80002756:	d7 03       	nop
80002758:	d7 03       	nop
8000275a:	d7 03       	nop
8000275c:	d7 03       	nop
8000275e:	d7 03       	nop
80002760:	d7 03       	nop
80002762:	d7 03       	nop
80002764:	d7 03       	nop
80002766:	d7 03       	nop
80002768:	d7 03       	nop
8000276a:	d7 03       	nop
8000276c:	d7 03       	nop
8000276e:	d7 03       	nop
80002770:	d7 03       	nop
80002772:	d7 03       	nop
80002774:	d7 03       	nop
80002776:	d7 03       	nop
80002778:	d7 03       	nop
8000277a:	d7 03       	nop
8000277c:	d7 03       	nop
8000277e:	d7 03       	nop
80002780:	d7 03       	nop
80002782:	d7 03       	nop
80002784:	d7 03       	nop
80002786:	d7 03       	nop
80002788:	d7 03       	nop
8000278a:	d7 03       	nop
8000278c:	d7 03       	nop
8000278e:	d7 03       	nop
80002790:	d7 03       	nop
80002792:	d7 03       	nop
80002794:	d7 03       	nop
80002796:	d7 03       	nop
80002798:	d7 03       	nop
8000279a:	d7 03       	nop
8000279c:	d7 03       	nop
8000279e:	d7 03       	nop
800027a0:	d7 03       	nop
800027a2:	d7 03       	nop
800027a4:	d7 03       	nop
800027a6:	d7 03       	nop
800027a8:	d7 03       	nop
800027aa:	d7 03       	nop
800027ac:	d7 03       	nop
800027ae:	d7 03       	nop
800027b0:	d7 03       	nop
800027b2:	d7 03       	nop
800027b4:	d7 03       	nop
800027b6:	d7 03       	nop
800027b8:	d7 03       	nop
800027ba:	d7 03       	nop
800027bc:	d7 03       	nop
800027be:	d7 03       	nop
800027c0:	d7 03       	nop
800027c2:	d7 03       	nop
800027c4:	d7 03       	nop
800027c6:	d7 03       	nop
800027c8:	d7 03       	nop
800027ca:	d7 03       	nop
800027cc:	d7 03       	nop
800027ce:	d7 03       	nop
800027d0:	d7 03       	nop
800027d2:	d7 03       	nop
800027d4:	d7 03       	nop
800027d6:	d7 03       	nop
800027d8:	d7 03       	nop
800027da:	d7 03       	nop
800027dc:	d7 03       	nop
800027de:	d7 03       	nop
800027e0:	d7 03       	nop
800027e2:	d7 03       	nop
800027e4:	d7 03       	nop
800027e6:	d7 03       	nop
800027e8:	d7 03       	nop
800027ea:	d7 03       	nop
800027ec:	d7 03       	nop
800027ee:	d7 03       	nop
800027f0:	d7 03       	nop
800027f2:	d7 03       	nop
800027f4:	d7 03       	nop
800027f6:	d7 03       	nop
800027f8:	d7 03       	nop
800027fa:	d7 03       	nop
800027fc:	d7 03       	nop
800027fe:	d7 03       	nop
