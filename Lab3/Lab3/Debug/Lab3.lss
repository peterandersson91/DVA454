
Lab3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000f04  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .exception    00000200  80003000  80003000  00003400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ac  80003200  80003200  00003600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .lalign       00000004  800032ac  800032ac  000036ac  2**0
                  ALLOC
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .bss          000000f8  00000008  00000008  00000000  2**2
                  ALLOC
  7 .heap         0000ef00  00000100  00000100  00000000  2**0
                  ALLOC
  8 .comment      00000030  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000250  00000000  00000000  000036e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00000349  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00007079  00000000  00000000  00003c79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000ae3  00000000  00000000  0000acf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002e17  00000000  00000000  0000b7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000520  00000000  00000000  0000e5ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000ec0  00000000  00000000  0000eb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00000739  00000000  00000000  0000f9cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 00594176  00000000  00000000  00010105  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 000001d8  00000000  00000000  005a4280  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	fe cf d1 c8 	sub	pc,pc,-11832

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
80002004:	fe cf f1 cc 	sub	pc,pc,-3636

Disassembly of section .text:

80002008 <cpu_irq_is_enabled_flags>:
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 1d       	sub	sp,4
80002010:	ef 4c ff fc 	st.w	r7[-4],r12
80002014:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002018:	e6 18 00 01 	andh	r8,0x1,COH
8000201c:	5f 08       	sreq	r8
8000201e:	5c 58       	castu.b	r8
80002020:	10 9c       	mov	r12,r8
80002022:	2f fd       	sub	sp,-4
80002024:	e3 cd 80 80 	ldm	sp++,r7,pc

80002028 <tc_configure_interrupts>:
80002028:	eb cd 40 80 	pushm	r7,lr
8000202c:	1a 97       	mov	r7,sp
8000202e:	20 4d       	sub	sp,16
80002030:	ef 4c ff f8 	st.w	r7[-8],r12
80002034:	ef 4b ff f4 	st.w	r7[-12],r11
80002038:	ef 4a ff f0 	st.w	r7[-16],r10
8000203c:	e1 b8 00 00 	mfsr	r8,0x0
80002040:	10 9c       	mov	r12,r8
80002042:	f0 1f 00 73 	mcall	8000220c <tc_configure_interrupts+0x1e4>
80002046:	18 98       	mov	r8,r12
80002048:	ef 68 ff ff 	st.b	r7[-1],r8
8000204c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002050:	58 28       	cp.w	r8,2
80002052:	e0 88 00 04 	brls	8000205a <tc_configure_interrupts+0x32>
80002056:	3f f8       	mov	r8,-1
80002058:	cd 68       	rjmp	80002204 <tc_configure_interrupts+0x1dc>
8000205a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000205e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002062:	70 08       	ld.w	r8,r8[0x0]
80002064:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002068:	5c 58       	castu.b	r8
8000206a:	f0 09 15 07 	lsl	r9,r8,0x7
8000206e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002072:	70 08       	ld.w	r8,r8[0x0]
80002074:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002078:	5c 58       	castu.b	r8
8000207a:	a7 68       	lsl	r8,0x6
8000207c:	10 49       	or	r9,r8
8000207e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002082:	70 08       	ld.w	r8,r8[0x0]
80002084:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002088:	5c 58       	castu.b	r8
8000208a:	a5 78       	lsl	r8,0x5
8000208c:	10 49       	or	r9,r8
8000208e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002092:	70 08       	ld.w	r8,r8[0x0]
80002094:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002098:	5c 58       	castu.b	r8
8000209a:	a5 68       	lsl	r8,0x4
8000209c:	10 49       	or	r9,r8
8000209e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800020a2:	70 08       	ld.w	r8,r8[0x0]
800020a4:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800020a8:	5c 58       	castu.b	r8
800020aa:	a3 78       	lsl	r8,0x3
800020ac:	10 49       	or	r9,r8
800020ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800020b2:	70 08       	ld.w	r8,r8[0x0]
800020b4:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800020b8:	5c 58       	castu.b	r8
800020ba:	a3 68       	lsl	r8,0x2
800020bc:	10 49       	or	r9,r8
800020be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800020c2:	70 08       	ld.w	r8,r8[0x0]
800020c4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800020c8:	5c 58       	castu.b	r8
800020ca:	a1 78       	lsl	r8,0x1
800020cc:	10 49       	or	r9,r8
800020ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800020d2:	70 08       	ld.w	r8,r8[0x0]
800020d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020d8:	5c 58       	castu.b	r8
800020da:	f3 e8 10 08 	or	r8,r9,r8
800020de:	10 99       	mov	r9,r8
800020e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800020e4:	f6 08 15 06 	lsl	r8,r11,0x6
800020e8:	f4 08 00 08 	add	r8,r10,r8
800020ec:	2d c8       	sub	r8,-36
800020ee:	91 09       	st.w	r8[0x0],r9
800020f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800020f4:	30 08       	mov	r8,0
800020f6:	f0 09 18 00 	cp.b	r9,r8
800020fa:	c0 20       	breq	800020fe <tc_configure_interrupts+0xd6>
800020fc:	d3 03       	ssrf	0x10
800020fe:	ee fb ff f4 	ld.w	r11,r7[-12]
80002102:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002106:	70 08       	ld.w	r8,r8[0x0]
80002108:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000210c:	5c 58       	castu.b	r8
8000210e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002112:	c0 41       	brne	8000211a <tc_configure_interrupts+0xf2>
80002114:	e0 69 00 80 	mov	r9,128
80002118:	c0 28       	rjmp	8000211c <tc_configure_interrupts+0xf4>
8000211a:	30 09       	mov	r9,0
8000211c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002120:	70 08       	ld.w	r8,r8[0x0]
80002122:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002126:	5c 58       	castu.b	r8
80002128:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000212c:	c0 31       	brne	80002132 <tc_configure_interrupts+0x10a>
8000212e:	34 08       	mov	r8,64
80002130:	c0 28       	rjmp	80002134 <tc_configure_interrupts+0x10c>
80002132:	30 08       	mov	r8,0
80002134:	10 49       	or	r9,r8
80002136:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000213a:	70 08       	ld.w	r8,r8[0x0]
8000213c:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002140:	5c 58       	castu.b	r8
80002142:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002146:	c0 31       	brne	8000214c <tc_configure_interrupts+0x124>
80002148:	32 08       	mov	r8,32
8000214a:	c0 28       	rjmp	8000214e <tc_configure_interrupts+0x126>
8000214c:	30 08       	mov	r8,0
8000214e:	10 49       	or	r9,r8
80002150:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002154:	70 08       	ld.w	r8,r8[0x0]
80002156:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
8000215a:	5c 58       	castu.b	r8
8000215c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002160:	c0 31       	brne	80002166 <tc_configure_interrupts+0x13e>
80002162:	31 08       	mov	r8,16
80002164:	c0 28       	rjmp	80002168 <tc_configure_interrupts+0x140>
80002166:	30 08       	mov	r8,0
80002168:	10 49       	or	r9,r8
8000216a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000216e:	70 08       	ld.w	r8,r8[0x0]
80002170:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002174:	5c 58       	castu.b	r8
80002176:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000217a:	c0 31       	brne	80002180 <tc_configure_interrupts+0x158>
8000217c:	30 88       	mov	r8,8
8000217e:	c0 28       	rjmp	80002182 <tc_configure_interrupts+0x15a>
80002180:	30 08       	mov	r8,0
80002182:	10 49       	or	r9,r8
80002184:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002188:	70 08       	ld.w	r8,r8[0x0]
8000218a:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000218e:	5c 58       	castu.b	r8
80002190:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002194:	c0 31       	brne	8000219a <tc_configure_interrupts+0x172>
80002196:	30 48       	mov	r8,4
80002198:	c0 28       	rjmp	8000219c <tc_configure_interrupts+0x174>
8000219a:	30 08       	mov	r8,0
8000219c:	10 49       	or	r9,r8
8000219e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800021a2:	70 08       	ld.w	r8,r8[0x0]
800021a4:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800021a8:	5c 58       	castu.b	r8
800021aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021ae:	c0 31       	brne	800021b4 <tc_configure_interrupts+0x18c>
800021b0:	30 28       	mov	r8,2
800021b2:	c0 28       	rjmp	800021b6 <tc_configure_interrupts+0x18e>
800021b4:	30 08       	mov	r8,0
800021b6:	10 49       	or	r9,r8
800021b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800021bc:	70 08       	ld.w	r8,r8[0x0]
800021be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021c2:	5c 58       	castu.b	r8
800021c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021c8:	5f 08       	sreq	r8
800021ca:	f3 e8 10 08 	or	r8,r9,r8
800021ce:	10 99       	mov	r9,r8
800021d0:	ee fa ff f8 	ld.w	r10,r7[-8]
800021d4:	f6 08 15 06 	lsl	r8,r11,0x6
800021d8:	f4 08 00 08 	add	r8,r10,r8
800021dc:	2d 88       	sub	r8,-40
800021de:	91 09       	st.w	r8[0x0],r9
800021e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800021e8:	a1 78       	lsl	r8,0x1
800021ea:	2f f8       	sub	r8,-1
800021ec:	a5 78       	lsl	r8,0x5
800021ee:	f2 08 00 08 	add	r8,r9,r8
800021f2:	70 08       	ld.w	r8,r8[0x0]
800021f4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800021f8:	30 08       	mov	r8,0
800021fa:	f0 09 18 00 	cp.b	r9,r8
800021fe:	c0 20       	breq	80002202 <tc_configure_interrupts+0x1da>
80002200:	d5 03       	csrf	0x10
80002202:	30 08       	mov	r8,0
80002204:	10 9c       	mov	r12,r8
80002206:	2f cd       	sub	sp,-16
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc
8000220c:	80 00       	ld.sh	r0,r0[0x0]
8000220e:	20 08       	sub	r8,0

80002210 <tc_init_waveform>:
80002210:	eb cd 40 80 	pushm	r7,lr
80002214:	1a 97       	mov	r7,sp
80002216:	20 2d       	sub	sp,8
80002218:	ef 4c ff fc 	st.w	r7[-4],r12
8000221c:	ef 4b ff f8 	st.w	r7[-8],r11
80002220:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002224:	70 08       	ld.w	r8,r8[0x0]
80002226:	58 28       	cp.w	r8,2
80002228:	e0 88 00 04 	brls	80002230 <tc_init_waveform+0x20>
8000222c:	3f f8       	mov	r8,-1
8000222e:	c9 78       	rjmp	8000235c <tc_init_waveform+0x14c>
80002230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002234:	70 09       	ld.w	r9,r8[0x0]
80002236:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000223a:	70 18       	ld.w	r8,r8[0x4]
8000223c:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
80002240:	5c 58       	castu.b	r8
80002242:	f0 0a 15 1e 	lsl	r10,r8,0x1e
80002246:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000224a:	70 18       	ld.w	r8,r8[0x4]
8000224c:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
80002250:	5c 58       	castu.b	r8
80002252:	bd 68       	lsl	r8,0x1c
80002254:	10 4a       	or	r10,r8
80002256:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000225a:	70 18       	ld.w	r8,r8[0x4]
8000225c:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
80002260:	5c 58       	castu.b	r8
80002262:	bb 68       	lsl	r8,0x1a
80002264:	10 4a       	or	r10,r8
80002266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000226a:	70 18       	ld.w	r8,r8[0x4]
8000226c:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
80002270:	5c 58       	castu.b	r8
80002272:	b9 68       	lsl	r8,0x18
80002274:	10 4a       	or	r10,r8
80002276:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000227a:	70 18       	ld.w	r8,r8[0x4]
8000227c:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
80002280:	5c 58       	castu.b	r8
80002282:	b7 68       	lsl	r8,0x16
80002284:	10 4a       	or	r10,r8
80002286:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000228a:	70 18       	ld.w	r8,r8[0x4]
8000228c:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
80002290:	5c 58       	castu.b	r8
80002292:	b5 68       	lsl	r8,0x14
80002294:	10 4a       	or	r10,r8
80002296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000229a:	70 18       	ld.w	r8,r8[0x4]
8000229c:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
800022a0:	5c 58       	castu.b	r8
800022a2:	b3 68       	lsl	r8,0x12
800022a4:	10 4a       	or	r10,r8
800022a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022aa:	70 18       	ld.w	r8,r8[0x4]
800022ac:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800022b0:	5c 58       	castu.b	r8
800022b2:	b1 68       	lsl	r8,0x10
800022b4:	f5 e8 10 08 	or	r8,r10,r8
800022b8:	10 9a       	mov	r10,r8
800022ba:	af ba       	sbr	r10,0xf
800022bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022c0:	70 18       	ld.w	r8,r8[0x4]
800022c2:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
800022c6:	5c 58       	castu.b	r8
800022c8:	ad 78       	lsl	r8,0xd
800022ca:	10 4a       	or	r10,r8
800022cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022d0:	70 18       	ld.w	r8,r8[0x4]
800022d2:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
800022d6:	5c 58       	castu.b	r8
800022d8:	ad 68       	lsl	r8,0xc
800022da:	10 4a       	or	r10,r8
800022dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022e0:	70 18       	ld.w	r8,r8[0x4]
800022e2:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800022e6:	5c 58       	castu.b	r8
800022e8:	ab 68       	lsl	r8,0xa
800022ea:	10 4a       	or	r10,r8
800022ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022f0:	70 18       	ld.w	r8,r8[0x4]
800022f2:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800022f6:	5c 58       	castu.b	r8
800022f8:	a9 68       	lsl	r8,0x8
800022fa:	10 4a       	or	r10,r8
800022fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002300:	70 18       	ld.w	r8,r8[0x4]
80002302:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002306:	5c 58       	castu.b	r8
80002308:	a7 78       	lsl	r8,0x7
8000230a:	10 4a       	or	r10,r8
8000230c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002310:	70 18       	ld.w	r8,r8[0x4]
80002312:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002316:	5c 58       	castu.b	r8
80002318:	a7 68       	lsl	r8,0x6
8000231a:	10 4a       	or	r10,r8
8000231c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002320:	70 18       	ld.w	r8,r8[0x4]
80002322:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80002326:	5c 58       	castu.b	r8
80002328:	a5 68       	lsl	r8,0x4
8000232a:	10 4a       	or	r10,r8
8000232c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002330:	70 18       	ld.w	r8,r8[0x4]
80002332:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002336:	5c 58       	castu.b	r8
80002338:	a3 78       	lsl	r8,0x3
8000233a:	10 4a       	or	r10,r8
8000233c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002340:	70 18       	ld.w	r8,r8[0x4]
80002342:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002346:	5c 58       	castu.b	r8
80002348:	f5 e8 10 08 	or	r8,r10,r8
8000234c:	10 9a       	mov	r10,r8
8000234e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002352:	a5 69       	lsl	r9,0x4
80002354:	2f f9       	sub	r9,-1
80002356:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000235a:	30 08       	mov	r8,0
8000235c:	10 9c       	mov	r12,r8
8000235e:	2f ed       	sub	sp,-8
80002360:	e3 cd 80 80 	ldm	sp++,r7,pc

80002364 <tc_start>:
80002364:	eb cd 40 80 	pushm	r7,lr
80002368:	1a 97       	mov	r7,sp
8000236a:	20 2d       	sub	sp,8
8000236c:	ef 4c ff fc 	st.w	r7[-4],r12
80002370:	ef 4b ff f8 	st.w	r7[-8],r11
80002374:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002378:	58 28       	cp.w	r8,2
8000237a:	e0 88 00 04 	brls	80002382 <tc_start+0x1e>
8000237e:	3f f8       	mov	r8,-1
80002380:	c0 b8       	rjmp	80002396 <tc_start+0x32>
80002382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002386:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000238a:	a7 68       	lsl	r8,0x6
8000238c:	f2 08 00 08 	add	r8,r9,r8
80002390:	30 59       	mov	r9,5
80002392:	91 09       	st.w	r8[0x0],r9
80002394:	30 08       	mov	r8,0
80002396:	10 9c       	mov	r12,r8
80002398:	2f ed       	sub	sp,-8
8000239a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000239e <tc_read_sr>:
8000239e:	eb cd 40 80 	pushm	r7,lr
800023a2:	1a 97       	mov	r7,sp
800023a4:	20 2d       	sub	sp,8
800023a6:	ef 4c ff fc 	st.w	r7[-4],r12
800023aa:	ef 4b ff f8 	st.w	r7[-8],r11
800023ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b2:	58 28       	cp.w	r8,2
800023b4:	e0 88 00 04 	brls	800023bc <tc_read_sr+0x1e>
800023b8:	3f f8       	mov	r8,-1
800023ba:	c0 b8       	rjmp	800023d0 <tc_read_sr+0x32>
800023bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800023c4:	a1 78       	lsl	r8,0x1
800023c6:	2f f8       	sub	r8,-1
800023c8:	a5 78       	lsl	r8,0x5
800023ca:	f2 08 00 08 	add	r8,r9,r8
800023ce:	70 08       	ld.w	r8,r8[0x0]
800023d0:	10 9c       	mov	r12,r8
800023d2:	2f ed       	sub	sp,-8
800023d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800023d8 <tc_write_rc>:
800023d8:	eb cd 40 80 	pushm	r7,lr
800023dc:	1a 97       	mov	r7,sp
800023de:	20 3d       	sub	sp,12
800023e0:	ef 4c ff fc 	st.w	r7[-4],r12
800023e4:	ef 4b ff f8 	st.w	r7[-8],r11
800023e8:	14 98       	mov	r8,r10
800023ea:	ef 58 ff f4 	st.h	r7[-12],r8
800023ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023f2:	58 28       	cp.w	r8,2
800023f4:	e0 88 00 04 	brls	800023fc <tc_write_rc+0x24>
800023f8:	3f f8       	mov	r8,-1
800023fa:	c2 78       	rjmp	80002448 <tc_write_rc+0x70>
800023fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002400:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002404:	a5 69       	lsl	r9,0x4
80002406:	2f f9       	sub	r9,-1
80002408:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000240c:	e2 18 80 00 	andl	r8,0x8000,COH
80002410:	c1 a0       	breq	80002444 <tc_write_rc+0x6c>
80002412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002416:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000241a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000241e:	a7 69       	lsl	r9,0x6
80002420:	f4 09 00 09 	add	r9,r10,r9
80002424:	2e 49       	sub	r9,-28
80002426:	72 09       	ld.w	r9,r9[0x0]
80002428:	12 9a       	mov	r10,r9
8000242a:	e0 1a 00 00 	andl	r10,0x0
8000242e:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80002432:	f5 e9 10 09 	or	r9,r10,r9
80002436:	ee fa ff fc 	ld.w	r10,r7[-4]
8000243a:	a7 68       	lsl	r8,0x6
8000243c:	f4 08 00 08 	add	r8,r10,r8
80002440:	2e 48       	sub	r8,-28
80002442:	91 09       	st.w	r8[0x0],r9
80002444:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80002448:	10 9c       	mov	r12,r8
8000244a:	2f dd       	sub	sp,-12
8000244c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002450:	3a 00       	mov	r0,-96
	...

80002454 <stopwatch_init>:
#include "stopwatch.h"

bool timer_running = false; // Global variable to see if the timer is running

void stopwatch_init(void)
{
80002454:	eb cd 40 80 	pushm	r7,lr
80002458:	1a 97       	mov	r7,sp
	initLED();
8000245a:	f0 1f 00 04 	mcall	80002468 <stopwatch_init+0x14>
	resetTimer();
8000245e:	f0 1f 00 04 	mcall	8000246c <stopwatch_init+0x18>
}
80002462:	e3 cd 80 80 	ldm	sp++,r7,pc
80002466:	00 00       	add	r0,r0
80002468:	80 00       	ld.sh	r0,r0[0x0]
8000246a:	25 f8       	sub	r8,95
8000246c:	80 00       	ld.sh	r0,r0[0x0]
8000246e:	24 e8       	sub	r8,78

80002470 <startTimer>:

// Enable interrupts to start the clock
void startTimer(void) 
{
80002470:	eb cd 40 80 	pushm	r7,lr
80002474:	1a 97       	mov	r7,sp
80002476:	20 1d       	sub	sp,4
	volatile avr32_gpio_port_t * led_port = &AVR32_GPIO.port[LED_PORT];
80002478:	fe 78 11 00 	mov	r8,-61184
8000247c:	ef 48 ff fc 	st.w	r7[-4],r8
	led_port->ovrc = LED5_BIT_VALUE;
80002480:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002484:	fc 19 00 10 	movh	r9,0x10
80002488:	f1 49 00 58 	st.w	r8[88],r9
	led_port->ovrs = LED4_BIT_VALUE;
8000248c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002490:	e8 69 00 00 	mov	r9,524288
80002494:	f1 49 00 54 	st.w	r8[84],r9
	Enable_global_interrupt(); 
80002498:	d5 03       	csrf	0x10
	timer_running = true;
8000249a:	48 49       	lddpc	r9,800024a8 <startTimer+0x38>
8000249c:	30 18       	mov	r8,1
8000249e:	b2 88       	st.b	r9[0x0],r8
}
800024a0:	2f fd       	sub	sp,-4
800024a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800024a6:	00 00       	add	r0,r0
800024a8:	00 00       	add	r0,r0
800024aa:	00 08       	add	r8,r0

800024ac <stopTimer>:

// Disable interrupts to stop the clock
void stopTimer(void)
{
800024ac:	eb cd 40 80 	pushm	r7,lr
800024b0:	1a 97       	mov	r7,sp
800024b2:	20 1d       	sub	sp,4
	volatile avr32_gpio_port_t * led_port = &AVR32_GPIO.port[LED_PORT];
800024b4:	fe 78 11 00 	mov	r8,-61184
800024b8:	ef 48 ff fc 	st.w	r7[-4],r8
	led_port->ovrc = LED4_BIT_VALUE;
800024bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024c0:	e8 69 00 00 	mov	r9,524288
800024c4:	f1 49 00 58 	st.w	r8[88],r9
	led_port->ovrs = LED5_BIT_VALUE;
800024c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024cc:	fc 19 00 10 	movh	r9,0x10
800024d0:	f1 49 00 54 	st.w	r8[84],r9
	Disable_global_interrupt();
800024d4:	d3 03       	ssrf	0x10
	timer_running = false;
800024d6:	48 49       	lddpc	r9,800024e4 <stopTimer+0x38>
800024d8:	30 08       	mov	r8,0
800024da:	b2 88       	st.b	r9[0x0],r8
}
800024dc:	2f fd       	sub	sp,-4
800024de:	e3 cd 80 80 	ldm	sp++,r7,pc
800024e2:	00 00       	add	r0,r0
800024e4:	00 00       	add	r0,r0
800024e6:	00 08       	add	r8,r0

800024e8 <resetTimer>:

// Resets global counting variable
void resetTimer(void)
{
800024e8:	eb cd 40 80 	pushm	r7,lr
800024ec:	1a 97       	mov	r7,sp
800024ee:	20 1d       	sub	sp,4
	volatile avr32_gpio_port_t * led_port = &AVR32_GPIO.port[LED_PORT];
800024f0:	fe 78 11 00 	mov	r8,-61184
800024f4:	ef 48 ff fc 	st.w	r7[-4],r8
	led_port->ovrs = LED4_BIT_VALUE;
800024f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024fc:	e8 69 00 00 	mov	r9,524288
80002500:	f1 49 00 54 	st.w	r8[84],r9
	led_port->ovrs = LED5_BIT_VALUE;
80002504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002508:	fc 19 00 10 	movh	r9,0x10
8000250c:	f1 49 00 54 	st.w	r8[84],r9
	centa_s = 0;
80002510:	48 38       	lddpc	r8,8000251c <resetTimer+0x34>
80002512:	30 09       	mov	r9,0
80002514:	91 09       	st.w	r8[0x0],r9
}
80002516:	2f fd       	sub	sp,-4
80002518:	e3 cd 80 80 	ldm	sp++,r7,pc
8000251c:	00 00       	add	r0,r0
8000251e:	00 0c       	add	r12,r0

80002520 <checkInput>:

// Checks if there is something to read
void checkInput(void)
{
80002520:	eb cd 40 80 	pushm	r7,lr
80002524:	1a 97       	mov	r7,sp
80002526:	20 2d       	sub	sp,8
	volatile avr32_usart_t * usart = USART;
80002528:	fe 78 18 00 	mov	r8,-59392
8000252c:	ef 48 ff f8 	st.w	r7[-8],r8
	char input;
	if(usart->CSR.rxrdy != 0) // If there is something to read
80002530:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002534:	70 58       	ld.w	r8,r8[0x14]
80002536:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000253a:	c2 50       	breq	80002584 <checkInput+0x64>
	{
		input = USART_getChar();
8000253c:	f0 1f 00 14 	mcall	8000258c <checkInput+0x6c>
80002540:	18 98       	mov	r8,r12
80002542:	ef 68 ff ff 	st.b	r7[-1],r8
		switch(input)
80002546:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000254a:	e0 48 00 64 	cp.w	r8,100
8000254e:	c1 10       	breq	80002570 <checkInput+0x50>
80002550:	e0 48 00 73 	cp.w	r8,115
80002554:	c0 70       	breq	80002562 <checkInput+0x42>
80002556:	e0 48 00 61 	cp.w	r8,97
8000255a:	c1 51       	brne	80002584 <checkInput+0x64>
		{
			case 'a':
				startTimer();
8000255c:	f0 1f 00 0d 	mcall	80002590 <checkInput+0x70>
			break;
80002560:	c1 28       	rjmp	80002584 <checkInput+0x64>
			case 's':
			if (timer_running == true) // Stop only if timer is running
80002562:	48 d8       	lddpc	r8,80002594 <checkInput+0x74>
80002564:	11 88       	ld.ub	r8,r8[0x0]
80002566:	58 08       	cp.w	r8,0
80002568:	c0 d0       	breq	80002582 <checkInput+0x62>
				stopTimer();
8000256a:	f0 1f 00 0c 	mcall	80002598 <checkInput+0x78>
			break;
8000256e:	c0 b8       	rjmp	80002584 <checkInput+0x64>
			case 'd':
			if (timer_running == false) // Reset only if timer is stopped
80002570:	48 98       	lddpc	r8,80002594 <checkInput+0x74>
80002572:	11 88       	ld.ub	r8,r8[0x0]
80002574:	ec 18 00 01 	eorl	r8,0x1
80002578:	5c 58       	castu.b	r8
8000257a:	c0 50       	breq	80002584 <checkInput+0x64>
				resetTimer();
8000257c:	f0 1f 00 08 	mcall	8000259c <checkInput+0x7c>
80002580:	c0 28       	rjmp	80002584 <checkInput+0x64>
				startTimer();
			break;
			case 's':
			if (timer_running == true) // Stop only if timer is running
				stopTimer();
			break;
80002582:	d7 03       	nop
			break;
			default:
			break;
		}
	}
}
80002584:	2f ed       	sub	sp,-8
80002586:	e3 cd 80 80 	ldm	sp++,r7,pc
8000258a:	00 00       	add	r0,r0
8000258c:	80 00       	ld.sh	r0,r0[0x0]
8000258e:	2a 9c       	sub	r12,-87
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	24 70       	sub	r0,71
80002594:	00 00       	add	r0,r0
80002596:	00 08       	add	r8,r0
80002598:	80 00       	ld.sh	r0,r0[0x0]
8000259a:	24 ac       	sub	r12,74
8000259c:	80 00       	ld.sh	r0,r0[0x0]
8000259e:	24 e8       	sub	r8,78

800025a0 <displayTime>:

// Writes the current time to USART
void displayTime(struct time_struct ts)
{	
800025a0:	eb cd 40 c0 	pushm	r6-r7,lr
800025a4:	1a 97       	mov	r7,sp
800025a6:	ee c6 ff f4 	sub	r6,r7,-12
	USART_putChar('\r');
800025aa:	30 dc       	mov	r12,13
800025ac:	f0 1f 00 0f 	mcall	800025e8 <displayTime+0x48>
	USART_put2Int(ts.hour); // hours
800025b0:	6c 08       	ld.w	r8,r6[0x0]
800025b2:	10 9c       	mov	r12,r8
800025b4:	f0 1f 00 0e 	mcall	800025ec <displayTime+0x4c>
	USART_putString(":");
800025b8:	48 ec       	lddpc	r12,800025f0 <displayTime+0x50>
800025ba:	f0 1f 00 0f 	mcall	800025f4 <displayTime+0x54>
	USART_put2Int(ts.minute); // minutes
800025be:	6c 18       	ld.w	r8,r6[0x4]
800025c0:	10 9c       	mov	r12,r8
800025c2:	f0 1f 00 0b 	mcall	800025ec <displayTime+0x4c>
	USART_putString(":");
800025c6:	48 bc       	lddpc	r12,800025f0 <displayTime+0x50>
800025c8:	f0 1f 00 0b 	mcall	800025f4 <displayTime+0x54>
	USART_put2Int(ts.second); // seconds
800025cc:	6c 28       	ld.w	r8,r6[0x8]
800025ce:	10 9c       	mov	r12,r8
800025d0:	f0 1f 00 07 	mcall	800025ec <displayTime+0x4c>
	USART_putString(":");
800025d4:	48 7c       	lddpc	r12,800025f0 <displayTime+0x50>
800025d6:	f0 1f 00 08 	mcall	800025f4 <displayTime+0x54>
	USART_put2Int(ts.centa); // hundredths
800025da:	6c 38       	ld.w	r8,r6[0xc]
800025dc:	10 9c       	mov	r12,r8
800025de:	f0 1f 00 04 	mcall	800025ec <displayTime+0x4c>
}
800025e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800025e6:	00 00       	add	r0,r0
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	2a ce       	sub	lr,-84
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	2b 74       	sub	r4,-73
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	24 50       	sub	r0,69
800025f4:	80 00       	ld.sh	r0,r0[0x0]
800025f6:	2b 10       	sub	r0,-79

800025f8 <initLED>:

void initLED (void)
{
800025f8:	eb cd 40 80 	pushm	r7,lr
800025fc:	1a 97       	mov	r7,sp
800025fe:	20 1d       	sub	sp,4
	// LED port pointer
	volatile avr32_gpio_port_t * led_port;
	// pointing to the correct port
	led_port = &AVR32_GPIO.port[LED_PORT];
80002600:	fe 78 11 00 	mov	r8,-61184
80002604:	ef 48 ff fc 	st.w	r7[-4],r8
	
	// Enables the registers for the LEDs
	led_port->gpers = LED0_BIT_VALUE;
80002608:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000260c:	fc 19 08 00 	movh	r9,0x800
80002610:	91 19       	st.w	r8[0x4],r9
	led_port->gpers = LED4_BIT_VALUE;
80002612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002616:	e8 69 00 00 	mov	r9,524288
8000261a:	91 19       	st.w	r8[0x4],r9
	led_port->gpers = LED5_BIT_VALUE;
8000261c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002620:	fc 19 00 10 	movh	r9,0x10
80002624:	91 19       	st.w	r8[0x4],r9

	// Turning all LEDs off
	led_port->ovrs = LED0_BIT_VALUE;
80002626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000262a:	fc 19 08 00 	movh	r9,0x800
8000262e:	f1 49 00 54 	st.w	r8[84],r9
	led_port->ovrs = LED4_BIT_VALUE;
80002632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002636:	e8 69 00 00 	mov	r9,524288
8000263a:	f1 49 00 54 	st.w	r8[84],r9
	led_port->ovrs = LED5_BIT_VALUE;
8000263e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002642:	fc 19 00 10 	movh	r9,0x10
80002646:	f1 49 00 54 	st.w	r8[84],r9
	
	// setting the led pins to outputs
	led_port->oders = LED0_BIT_VALUE;
8000264a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000264e:	fc 19 08 00 	movh	r9,0x800
80002652:	f1 49 00 44 	st.w	r8[68],r9
	led_port->oders = LED4_BIT_VALUE;
80002656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000265a:	e8 69 00 00 	mov	r9,524288
8000265e:	f1 49 00 44 	st.w	r8[68],r9
	led_port->oders = LED5_BIT_VALUE;
80002662:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002666:	fc 19 00 10 	movh	r9,0x10
8000266a:	f1 49 00 44 	st.w	r8[68],r9
8000266e:	2f fd       	sub	sp,-4
80002670:	e3 cd 80 80 	ldm	sp++,r7,pc

80002674 <update_time>:

int centa_s = 0;

// Function to translate hundredths into hours, minutes, seconds and hundredths
struct time_struct update_time(int current_centa_s)
{
80002674:	eb cd 40 80 	pushm	r7,lr
80002678:	1a 97       	mov	r7,sp
8000267a:	20 5d       	sub	sp,20
8000267c:	ef 4b ff ec 	st.w	r7[-20],r11
	struct time_struct ts;
	ts.hour = 0;
80002680:	30 08       	mov	r8,0
80002682:	ef 48 ff f0 	st.w	r7[-16],r8
	ts.minute = 0;
80002686:	30 08       	mov	r8,0
80002688:	ef 48 ff f4 	st.w	r7[-12],r8
	ts.second = 0;
8000268c:	30 08       	mov	r8,0
8000268e:	ef 48 ff f8 	st.w	r7[-8],r8
	ts.centa = 0;
80002692:	30 08       	mov	r8,0
80002694:	ef 48 ff fc 	st.w	r7[-4],r8
	ts.centa = current_centa_s % 100;
80002698:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000269c:	e0 68 85 1f 	mov	r8,34079
800026a0:	ea 18 51 eb 	orh	r8,0x51eb
800026a4:	f2 08 04 4a 	muls.d	r10,r9,r8
800026a8:	f6 0a 14 05 	asr	r10,r11,0x5
800026ac:	f2 08 14 1f 	asr	r8,r9,0x1f
800026b0:	f4 08 01 08 	sub	r8,r10,r8
800026b4:	f0 08 10 64 	mul	r8,r8,100
800026b8:	f2 08 01 08 	sub	r8,r9,r8
800026bc:	ef 48 ff fc 	st.w	r7[-4],r8
	current_centa_s /= 100;
800026c0:	ee fa ff ec 	ld.w	r10,r7[-20]
800026c4:	e0 68 85 1f 	mov	r8,34079
800026c8:	ea 18 51 eb 	orh	r8,0x51eb
800026cc:	f4 08 04 48 	muls.d	r8,r10,r8
800026d0:	a5 59       	asr	r9,0x5
800026d2:	f4 08 14 1f 	asr	r8,r10,0x1f
800026d6:	f2 08 01 08 	sub	r8,r9,r8
800026da:	ef 48 ff ec 	st.w	r7[-20],r8
	ts.second = current_centa_s % 60;
800026de:	ee fa ff ec 	ld.w	r10,r7[-20]
800026e2:	e0 68 88 89 	mov	r8,34953
800026e6:	ea 18 88 88 	orh	r8,0x8888
800026ea:	f4 08 04 48 	muls.d	r8,r10,r8
800026ee:	f4 09 00 08 	add	r8,r10,r9
800026f2:	f0 09 14 05 	asr	r9,r8,0x5
800026f6:	f4 08 14 1f 	asr	r8,r10,0x1f
800026fa:	10 19       	sub	r9,r8
800026fc:	12 98       	mov	r8,r9
800026fe:	a5 68       	lsl	r8,0x4
80002700:	12 18       	sub	r8,r9
80002702:	a3 68       	lsl	r8,0x2
80002704:	f4 08 01 09 	sub	r9,r10,r8
80002708:	ef 49 ff f8 	st.w	r7[-8],r9
	current_centa_s /= 60;
8000270c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002710:	e0 69 88 89 	mov	r9,34953
80002714:	ea 19 88 88 	orh	r9,0x8888
80002718:	f0 09 04 4a 	muls.d	r10,r8,r9
8000271c:	f0 0b 00 09 	add	r9,r8,r11
80002720:	a5 59       	asr	r9,0x5
80002722:	bf 58       	asr	r8,0x1f
80002724:	f2 08 01 08 	sub	r8,r9,r8
80002728:	ef 48 ff ec 	st.w	r7[-20],r8
	ts.minute = current_centa_s % 60;
8000272c:	ee fa ff ec 	ld.w	r10,r7[-20]
80002730:	e0 68 88 89 	mov	r8,34953
80002734:	ea 18 88 88 	orh	r8,0x8888
80002738:	f4 08 04 48 	muls.d	r8,r10,r8
8000273c:	f4 09 00 08 	add	r8,r10,r9
80002740:	f0 09 14 05 	asr	r9,r8,0x5
80002744:	f4 08 14 1f 	asr	r8,r10,0x1f
80002748:	10 19       	sub	r9,r8
8000274a:	12 98       	mov	r8,r9
8000274c:	a5 68       	lsl	r8,0x4
8000274e:	12 18       	sub	r8,r9
80002750:	a3 68       	lsl	r8,0x2
80002752:	f4 08 01 09 	sub	r9,r10,r8
80002756:	ef 49 ff f4 	st.w	r7[-12],r9
	current_centa_s /= 60;
8000275a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000275e:	e0 69 88 89 	mov	r9,34953
80002762:	ea 19 88 88 	orh	r9,0x8888
80002766:	f0 09 04 4a 	muls.d	r10,r8,r9
8000276a:	f0 0b 00 09 	add	r9,r8,r11
8000276e:	a5 59       	asr	r9,0x5
80002770:	bf 58       	asr	r8,0x1f
80002772:	f2 08 01 08 	sub	r8,r9,r8
80002776:	ef 48 ff ec 	st.w	r7[-20],r8
	ts.hour = current_centa_s;
8000277a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000277e:	ef 48 ff f0 	st.w	r7[-16],r8
	
	return ts;
80002782:	18 9a       	mov	r10,r12
80002784:	ee cb 00 10 	sub	r11,r7,16
80002788:	f6 e8 00 00 	ld.d	r8,r11[0]
8000278c:	f4 e9 00 00 	st.d	r10[0],r8
80002790:	f6 e8 00 08 	ld.d	r8,r11[8]
80002794:	f4 e9 00 08 	st.d	r10[8],r8
}
80002798:	2f bd       	sub	sp,-20
8000279a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000279e:	d7 03       	nop

800027a0 <tc_irq_handler>:

// Interrupt function. Counts a global variable once in every interrupt (Every 0.01 second)
__attribute__((__interrupt__))static void tc_irq_handler(void)
{
800027a0:	eb cd 40 80 	pushm	r7,lr
800027a4:	1a 97       	mov	r7,sp
	centa_s++;
800027a6:	48 88       	lddpc	r8,800027c4 <tc_irq_handler+0x24>
800027a8:	70 08       	ld.w	r8,r8[0x0]
800027aa:	f0 c9 ff ff 	sub	r9,r8,-1
800027ae:	48 68       	lddpc	r8,800027c4 <tc_irq_handler+0x24>
800027b0:	91 09       	st.w	r8[0x0],r9

	// Clear the interrupt flag
	tc_read_sr(&AVR32_TC, TC_CHANNEL);
800027b2:	30 0b       	mov	r11,0
800027b4:	fe 7c 38 00 	mov	r12,-51200
800027b8:	f0 1f 00 04 	mcall	800027c8 <tc_irq_handler+0x28>
}
800027bc:	e3 cd 40 80 	ldm	sp++,r7,lr
800027c0:	d6 03       	rete
800027c2:	00 00       	add	r0,r0
800027c4:	00 00       	add	r0,r0
800027c6:	00 0c       	add	r12,r0
800027c8:	80 00       	ld.sh	r0,r0[0x0]
800027ca:	23 9e       	sub	lr,57

800027cc <tc_init>:

void tc_init(volatile avr32_tc_t *tc)
{
800027cc:	eb cd 40 80 	pushm	r7,lr
800027d0:	1a 97       	mov	r7,sp
800027d2:	20 1d       	sub	sp,4
800027d4:	ef 4c ff fc 	st.w	r7[-4],r12
	// Options for enabling TC interrupts
	static const tc_interrupt_t tc_interrupt = {
		.cpcs  = 1, // Enable interrupt on RC compare alone
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800027d8:	49 2b       	lddpc	r11,80002820 <tc_init+0x54>
800027da:	ee fc ff fc 	ld.w	r12,r7[-4]
800027de:	f0 1f 00 12 	mcall	80002824 <tc_init+0x58>
	// Set trigger to every 10ms, Rc = (115200/8) / 100 = 144
	tc_write_rc(tc, TC_CHANNEL, (115200 / 8 / 100));
800027e2:	e0 6a 00 90 	mov	r10,144
800027e6:	30 0b       	mov	r11,0
800027e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800027ec:	f0 1f 00 0f 	mcall	80002828 <tc_init+0x5c>
	// configure the timer interrupt
	tc_configure_interrupts(tc, TC_CHANNEL, &tc_interrupt);
800027f0:	48 fa       	lddpc	r10,8000282c <tc_init+0x60>
800027f2:	30 0b       	mov	r11,0
800027f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800027f8:	f0 1f 00 0e 	mcall	80002830 <tc_init+0x64>
	// Start the timer/counter.
	tc_start(tc, TC_CHANNEL);
800027fc:	30 0b       	mov	r11,0
800027fe:	ee fc ff fc 	ld.w	r12,r7[-4]
80002802:	f0 1f 00 0d 	mcall	80002834 <tc_init+0x68>
	//Disable the interrupts
	Disable_global_interrupt();
80002806:	d3 03       	ssrf	0x10
	//Register the RTC interrupt handler to the interrupt controller.
	INTC_init_interrupts();
80002808:	f0 1f 00 0c 	mcall	80002838 <tc_init+0x6c>
	INTC_register_interrupt(&tc_irq_handler, AVR32_TC_IRQ0, AVR32_INTC_INT0);
8000280c:	30 0a       	mov	r10,0
8000280e:	e0 6b 01 c0 	mov	r11,448
80002812:	48 bc       	lddpc	r12,8000283c <tc_init+0x70>
80002814:	f0 1f 00 0b 	mcall	80002840 <tc_init+0x74>
80002818:	2f fd       	sub	sp,-4
8000281a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000281e:	00 00       	add	r0,r0
80002820:	80 00       	ld.sh	r0,r0[0x0]
80002822:	32 00       	mov	r0,32
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	22 10       	sub	r0,33
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	23 d8       	sub	r8,61
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	32 08       	mov	r8,32
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	20 28       	sub	r8,2
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	23 64       	sub	r4,54
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	2c cc       	sub	r12,-52
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	27 a0       	sub	r0,122
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	2d 64       	sub	r4,-42

80002844 <USART_init>:
80002844:	eb cd 40 80 	pushm	r7,lr
80002848:	1a 97       	mov	r7,sp
8000284a:	20 2d       	sub	sp,8
8000284c:	ef 4c ff f8 	st.w	r7[-8],r12
80002850:	f0 1f 00 92 	mcall	80002a98 <USART_init+0x254>
80002854:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002858:	72 18       	ld.w	r8,r9[0x4]
8000285a:	30 0a       	mov	r10,0
8000285c:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80002860:	93 18       	st.w	r9[0x4],r8
80002862:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002866:	72 18       	ld.w	r8,r9[0x4]
80002868:	30 0a       	mov	r10,0
8000286a:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
8000286e:	93 18       	st.w	r9[0x4],r8
80002870:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002874:	72 18       	ld.w	r8,r9[0x4]
80002876:	30 0a       	mov	r10,0
80002878:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000287c:	93 18       	st.w	r9[0x4],r8
8000287e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002882:	72 18       	ld.w	r8,r9[0x4]
80002884:	30 0a       	mov	r10,0
80002886:	f1 da d3 81 	bfins	r8,r10,0x1c,0x1
8000288a:	93 18       	st.w	r9[0x4],r8
8000288c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002890:	72 18       	ld.w	r8,r9[0x4]
80002892:	30 0a       	mov	r10,0
80002894:	f1 da d3 03 	bfins	r8,r10,0x18,0x3
80002898:	93 18       	st.w	r9[0x4],r8
8000289a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000289e:	72 18       	ld.w	r8,r9[0x4]
800028a0:	30 0a       	mov	r10,0
800028a2:	f1 da d2 c1 	bfins	r8,r10,0x16,0x1
800028a6:	93 18       	st.w	r9[0x4],r8
800028a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028ac:	72 18       	ld.w	r8,r9[0x4]
800028ae:	30 0a       	mov	r10,0
800028b0:	f1 da d2 a1 	bfins	r8,r10,0x15,0x1
800028b4:	93 18       	st.w	r9[0x4],r8
800028b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028ba:	72 18       	ld.w	r8,r9[0x4]
800028bc:	30 0a       	mov	r10,0
800028be:	f1 da d2 81 	bfins	r8,r10,0x14,0x1
800028c2:	93 18       	st.w	r9[0x4],r8
800028c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028c8:	72 18       	ld.w	r8,r9[0x4]
800028ca:	30 1a       	mov	r10,1
800028cc:	f1 da d2 61 	bfins	r8,r10,0x13,0x1
800028d0:	93 18       	st.w	r9[0x4],r8
800028d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028d6:	72 18       	ld.w	r8,r9[0x4]
800028d8:	30 0a       	mov	r10,0
800028da:	f1 da d2 41 	bfins	r8,r10,0x12,0x1
800028de:	93 18       	st.w	r9[0x4],r8
800028e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028e4:	72 18       	ld.w	r8,r9[0x4]
800028e6:	30 0a       	mov	r10,0
800028e8:	f1 da d2 21 	bfins	r8,r10,0x11,0x1
800028ec:	93 18       	st.w	r9[0x4],r8
800028ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028f2:	72 18       	ld.w	r8,r9[0x4]
800028f4:	30 0a       	mov	r10,0
800028f6:	f1 da d2 01 	bfins	r8,r10,0x10,0x1
800028fa:	93 18       	st.w	r9[0x4],r8
800028fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002900:	72 18       	ld.w	r8,r9[0x4]
80002902:	30 0a       	mov	r10,0
80002904:	f1 da d1 c2 	bfins	r8,r10,0xe,0x2
80002908:	93 18       	st.w	r9[0x4],r8
8000290a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000290e:	72 18       	ld.w	r8,r9[0x4]
80002910:	30 0a       	mov	r10,0
80002912:	f1 da d1 82 	bfins	r8,r10,0xc,0x2
80002916:	93 18       	st.w	r9[0x4],r8
80002918:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000291c:	72 18       	ld.w	r8,r9[0x4]
8000291e:	30 4a       	mov	r10,4
80002920:	f1 da d1 23 	bfins	r8,r10,0x9,0x3
80002924:	93 18       	st.w	r9[0x4],r8
80002926:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000292a:	72 18       	ld.w	r8,r9[0x4]
8000292c:	30 0a       	mov	r10,0
8000292e:	f1 da d1 01 	bfins	r8,r10,0x8,0x1
80002932:	93 18       	st.w	r9[0x4],r8
80002934:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002938:	72 18       	ld.w	r8,r9[0x4]
8000293a:	30 3a       	mov	r10,3
8000293c:	f1 da d0 c2 	bfins	r8,r10,0x6,0x2
80002940:	93 18       	st.w	r9[0x4],r8
80002942:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002946:	72 18       	ld.w	r8,r9[0x4]
80002948:	30 0a       	mov	r10,0
8000294a:	f1 da d0 82 	bfins	r8,r10,0x4,0x2
8000294e:	93 18       	st.w	r9[0x4],r8
80002950:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002954:	72 18       	ld.w	r8,r9[0x4]
80002956:	30 0a       	mov	r10,0
80002958:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
8000295c:	93 18       	st.w	r9[0x4],r8
8000295e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002962:	72 08       	ld.w	r8,r9[0x0]
80002964:	30 0a       	mov	r10,0
80002966:	f1 da d2 61 	bfins	r8,r10,0x13,0x1
8000296a:	93 08       	st.w	r9[0x0],r8
8000296c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002970:	72 08       	ld.w	r8,r9[0x0]
80002972:	30 0a       	mov	r10,0
80002974:	f1 da d2 41 	bfins	r8,r10,0x12,0x1
80002978:	93 08       	st.w	r9[0x0],r8
8000297a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000297e:	72 08       	ld.w	r8,r9[0x0]
80002980:	30 0a       	mov	r10,0
80002982:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80002986:	93 08       	st.w	r9[0x0],r8
80002988:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000298c:	72 08       	ld.w	r8,r9[0x0]
8000298e:	30 0a       	mov	r10,0
80002990:	f1 da d1 c1 	bfins	r8,r10,0xe,0x1
80002994:	93 08       	st.w	r9[0x0],r8
80002996:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000299a:	72 08       	ld.w	r8,r9[0x0]
8000299c:	30 0a       	mov	r10,0
8000299e:	f1 da d1 a1 	bfins	r8,r10,0xd,0x1
800029a2:	93 08       	st.w	r9[0x0],r8
800029a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800029a8:	72 08       	ld.w	r8,r9[0x0]
800029aa:	30 0a       	mov	r10,0
800029ac:	f1 da d1 81 	bfins	r8,r10,0xc,0x1
800029b0:	93 08       	st.w	r9[0x0],r8
800029b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800029b6:	72 08       	ld.w	r8,r9[0x0]
800029b8:	30 0a       	mov	r10,0
800029ba:	f1 da d1 61 	bfins	r8,r10,0xb,0x1
800029be:	93 08       	st.w	r9[0x0],r8
800029c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800029c4:	72 08       	ld.w	r8,r9[0x0]
800029c6:	30 0a       	mov	r10,0
800029c8:	f1 da d1 41 	bfins	r8,r10,0xa,0x1
800029cc:	93 08       	st.w	r9[0x0],r8
800029ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800029d2:	72 08       	ld.w	r8,r9[0x0]
800029d4:	30 0a       	mov	r10,0
800029d6:	f1 da d1 21 	bfins	r8,r10,0x9,0x1
800029da:	93 08       	st.w	r9[0x0],r8
800029dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800029e0:	72 08       	ld.w	r8,r9[0x0]
800029e2:	30 0a       	mov	r10,0
800029e4:	f1 da d1 01 	bfins	r8,r10,0x8,0x1
800029e8:	93 08       	st.w	r9[0x0],r8
800029ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800029ee:	72 08       	ld.w	r8,r9[0x0]
800029f0:	30 0a       	mov	r10,0
800029f2:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
800029f6:	93 08       	st.w	r9[0x0],r8
800029f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800029fc:	72 08       	ld.w	r8,r9[0x0]
800029fe:	30 1a       	mov	r10,1
80002a00:	f1 da d0 c1 	bfins	r8,r10,0x6,0x1
80002a04:	93 08       	st.w	r9[0x0],r8
80002a06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a0a:	72 08       	ld.w	r8,r9[0x0]
80002a0c:	30 0a       	mov	r10,0
80002a0e:	f1 da d0 a1 	bfins	r8,r10,0x5,0x1
80002a12:	93 08       	st.w	r9[0x0],r8
80002a14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a18:	72 08       	ld.w	r8,r9[0x0]
80002a1a:	30 1a       	mov	r10,1
80002a1c:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
80002a20:	93 08       	st.w	r9[0x0],r8
80002a22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a26:	72 08       	ld.w	r8,r9[0x0]
80002a28:	30 0a       	mov	r10,0
80002a2a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
80002a2e:	93 08       	st.w	r9[0x0],r8
80002a30:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a34:	72 08       	ld.w	r8,r9[0x0]
80002a36:	30 0a       	mov	r10,0
80002a38:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
80002a3c:	93 08       	st.w	r9[0x0],r8
80002a3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a42:	72 88       	ld.w	r8,r9[0x20]
80002a44:	30 4a       	mov	r10,4
80002a46:	f1 da d2 03 	bfins	r8,r10,0x10,0x3
80002a4a:	93 88       	st.w	r9[0x20],r8
80002a4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a50:	72 88       	ld.w	r8,r9[0x20]
80002a52:	30 1a       	mov	r10,1
80002a54:	f1 da d0 10 	bfins	r8,r10,0x0,0x10
80002a58:	93 88       	st.w	r9[0x20],r8
80002a5a:	fe 78 10 00 	mov	r8,-61440
80002a5e:	ef 48 ff fc 	st.w	r7[-4],r8
80002a62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a66:	32 09       	mov	r9,32
80002a68:	91 69       	st.w	r8[0x18],r9
80002a6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a6e:	32 09       	mov	r9,32
80002a70:	91 a9       	st.w	r8[0x28],r9
80002a72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a76:	32 09       	mov	r9,32
80002a78:	91 29       	st.w	r8[0x8],r9
80002a7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a7e:	34 09       	mov	r9,64
80002a80:	91 69       	st.w	r8[0x18],r9
80002a82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a86:	34 09       	mov	r9,64
80002a88:	91 a9       	st.w	r8[0x28],r9
80002a8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a8e:	34 09       	mov	r9,64
80002a90:	91 29       	st.w	r8[0x8],r9
80002a92:	2f ed       	sub	sp,-8
80002a94:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a98:	80 00       	ld.sh	r0,r0[0x0]
80002a9a:	2c 18       	sub	r8,-63

80002a9c <USART_getChar>:
80002a9c:	eb cd 40 80 	pushm	r7,lr
80002aa0:	1a 97       	mov	r7,sp
80002aa2:	20 1d       	sub	sp,4
80002aa4:	fe 78 18 00 	mov	r8,-59392
80002aa8:	ef 48 ff fc 	st.w	r7[-4],r8
80002aac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ab0:	70 58       	ld.w	r8,r8[0x14]
80002ab2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ab6:	cf b0       	breq	80002aac <USART_getChar+0x10>
80002ab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002abc:	70 68       	ld.w	r8,r8[0x18]
80002abe:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002ac2:	5c 88       	casts.h	r8
80002ac4:	5c 58       	castu.b	r8
80002ac6:	10 9c       	mov	r12,r8
80002ac8:	2f fd       	sub	sp,-4
80002aca:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ace <USART_putChar>:
80002ace:	eb cd 40 80 	pushm	r7,lr
80002ad2:	1a 97       	mov	r7,sp
80002ad4:	20 2d       	sub	sp,8
80002ad6:	18 98       	mov	r8,r12
80002ad8:	ef 68 ff f8 	st.b	r7[-8],r8
80002adc:	fe 78 18 00 	mov	r8,-59392
80002ae0:	ef 48 ff fc 	st.w	r7[-4],r8
80002ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ae8:	70 58       	ld.w	r8,r8[0x14]
80002aea:	e2 18 00 02 	andl	r8,0x2,COH
80002aee:	cf b0       	breq	80002ae4 <USART_putChar+0x16>
80002af0:	fe 79 18 00 	mov	r9,-59392
80002af4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002af8:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80002afc:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80002b00:	72 78       	ld.w	r8,r9[0x1c]
80002b02:	f1 da d0 09 	bfins	r8,r10,0x0,0x9
80002b06:	93 78       	st.w	r9[0x1c],r8
80002b08:	2f ed       	sub	sp,-8
80002b0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b0e:	d7 03       	nop

80002b10 <USART_putString>:
80002b10:	eb cd 40 80 	pushm	r7,lr
80002b14:	1a 97       	mov	r7,sp
80002b16:	20 3d       	sub	sp,12
80002b18:	ef 4c ff f4 	st.w	r7[-12],r12
80002b1c:	fe 78 18 00 	mov	r8,-59392
80002b20:	ef 48 ff f8 	st.w	r7[-8],r8
80002b24:	30 08       	mov	r8,0
80002b26:	ef 48 ff fc 	st.w	r7[-4],r8
80002b2a:	c1 68       	rjmp	80002b56 <USART_putString+0x46>
80002b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b30:	70 58       	ld.w	r8,r8[0x14]
80002b32:	e2 18 00 02 	andl	r8,0x2,COH
80002b36:	c1 00       	breq	80002b56 <USART_putString+0x46>
80002b38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b3c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b40:	f2 08 00 08 	add	r8,r9,r8
80002b44:	11 88       	ld.ub	r8,r8[0x0]
80002b46:	10 9c       	mov	r12,r8
80002b48:	f0 1f 00 0a 	mcall	80002b70 <USART_putString+0x60>
80002b4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b50:	2f f8       	sub	r8,-1
80002b52:	ef 48 ff fc 	st.w	r7[-4],r8
80002b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b5a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002b5e:	f2 08 00 08 	add	r8,r9,r8
80002b62:	11 88       	ld.ub	r8,r8[0x0]
80002b64:	58 08       	cp.w	r8,0
80002b66:	ce 31       	brne	80002b2c <USART_putString+0x1c>
80002b68:	2f dd       	sub	sp,-12
80002b6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b6e:	00 00       	add	r0,r0
80002b70:	80 00       	ld.sh	r0,r0[0x0]
80002b72:	2a ce       	sub	lr,-84

80002b74 <USART_put2Int>:
80002b74:	eb cd 40 80 	pushm	r7,lr
80002b78:	1a 97       	mov	r7,sp
80002b7a:	20 4d       	sub	sp,16
80002b7c:	ef 4c ff f0 	st.w	r7[-16],r12
80002b80:	fe 78 18 00 	mov	r8,-59392
80002b84:	ef 48 ff f8 	st.w	r7[-8],r8
80002b88:	30 28       	mov	r8,2
80002b8a:	ef 48 ff fc 	st.w	r7[-4],r8
80002b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b92:	ee 08 00 09 	add	r9,r7,r8
80002b96:	30 08       	mov	r8,0
80002b98:	f3 68 ff f4 	st.b	r9[-12],r8
80002b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ba0:	20 18       	sub	r8,1
80002ba2:	ef 48 ff fc 	st.w	r7[-4],r8
80002ba6:	ee fb ff fc 	ld.w	r11,r7[-4]
80002baa:	ee fa ff f0 	ld.w	r10,r7[-16]
80002bae:	e0 68 66 67 	mov	r8,26215
80002bb2:	ea 18 66 66 	orh	r8,0x6666
80002bb6:	f4 08 04 48 	muls.d	r8,r10,r8
80002bba:	a3 49       	asr	r9,0x2
80002bbc:	f4 08 14 1f 	asr	r8,r10,0x1f
80002bc0:	10 19       	sub	r9,r8
80002bc2:	12 98       	mov	r8,r9
80002bc4:	a3 68       	lsl	r8,0x2
80002bc6:	12 08       	add	r8,r9
80002bc8:	a1 78       	lsl	r8,0x1
80002bca:	f4 08 01 09 	sub	r9,r10,r8
80002bce:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80002bd2:	2d 08       	sub	r8,-48
80002bd4:	5c 58       	castu.b	r8
80002bd6:	ee 0b 00 09 	add	r9,r7,r11
80002bda:	f3 68 ff f4 	st.b	r9[-12],r8
80002bde:	ee fa ff f0 	ld.w	r10,r7[-16]
80002be2:	e0 68 66 67 	mov	r8,26215
80002be6:	ea 18 66 66 	orh	r8,0x6666
80002bea:	f4 08 04 48 	muls.d	r8,r10,r8
80002bee:	a3 49       	asr	r9,0x2
80002bf0:	f4 08 14 1f 	asr	r8,r10,0x1f
80002bf4:	f2 08 01 08 	sub	r8,r9,r8
80002bf8:	ef 48 ff f0 	st.w	r7[-16],r8
80002bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c00:	58 08       	cp.w	r8,0
80002c02:	cc d1       	brne	80002b9c <USART_put2Int+0x28>
80002c04:	ee c8 00 0c 	sub	r8,r7,12
80002c08:	10 9c       	mov	r12,r8
80002c0a:	f0 1f 00 03 	mcall	80002c14 <USART_put2Int+0xa0>
80002c0e:	2f cd       	sub	sp,-16
80002c10:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2b 10       	sub	r0,-79

80002c18 <USART_reset>:
80002c18:	eb cd 40 80 	pushm	r7,lr
80002c1c:	1a 97       	mov	r7,sp
80002c1e:	20 1d       	sub	sp,4
80002c20:	fe 78 18 00 	mov	r8,-59392
80002c24:	ef 48 ff fc 	st.w	r7[-4],r8
80002c28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c2c:	30 09       	mov	r9,0
80002c2e:	91 19       	st.w	r8[0x4],r9
80002c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c34:	e8 69 61 0c 	mov	r9,549132
80002c38:	91 09       	st.w	r8[0x0],r9
80002c3a:	2f fd       	sub	sp,-4
80002c3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c40 <_unhandled_interrupt>:
80002c40:	eb cd 40 80 	pushm	r7,lr
80002c44:	1a 97       	mov	r7,sp
80002c46:	c0 08       	rjmp	80002c46 <_unhandled_interrupt+0x6>

80002c48 <_get_interrupt_handler>:
80002c48:	eb cd 40 80 	pushm	r7,lr
80002c4c:	1a 97       	mov	r7,sp
80002c4e:	20 3d       	sub	sp,12
80002c50:	ef 4c ff f4 	st.w	r7[-12],r12
80002c54:	fe 78 08 00 	mov	r8,-63488
80002c58:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002c5c:	f2 09 11 03 	rsub	r9,r9,3
80002c60:	28 09       	sub	r9,-128
80002c62:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002c66:	ef 48 ff f8 	st.w	r7[-8],r8
80002c6a:	fe 78 08 00 	mov	r8,-63488
80002c6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c72:	2c 09       	sub	r9,-64
80002c74:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80002c78:	ef 48 ff fc 	st.w	r7[-4],r8
80002c7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c80:	58 08       	cp.w	r8,0
80002c82:	c1 30       	breq	80002ca8 <_get_interrupt_handler+0x60>
80002c84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c88:	48 b8       	lddpc	r8,80002cb4 <_get_interrupt_handler+0x6c>
80002c8a:	a1 79       	lsl	r9,0x1
80002c8c:	2f f9       	sub	r9,-1
80002c8e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80002c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c96:	f0 08 12 00 	clz	r8,r8
80002c9a:	f0 08 11 1f 	rsub	r8,r8,31
80002c9e:	a3 68       	lsl	r8,0x2
80002ca0:	f2 08 00 08 	add	r8,r9,r8
80002ca4:	70 08       	ld.w	r8,r8[0x0]
80002ca6:	c0 28       	rjmp	80002caa <_get_interrupt_handler+0x62>
80002ca8:	30 08       	mov	r8,0
80002caa:	10 9c       	mov	r12,r8
80002cac:	2f dd       	sub	sp,-12
80002cae:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cb2:	00 00       	add	r0,r0
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	32 0c       	mov	r12,32

80002cb8 <INTC_init_evba>:
80002cb8:	eb cd 40 80 	pushm	r7,lr
80002cbc:	1a 97       	mov	r7,sp
80002cbe:	48 38       	lddpc	r8,80002cc8 <INTC_init_evba+0x10>
80002cc0:	e3 b8 00 01 	mtsr	0x4,r8
80002cc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cc8:	80 00       	ld.sh	r0,r0[0x0]
80002cca:	30 00       	mov	r0,0

80002ccc <INTC_init_interrupts>:
80002ccc:	eb cd 40 80 	pushm	r7,lr
80002cd0:	1a 97       	mov	r7,sp
80002cd2:	20 2d       	sub	sp,8
80002cd4:	f0 1f 00 1f 	mcall	80002d50 <INTC_init_interrupts+0x84>
80002cd8:	30 08       	mov	r8,0
80002cda:	ef 48 ff f8 	st.w	r7[-8],r8
80002cde:	c3 18       	rjmp	80002d40 <INTC_init_interrupts+0x74>
80002ce0:	30 08       	mov	r8,0
80002ce2:	ef 48 ff fc 	st.w	r7[-4],r8
80002ce6:	c1 48       	rjmp	80002d0e <INTC_init_interrupts+0x42>
80002ce8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cec:	49 a8       	lddpc	r8,80002d54 <INTC_init_interrupts+0x88>
80002cee:	a1 79       	lsl	r9,0x1
80002cf0:	2f f9       	sub	r9,-1
80002cf2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80002cf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cfa:	a3 68       	lsl	r8,0x2
80002cfc:	f2 08 00 08 	add	r8,r9,r8
80002d00:	49 69       	lddpc	r9,80002d58 <INTC_init_interrupts+0x8c>
80002d02:	91 09       	st.w	r8[0x0],r9
80002d04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d08:	2f f8       	sub	r8,-1
80002d0a:	ef 48 ff fc 	st.w	r7[-4],r8
80002d0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d12:	49 18       	lddpc	r8,80002d54 <INTC_init_interrupts+0x88>
80002d14:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
80002d18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002d1c:	10 39       	cp.w	r9,r8
80002d1e:	fe 9b ff e5 	brhi	80002ce8 <INTC_init_interrupts+0x1c>
80002d22:	fe 78 08 00 	mov	r8,-63488
80002d26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d2a:	48 db       	lddpc	r11,80002d5c <INTC_init_interrupts+0x90>
80002d2c:	48 da       	lddpc	r10,80002d60 <INTC_init_interrupts+0x94>
80002d2e:	f6 0a 01 0a 	sub	r10,r11,r10
80002d32:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80002d36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d3a:	2f f8       	sub	r8,-1
80002d3c:	ef 48 ff f8 	st.w	r7[-8],r8
80002d40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d44:	59 38       	cp.w	r8,19
80002d46:	fe 98 ff cd 	brls	80002ce0 <INTC_init_interrupts+0x14>
80002d4a:	2f ed       	sub	sp,-8
80002d4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d50:	80 00       	ld.sh	r0,r0[0x0]
80002d52:	2c b8       	sub	r8,-53
80002d54:	80 00       	ld.sh	r0,r0[0x0]
80002d56:	32 0c       	mov	r12,32
80002d58:	80 00       	ld.sh	r0,r0[0x0]
80002d5a:	2c 40       	sub	r0,-60
80002d5c:	80 00       	ld.sh	r0,r0[0x0]
80002d5e:	31 04       	mov	r4,16
80002d60:	80 00       	ld.sh	r0,r0[0x0]
80002d62:	30 00       	mov	r0,0

80002d64 <INTC_register_interrupt>:
80002d64:	eb cd 40 80 	pushm	r7,lr
80002d68:	1a 97       	mov	r7,sp
80002d6a:	20 4d       	sub	sp,16
80002d6c:	ef 4c ff f8 	st.w	r7[-8],r12
80002d70:	ef 4b ff f4 	st.w	r7[-12],r11
80002d74:	ef 4a ff f0 	st.w	r7[-16],r10
80002d78:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d7c:	a5 98       	lsr	r8,0x5
80002d7e:	ef 48 ff fc 	st.w	r7[-4],r8
80002d82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d86:	4a 78       	lddpc	r8,80002e20 <INTC_register_interrupt+0xbc>
80002d88:	a1 79       	lsl	r9,0x1
80002d8a:	2f f9       	sub	r9,-1
80002d8c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80002d90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002d98:	a3 68       	lsl	r8,0x2
80002d9a:	f2 08 00 08 	add	r8,r9,r8
80002d9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002da2:	91 09       	st.w	r8[0x0],r9
80002da4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002da8:	58 08       	cp.w	r8,0
80002daa:	c0 c1       	brne	80002dc2 <INTC_register_interrupt+0x5e>
80002dac:	fe 78 08 00 	mov	r8,-63488
80002db0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002db4:	49 cb       	lddpc	r11,80002e24 <INTC_register_interrupt+0xc0>
80002db6:	49 da       	lddpc	r10,80002e28 <INTC_register_interrupt+0xc4>
80002db8:	f6 0a 01 0a 	sub	r10,r11,r10
80002dbc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80002dc0:	c2 d8       	rjmp	80002e1a <INTC_register_interrupt+0xb6>
80002dc2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002dc6:	58 18       	cp.w	r8,1
80002dc8:	c0 d1       	brne	80002de2 <INTC_register_interrupt+0x7e>
80002dca:	fe 78 08 00 	mov	r8,-63488
80002dce:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dd2:	49 7b       	lddpc	r11,80002e2c <INTC_register_interrupt+0xc8>
80002dd4:	49 5a       	lddpc	r10,80002e28 <INTC_register_interrupt+0xc4>
80002dd6:	f6 0a 01 0a 	sub	r10,r11,r10
80002dda:	bf aa       	sbr	r10,0x1e
80002ddc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80002de0:	c1 d8       	rjmp	80002e1a <INTC_register_interrupt+0xb6>
80002de2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002de6:	58 28       	cp.w	r8,2
80002de8:	c0 d1       	brne	80002e02 <INTC_register_interrupt+0x9e>
80002dea:	fe 78 08 00 	mov	r8,-63488
80002dee:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002df2:	49 0b       	lddpc	r11,80002e30 <INTC_register_interrupt+0xcc>
80002df4:	48 da       	lddpc	r10,80002e28 <INTC_register_interrupt+0xc4>
80002df6:	f6 0a 01 0a 	sub	r10,r11,r10
80002dfa:	bf ba       	sbr	r10,0x1f
80002dfc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80002e00:	c0 d8       	rjmp	80002e1a <INTC_register_interrupt+0xb6>
80002e02:	fe 78 08 00 	mov	r8,-63488
80002e06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e0a:	48 bb       	lddpc	r11,80002e34 <INTC_register_interrupt+0xd0>
80002e0c:	48 7a       	lddpc	r10,80002e28 <INTC_register_interrupt+0xc4>
80002e0e:	f6 0a 01 0a 	sub	r10,r11,r10
80002e12:	ea 1a c0 00 	orh	r10,0xc000
80002e16:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80002e1a:	2f cd       	sub	sp,-16
80002e1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e20:	80 00       	ld.sh	r0,r0[0x0]
80002e22:	32 0c       	mov	r12,32
80002e24:	80 00       	ld.sh	r0,r0[0x0]
80002e26:	31 04       	mov	r4,16
80002e28:	80 00       	ld.sh	r0,r0[0x0]
80002e2a:	30 00       	mov	r0,0
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	31 12       	mov	r2,17
80002e30:	80 00       	ld.sh	r0,r0[0x0]
80002e32:	31 20       	mov	r0,18
80002e34:	80 00       	ld.sh	r0,r0[0x0]
80002e36:	31 2e       	mov	lr,18

80002e38 <_stext>:
80002e38:	e0 7d 00 00 	mov	sp,65536
80002e3c:	fe c0 fe 3c 	sub	r0,pc,-452
80002e40:	e3 b0 00 01 	mtsr	0x4,r0
80002e44:	d5 53       	csrf	0x15
80002e46:	30 80       	mov	r0,8
80002e48:	30 81       	mov	r1,8
80002e4a:	02 30       	cp.w	r0,r1
80002e4c:	c0 72       	brcc	80002e5a <idata_load_loop_end>
80002e4e:	fe c2 fb 9e 	sub	r2,pc,-1122

80002e52 <idata_load_loop>:
80002e52:	a5 05       	ld.d	r4,r2++
80002e54:	a1 24       	st.d	r0++,r4
80002e56:	02 30       	cp.w	r0,r1
80002e58:	cf d3       	brcs	80002e52 <idata_load_loop>

80002e5a <idata_load_loop_end>:
80002e5a:	30 80       	mov	r0,8
80002e5c:	e0 61 01 00 	mov	r1,256
80002e60:	02 30       	cp.w	r0,r1
80002e62:	c0 62       	brcc	80002e6e <udata_clear_loop_end>
80002e64:	30 02       	mov	r2,0
80002e66:	30 03       	mov	r3,0

80002e68 <udata_clear_loop>:
80002e68:	a1 22       	st.d	r0++,r2
80002e6a:	02 30       	cp.w	r0,r1
80002e6c:	cf e3       	brcs	80002e68 <udata_clear_loop>

80002e6e <udata_clear_loop_end>:
80002e6e:	fe cf ff fa 	sub	pc,pc,-6
80002e72:	d7 03       	nop

80002e74 <main>:
#include "gpio.h"
#include "USART_driver.h"
#include "stopwatch.h"

int main(void)
{
80002e74:	eb cd 40 80 	pushm	r7,lr
80002e78:	1a 97       	mov	r7,sp
80002e7a:	20 6d       	sub	sp,24
	volatile avr32_usart_t * usart = USART;
80002e7c:	fe 78 18 00 	mov	r8,-59392
80002e80:	ef 48 ff f8 	st.w	r7[-8],r8
	volatile avr32_tc_t *tc = &AVR32_TC;
80002e84:	fe 78 38 00 	mov	r8,-51200
80002e88:	ef 48 ff fc 	st.w	r7[-4],r8
	USART_init(usart);						// Init USART
80002e8c:	ee fc ff f8 	ld.w	r12,r7[-8]
80002e90:	f0 1f 00 18 	mcall	80002ef0 <main+0x7c>
	tc_init(tc);							// Init Timer/Counter
80002e94:	ee fc ff fc 	ld.w	r12,r7[-4]
80002e98:	f0 1f 00 17 	mcall	80002ef4 <main+0x80>
	stopwatch_init();						// Init Stopwatch
80002e9c:	f0 1f 00 17 	mcall	80002ef8 <main+0x84>
	
	// Struct containing the time in hour, minute, seconds, hundredths
	struct time_struct ts;
	ts.hour = 0;
80002ea0:	30 08       	mov	r8,0
80002ea2:	ef 48 ff e8 	st.w	r7[-24],r8
	ts.minute = 0;
80002ea6:	30 08       	mov	r8,0
80002ea8:	ef 48 ff ec 	st.w	r7[-20],r8
	ts.second = 0;
80002eac:	30 08       	mov	r8,0
80002eae:	ef 48 ff f0 	st.w	r7[-16],r8
	ts.centa = 0;
80002eb2:	30 08       	mov	r8,0
80002eb4:	ef 48 ff f4 	st.w	r7[-12],r8
	
	while(1)
	{
		ts = update_time(centa_s);	// Updates the time struct with the current timer count
80002eb8:	49 18       	lddpc	r8,80002efc <main+0x88>
80002eba:	70 09       	ld.w	r9,r8[0x0]
80002ebc:	ee c8 00 18 	sub	r8,r7,24
80002ec0:	12 9b       	mov	r11,r9
80002ec2:	10 9c       	mov	r12,r8
80002ec4:	f0 1f 00 0f 	mcall	80002f00 <main+0x8c>
		displayTime(ts);			// Displays the time on the serial port
80002ec8:	20 4d       	sub	sp,16
80002eca:	1a 98       	mov	r8,sp
80002ecc:	10 9a       	mov	r10,r8
80002ece:	ee cb 00 18 	sub	r11,r7,24
80002ed2:	f6 e8 00 00 	ld.d	r8,r11[0]
80002ed6:	f4 e9 00 00 	st.d	r10[0],r8
80002eda:	f6 e8 00 08 	ld.d	r8,r11[8]
80002ede:	f4 e9 00 08 	st.d	r10[8],r8
80002ee2:	f0 1f 00 09 	mcall	80002f04 <main+0x90>
80002ee6:	2f cd       	sub	sp,-16
		checkInput();				// Checks input from serial port
80002ee8:	f0 1f 00 08 	mcall	80002f08 <main+0x94>
	}
80002eec:	ce 6b       	rjmp	80002eb8 <main+0x44>
80002eee:	00 00       	add	r0,r0
80002ef0:	80 00       	ld.sh	r0,r0[0x0]
80002ef2:	28 44       	sub	r4,-124
80002ef4:	80 00       	ld.sh	r0,r0[0x0]
80002ef6:	27 cc       	sub	r12,124
80002ef8:	80 00       	ld.sh	r0,r0[0x0]
80002efa:	24 54       	sub	r4,69
80002efc:	00 00       	add	r0,r0
80002efe:	00 0c       	add	r12,r0
80002f00:	80 00       	ld.sh	r0,r0[0x0]
80002f02:	26 74       	sub	r4,103
80002f04:	80 00       	ld.sh	r0,r0[0x0]
80002f06:	25 a0       	sub	r0,90
80002f08:	80 00       	ld.sh	r0,r0[0x0]
80002f0a:	25 20       	sub	r0,82

Disassembly of section .exception:

80003000 <_evba>:
80003000:	c0 08       	rjmp	80003000 <_evba>
	...

80003004 <_handle_TLB_Multiple_Hit>:
80003004:	c0 08       	rjmp	80003004 <_handle_TLB_Multiple_Hit>
	...

80003008 <_handle_Bus_Error_Data_Fetch>:
80003008:	c0 08       	rjmp	80003008 <_handle_Bus_Error_Data_Fetch>
	...

8000300c <_handle_Bus_Error_Instruction_Fetch>:
8000300c:	c0 08       	rjmp	8000300c <_handle_Bus_Error_Instruction_Fetch>
	...

80003010 <_handle_NMI>:
80003010:	c0 08       	rjmp	80003010 <_handle_NMI>
	...

80003014 <_handle_Instruction_Address>:
80003014:	c0 08       	rjmp	80003014 <_handle_Instruction_Address>
	...

80003018 <_handle_ITLB_Protection>:
80003018:	c0 08       	rjmp	80003018 <_handle_ITLB_Protection>
	...

8000301c <_handle_Breakpoint>:
8000301c:	c0 08       	rjmp	8000301c <_handle_Breakpoint>
	...

80003020 <_handle_Illegal_Opcode>:
80003020:	c0 08       	rjmp	80003020 <_handle_Illegal_Opcode>
	...

80003024 <_handle_Unimplemented_Instruction>:
80003024:	c0 08       	rjmp	80003024 <_handle_Unimplemented_Instruction>
	...

80003028 <_handle_Privilege_Violation>:
80003028:	c0 08       	rjmp	80003028 <_handle_Privilege_Violation>
	...

8000302c <_handle_Floating_Point>:
8000302c:	c0 08       	rjmp	8000302c <_handle_Floating_Point>
	...

80003030 <_handle_Coprocessor_Absent>:
80003030:	c0 08       	rjmp	80003030 <_handle_Coprocessor_Absent>
	...

80003034 <_handle_Data_Address_Read>:
80003034:	c0 08       	rjmp	80003034 <_handle_Data_Address_Read>
	...

80003038 <_handle_Data_Address_Write>:
80003038:	c0 08       	rjmp	80003038 <_handle_Data_Address_Write>
	...

8000303c <_handle_DTLB_Protection_Read>:
8000303c:	c0 08       	rjmp	8000303c <_handle_DTLB_Protection_Read>
	...

80003040 <_handle_DTLB_Protection_Write>:
80003040:	c0 08       	rjmp	80003040 <_handle_DTLB_Protection_Write>
	...

80003044 <_handle_DTLB_Modified>:
80003044:	c0 08       	rjmp	80003044 <_handle_DTLB_Modified>
	...

80003050 <_handle_ITLB_Miss>:
80003050:	c0 08       	rjmp	80003050 <_handle_ITLB_Miss>
	...

80003060 <_handle_DTLB_Miss_Read>:
80003060:	c0 08       	rjmp	80003060 <_handle_DTLB_Miss_Read>
	...

80003070 <_handle_DTLB_Miss_Write>:
80003070:	c0 08       	rjmp	80003070 <_handle_DTLB_Miss_Write>
	...

80003100 <_handle_Supervisor_Call>:
80003100:	c0 08       	rjmp	80003100 <_handle_Supervisor_Call>
80003102:	d7 03       	nop

80003104 <_int0>:
80003104:	30 0c       	mov	r12,0
80003106:	fe b0 fd a1 	rcall	80002c48 <_get_interrupt_handler>
8000310a:	58 0c       	cp.w	r12,0
8000310c:	f8 0f 17 10 	movne	pc,r12
80003110:	d6 03       	rete

80003112 <_int1>:
80003112:	30 1c       	mov	r12,1
80003114:	fe b0 fd 9a 	rcall	80002c48 <_get_interrupt_handler>
80003118:	58 0c       	cp.w	r12,0
8000311a:	f8 0f 17 10 	movne	pc,r12
8000311e:	d6 03       	rete

80003120 <_int2>:
80003120:	30 2c       	mov	r12,2
80003122:	fe b0 fd 93 	rcall	80002c48 <_get_interrupt_handler>
80003126:	58 0c       	cp.w	r12,0
80003128:	f8 0f 17 10 	movne	pc,r12
8000312c:	d6 03       	rete

8000312e <_int3>:
8000312e:	30 3c       	mov	r12,3
80003130:	fe b0 fd 8c 	rcall	80002c48 <_get_interrupt_handler>
80003134:	58 0c       	cp.w	r12,0
80003136:	f8 0f 17 10 	movne	pc,r12
8000313a:	d6 03       	rete
8000313c:	d7 03       	nop
8000313e:	d7 03       	nop
80003140:	d7 03       	nop
80003142:	d7 03       	nop
80003144:	d7 03       	nop
80003146:	d7 03       	nop
80003148:	d7 03       	nop
8000314a:	d7 03       	nop
8000314c:	d7 03       	nop
8000314e:	d7 03       	nop
80003150:	d7 03       	nop
80003152:	d7 03       	nop
80003154:	d7 03       	nop
80003156:	d7 03       	nop
80003158:	d7 03       	nop
8000315a:	d7 03       	nop
8000315c:	d7 03       	nop
8000315e:	d7 03       	nop
80003160:	d7 03       	nop
80003162:	d7 03       	nop
80003164:	d7 03       	nop
80003166:	d7 03       	nop
80003168:	d7 03       	nop
8000316a:	d7 03       	nop
8000316c:	d7 03       	nop
8000316e:	d7 03       	nop
80003170:	d7 03       	nop
80003172:	d7 03       	nop
80003174:	d7 03       	nop
80003176:	d7 03       	nop
80003178:	d7 03       	nop
8000317a:	d7 03       	nop
8000317c:	d7 03       	nop
8000317e:	d7 03       	nop
80003180:	d7 03       	nop
80003182:	d7 03       	nop
80003184:	d7 03       	nop
80003186:	d7 03       	nop
80003188:	d7 03       	nop
8000318a:	d7 03       	nop
8000318c:	d7 03       	nop
8000318e:	d7 03       	nop
80003190:	d7 03       	nop
80003192:	d7 03       	nop
80003194:	d7 03       	nop
80003196:	d7 03       	nop
80003198:	d7 03       	nop
8000319a:	d7 03       	nop
8000319c:	d7 03       	nop
8000319e:	d7 03       	nop
800031a0:	d7 03       	nop
800031a2:	d7 03       	nop
800031a4:	d7 03       	nop
800031a6:	d7 03       	nop
800031a8:	d7 03       	nop
800031aa:	d7 03       	nop
800031ac:	d7 03       	nop
800031ae:	d7 03       	nop
800031b0:	d7 03       	nop
800031b2:	d7 03       	nop
800031b4:	d7 03       	nop
800031b6:	d7 03       	nop
800031b8:	d7 03       	nop
800031ba:	d7 03       	nop
800031bc:	d7 03       	nop
800031be:	d7 03       	nop
800031c0:	d7 03       	nop
800031c2:	d7 03       	nop
800031c4:	d7 03       	nop
800031c6:	d7 03       	nop
800031c8:	d7 03       	nop
800031ca:	d7 03       	nop
800031cc:	d7 03       	nop
800031ce:	d7 03       	nop
800031d0:	d7 03       	nop
800031d2:	d7 03       	nop
800031d4:	d7 03       	nop
800031d6:	d7 03       	nop
800031d8:	d7 03       	nop
800031da:	d7 03       	nop
800031dc:	d7 03       	nop
800031de:	d7 03       	nop
800031e0:	d7 03       	nop
800031e2:	d7 03       	nop
800031e4:	d7 03       	nop
800031e6:	d7 03       	nop
800031e8:	d7 03       	nop
800031ea:	d7 03       	nop
800031ec:	d7 03       	nop
800031ee:	d7 03       	nop
800031f0:	d7 03       	nop
800031f2:	d7 03       	nop
800031f4:	d7 03       	nop
800031f6:	d7 03       	nop
800031f8:	d7 03       	nop
800031fa:	d7 03       	nop
800031fc:	d7 03       	nop
800031fe:	d7 03       	nop
