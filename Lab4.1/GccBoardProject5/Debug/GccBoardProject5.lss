
GccBoardProject5.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000079b4  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009a00  80009a00  00009e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000006d8  80009c00  80009c00  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000508  00000008  8000a2d8  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000150  00000510  00000510  00000000  2**2
                  ALLOC
  8 .heap         0000e9a0  00000660  00000660  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000ad10  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000cf8  00000000  00000000  0000ad40  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000016b2  00000000  00000000  0000ba38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001f1da  00000000  00000000  0000d0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d41  00000000  00000000  0002c2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000da45  00000000  00000000  00031005  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000021f0  00000000  00000000  0003ea4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f5a  00000000  00000000  00040c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000095f8  00000000  00000000  00044b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 0094d696  00000000  00000000  0004e18e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000d90  00000000  00000000  0099b828  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c3 8c 	sub	pc,pc,-15476

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e3 90 	sub	pc,pc,-7280

Disassembly of section .text:

80002008 <sysclk_get_main_hz>:
80002008:	eb cd 40 80 	pushm	r7,lr
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000200c:	1a 97       	mov	r7,sp
	}
#endif

	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RCSYS:
		return OSC_SLOW_NOMINAL_HZ;
8000200e:	e0 78 c2 00 	mov	r8,115200

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80002012:	10 9c       	mov	r12,r8
80002014:	e3 cd 80 80 	ldm	sp++,r7,pc

80002018 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80002018:	eb cd 40 80 	pushm	r7,lr
8000201c:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000201e:	f0 1f 00 04 	mcall	8000202c <sysclk_get_cpu_hz+0x14>
80002022:	18 98       	mov	r8,r12
}
80002024:	10 9c       	mov	r12,r8
80002026:	e3 cd 80 80 	ldm	sp++,r7,pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 08       	sub	r8,0

80002030 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002030:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002034:	1a 97       	mov	r7,sp
80002036:	fa cd 01 ac 	sub	sp,sp,428
8000203a:	ef 4c fe b8 	st.w	r7[-328],r12
8000203e:	16 98       	mov	r8,r11
80002040:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002044:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002048:	58 18       	cp.w	r8,1
8000204a:	c6 41       	brne	80002112 <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
8000204c:	fe f9 0a 84 	ld.w	r9,pc[2692]
80002050:	30 68       	mov	r8,6
80002052:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002054:	30 2b       	mov	r11,2
80002056:	33 2c       	mov	r12,50
80002058:	f0 1f 02 9f 	mcall	80002ad4 <dip204_init+0xaa4>

    // PWM controller configuration
    pwm_opt.diva=0;
8000205c:	30 08       	mov	r8,0
8000205e:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
80002062:	30 08       	mov	r8,0
80002064:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
80002068:	30 08       	mov	r8,0
8000206a:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
8000206e:	30 08       	mov	r8,0
80002070:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
80002074:	ee c8 00 f0 	sub	r8,r7,240
80002078:	10 9c       	mov	r12,r8
8000207a:	f0 1f 02 98 	mcall	80002ad8 <dip204_init+0xaa8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
8000207e:	ef 39 fe b4 	ld.ub	r9,r7[-332]
80002082:	30 08       	mov	r8,0
80002084:	f0 09 18 00 	cp.b	r9,r8
80002088:	c0 30       	breq	8000208e <dip204_init+0x5e>
8000208a:	33 18       	mov	r8,49
8000208c:	c0 28       	rjmp	80002090 <dip204_init+0x60>
8000208e:	30 18       	mov	r8,1
80002090:	fe f9 0a 4c 	ld.w	r9,pc[2636]
80002094:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002096:	fe fa 0a 4a 	ld.w	r10,pc[2634]
8000209a:	74 08       	ld.w	r8,r10[0x0]
8000209c:	30 09       	mov	r9,0
8000209e:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
800020a2:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
800020a4:	fe fa 0a 3c 	ld.w	r10,pc[2620]
800020a8:	74 08       	ld.w	r8,r10[0x0]
800020aa:	30 09       	mov	r9,0
800020ac:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
800020b0:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
800020b2:	fe fa 0a 2e 	ld.w	r10,pc[2606]
800020b6:	74 08       	ld.w	r8,r10[0x0]
800020b8:	30 19       	mov	r9,1
800020ba:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
800020be:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
800020c0:	fe fa 0a 20 	ld.w	r10,pc[2592]
800020c4:	74 08       	ld.w	r8,r10[0x0]
800020c6:	30 89       	mov	r9,8
800020c8:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800020cc:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800020ce:	fe f8 0a 0e 	ld.w	r8,pc[2574]
800020d2:	90 08       	ld.sh	r8,r8[0x0]
800020d4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800020d8:	fe f8 0a 08 	ld.w	r8,pc[2568]
800020dc:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800020de:	fe f9 0a 02 	ld.w	r9,pc[2562]
800020e2:	33 28       	mov	r8,50
800020e4:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800020e6:	fe f9 09 fa 	ld.w	r9,pc[2554]
800020ea:	30 08       	mov	r8,0
800020ec:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800020ee:	fe f8 09 e2 	ld.w	r8,pc[2530]
800020f2:	70 08       	ld.w	r8,r8[0x0]
800020f4:	fe fb 09 ec 	ld.w	r11,pc[2540]
800020f8:	10 9c       	mov	r12,r8
800020fa:	f0 1f 02 7b 	mcall	80002ae4 <dip204_init+0xab4>
    // start PWM
    pwm_start_channels(1 << channel_id);
800020fe:	fe f8 09 d2 	ld.w	r8,pc[2514]
80002102:	70 09       	ld.w	r9,r8[0x0]
80002104:	30 18       	mov	r8,1
80002106:	f0 09 09 48 	lsl	r8,r8,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	f0 1f 02 77 	mcall	80002ae8 <dip204_init+0xab8>
80002110:	c0 e8       	rjmp	8000212c <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
80002112:	ef 39 fe b4 	ld.ub	r9,r7[-332]
80002116:	30 08       	mov	r8,0
80002118:	f0 09 18 00 	cp.b	r9,r8
8000211c:	c0 50       	breq	80002126 <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000211e:	33 2c       	mov	r12,50
80002120:	f0 1f 02 73 	mcall	80002aec <dip204_init+0xabc>
80002124:	c0 48       	rjmp	8000212c <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002126:	33 2c       	mov	r12,50
80002128:	f0 1f 02 72 	mcall	80002af0 <dip204_init+0xac0>
    }
  }
  // delay for power on
  delay_ms(20);
8000212c:	f0 1f 02 72 	mcall	80002af4 <dip204_init+0xac4>
80002130:	18 99       	mov	r9,r12
80002132:	31 48       	mov	r8,20
80002134:	ef 48 ff 24 	st.w	r7[-220],r8
80002138:	ef 49 ff 20 	st.w	r7[-224],r9
8000213c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80002140:	ef 48 ff 2c 	st.w	r7[-212],r8
80002144:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002148:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000214c:	ee f0 ff 2c 	ld.w	r0,r7[-212]
80002150:	30 01       	mov	r1,0
80002152:	ee f2 ff 28 	ld.w	r2,r7[-216]
80002156:	30 03       	mov	r3,0
80002158:	e2 02 02 49 	mul	r9,r1,r2
8000215c:	e6 00 02 48 	mul	r8,r3,r0
80002160:	10 09       	add	r9,r8
80002162:	e0 02 06 4a 	mulu.d	r10,r0,r2
80002166:	16 09       	add	r9,r11
80002168:	12 9b       	mov	r11,r9
8000216a:	e0 68 03 e7 	mov	r8,999
8000216e:	30 09       	mov	r9,0
80002170:	10 0a       	add	r10,r8
80002172:	f6 09 00 4b 	adc	r11,r11,r9
80002176:	e0 68 03 e8 	mov	r8,1000
8000217a:	30 09       	mov	r9,0
8000217c:	f0 1f 02 5f 	mcall	80002af8 <dip204_init+0xac8>
80002180:	14 98       	mov	r8,r10
80002182:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002184:	ef 48 ff 34 	st.w	r7[-204],r8
80002188:	ee c8 01 44 	sub	r8,r7,324
8000218c:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002190:	e1 b8 00 42 	mfsr	r8,0x108
80002194:	10 99       	mov	r9,r8
80002196:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000219a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000219c:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021a0:	70 09       	ld.w	r9,r8[0x0]
800021a2:	ee f8 ff 34 	ld.w	r8,r7[-204]
800021a6:	10 09       	add	r9,r8
800021a8:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021ac:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800021ae:	ee f9 ff 30 	ld.w	r9,r7[-208]
800021b2:	30 08       	mov	r8,0
800021b4:	f3 68 00 08 	st.b	r9[8],r8
800021b8:	ee c8 01 44 	sub	r8,r7,324
800021bc:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800021c0:	e1 b8 00 42 	mfsr	r8,0x108
800021c4:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800021c8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021cc:	f1 39 00 08 	ld.ub	r9,r8[8]
800021d0:	30 28       	mov	r8,2
800021d2:	f0 09 18 00 	cp.b	r9,r8
800021d6:	c0 31       	brne	800021dc <dip204_init+0x1ac>
    return false;
800021d8:	30 08       	mov	r8,0
800021da:	c4 38       	rjmp	80002260 <dip204_init+0x230>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800021dc:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021e0:	f1 39 00 08 	ld.ub	r9,r8[8]
800021e4:	30 18       	mov	r8,1
800021e6:	f0 09 18 00 	cp.b	r9,r8
800021ea:	c0 31       	brne	800021f0 <dip204_init+0x1c0>
    return true;
800021ec:	30 18       	mov	r8,1
800021ee:	c3 98       	rjmp	80002260 <dip204_init+0x230>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800021f0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021f4:	70 09       	ld.w	r9,r8[0x0]
800021f6:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021fa:	70 18       	ld.w	r8,r8[0x4]
800021fc:	10 39       	cp.w	r9,r8
800021fe:	e0 88 00 1a 	brls	80002232 <dip204_init+0x202>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002202:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002206:	70 09       	ld.w	r9,r8[0x0]
80002208:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000220c:	12 38       	cp.w	r8,r9
8000220e:	c1 02       	brcc	8000222e <dip204_init+0x1fe>
80002210:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002214:	70 19       	ld.w	r9,r8[0x4]
80002216:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000221a:	12 38       	cp.w	r8,r9
8000221c:	e0 88 00 09 	brls	8000222e <dip204_init+0x1fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002220:	ee f9 ff 38 	ld.w	r9,r7[-200]
80002224:	30 18       	mov	r8,1
80002226:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000222a:	30 18       	mov	r8,1
8000222c:	c1 a8       	rjmp	80002260 <dip204_init+0x230>
    }
    return false;
8000222e:	30 08       	mov	r8,0
80002230:	c1 88       	rjmp	80002260 <dip204_init+0x230>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002232:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002236:	70 09       	ld.w	r9,r8[0x0]
80002238:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000223c:	12 38       	cp.w	r8,r9
8000223e:	c0 93       	brcs	80002250 <dip204_init+0x220>
80002240:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002244:	70 19       	ld.w	r9,r8[0x4]
80002246:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000224a:	12 38       	cp.w	r8,r9
8000224c:	e0 88 00 09 	brls	8000225e <dip204_init+0x22e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002250:	ee f9 ff 38 	ld.w	r9,r7[-200]
80002254:	30 18       	mov	r8,1
80002256:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000225a:	30 18       	mov	r8,1
8000225c:	c0 28       	rjmp	80002260 <dip204_init+0x230>
    }
    return false;
8000225e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002260:	58 08       	cp.w	r8,0
80002262:	ca b0       	breq	800021b8 <dip204_init+0x188>
  // select the LCD chip
  dip204_select();
80002264:	f0 1f 02 26 	mcall	80002afc <dip204_init+0xacc>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002268:	e0 6c 00 f8 	mov	r12,248
8000226c:	f0 1f 02 25 	mcall	80002b00 <dip204_init+0xad0>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002270:	33 4c       	mov	r12,52
80002272:	f0 1f 02 24 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002276:	f0 1f 02 20 	mcall	80002af4 <dip204_init+0xac4>
8000227a:	18 99       	mov	r9,r12
8000227c:	30 18       	mov	r8,1
8000227e:	ef 48 ff 44 	st.w	r7[-188],r8
80002282:	ef 49 ff 40 	st.w	r7[-192],r9
80002286:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000228a:	ef 48 ff 4c 	st.w	r7[-180],r8
8000228e:	ee f8 ff 40 	ld.w	r8,r7[-192]
80002292:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002296:	ee fc ff 4c 	ld.w	r12,r7[-180]
8000229a:	ef 4c fe 60 	st.w	r7[-416],r12
8000229e:	30 0b       	mov	r11,0
800022a0:	ef 4b fe 5c 	st.w	r7[-420],r11
800022a4:	ee fa ff 48 	ld.w	r10,r7[-184]
800022a8:	ef 4a fe 58 	st.w	r7[-424],r10
800022ac:	30 09       	mov	r9,0
800022ae:	ef 49 fe 54 	st.w	r7[-428],r9
800022b2:	ee f9 fe 5c 	ld.w	r9,r7[-420]
800022b6:	ee f8 fe 58 	ld.w	r8,r7[-424]
800022ba:	b1 39       	mul	r9,r8
800022bc:	ee f8 fe 54 	ld.w	r8,r7[-428]
800022c0:	ee fc fe 60 	ld.w	r12,r7[-416]
800022c4:	b9 38       	mul	r8,r12
800022c6:	10 09       	add	r9,r8
800022c8:	ee f8 fe 60 	ld.w	r8,r7[-416]
800022cc:	ee fc fe 58 	ld.w	r12,r7[-424]
800022d0:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800022d4:	16 09       	add	r9,r11
800022d6:	12 9b       	mov	r11,r9
800022d8:	e0 68 03 e7 	mov	r8,999
800022dc:	30 09       	mov	r9,0
800022de:	10 0a       	add	r10,r8
800022e0:	f6 09 00 4b 	adc	r11,r11,r9
800022e4:	e0 68 03 e8 	mov	r8,1000
800022e8:	30 09       	mov	r9,0
800022ea:	f0 1f 02 04 	mcall	80002af8 <dip204_init+0xac8>
800022ee:	14 98       	mov	r8,r10
800022f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800022f2:	ef 48 ff 54 	st.w	r7[-172],r8
800022f6:	ee c8 01 38 	sub	r8,r7,312
800022fa:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022fe:	e1 b8 00 42 	mfsr	r8,0x108
80002302:	10 99       	mov	r9,r8
80002304:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002308:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000230a:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000230e:	70 09       	ld.w	r9,r8[0x0]
80002310:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002314:	10 09       	add	r9,r8
80002316:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000231a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000231c:	ee f9 ff 50 	ld.w	r9,r7[-176]
80002320:	30 08       	mov	r8,0
80002322:	f3 68 00 08 	st.b	r9[8],r8
80002326:	ee c8 01 38 	sub	r8,r7,312
8000232a:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000232e:	e1 b8 00 42 	mfsr	r8,0x108
80002332:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002336:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000233a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000233e:	30 28       	mov	r8,2
80002340:	f0 09 18 00 	cp.b	r9,r8
80002344:	c0 31       	brne	8000234a <dip204_init+0x31a>
    return false;
80002346:	30 08       	mov	r8,0
80002348:	c4 38       	rjmp	800023ce <dip204_init+0x39e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000234a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000234e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002352:	30 18       	mov	r8,1
80002354:	f0 09 18 00 	cp.b	r9,r8
80002358:	c0 31       	brne	8000235e <dip204_init+0x32e>
    return true;
8000235a:	30 18       	mov	r8,1
8000235c:	c3 98       	rjmp	800023ce <dip204_init+0x39e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000235e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002362:	70 09       	ld.w	r9,r8[0x0]
80002364:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002368:	70 18       	ld.w	r8,r8[0x4]
8000236a:	10 39       	cp.w	r9,r8
8000236c:	e0 88 00 1a 	brls	800023a0 <dip204_init+0x370>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002370:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002374:	70 09       	ld.w	r9,r8[0x0]
80002376:	ee f8 ff 5c 	ld.w	r8,r7[-164]
8000237a:	12 38       	cp.w	r8,r9
8000237c:	c1 02       	brcc	8000239c <dip204_init+0x36c>
8000237e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002382:	70 19       	ld.w	r9,r8[0x4]
80002384:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002388:	12 38       	cp.w	r8,r9
8000238a:	e0 88 00 09 	brls	8000239c <dip204_init+0x36c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000238e:	ee f9 ff 58 	ld.w	r9,r7[-168]
80002392:	30 18       	mov	r8,1
80002394:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002398:	30 18       	mov	r8,1
8000239a:	c1 a8       	rjmp	800023ce <dip204_init+0x39e>
    }
    return false;
8000239c:	30 08       	mov	r8,0
8000239e:	c1 88       	rjmp	800023ce <dip204_init+0x39e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023a0:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023a4:	70 09       	ld.w	r9,r8[0x0]
800023a6:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023aa:	12 38       	cp.w	r8,r9
800023ac:	c0 93       	brcs	800023be <dip204_init+0x38e>
800023ae:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023b2:	70 19       	ld.w	r9,r8[0x4]
800023b4:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023b8:	12 38       	cp.w	r8,r9
800023ba:	e0 88 00 09 	brls	800023cc <dip204_init+0x39c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800023be:	ee f9 ff 58 	ld.w	r9,r7[-168]
800023c2:	30 18       	mov	r8,1
800023c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800023c8:	30 18       	mov	r8,1
800023ca:	c0 28       	rjmp	800023ce <dip204_init+0x39e>
    }
    return false;
800023cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800023ce:	58 08       	cp.w	r8,0
800023d0:	ca b0       	breq	80002326 <dip204_init+0x2f6>
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800023d2:	30 9c       	mov	r12,9
800023d4:	f0 1f 01 cb 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800023d8:	f0 1f 01 c7 	mcall	80002af4 <dip204_init+0xac4>
800023dc:	18 99       	mov	r9,r12
800023de:	30 18       	mov	r8,1
800023e0:	ef 48 ff 64 	st.w	r7[-156],r8
800023e4:	ef 49 ff 60 	st.w	r7[-160],r9
800023e8:	ee f8 ff 64 	ld.w	r8,r7[-156]
800023ec:	ef 48 ff 6c 	st.w	r7[-148],r8
800023f0:	ee f8 ff 60 	ld.w	r8,r7[-160]
800023f4:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800023f8:	ee fb ff 6c 	ld.w	r11,r7[-148]
800023fc:	ef 4b fe 70 	st.w	r7[-400],r11
80002400:	30 0a       	mov	r10,0
80002402:	ef 4a fe 6c 	st.w	r7[-404],r10
80002406:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000240a:	ef 49 fe 68 	st.w	r7[-408],r9
8000240e:	30 08       	mov	r8,0
80002410:	ef 48 fe 64 	st.w	r7[-412],r8
80002414:	ee f9 fe 6c 	ld.w	r9,r7[-404]
80002418:	ee fc fe 68 	ld.w	r12,r7[-408]
8000241c:	b9 39       	mul	r9,r12
8000241e:	ee f8 fe 64 	ld.w	r8,r7[-412]
80002422:	ee fb fe 70 	ld.w	r11,r7[-400]
80002426:	b7 38       	mul	r8,r11
80002428:	10 09       	add	r9,r8
8000242a:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000242e:	ee fc fe 68 	ld.w	r12,r7[-408]
80002432:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002436:	16 09       	add	r9,r11
80002438:	12 9b       	mov	r11,r9
8000243a:	e0 68 03 e7 	mov	r8,999
8000243e:	30 09       	mov	r9,0
80002440:	10 0a       	add	r10,r8
80002442:	f6 09 00 4b 	adc	r11,r11,r9
80002446:	e0 68 03 e8 	mov	r8,1000
8000244a:	30 09       	mov	r9,0
8000244c:	f0 1f 01 ab 	mcall	80002af8 <dip204_init+0xac8>
80002450:	14 98       	mov	r8,r10
80002452:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002454:	ef 48 ff 74 	st.w	r7[-140],r8
80002458:	ee c8 01 2c 	sub	r8,r7,300
8000245c:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002460:	e1 b8 00 42 	mfsr	r8,0x108
80002464:	10 99       	mov	r9,r8
80002466:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000246a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000246c:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	ee f8 ff 74 	ld.w	r8,r7[-140]
80002476:	10 09       	add	r9,r8
80002478:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000247c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000247e:	ee f9 ff 70 	ld.w	r9,r7[-144]
80002482:	30 08       	mov	r8,0
80002484:	f3 68 00 08 	st.b	r9[8],r8
80002488:	ee c8 01 2c 	sub	r8,r7,300
8000248c:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002490:	e1 b8 00 42 	mfsr	r8,0x108
80002494:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002498:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000249c:	f1 39 00 08 	ld.ub	r9,r8[8]
800024a0:	30 28       	mov	r8,2
800024a2:	f0 09 18 00 	cp.b	r9,r8
800024a6:	c0 31       	brne	800024ac <dip204_init+0x47c>
    return false;
800024a8:	30 08       	mov	r8,0
800024aa:	c4 38       	rjmp	80002530 <dip204_init+0x500>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800024ac:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024b0:	f1 39 00 08 	ld.ub	r9,r8[8]
800024b4:	30 18       	mov	r8,1
800024b6:	f0 09 18 00 	cp.b	r9,r8
800024ba:	c0 31       	brne	800024c0 <dip204_init+0x490>
    return true;
800024bc:	30 18       	mov	r8,1
800024be:	c3 98       	rjmp	80002530 <dip204_init+0x500>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800024c0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024c4:	70 09       	ld.w	r9,r8[0x0]
800024c6:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024ca:	70 18       	ld.w	r8,r8[0x4]
800024cc:	10 39       	cp.w	r9,r8
800024ce:	e0 88 00 1a 	brls	80002502 <dip204_init+0x4d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800024d2:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024d6:	70 09       	ld.w	r9,r8[0x0]
800024d8:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024dc:	12 38       	cp.w	r8,r9
800024de:	c1 02       	brcc	800024fe <dip204_init+0x4ce>
800024e0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024e4:	70 19       	ld.w	r9,r8[0x4]
800024e6:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024ea:	12 38       	cp.w	r8,r9
800024ec:	e0 88 00 09 	brls	800024fe <dip204_init+0x4ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024f0:	ee f9 ff 78 	ld.w	r9,r7[-136]
800024f4:	30 18       	mov	r8,1
800024f6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024fa:	30 18       	mov	r8,1
800024fc:	c1 a8       	rjmp	80002530 <dip204_init+0x500>
    }
    return false;
800024fe:	30 08       	mov	r8,0
80002500:	c1 88       	rjmp	80002530 <dip204_init+0x500>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002502:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002506:	70 09       	ld.w	r9,r8[0x0]
80002508:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000250c:	12 38       	cp.w	r8,r9
8000250e:	c0 93       	brcs	80002520 <dip204_init+0x4f0>
80002510:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002514:	70 19       	ld.w	r9,r8[0x4]
80002516:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000251a:	12 38       	cp.w	r8,r9
8000251c:	e0 88 00 09 	brls	8000252e <dip204_init+0x4fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002520:	ee f9 ff 78 	ld.w	r9,r7[-136]
80002524:	30 18       	mov	r8,1
80002526:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000252a:	30 18       	mov	r8,1
8000252c:	c0 28       	rjmp	80002530 <dip204_init+0x500>
    }
    return false;
8000252e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002530:	58 08       	cp.w	r8,0
80002532:	ca b0       	breq	80002488 <dip204_init+0x458>
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002534:	33 0c       	mov	r12,48
80002536:	f0 1f 01 73 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
8000253a:	f0 1f 01 6f 	mcall	80002af4 <dip204_init+0xac4>
8000253e:	18 99       	mov	r9,r12
80002540:	30 18       	mov	r8,1
80002542:	ef 48 ff 84 	st.w	r7[-124],r8
80002546:	ef 49 ff 80 	st.w	r7[-128],r9
8000254a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000254e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002552:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002556:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000255a:	ee fb ff 8c 	ld.w	r11,r7[-116]
8000255e:	ef 4b fe 80 	st.w	r7[-384],r11
80002562:	30 0a       	mov	r10,0
80002564:	ef 4a fe 7c 	st.w	r7[-388],r10
80002568:	ee f9 ff 88 	ld.w	r9,r7[-120]
8000256c:	ef 49 fe 78 	st.w	r7[-392],r9
80002570:	30 08       	mov	r8,0
80002572:	ef 48 fe 74 	st.w	r7[-396],r8
80002576:	ee f9 fe 7c 	ld.w	r9,r7[-388]
8000257a:	ee fc fe 78 	ld.w	r12,r7[-392]
8000257e:	b9 39       	mul	r9,r12
80002580:	ee f8 fe 74 	ld.w	r8,r7[-396]
80002584:	ee fb fe 80 	ld.w	r11,r7[-384]
80002588:	b7 38       	mul	r8,r11
8000258a:	10 09       	add	r9,r8
8000258c:	ee f8 fe 80 	ld.w	r8,r7[-384]
80002590:	ee fc fe 78 	ld.w	r12,r7[-392]
80002594:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002598:	16 09       	add	r9,r11
8000259a:	12 9b       	mov	r11,r9
8000259c:	e0 68 03 e7 	mov	r8,999
800025a0:	30 09       	mov	r9,0
800025a2:	10 0a       	add	r10,r8
800025a4:	f6 09 00 4b 	adc	r11,r11,r9
800025a8:	e0 68 03 e8 	mov	r8,1000
800025ac:	30 09       	mov	r9,0
800025ae:	f0 1f 01 53 	mcall	80002af8 <dip204_init+0xac8>
800025b2:	14 98       	mov	r8,r10
800025b4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800025b6:	ef 48 ff 94 	st.w	r7[-108],r8
800025ba:	ee c8 01 20 	sub	r8,r7,288
800025be:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800025c2:	e1 b8 00 42 	mfsr	r8,0x108
800025c6:	10 99       	mov	r9,r8
800025c8:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025cc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025ce:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025d2:	70 09       	ld.w	r9,r8[0x0]
800025d4:	ee f8 ff 94 	ld.w	r8,r7[-108]
800025d8:	10 09       	add	r9,r8
800025da:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025de:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025e0:	ee f9 ff 90 	ld.w	r9,r7[-112]
800025e4:	30 08       	mov	r8,0
800025e6:	f3 68 00 08 	st.b	r9[8],r8
800025ea:	ee c8 01 20 	sub	r8,r7,288
800025ee:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025f2:	e1 b8 00 42 	mfsr	r8,0x108
800025f6:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800025fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002602:	30 28       	mov	r8,2
80002604:	f0 09 18 00 	cp.b	r9,r8
80002608:	c0 31       	brne	8000260e <dip204_init+0x5de>
    return false;
8000260a:	30 08       	mov	r8,0
8000260c:	c4 38       	rjmp	80002692 <dip204_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000260e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002612:	f1 39 00 08 	ld.ub	r9,r8[8]
80002616:	30 18       	mov	r8,1
80002618:	f0 09 18 00 	cp.b	r9,r8
8000261c:	c0 31       	brne	80002622 <dip204_init+0x5f2>
    return true;
8000261e:	30 18       	mov	r8,1
80002620:	c3 98       	rjmp	80002692 <dip204_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002622:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002626:	70 09       	ld.w	r9,r8[0x0]
80002628:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000262c:	70 18       	ld.w	r8,r8[0x4]
8000262e:	10 39       	cp.w	r9,r8
80002630:	e0 88 00 1a 	brls	80002664 <dip204_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002634:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002638:	70 08       	ld.w	r8,r8[0x0]
8000263a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000263e:	10 39       	cp.w	r9,r8
80002640:	c1 02       	brcc	80002660 <dip204_init+0x630>
80002642:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002646:	70 18       	ld.w	r8,r8[0x4]
80002648:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000264c:	10 39       	cp.w	r9,r8
8000264e:	e0 88 00 09 	brls	80002660 <dip204_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002652:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002656:	30 18       	mov	r8,1
80002658:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000265c:	30 18       	mov	r8,1
8000265e:	c1 a8       	rjmp	80002692 <dip204_init+0x662>
    }
    return false;
80002660:	30 08       	mov	r8,0
80002662:	c1 88       	rjmp	80002692 <dip204_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002664:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002668:	70 08       	ld.w	r8,r8[0x0]
8000266a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000266e:	10 39       	cp.w	r9,r8
80002670:	c0 93       	brcs	80002682 <dip204_init+0x652>
80002672:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002676:	70 18       	ld.w	r8,r8[0x4]
80002678:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000267c:	10 39       	cp.w	r9,r8
8000267e:	e0 88 00 09 	brls	80002690 <dip204_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002682:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002686:	30 18       	mov	r8,1
80002688:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000268c:	30 18       	mov	r8,1
8000268e:	c0 28       	rjmp	80002692 <dip204_init+0x662>
    }
    return false;
80002690:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002692:	58 08       	cp.w	r8,0
80002694:	ca b0       	breq	800025ea <dip204_init+0x5ba>
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002696:	30 fc       	mov	r12,15
80002698:	f0 1f 01 1a 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
8000269c:	f0 1f 01 16 	mcall	80002af4 <dip204_init+0xac4>
800026a0:	18 98       	mov	r8,r12
800026a2:	30 19       	mov	r9,1
800026a4:	ef 49 ff a4 	st.w	r7[-92],r9
800026a8:	ef 48 ff a0 	st.w	r7[-96],r8
800026ac:	ee f8 ff a4 	ld.w	r8,r7[-92]
800026b0:	ef 48 ff ac 	st.w	r7[-84],r8
800026b4:	ee f8 ff a0 	ld.w	r8,r7[-96]
800026b8:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800026bc:	ee fb ff ac 	ld.w	r11,r7[-84]
800026c0:	ef 4b fe 90 	st.w	r7[-368],r11
800026c4:	30 0a       	mov	r10,0
800026c6:	ef 4a fe 8c 	st.w	r7[-372],r10
800026ca:	ee f9 ff a8 	ld.w	r9,r7[-88]
800026ce:	ef 49 fe 88 	st.w	r7[-376],r9
800026d2:	30 08       	mov	r8,0
800026d4:	ef 48 fe 84 	st.w	r7[-380],r8
800026d8:	ee fa fe 8c 	ld.w	r10,r7[-372]
800026dc:	ee fc fe 88 	ld.w	r12,r7[-376]
800026e0:	b9 3a       	mul	r10,r12
800026e2:	ee f8 fe 84 	ld.w	r8,r7[-380]
800026e6:	ee fb fe 90 	ld.w	r11,r7[-368]
800026ea:	b7 38       	mul	r8,r11
800026ec:	10 0a       	add	r10,r8
800026ee:	ee fc fe 90 	ld.w	r12,r7[-368]
800026f2:	ee fb fe 88 	ld.w	r11,r7[-376]
800026f6:	f8 0b 06 48 	mulu.d	r8,r12,r11
800026fa:	12 0a       	add	r10,r9
800026fc:	14 99       	mov	r9,r10
800026fe:	e0 6a 03 e7 	mov	r10,999
80002702:	30 0b       	mov	r11,0
80002704:	f0 0a 00 0a 	add	r10,r8,r10
80002708:	f2 0b 00 4b 	adc	r11,r9,r11
8000270c:	e0 68 03 e8 	mov	r8,1000
80002710:	30 09       	mov	r9,0
80002712:	f0 1f 00 fa 	mcall	80002af8 <dip204_init+0xac8>
80002716:	14 98       	mov	r8,r10
80002718:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000271a:	ef 48 ff b4 	st.w	r7[-76],r8
8000271e:	ee c8 01 14 	sub	r8,r7,276
80002722:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002726:	e1 b8 00 42 	mfsr	r8,0x108
8000272a:	10 99       	mov	r9,r8
8000272c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002730:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002732:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002736:	70 09       	ld.w	r9,r8[0x0]
80002738:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000273c:	10 09       	add	r9,r8
8000273e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002742:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002744:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002748:	30 08       	mov	r8,0
8000274a:	f3 68 00 08 	st.b	r9[8],r8
8000274e:	ee c8 01 14 	sub	r8,r7,276
80002752:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002756:	e1 b8 00 42 	mfsr	r8,0x108
8000275a:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000275e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002762:	f1 39 00 08 	ld.ub	r9,r8[8]
80002766:	30 28       	mov	r8,2
80002768:	f0 09 18 00 	cp.b	r9,r8
8000276c:	c0 31       	brne	80002772 <dip204_init+0x742>
    return false;
8000276e:	30 08       	mov	r8,0
80002770:	c4 38       	rjmp	800027f6 <dip204_init+0x7c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002772:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002776:	f1 39 00 08 	ld.ub	r9,r8[8]
8000277a:	30 18       	mov	r8,1
8000277c:	f0 09 18 00 	cp.b	r9,r8
80002780:	c0 31       	brne	80002786 <dip204_init+0x756>
    return true;
80002782:	30 18       	mov	r8,1
80002784:	c3 98       	rjmp	800027f6 <dip204_init+0x7c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002786:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000278a:	70 09       	ld.w	r9,r8[0x0]
8000278c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002790:	70 18       	ld.w	r8,r8[0x4]
80002792:	10 39       	cp.w	r9,r8
80002794:	e0 88 00 1a 	brls	800027c8 <dip204_init+0x798>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002798:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000279c:	70 08       	ld.w	r8,r8[0x0]
8000279e:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027a2:	10 39       	cp.w	r9,r8
800027a4:	c1 02       	brcc	800027c4 <dip204_init+0x794>
800027a6:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027aa:	70 18       	ld.w	r8,r8[0x4]
800027ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027b0:	10 39       	cp.w	r9,r8
800027b2:	e0 88 00 09 	brls	800027c4 <dip204_init+0x794>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027b6:	ee f9 ff b8 	ld.w	r9,r7[-72]
800027ba:	30 18       	mov	r8,1
800027bc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027c0:	30 18       	mov	r8,1
800027c2:	c1 a8       	rjmp	800027f6 <dip204_init+0x7c6>
    }
    return false;
800027c4:	30 08       	mov	r8,0
800027c6:	c1 88       	rjmp	800027f6 <dip204_init+0x7c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027c8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027cc:	70 08       	ld.w	r8,r8[0x0]
800027ce:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027d2:	10 39       	cp.w	r9,r8
800027d4:	c0 93       	brcs	800027e6 <dip204_init+0x7b6>
800027d6:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027da:	70 18       	ld.w	r8,r8[0x4]
800027dc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027e0:	10 39       	cp.w	r9,r8
800027e2:	e0 88 00 09 	brls	800027f4 <dip204_init+0x7c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027e6:	ee f9 ff b8 	ld.w	r9,r7[-72]
800027ea:	30 18       	mov	r8,1
800027ec:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027f0:	30 18       	mov	r8,1
800027f2:	c0 28       	rjmp	800027f6 <dip204_init+0x7c6>
    }
    return false;
800027f4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027f6:	58 08       	cp.w	r8,0
800027f8:	ca b0       	breq	8000274e <dip204_init+0x71e>
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800027fa:	30 1c       	mov	r12,1
800027fc:	f0 1f 00 c1 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(5);
80002800:	f0 1f 00 bd 	mcall	80002af4 <dip204_init+0xac4>
80002804:	18 98       	mov	r8,r12
80002806:	30 59       	mov	r9,5
80002808:	ef 49 ff c4 	st.w	r7[-60],r9
8000280c:	ef 48 ff c0 	st.w	r7[-64],r8
80002810:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002814:	ef 48 ff cc 	st.w	r7[-52],r8
80002818:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000281c:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002820:	ee fa ff cc 	ld.w	r10,r7[-52]
80002824:	ef 4a fe a0 	st.w	r7[-352],r10
80002828:	30 09       	mov	r9,0
8000282a:	ef 49 fe 9c 	st.w	r7[-356],r9
8000282e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002832:	ef 48 fe 98 	st.w	r7[-360],r8
80002836:	30 0c       	mov	r12,0
80002838:	ef 4c fe 94 	st.w	r7[-364],r12
8000283c:	ee fa fe 9c 	ld.w	r10,r7[-356]
80002840:	ee fb fe 98 	ld.w	r11,r7[-360]
80002844:	b7 3a       	mul	r10,r11
80002846:	ee f8 fe 94 	ld.w	r8,r7[-364]
8000284a:	ee f9 fe a0 	ld.w	r9,r7[-352]
8000284e:	b3 38       	mul	r8,r9
80002850:	10 0a       	add	r10,r8
80002852:	ee fc fe a0 	ld.w	r12,r7[-352]
80002856:	ee fb fe 98 	ld.w	r11,r7[-360]
8000285a:	f8 0b 06 48 	mulu.d	r8,r12,r11
8000285e:	12 0a       	add	r10,r9
80002860:	14 99       	mov	r9,r10
80002862:	e0 6a 03 e7 	mov	r10,999
80002866:	30 0b       	mov	r11,0
80002868:	f0 0a 00 0a 	add	r10,r8,r10
8000286c:	f2 0b 00 4b 	adc	r11,r9,r11
80002870:	e0 68 03 e8 	mov	r8,1000
80002874:	30 09       	mov	r9,0
80002876:	f0 1f 00 a1 	mcall	80002af8 <dip204_init+0xac8>
8000287a:	14 98       	mov	r8,r10
8000287c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000287e:	ef 48 ff d4 	st.w	r7[-44],r8
80002882:	ee c8 01 08 	sub	r8,r7,264
80002886:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000288a:	e1 b8 00 42 	mfsr	r8,0x108
8000288e:	10 99       	mov	r9,r8
80002890:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002894:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002896:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000289a:	70 09       	ld.w	r9,r8[0x0]
8000289c:	ee f8 ff d4 	ld.w	r8,r7[-44]
800028a0:	10 09       	add	r9,r8
800028a2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800028a6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028a8:	ee f9 ff d0 	ld.w	r9,r7[-48]
800028ac:	30 08       	mov	r8,0
800028ae:	f3 68 00 08 	st.b	r9[8],r8
800028b2:	ee c8 01 08 	sub	r8,r7,264
800028b6:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800028ba:	e1 b8 00 42 	mfsr	r8,0x108
800028be:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028c6:	f1 39 00 08 	ld.ub	r9,r8[8]
800028ca:	30 28       	mov	r8,2
800028cc:	f0 09 18 00 	cp.b	r9,r8
800028d0:	c0 31       	brne	800028d6 <dip204_init+0x8a6>
    return false;
800028d2:	30 08       	mov	r8,0
800028d4:	c4 38       	rjmp	8000295a <dip204_init+0x92a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028d6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028da:	f1 39 00 08 	ld.ub	r9,r8[8]
800028de:	30 18       	mov	r8,1
800028e0:	f0 09 18 00 	cp.b	r9,r8
800028e4:	c0 31       	brne	800028ea <dip204_init+0x8ba>
    return true;
800028e6:	30 18       	mov	r8,1
800028e8:	c3 98       	rjmp	8000295a <dip204_init+0x92a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800028ea:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028ee:	70 09       	ld.w	r9,r8[0x0]
800028f0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028f4:	70 18       	ld.w	r8,r8[0x4]
800028f6:	10 39       	cp.w	r9,r8
800028f8:	e0 88 00 1a 	brls	8000292c <dip204_init+0x8fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800028fc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002900:	70 08       	ld.w	r8,r8[0x0]
80002902:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002906:	10 39       	cp.w	r9,r8
80002908:	c1 02       	brcc	80002928 <dip204_init+0x8f8>
8000290a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000290e:	70 18       	ld.w	r8,r8[0x4]
80002910:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002914:	10 39       	cp.w	r9,r8
80002916:	e0 88 00 09 	brls	80002928 <dip204_init+0x8f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000291a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000291e:	30 18       	mov	r8,1
80002920:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002924:	30 18       	mov	r8,1
80002926:	c1 a8       	rjmp	8000295a <dip204_init+0x92a>
    }
    return false;
80002928:	30 08       	mov	r8,0
8000292a:	c1 88       	rjmp	8000295a <dip204_init+0x92a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000292c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002930:	70 08       	ld.w	r8,r8[0x0]
80002932:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002936:	10 39       	cp.w	r9,r8
80002938:	c0 93       	brcs	8000294a <dip204_init+0x91a>
8000293a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000293e:	70 18       	ld.w	r8,r8[0x4]
80002940:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002944:	10 39       	cp.w	r9,r8
80002946:	e0 88 00 09 	brls	80002958 <dip204_init+0x928>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000294a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000294e:	30 18       	mov	r8,1
80002950:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002954:	30 18       	mov	r8,1
80002956:	c0 28       	rjmp	8000295a <dip204_init+0x92a>
    }
    return false;
80002958:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000295a:	58 08       	cp.w	r8,0
8000295c:	ca b0       	breq	800028b2 <dip204_init+0x882>
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
8000295e:	30 6c       	mov	r12,6
80002960:	f0 1f 00 68 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002964:	f0 1f 00 64 	mcall	80002af4 <dip204_init+0xac4>
80002968:	18 98       	mov	r8,r12
8000296a:	30 19       	mov	r9,1
8000296c:	ef 49 ff e4 	st.w	r7[-28],r9
80002970:	ef 48 ff e0 	st.w	r7[-32],r8
80002974:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002978:	ef 48 ff ec 	st.w	r7[-20],r8
8000297c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002980:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002984:	ee fa ff ec 	ld.w	r10,r7[-20]
80002988:	ef 4a fe b0 	st.w	r7[-336],r10
8000298c:	30 09       	mov	r9,0
8000298e:	ef 49 fe ac 	st.w	r7[-340],r9
80002992:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002996:	ef 48 fe a8 	st.w	r7[-344],r8
8000299a:	30 0c       	mov	r12,0
8000299c:	ef 4c fe a4 	st.w	r7[-348],r12
800029a0:	ee fa fe ac 	ld.w	r10,r7[-340]
800029a4:	ee fb fe a8 	ld.w	r11,r7[-344]
800029a8:	b7 3a       	mul	r10,r11
800029aa:	ee f8 fe a4 	ld.w	r8,r7[-348]
800029ae:	ee f9 fe b0 	ld.w	r9,r7[-336]
800029b2:	b3 38       	mul	r8,r9
800029b4:	10 0a       	add	r10,r8
800029b6:	ee fc fe b0 	ld.w	r12,r7[-336]
800029ba:	ee fb fe a8 	ld.w	r11,r7[-344]
800029be:	f8 0b 06 48 	mulu.d	r8,r12,r11
800029c2:	12 0a       	add	r10,r9
800029c4:	14 99       	mov	r9,r10
800029c6:	e0 6a 03 e7 	mov	r10,999
800029ca:	30 0b       	mov	r11,0
800029cc:	f0 0a 00 0a 	add	r10,r8,r10
800029d0:	f2 0b 00 4b 	adc	r11,r9,r11
800029d4:	e0 68 03 e8 	mov	r8,1000
800029d8:	30 09       	mov	r9,0
800029da:	f0 1f 00 48 	mcall	80002af8 <dip204_init+0xac8>
800029de:	14 98       	mov	r8,r10
800029e0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800029e2:	ef 48 ff f4 	st.w	r7[-12],r8
800029e6:	ee c8 00 fc 	sub	r8,r7,252
800029ea:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029ee:	e1 b8 00 42 	mfsr	r8,0x108
800029f2:	10 99       	mov	r9,r8
800029f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029f8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029fe:	70 09       	ld.w	r9,r8[0x0]
80002a00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a04:	10 09       	add	r9,r8
80002a06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a0a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a0c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002a10:	30 08       	mov	r8,0
80002a12:	f3 68 00 08 	st.b	r9[8],r8
80002a16:	ee c8 00 fc 	sub	r8,r7,252
80002a1a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a1e:	e1 b8 00 42 	mfsr	r8,0x108
80002a22:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a2a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a2e:	30 28       	mov	r8,2
80002a30:	f0 09 18 00 	cp.b	r9,r8
80002a34:	c0 31       	brne	80002a3a <dip204_init+0xa0a>
    return false;
80002a36:	30 08       	mov	r8,0
80002a38:	c4 38       	rjmp	80002abe <dip204_init+0xa8e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a3e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a42:	30 18       	mov	r8,1
80002a44:	f0 09 18 00 	cp.b	r9,r8
80002a48:	c0 31       	brne	80002a4e <dip204_init+0xa1e>
    return true;
80002a4a:	30 18       	mov	r8,1
80002a4c:	c3 98       	rjmp	80002abe <dip204_init+0xa8e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a52:	70 09       	ld.w	r9,r8[0x0]
80002a54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a58:	70 18       	ld.w	r8,r8[0x4]
80002a5a:	10 39       	cp.w	r9,r8
80002a5c:	e0 88 00 1a 	brls	80002a90 <dip204_init+0xa60>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a64:	70 08       	ld.w	r8,r8[0x0]
80002a66:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a6a:	10 39       	cp.w	r9,r8
80002a6c:	c1 02       	brcc	80002a8c <dip204_init+0xa5c>
80002a6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a72:	70 18       	ld.w	r8,r8[0x4]
80002a74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a78:	10 39       	cp.w	r9,r8
80002a7a:	e0 88 00 09 	brls	80002a8c <dip204_init+0xa5c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a82:	30 18       	mov	r8,1
80002a84:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a88:	30 18       	mov	r8,1
80002a8a:	c1 a8       	rjmp	80002abe <dip204_init+0xa8e>
    }
    return false;
80002a8c:	30 08       	mov	r8,0
80002a8e:	c1 88       	rjmp	80002abe <dip204_init+0xa8e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a94:	70 08       	ld.w	r8,r8[0x0]
80002a96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a9a:	10 39       	cp.w	r9,r8
80002a9c:	c0 93       	brcs	80002aae <dip204_init+0xa7e>
80002a9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002aa2:	70 18       	ld.w	r8,r8[0x4]
80002aa4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002aa8:	10 39       	cp.w	r9,r8
80002aaa:	e0 88 00 09 	brls	80002abc <dip204_init+0xa8c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002aae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ab2:	30 18       	mov	r8,1
80002ab4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ab8:	30 18       	mov	r8,1
80002aba:	c0 28       	rjmp	80002abe <dip204_init+0xa8e>
    }
    return false;
80002abc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002abe:	58 08       	cp.w	r8,0
80002ac0:	ca b0       	breq	80002a16 <dip204_init+0x9e6>
  dip204_wait_busy();
80002ac2:	f0 1f 00 11 	mcall	80002b04 <dip204_init+0xad4>
  // unselect chip
  dip204_unselect();
80002ac6:	f0 1f 00 11 	mcall	80002b08 <dip204_init+0xad8>
}
80002aca:	29 5d       	sub	sp,-428
80002acc:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002ad0:	00 00       	add	r0,r0
80002ad2:	00 08       	add	r8,r0
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	32 38       	mov	r8,35
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	36 5c       	mov	r12,101
80002adc:	00 00       	add	r0,r0
80002ade:	05 10       	ld.sh	r0,r2++
80002ae0:	00 00       	add	r0,r0
80002ae2:	05 14       	ld.sh	r4,r2++
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	36 f0       	mov	r0,111
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	37 78       	mov	r8,119
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	33 b0       	mov	r0,59
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	33 48       	mov	r8,52
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	20 18       	sub	r8,1
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	40 e0       	lddsp	r0,sp[0x38]
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	2e 08       	sub	r8,-32
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	2e 38       	sub	r8,-29
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	2f 1c       	sub	r12,-15
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	2e 20       	sub	r0,-30

80002b0c <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002b0c:	eb cd 40 80 	pushm	r7,lr
80002b10:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002b12:	f0 1f 00 08 	mcall	80002b30 <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b16:	e0 6c 00 f8 	mov	r12,248
80002b1a:	f0 1f 00 07 	mcall	80002b34 <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002b1e:	30 cc       	mov	r12,12
80002b20:	f0 1f 00 05 	mcall	80002b34 <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002b24:	f0 1f 00 05 	mcall	80002b38 <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002b28:	f0 1f 00 05 	mcall	80002b3c <dip204_hide_cursor+0x30>
}
80002b2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b30:	80 00       	ld.sh	r0,r0[0x0]
80002b32:	2e 08       	sub	r8,-32
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	2e 38       	sub	r8,-29
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	2f 1c       	sub	r12,-15
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	2e 20       	sub	r0,-30

80002b40 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002b40:	eb cd 40 80 	pushm	r7,lr
80002b44:	1a 97       	mov	r7,sp
80002b46:	20 3d       	sub	sp,12
80002b48:	18 99       	mov	r9,r12
80002b4a:	16 98       	mov	r8,r11
80002b4c:	ef 69 ff f8 	st.b	r7[-8],r9
80002b50:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002b54:	30 08       	mov	r8,0
80002b56:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002b5a:	f0 1f 00 18 	mcall	80002bb8 <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002b5e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002b62:	31 48       	mov	r8,20
80002b64:	f0 09 18 00 	cp.b	r9,r8
80002b68:	e0 8b 00 17 	brhi	80002b96 <dip204_set_cursor_position+0x56>
80002b6c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002b70:	30 48       	mov	r8,4
80002b72:	f0 09 18 00 	cp.b	r9,r8
80002b76:	e0 8b 00 10 	brhi	80002b96 <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002b7a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002b7e:	20 18       	sub	r8,1
80002b80:	5c 58       	castu.b	r8
80002b82:	a5 78       	lsl	r8,0x5
80002b84:	5c 58       	castu.b	r8
80002b86:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002b8a:	f2 08 00 08 	add	r8,r9,r8
80002b8e:	5c 58       	castu.b	r8
80002b90:	28 18       	sub	r8,-127
80002b92:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b96:	e0 6c 00 f8 	mov	r12,248
80002b9a:	f0 1f 00 09 	mcall	80002bbc <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002b9e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ba2:	10 9c       	mov	r12,r8
80002ba4:	f0 1f 00 06 	mcall	80002bbc <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002ba8:	f0 1f 00 06 	mcall	80002bc0 <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002bac:	f0 1f 00 06 	mcall	80002bc4 <dip204_set_cursor_position+0x84>
}
80002bb0:	2f dd       	sub	sp,-12
80002bb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bb6:	00 00       	add	r0,r0
80002bb8:	80 00       	ld.sh	r0,r0[0x0]
80002bba:	2e 08       	sub	r8,-32
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	2e 38       	sub	r8,-29
80002bc0:	80 00       	ld.sh	r0,r0[0x0]
80002bc2:	2f 1c       	sub	r12,-15
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	2e 20       	sub	r0,-30

80002bc8 <dip204_clear_display>:


void dip204_clear_display(void)
{
80002bc8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002bcc:	1a 97       	mov	r7,sp
80002bce:	20 bd       	sub	sp,44
  dip204_select();
80002bd0:	f0 1f 00 57 	mcall	80002d2c <dip204_clear_display+0x164>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002bd4:	e0 6c 00 f8 	mov	r12,248
80002bd8:	f0 1f 00 56 	mcall	80002d30 <dip204_clear_display+0x168>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002bdc:	30 1c       	mov	r12,1
80002bde:	f0 1f 00 55 	mcall	80002d30 <dip204_clear_display+0x168>
  /* Wait for command execution */
  delay_ms(4);
80002be2:	f0 1f 00 55 	mcall	80002d34 <dip204_clear_display+0x16c>
80002be6:	18 98       	mov	r8,r12
80002be8:	30 49       	mov	r9,4
80002bea:	ef 49 ff e4 	st.w	r7[-28],r9
80002bee:	ef 48 ff e0 	st.w	r7[-32],r8
80002bf2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002bf6:	ef 48 ff ec 	st.w	r7[-20],r8
80002bfa:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002bfe:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002c02:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002c06:	30 01       	mov	r1,0
80002c08:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002c0c:	30 03       	mov	r3,0
80002c0e:	e2 02 02 4a 	mul	r10,r1,r2
80002c12:	e6 00 02 48 	mul	r8,r3,r0
80002c16:	10 0a       	add	r10,r8
80002c18:	e0 02 06 48 	mulu.d	r8,r0,r2
80002c1c:	12 0a       	add	r10,r9
80002c1e:	14 99       	mov	r9,r10
80002c20:	e0 6a 03 e7 	mov	r10,999
80002c24:	30 0b       	mov	r11,0
80002c26:	f0 0a 00 0a 	add	r10,r8,r10
80002c2a:	f2 0b 00 4b 	adc	r11,r9,r11
80002c2e:	e0 68 03 e8 	mov	r8,1000
80002c32:	30 09       	mov	r9,0
80002c34:	f0 1f 00 41 	mcall	80002d38 <dip204_clear_display+0x170>
80002c38:	14 98       	mov	r8,r10
80002c3a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002c3c:	ef 48 ff f4 	st.w	r7[-12],r8
80002c40:	ee c8 00 2c 	sub	r8,r7,44
80002c44:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c48:	e1 b8 00 42 	mfsr	r8,0x108
80002c4c:	10 99       	mov	r9,r8
80002c4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c52:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c54:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c58:	70 09       	ld.w	r9,r8[0x0]
80002c5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c5e:	10 09       	add	r9,r8
80002c60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c64:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002c66:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002c6a:	30 08       	mov	r8,0
80002c6c:	f3 68 00 08 	st.b	r9[8],r8
80002c70:	ee c8 00 2c 	sub	r8,r7,44
80002c74:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c78:	e1 b8 00 42 	mfsr	r8,0x108
80002c7c:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c84:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c88:	30 28       	mov	r8,2
80002c8a:	f0 09 18 00 	cp.b	r9,r8
80002c8e:	c0 31       	brne	80002c94 <dip204_clear_display+0xcc>
    return false;
80002c90:	30 08       	mov	r8,0
80002c92:	c4 38       	rjmp	80002d18 <dip204_clear_display+0x150>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c98:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c9c:	30 18       	mov	r8,1
80002c9e:	f0 09 18 00 	cp.b	r9,r8
80002ca2:	c0 31       	brne	80002ca8 <dip204_clear_display+0xe0>
    return true;
80002ca4:	30 18       	mov	r8,1
80002ca6:	c3 98       	rjmp	80002d18 <dip204_clear_display+0x150>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ca8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cac:	70 09       	ld.w	r9,r8[0x0]
80002cae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cb2:	70 18       	ld.w	r8,r8[0x4]
80002cb4:	10 39       	cp.w	r9,r8
80002cb6:	e0 88 00 1a 	brls	80002cea <dip204_clear_display+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cbe:	70 08       	ld.w	r8,r8[0x0]
80002cc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cc4:	10 39       	cp.w	r9,r8
80002cc6:	c1 02       	brcc	80002ce6 <dip204_clear_display+0x11e>
80002cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ccc:	70 18       	ld.w	r8,r8[0x4]
80002cce:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cd2:	10 39       	cp.w	r9,r8
80002cd4:	e0 88 00 09 	brls	80002ce6 <dip204_clear_display+0x11e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002cd8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cdc:	30 18       	mov	r8,1
80002cde:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ce2:	30 18       	mov	r8,1
80002ce4:	c1 a8       	rjmp	80002d18 <dip204_clear_display+0x150>
    }
    return false;
80002ce6:	30 08       	mov	r8,0
80002ce8:	c1 88       	rjmp	80002d18 <dip204_clear_display+0x150>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cee:	70 08       	ld.w	r8,r8[0x0]
80002cf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cf4:	10 39       	cp.w	r9,r8
80002cf6:	c0 93       	brcs	80002d08 <dip204_clear_display+0x140>
80002cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfc:	70 18       	ld.w	r8,r8[0x4]
80002cfe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d02:	10 39       	cp.w	r9,r8
80002d04:	e0 88 00 09 	brls	80002d16 <dip204_clear_display+0x14e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d0c:	30 18       	mov	r8,1
80002d0e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d12:	30 18       	mov	r8,1
80002d14:	c0 28       	rjmp	80002d18 <dip204_clear_display+0x150>
    }
    return false;
80002d16:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002d18:	58 08       	cp.w	r8,0
80002d1a:	ca b0       	breq	80002c70 <dip204_clear_display+0xa8>
  dip204_wait_busy();
80002d1c:	f0 1f 00 08 	mcall	80002d3c <dip204_clear_display+0x174>
  dip204_unselect();
80002d20:	f0 1f 00 08 	mcall	80002d40 <dip204_clear_display+0x178>
}
80002d24:	2f 5d       	sub	sp,-44
80002d26:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002d2a:	00 00       	add	r0,r0
80002d2c:	80 00       	ld.sh	r0,r0[0x0]
80002d2e:	2e 08       	sub	r8,-32
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	2e 38       	sub	r8,-29
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	20 18       	sub	r8,1
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	40 e0       	lddsp	r0,sp[0x38]
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	2f 1c       	sub	r12,-15
80002d40:	80 00       	ld.sh	r0,r0[0x0]
80002d42:	2e 20       	sub	r0,-30

80002d44 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002d44:	eb cd 40 80 	pushm	r7,lr
80002d48:	1a 97       	mov	r7,sp
80002d4a:	20 9d       	sub	sp,36
80002d4c:	ee c9 ff f8 	sub	r9,r7,-8
80002d50:	ef 4c ff dc 	st.w	r7[-36],r12
  va_list arg;
  char string[21];
  unsigned char i=0;
80002d54:	30 08       	mov	r8,0
80002d56:	ef 68 ff ff 	st.b	r7[-1],r8

  va_start(arg, format);
80002d5a:	f2 c8 00 00 	sub	r8,r9,0
80002d5e:	ef 48 ff f8 	st.w	r7[-8],r8
  i = vsprintf(string, format, arg);
80002d62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d66:	ee c8 00 20 	sub	r8,r7,32
80002d6a:	12 9a       	mov	r10,r9
80002d6c:	ee fb ff dc 	ld.w	r11,r7[-36]
80002d70:	10 9c       	mov	r12,r8
80002d72:	f0 1f 00 21 	mcall	80002df4 <dip204_printf_string+0xb0>
80002d76:	18 98       	mov	r8,r12
80002d78:	ef 68 ff ff 	st.b	r7[-1],r8
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002d7c:	c0 d8       	rjmp	80002d96 <dip204_printf_string+0x52>
80002d7e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d82:	ee 08 00 09 	add	r9,r7,r8
80002d86:	30 08       	mov	r8,0
80002d88:	f3 68 ff e0 	st.b	r9[-32],r8
80002d8c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d90:	2f f8       	sub	r8,-1
80002d92:	ef 68 ff ff 	st.b	r7[-1],r8
80002d96:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002d9a:	31 38       	mov	r8,19
80002d9c:	f0 09 18 00 	cp.b	r9,r8
80002da0:	fe 98 ff ef 	brls	80002d7e <dip204_printf_string+0x3a>
  va_end(arg);
  dip204_select();
80002da4:	f0 1f 00 15 	mcall	80002df8 <dip204_printf_string+0xb4>
  /* for all chars in string */
  i = 0;
80002da8:	30 08       	mov	r8,0
80002daa:	ef 68 ff ff 	st.b	r7[-1],r8
  while(string[i]!='\0')
80002dae:	c1 58       	rjmp	80002dd8 <dip204_printf_string+0x94>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002db0:	e0 6c 00 fa 	mov	r12,250
80002db4:	f0 1f 00 12 	mcall	80002dfc <dip204_printf_string+0xb8>
    /* Send byte */
    dip204_write_byte(string[i]);
80002db8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002dbc:	ee 08 00 08 	add	r8,r7,r8
80002dc0:	f1 38 ff e0 	ld.ub	r8,r8[-32]
80002dc4:	10 9c       	mov	r12,r8
80002dc6:	f0 1f 00 0e 	mcall	80002dfc <dip204_printf_string+0xb8>
    /* go to next char */
    i++;
80002dca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002dce:	2f f8       	sub	r8,-1
80002dd0:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002dd4:	f0 1f 00 0b 	mcall	80002e00 <dip204_printf_string+0xbc>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002dd8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ddc:	ee 08 00 08 	add	r8,r7,r8
80002de0:	f1 38 ff e0 	ld.ub	r8,r8[-32]
80002de4:	58 08       	cp.w	r8,0
80002de6:	ce 51       	brne	80002db0 <dip204_printf_string+0x6c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002de8:	f0 1f 00 07 	mcall	80002e04 <dip204_printf_string+0xc0>
}
80002dec:	2f 7d       	sub	sp,-36
80002dee:	e3 cd 80 80 	ldm	sp++,r7,pc
80002df2:	00 00       	add	r0,r0
80002df4:	80 00       	ld.sh	r0,r0[0x0]
80002df6:	44 b8       	lddsp	r8,sp[0x12c]
80002df8:	80 00       	ld.sh	r0,r0[0x0]
80002dfa:	2e 08       	sub	r8,-32
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	2e 38       	sub	r8,-29
80002e00:	80 00       	ld.sh	r0,r0[0x0]
80002e02:	2f 1c       	sub	r12,-15
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	2e 20       	sub	r0,-30

80002e08 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002e08:	eb cd 40 80 	pushm	r7,lr
80002e0c:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002e0e:	30 2b       	mov	r11,2
80002e10:	fe 7c 28 00 	mov	r12,-55296
80002e14:	f0 1f 00 02 	mcall	80002e1c <dip204_select+0x14>
}
80002e18:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e1c:	80 00       	ld.sh	r0,r0[0x0]
80002e1e:	39 1e       	mov	lr,-111

80002e20 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002e20:	eb cd 40 80 	pushm	r7,lr
80002e24:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002e26:	30 2b       	mov	r11,2
80002e28:	fe 7c 28 00 	mov	r12,-55296
80002e2c:	f0 1f 00 02 	mcall	80002e34 <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002e30:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e34:	80 00       	ld.sh	r0,r0[0x0]
80002e36:	39 b6       	mov	r6,-101

80002e38 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002e38:	eb cd 40 80 	pushm	r7,lr
80002e3c:	1a 97       	mov	r7,sp
80002e3e:	20 3d       	sub	sp,12
80002e40:	18 98       	mov	r8,r12
80002e42:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002e46:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e4a:	f0 c8 00 f8 	sub	r8,r8,248
80002e4e:	58 68       	cp.w	r8,6
80002e50:	e0 8b 00 10 	brhi	80002e70 <dip204_write_byte+0x38>
80002e54:	30 19       	mov	r9,1
80002e56:	f2 08 09 48 	lsl	r8,r9,r8
80002e5a:	e2 18 00 55 	andl	r8,0x55,COH
80002e5e:	c0 90       	breq	80002e70 <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002e60:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e64:	10 9b       	mov	r11,r8
80002e66:	fe 7c 28 00 	mov	r12,-55296
80002e6a:	f0 1f 00 15 	mcall	80002ebc <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002e6e:	c2 48       	rjmp	80002eb6 <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002e70:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e74:	ef 48 ff fc 	st.w	r7[-4],r8
80002e78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e7c:	5c 98       	brev	r8
80002e7e:	ef 48 ff fc 	st.w	r7[-4],r8
80002e82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e86:	b9 88       	lsr	r8,0x18
80002e88:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002e8c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e90:	e2 18 00 f0 	andl	r8,0xf0,COH
80002e94:	10 9b       	mov	r11,r8
80002e96:	fe 7c 28 00 	mov	r12,-55296
80002e9a:	f0 1f 00 09 	mcall	80002ebc <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002e9e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002ea2:	a5 68       	lsl	r8,0x4
80002ea4:	5c 88       	casts.h	r8
80002ea6:	5c 78       	castu.h	r8
80002ea8:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002eac:	10 9b       	mov	r11,r8
80002eae:	fe 7c 28 00 	mov	r12,-55296
80002eb2:	f0 1f 00 03 	mcall	80002ebc <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002eb6:	2f dd       	sub	sp,-12
80002eb8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ebc:	80 00       	ld.sh	r0,r0[0x0]
80002ebe:	3b be       	mov	lr,-69

80002ec0 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002ec0:	eb cd 40 80 	pushm	r7,lr
80002ec4:	1a 97       	mov	r7,sp
80002ec6:	20 3d       	sub	sp,12
80002ec8:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80002ecc:	30 08       	mov	r8,0
80002ece:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002ed2:	30 0b       	mov	r11,0
80002ed4:	fe 7c 28 00 	mov	r12,-55296
80002ed8:	f0 1f 00 0f 	mcall	80002f14 <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002edc:	ee c8 00 06 	sub	r8,r7,6
80002ee0:	10 9b       	mov	r11,r8
80002ee2:	fe 7c 28 00 	mov	r12,-55296
80002ee6:	f0 1f 00 0d 	mcall	80002f18 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002eea:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002eee:	5c 58       	castu.b	r8
80002ef0:	ef 48 ff fc 	st.w	r7[-4],r8
80002ef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ef8:	5c 98       	brev	r8
80002efa:	ef 48 ff fc 	st.w	r7[-4],r8
80002efe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f02:	b9 88       	lsr	r8,0x18
80002f04:	5c 58       	castu.b	r8
80002f06:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002f0a:	b2 88       	st.b	r9[0x0],r8
}
80002f0c:	2f dd       	sub	sp,-12
80002f0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f12:	00 00       	add	r0,r0
80002f14:	80 00       	ld.sh	r0,r0[0x0]
80002f16:	3b be       	mov	lr,-69
80002f18:	80 00       	ld.sh	r0,r0[0x0]
80002f1a:	3c 16       	mov	r6,-63

80002f1c <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002f1c:	eb cd 40 80 	pushm	r7,lr
80002f20:	1a 97       	mov	r7,sp
80002f22:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002f24:	30 08       	mov	r8,0
80002f26:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002f2a:	e0 6c 00 fc 	mov	r12,252
80002f2e:	f0 1f 00 09 	mcall	80002f50 <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002f32:	ee c8 00 01 	sub	r8,r7,1
80002f36:	10 9c       	mov	r12,r8
80002f38:	f0 1f 00 07 	mcall	80002f54 <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80002f3c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f40:	10 99       	mov	r9,r8
80002f42:	30 08       	mov	r8,0
80002f44:	f0 09 18 00 	cp.b	r9,r8
80002f48:	cf 55       	brlt	80002f32 <dip204_wait_busy+0x16>
}
80002f4a:	2f fd       	sub	sp,-4
80002f4c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f50:	80 00       	ld.sh	r0,r0[0x0]
80002f52:	2e 38       	sub	r8,-29
80002f54:	80 00       	ld.sh	r0,r0[0x0]
80002f56:	2e c0       	sub	r0,-20

80002f58 <adc_configure>:
 * If not called, ADC channels will have side effects
 *
 * \param *adc Base address of the ADC
 */
void adc_configure(volatile avr32_adc_t *adc)
{
80002f58:	eb cd 40 80 	pushm	r7,lr
80002f5c:	1a 97       	mov	r7,sp
80002f5e:	20 1d       	sub	sp,4
80002f60:	ef 4c ff fc 	st.w	r7[-4],r12
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80002f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f68:	70 18       	ld.w	r8,r8[0x4]
80002f6a:	10 99       	mov	r9,r8
80002f6c:	ea 19 0f 00 	orh	r9,0xf00
80002f70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f74:	91 19       	st.w	r8[0x4],r9

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002f76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f7a:	70 18       	ld.w	r8,r8[0x4]
80002f7c:	10 99       	mov	r9,r8
80002f7e:	ea 19 00 1f 	orh	r9,0x1f
80002f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f86:	91 19       	st.w	r8[0x4],r9
}
80002f88:	2f fd       	sub	sp,-4
80002f8a:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f8e <adc_start>:

/** \brief Start analog to digital conversion
 * \param *adc Base address of the ADC
 */
void adc_start(volatile avr32_adc_t *adc)
{
80002f8e:	eb cd 40 80 	pushm	r7,lr
80002f92:	1a 97       	mov	r7,sp
80002f94:	20 1d       	sub	sp,4
80002f96:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
80002f9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f9e:	30 29       	mov	r9,2
80002fa0:	91 09       	st.w	r8[0x0],r9
}
80002fa2:	2f fd       	sub	sp,-4
80002fa4:	e3 cd 80 80 	ldm	sp++,r7,pc

80002fa8 <adc_enable>:
 *
 * \param *adc Base address of the ADC
 * \param  channel   channel to enable (0 to 7)
 */
void adc_enable(volatile avr32_adc_t *adc, uint16_t channel)
{
80002fa8:	eb cd 40 80 	pushm	r7,lr
80002fac:	1a 97       	mov	r7,sp
80002fae:	20 2d       	sub	sp,8
80002fb0:	ef 4c ff fc 	st.w	r7[-4],r12
80002fb4:	16 98       	mov	r8,r11
80002fb6:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002fba:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002fbe:	30 19       	mov	r9,1
80002fc0:	f2 08 09 48 	lsl	r8,r9,r8
80002fc4:	10 99       	mov	r9,r8
80002fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fca:	91 49       	st.w	r8[0x10],r9
}
80002fcc:	2f ed       	sub	sp,-8
80002fce:	e3 cd 80 80 	ldm	sp++,r7,pc

80002fd2 <adc_check_eoc>:
 * \param  channel   channel to check (0 to 7)
 * \return bool      true if conversion not running
 *                   false if conversion running
 */
bool adc_check_eoc(volatile avr32_adc_t *adc, uint16_t channel)
{
80002fd2:	eb cd 40 80 	pushm	r7,lr
80002fd6:	1a 97       	mov	r7,sp
80002fd8:	20 2d       	sub	sp,8
80002fda:	ef 4c ff fc 	st.w	r7[-4],r12
80002fde:	16 98       	mov	r8,r11
80002fe0:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002fe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fe8:	70 79       	ld.w	r9,r8[0x1c]
80002fea:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002fee:	30 1a       	mov	r10,1
80002ff0:	f4 08 09 48 	lsl	r8,r10,r8
80002ff4:	f3 e8 00 08 	and	r8,r9,r8
80002ff8:	5f 18       	srne	r8
80002ffa:	5c 58       	castu.b	r8
}
80002ffc:	10 9c       	mov	r12,r8
80002ffe:	2f ed       	sub	sp,-8
80003000:	e3 cd 80 80 	ldm	sp++,r7,pc

80003004 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80003004:	eb cd 40 80 	pushm	r7,lr
80003008:	1a 97       	mov	r7,sp
8000300a:	20 2d       	sub	sp,8
8000300c:	ef 4c ff fc 	st.w	r7[-4],r12
80003010:	16 98       	mov	r8,r11
80003012:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80003016:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000301a:	10 9b       	mov	r11,r8
8000301c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003020:	f0 1f 00 0b 	mcall	8000304c <adc_get_value+0x48>
80003024:	18 98       	mov	r8,r12
80003026:	ec 18 00 01 	eorl	r8,0x1
8000302a:	5c 58       	castu.b	r8
8000302c:	cf 51       	brne	80003016 <adc_get_value+0x12>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
8000302e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003032:	f0 c9 ff d0 	sub	r9,r8,-48
80003036:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000303a:	a3 68       	lsl	r8,0x2
8000303c:	f2 08 00 08 	add	r8,r9,r8
80003040:	70 08       	ld.w	r8,r8[0x0]
}
80003042:	10 9c       	mov	r12,r8
80003044:	2f ed       	sub	sp,-8
80003046:	e3 cd 80 80 	ldm	sp++,r7,pc
8000304a:	00 00       	add	r0,r0
8000304c:	80 00       	ld.sh	r0,r0[0x0]
8000304e:	2f d2       	sub	r2,-3

80003050 <LED_Set_Intensity>:
           AVR32_PWM.channel[led_descriptor->PWM.CHANNEL].cdty : 0;
}


void LED_Set_Intensity(U32 leds, U8 intensity)
{
80003050:	eb cd 40 80 	pushm	r7,lr
80003054:	1a 97       	mov	r7,sp
80003056:	20 6d       	sub	sp,24
80003058:	ef 4c ff ec 	st.w	r7[-20],r12
8000305c:	16 98       	mov	r8,r11
8000305e:	ef 68 ff e8 	st.b	r7[-24],r8
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80003062:	4d 98       	lddpc	r8,800031c4 <LED_Set_Intensity+0x174>
80003064:	21 08       	sub	r8,16
80003066:	ef 48 ff f0 	st.w	r7[-16],r8
  volatile avr32_pwm_channel_t *led_pwm_channel;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
8000306a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000306e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80003072:	ef 48 ff ec 	st.w	r7[-20],r8
80003076:	c9 e8       	rjmp	800031b2 <LED_Set_Intensity+0x162>
  {
    // Select the next specified LED and check that it has a PWM channel.
    led_shift = 1 + ctz(leds);
80003078:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000307c:	58 08       	cp.w	r8,0
8000307e:	c0 a0       	breq	80003092 <LED_Set_Intensity+0x42>
80003080:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003084:	5c 98       	brev	r8
80003086:	f0 08 12 00 	clz	r8,r8
8000308a:	5c 58       	castu.b	r8
8000308c:	2f f8       	sub	r8,-1
8000308e:	5c 58       	castu.b	r8
80003090:	c0 28       	rjmp	80003094 <LED_Set_Intensity+0x44>
80003092:	32 18       	mov	r8,33
80003094:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80003098:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000309c:	a5 68       	lsl	r8,0x4
8000309e:	ee f9 ff f0 	ld.w	r9,r7[-16]
800030a2:	f2 08 00 08 	add	r8,r9,r8
800030a6:	ef 48 ff f0 	st.w	r7[-16],r8
    if (led_descriptor->PWM.CHANNEL < 0) continue;
800030aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030ae:	70 28       	ld.w	r8,r8[0x8]
800030b0:	58 08       	cp.w	r8,0
800030b2:	c7 75       	brlt	800031a0 <LED_Set_Intensity+0x150>

    // Initialize or update the LED PWM channel.
    led_pwm_channel = &AVR32_PWM.channel[led_descriptor->PWM.CHANNEL];
800030b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030b8:	70 28       	ld.w	r8,r8[0x8]
800030ba:	a5 78       	lsl	r8,0x5
800030bc:	e0 28 ce 00 	sub	r8,52736
800030c0:	ef 48 ff f4 	st.w	r7[-12],r8
    if (!(AVR32_PWM.sr & (1 << led_descriptor->PWM.CHANNEL)))
800030c4:	fe 78 30 00 	mov	r8,-53248
800030c8:	70 39       	ld.w	r9,r8[0xc]
800030ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800030ce:	70 28       	ld.w	r8,r8[0x8]
800030d0:	30 1a       	mov	r10,1
800030d2:	f4 08 09 48 	lsl	r8,r10,r8
800030d6:	f3 e8 00 08 	and	r8,r9,r8
800030da:	c1 91       	brne	8000310c <LED_Set_Intensity+0xbc>
    {
      led_pwm_channel->cmr = (AVR32_PWM_CPRE_MCK << AVR32_PWM_CPRE_OFFSET) &
800030dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030e0:	30 09       	mov	r9,0
800030e2:	91 09       	st.w	r8[0x0],r9
                             ~(AVR32_PWM_CALG_MASK |
                               AVR32_PWM_CPOL_MASK |
                               AVR32_PWM_CPD_MASK);
      led_pwm_channel->cprd = 0x000000FF;
800030e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030e8:	e0 69 00 ff 	mov	r9,255
800030ec:	91 29       	st.w	r8[0x8],r9
      led_pwm_channel->cdty = intensity;
800030ee:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800030f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030f6:	91 19       	st.w	r8[0x4],r9
      AVR32_PWM.ena = 1 << led_descriptor->PWM.CHANNEL;
800030f8:	fe 78 30 00 	mov	r8,-53248
800030fc:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003100:	72 29       	ld.w	r9,r9[0x8]
80003102:	30 1a       	mov	r10,1
80003104:	f4 09 09 49 	lsl	r9,r10,r9
80003108:	91 19       	st.w	r8[0x4],r9
8000310a:	c1 58       	rjmp	80003134 <LED_Set_Intensity+0xe4>
    }
    else
    {
      AVR32_PWM.isr;
8000310c:	fe 78 30 00 	mov	r8,-53248
80003110:	70 78       	ld.w	r8,r8[0x1c]
      while (!(AVR32_PWM.isr & (1 << led_descriptor->PWM.CHANNEL)));
80003112:	fe 78 30 00 	mov	r8,-53248
80003116:	70 79       	ld.w	r9,r8[0x1c]
80003118:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000311c:	70 28       	ld.w	r8,r8[0x8]
8000311e:	30 1a       	mov	r10,1
80003120:	f4 08 09 48 	lsl	r8,r10,r8
80003124:	f3 e8 00 08 	and	r8,r9,r8
80003128:	cf 50       	breq	80003112 <LED_Set_Intensity+0xc2>
      led_pwm_channel->cupd = intensity;
8000312a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000312e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003132:	91 49       	st.w	r8[0x10],r9
    }

    // Switch the LED pin to its PWM function.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80003134:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003138:	70 08       	ld.w	r8,r8[0x0]
8000313a:	a9 68       	lsl	r8,0x8
8000313c:	e0 28 f0 00 	sub	r8,61440
80003140:	ef 48 ff f8 	st.w	r7[-8],r8
    if (led_descriptor->PWM.FUNCTION & 0x1)
80003144:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003148:	70 38       	ld.w	r8,r8[0xc]
8000314a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000314e:	5c 58       	castu.b	r8
80003150:	c0 80       	breq	80003160 <LED_Set_Intensity+0x110>
    {
      led_gpio_port->pmr0s = led_descriptor->GPIO.PIN_MASK;
80003152:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003156:	70 19       	ld.w	r9,r8[0x4]
80003158:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000315c:	91 59       	st.w	r8[0x14],r9
8000315e:	c0 78       	rjmp	8000316c <LED_Set_Intensity+0x11c>
    }
    else
    {
      led_gpio_port->pmr0c = led_descriptor->GPIO.PIN_MASK;
80003160:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003164:	70 19       	ld.w	r9,r8[0x4]
80003166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000316a:	91 69       	st.w	r8[0x18],r9
    }
    if (led_descriptor->PWM.FUNCTION & 0x2)
8000316c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003170:	70 38       	ld.w	r8,r8[0xc]
80003172:	e2 18 00 02 	andl	r8,0x2,COH
80003176:	c0 80       	breq	80003186 <LED_Set_Intensity+0x136>
    {
      led_gpio_port->pmr1s = led_descriptor->GPIO.PIN_MASK;
80003178:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000317c:	70 19       	ld.w	r9,r8[0x4]
8000317e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003182:	91 99       	st.w	r8[0x24],r9
80003184:	c0 78       	rjmp	80003192 <LED_Set_Intensity+0x142>
    }
    else
    {
      led_gpio_port->pmr1c = led_descriptor->GPIO.PIN_MASK;
80003186:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000318a:	70 19       	ld.w	r9,r8[0x4]
8000318c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003190:	91 a9       	st.w	r8[0x28],r9
    }
    led_gpio_port->gperc = led_descriptor->GPIO.PIN_MASK;
80003192:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003196:	70 19       	ld.w	r9,r8[0x4]
80003198:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000319c:	91 29       	st.w	r8[0x8],r9
8000319e:	c0 28       	rjmp	800031a2 <LED_Set_Intensity+0x152>
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
  {
    // Select the next specified LED and check that it has a PWM channel.
    led_shift = 1 + ctz(leds);
    led_descriptor += led_shift;
    if (led_descriptor->PWM.CHANNEL < 0) continue;
800031a0:	d7 03       	nop
  volatile avr32_pwm_channel_t *led_pwm_channel;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
800031a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800031a6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800031aa:	f2 08 0a 48 	lsr	r8,r9,r8
800031ae:	ef 48 ff ec 	st.w	r7[-20],r8
800031b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800031b6:	58 08       	cp.w	r8,0
800031b8:	fe 91 ff 60 	brne	80003078 <LED_Set_Intensity+0x28>
    {
      led_gpio_port->pmr1c = led_descriptor->GPIO.PIN_MASK;
    }
    led_gpio_port->gperc = led_descriptor->GPIO.PIN_MASK;
  }
}
800031bc:	2f ad       	sub	sp,-24
800031be:	e3 cd 80 80 	ldm	sp++,r7,pc
800031c2:	00 00       	add	r0,r0
800031c4:	80 00       	ld.sh	r0,r0[0x0]
800031c6:	9c 00       	ld.sh	r0,lr[0x0]

800031c8 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800031c8:	eb cd 40 80 	pushm	r7,lr
800031cc:	1a 97       	mov	r7,sp
800031ce:	20 4d       	sub	sp,16
800031d0:	ef 4c ff f4 	st.w	r7[-12],r12
800031d4:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
800031d8:	30 08       	mov	r8,0
800031da:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800031de:	30 08       	mov	r8,0
800031e0:	ef 48 ff fc 	st.w	r7[-4],r8
800031e4:	c1 c8       	rjmp	8000321c <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800031e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031ea:	70 19       	ld.w	r9,r8[0x4]
800031ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031f0:	70 08       	ld.w	r8,r8[0x0]
800031f2:	12 9b       	mov	r11,r9
800031f4:	10 9c       	mov	r12,r8
800031f6:	f0 1f 00 10 	mcall	80003234 <gpio_enable_module+0x6c>
800031fa:	18 98       	mov	r8,r12
800031fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003200:	f3 e8 10 08 	or	r8,r9,r8
80003204:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80003208:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000320c:	2f 88       	sub	r8,-8
8000320e:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003212:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003216:	2f f8       	sub	r8,-1
80003218:	ef 48 ff fc 	st.w	r7[-4],r8
8000321c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003220:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003224:	10 39       	cp.w	r9,r8
80003226:	ce 03       	brcs	800031e6 <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80003228:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000322c:	10 9c       	mov	r12,r8
8000322e:	2f cd       	sub	sp,-16
80003230:	e3 cd 80 80 	ldm	sp++,r7,pc
80003234:	80 00       	ld.sh	r0,r0[0x0]
80003236:	32 38       	mov	r8,35

80003238 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80003238:	eb cd 40 80 	pushm	r7,lr
8000323c:	1a 97       	mov	r7,sp
8000323e:	20 3d       	sub	sp,12
80003240:	ef 4c ff f8 	st.w	r7[-8],r12
80003244:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003248:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000324c:	a5 98       	lsr	r8,0x5
8000324e:	a9 68       	lsl	r8,0x8
80003250:	e0 28 f0 00 	sub	r8,61440
80003254:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80003258:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000325c:	58 18       	cp.w	r8,1
8000325e:	c1 e0       	breq	8000329a <gpio_enable_module_pin+0x62>
80003260:	c0 63       	brcs	8000326c <gpio_enable_module_pin+0x34>
80003262:	58 28       	cp.w	r8,2
80003264:	c3 20       	breq	800032c8 <gpio_enable_module_pin+0x90>
80003266:	58 38       	cp.w	r8,3
80003268:	c4 70       	breq	800032f6 <gpio_enable_module_pin+0xbe>
8000326a:	c5 d8       	rjmp	80003324 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000326c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003270:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003274:	30 19       	mov	r9,1
80003276:	f2 08 09 48 	lsl	r8,r9,r8
8000327a:	10 99       	mov	r9,r8
8000327c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003280:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003282:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003286:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000328a:	30 19       	mov	r9,1
8000328c:	f2 08 09 48 	lsl	r8,r9,r8
80003290:	10 99       	mov	r9,r8
80003292:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003296:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003298:	c4 88       	rjmp	80003328 <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000329a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000329e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032a2:	30 19       	mov	r9,1
800032a4:	f2 08 09 48 	lsl	r8,r9,r8
800032a8:	10 99       	mov	r9,r8
800032aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032ae:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800032b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032b8:	30 19       	mov	r9,1
800032ba:	f2 08 09 48 	lsl	r8,r9,r8
800032be:	10 99       	mov	r9,r8
800032c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032c4:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800032c6:	c3 18       	rjmp	80003328 <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800032c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032d0:	30 19       	mov	r9,1
800032d2:	f2 08 09 48 	lsl	r8,r9,r8
800032d6:	10 99       	mov	r9,r8
800032d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032dc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800032de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032e6:	30 19       	mov	r9,1
800032e8:	f2 08 09 48 	lsl	r8,r9,r8
800032ec:	10 99       	mov	r9,r8
800032ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032f2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800032f4:	c1 a8       	rjmp	80003328 <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800032f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032fa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800032fe:	30 19       	mov	r9,1
80003300:	f2 08 09 48 	lsl	r8,r9,r8
80003304:	10 99       	mov	r9,r8
80003306:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000330a:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000330c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003310:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003314:	30 19       	mov	r9,1
80003316:	f2 08 09 48 	lsl	r8,r9,r8
8000331a:	10 99       	mov	r9,r8
8000331c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003320:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003322:	c0 38       	rjmp	80003328 <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80003324:	30 18       	mov	r8,1
80003326:	c0 d8       	rjmp	80003340 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000332c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003330:	30 19       	mov	r9,1
80003332:	f2 08 09 48 	lsl	r8,r9,r8
80003336:	10 99       	mov	r9,r8
80003338:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000333c:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
8000333e:	30 08       	mov	r8,0
}
80003340:	10 9c       	mov	r12,r8
80003342:	2f dd       	sub	sp,-12
80003344:	e3 cd 80 80 	ldm	sp++,r7,pc

80003348 <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
80003348:	eb cd 40 80 	pushm	r7,lr
8000334c:	1a 97       	mov	r7,sp
8000334e:	20 2d       	sub	sp,8
80003350:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003358:	a5 98       	lsr	r8,0x5
8000335a:	a9 68       	lsl	r8,0x8
8000335c:	e0 28 f0 00 	sub	r8,61440
80003360:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003364:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003368:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000336c:	30 19       	mov	r9,1
8000336e:	f2 08 09 48 	lsl	r8,r9,r8
80003372:	10 99       	mov	r9,r8
80003374:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003378:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
8000337c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003380:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003384:	30 19       	mov	r9,1
80003386:	f2 08 09 48 	lsl	r8,r9,r8
8000338a:	10 99       	mov	r9,r8
8000338c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003390:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003394:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003398:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000339c:	30 19       	mov	r9,1
8000339e:	f2 08 09 48 	lsl	r8,r9,r8
800033a2:	10 99       	mov	r9,r8
800033a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033a8:	91 19       	st.w	r8[0x4],r9
}
800033aa:	2f ed       	sub	sp,-8
800033ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800033b0 <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
800033b0:	eb cd 40 80 	pushm	r7,lr
800033b4:	1a 97       	mov	r7,sp
800033b6:	20 2d       	sub	sp,8
800033b8:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800033bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c0:	a5 98       	lsr	r8,0x5
800033c2:	a9 68       	lsl	r8,0x8
800033c4:	e0 28 f0 00 	sub	r8,61440
800033c8:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800033cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800033d4:	30 19       	mov	r9,1
800033d6:	f2 08 09 48 	lsl	r8,r9,r8
800033da:	10 99       	mov	r9,r8
800033dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033e0:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
800033e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800033ec:	30 19       	mov	r9,1
800033ee:	f2 08 09 48 	lsl	r8,r9,r8
800033f2:	10 99       	mov	r9,r8
800033f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033f8:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800033fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003400:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003404:	30 19       	mov	r9,1
80003406:	f2 08 09 48 	lsl	r8,r9,r8
8000340a:	10 99       	mov	r9,r8
8000340c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003410:	91 19       	st.w	r8[0x4],r9
}
80003412:	2f ed       	sub	sp,-8
80003414:	e3 cd 80 80 	ldm	sp++,r7,pc

80003418 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80003418:	eb cd 40 80 	pushm	r7,lr
8000341c:	1a 97       	mov	r7,sp
8000341e:	20 3d       	sub	sp,12
80003420:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003424:	fe 78 08 00 	mov	r8,-63488
80003428:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000342c:	f2 09 11 03 	rsub	r9,r9,3
80003430:	28 09       	sub	r9,-128
80003432:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003436:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000343a:	fe 78 08 00 	mov	r8,-63488
8000343e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003442:	2c 09       	sub	r9,-64
80003444:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003448:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000344c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003450:	58 08       	cp.w	r8,0
80003452:	c1 90       	breq	80003484 <_get_interrupt_handler+0x6c>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003454:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003458:	48 e8       	lddpc	r8,80003490 <_get_interrupt_handler+0x78>
8000345a:	a1 79       	lsl	r9,0x1
8000345c:	2f f9       	sub	r9,-1
8000345e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003466:	58 08       	cp.w	r8,0
80003468:	c0 90       	breq	8000347a <_get_interrupt_handler+0x62>
			- clz(int_req) - 1]
8000346a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000346e:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003472:	f0 08 11 1f 	rsub	r8,r8,31
80003476:	a3 68       	lsl	r8,0x2
80003478:	c0 28       	rjmp	8000347c <_get_interrupt_handler+0x64>
8000347a:	3f c8       	mov	r8,-4
8000347c:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003480:	70 08       	ld.w	r8,r8[0x0]
80003482:	c0 28       	rjmp	80003486 <_get_interrupt_handler+0x6e>
80003484:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003486:	10 9c       	mov	r12,r8
80003488:	2f dd       	sub	sp,-12
8000348a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000348e:	00 00       	add	r0,r0
80003490:	80 00       	ld.sh	r0,r0[0x0]
80003492:	9c 80       	ld.uh	r0,lr[0x0]

80003494 <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
80003494:	eb cd 40 80 	pushm	r7,lr
80003498:	1a 97       	mov	r7,sp
8000349a:	20 3d       	sub	sp,12
8000349c:	ef 4c ff f8 	st.w	r7[-8],r12
800034a0:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800034a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034a8:	70 a8       	ld.w	r8,r8[0x28]
800034aa:	30 09       	mov	r9,0
800034ac:	ef 49 ff fc 	st.w	r7[-4],r9
800034b0:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800034b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800034b8:	5c 58       	castu.b	r8
800034ba:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800034be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800034c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034c6:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800034ca:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800034ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800034d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034d6:	91 a9       	st.w	r8[0x28],r9
}
800034d8:	2f dd       	sub	sp,-12
800034da:	e3 cd 80 80 	ldm	sp++,r7,pc
800034de:	d7 03       	nop

800034e0 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
800034e0:	eb cd 40 80 	pushm	r7,lr
800034e4:	1a 97       	mov	r7,sp
800034e6:	20 2d       	sub	sp,8
800034e8:	ef 4c ff fc 	st.w	r7[-4],r12
800034ec:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800034f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034f4:	ec 58 bb 9f 	cp.w	r8,899999
800034f8:	e0 88 00 1a 	brls	8000352c <pm_enable_osc0_crystal+0x4c>
800034fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003500:	e0 69 c6 bf 	mov	r9,50879
80003504:	ea 19 00 2d 	orh	r9,0x2d
80003508:	12 38       	cp.w	r8,r9
8000350a:	e0 88 00 0f 	brls	80003528 <pm_enable_osc0_crystal+0x48>
8000350e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003512:	e0 69 11 ff 	mov	r9,4607
80003516:	ea 19 00 7a 	orh	r9,0x7a
8000351a:	12 38       	cp.w	r8,r9
8000351c:	e0 8b 00 04 	brhi	80003524 <pm_enable_osc0_crystal+0x44>
80003520:	30 68       	mov	r8,6
80003522:	c0 28       	rjmp	80003526 <pm_enable_osc0_crystal+0x46>
80003524:	30 78       	mov	r8,7
80003526:	c0 28       	rjmp	8000352a <pm_enable_osc0_crystal+0x4a>
80003528:	30 58       	mov	r8,5
8000352a:	c0 28       	rjmp	8000352e <pm_enable_osc0_crystal+0x4e>
8000352c:	30 48       	mov	r8,4
8000352e:	10 9b       	mov	r11,r8
80003530:	ee fc ff fc 	ld.w	r12,r7[-4]
80003534:	f0 1f 00 03 	mcall	80003540 <pm_enable_osc0_crystal+0x60>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80003538:	2f ed       	sub	sp,-8
8000353a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000353e:	00 00       	add	r0,r0
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	34 94       	mov	r4,73

80003544 <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80003544:	eb cd 40 80 	pushm	r7,lr
80003548:	1a 97       	mov	r7,sp
8000354a:	20 2d       	sub	sp,8
8000354c:	ef 4c ff fc 	st.w	r7[-4],r12
80003550:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
80003554:	ee fb ff f8 	ld.w	r11,r7[-8]
80003558:	ee fc ff fc 	ld.w	r12,r7[-4]
8000355c:	f0 1f 00 05 	mcall	80003570 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
80003560:	ee fc ff fc 	ld.w	r12,r7[-4]
80003564:	f0 1f 00 04 	mcall	80003574 <pm_enable_clk0+0x30>
}
80003568:	2f ed       	sub	sp,-8
8000356a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000356e:	00 00       	add	r0,r0
80003570:	80 00       	ld.sh	r0,r0[0x0]
80003572:	35 78       	mov	r8,87
80003574:	80 00       	ld.sh	r0,r0[0x0]
80003576:	35 d2       	mov	r2,93

80003578 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
80003578:	eb cd 40 80 	pushm	r7,lr
8000357c:	1a 97       	mov	r7,sp
8000357e:	20 3d       	sub	sp,12
80003580:	ef 4c ff f8 	st.w	r7[-8],r12
80003584:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003588:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000358c:	70 a8       	ld.w	r8,r8[0x28]
8000358e:	30 09       	mov	r9,0
80003590:	ef 49 ff fc 	st.w	r7[-4],r9
80003594:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80003598:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000359c:	5c 58       	castu.b	r8
8000359e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800035a2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035aa:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
800035ae:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800035b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800035b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035ba:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800035bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035c0:	70 08       	ld.w	r8,r8[0x0]
800035c2:	10 99       	mov	r9,r8
800035c4:	a3 a9       	sbr	r9,0x2
800035c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035ca:	91 09       	st.w	r8[0x0],r9
}
800035cc:	2f dd       	sub	sp,-12
800035ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800035d2 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
800035d2:	eb cd 40 80 	pushm	r7,lr
800035d6:	1a 97       	mov	r7,sp
800035d8:	20 1d       	sub	sp,4
800035da:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
800035de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035e2:	71 58       	ld.w	r8,r8[0x54]
800035e4:	e2 18 00 80 	andl	r8,0x80,COH
800035e8:	cf b0       	breq	800035de <pm_wait_for_clk0_ready+0xc>
}
800035ea:	2f fd       	sub	sp,-4
800035ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800035f0 <pm_switch_to_clock>:
  return u_avr32_pm_mcctrl.MCCTRL.mcsel;
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
800035f0:	eb cd 40 80 	pushm	r7,lr
800035f4:	1a 97       	mov	r7,sp
800035f6:	20 3d       	sub	sp,12
800035f8:	ef 4c ff f8 	st.w	r7[-8],r12
800035fc:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003600:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003604:	70 08       	ld.w	r8,r8[0x0]
80003606:	30 09       	mov	r9,0
80003608:	ef 49 ff fc 	st.w	r7[-4],r9
8000360c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003610:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003614:	5c 58       	castu.b	r8
80003616:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000361a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000361e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003622:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80003626:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000362a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000362e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003632:	91 09       	st.w	r8[0x0],r9
}
80003634:	2f dd       	sub	sp,-12
80003636:	e3 cd 80 80 	ldm	sp++,r7,pc

8000363a <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000363a:	eb cd 40 80 	pushm	r7,lr
8000363e:	1a 97       	mov	r7,sp
80003640:	20 1d       	sub	sp,4
80003642:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000364a:	e6 18 00 01 	andh	r8,0x1,COH
8000364e:	5f 08       	sreq	r8
80003650:	5c 58       	castu.b	r8
}
80003652:	10 9c       	mov	r12,r8
80003654:	2f fd       	sub	sp,-4
80003656:	e3 cd 80 80 	ldm	sp++,r7,pc
8000365a:	d7 03       	nop

8000365c <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
8000365c:	eb cd 40 80 	pushm	r7,lr
80003660:	1a 97       	mov	r7,sp
80003662:	20 3d       	sub	sp,12
80003664:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003668:	fe 78 30 00 	mov	r8,-53248
8000366c:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003670:	e1 b8 00 00 	mfsr	r8,0x0
80003674:	10 9c       	mov	r12,r8
80003676:	f0 1f 00 1e 	mcall	800036ec <pwm_init+0x90>
8000367a:	18 98       	mov	r8,r12
8000367c:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
80003680:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003684:	58 08       	cp.w	r8,0
80003686:	c0 31       	brne	8000368c <pwm_init+0x30>
    return PWM_INVALID_INPUT;
80003688:	30 18       	mov	r8,1
8000368a:	c2 c8       	rjmp	800036e2 <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000368c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003690:	30 08       	mov	r8,0
80003692:	f0 09 18 00 	cp.b	r9,r8
80003696:	c0 20       	breq	8000369a <pwm_init+0x3e>
80003698:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000369a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000369e:	37 f9       	mov	r9,127
800036a0:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
800036a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036a6:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800036a8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036ac:	30 08       	mov	r8,0
800036ae:	f0 09 18 00 	cp.b	r9,r8
800036b2:	c0 20       	breq	800036b6 <pwm_init+0x5a>
800036b4:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800036b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036ba:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
800036bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036c0:	70 08       	ld.w	r8,r8[0x0]
800036c2:	b1 68       	lsl	r8,0x10
800036c4:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
800036c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036ca:	70 38       	ld.w	r8,r8[0xc]
800036cc:	a9 68       	lsl	r8,0x8
800036ce:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
800036d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036d4:	70 28       	ld.w	r8,r8[0x8]
800036d6:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800036d8:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
800036da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036de:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
800036e0:	30 08       	mov	r8,0
}
800036e2:	10 9c       	mov	r12,r8
800036e4:	2f dd       	sub	sp,-12
800036e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800036ea:	00 00       	add	r0,r0
800036ec:	80 00       	ld.sh	r0,r0[0x0]
800036ee:	36 3a       	mov	r10,99

800036f0 <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
800036f0:	eb cd 40 80 	pushm	r7,lr
800036f4:	1a 97       	mov	r7,sp
800036f6:	20 3d       	sub	sp,12
800036f8:	ef 4c ff f8 	st.w	r7[-8],r12
800036fc:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003700:	fe 78 30 00 	mov	r8,-53248
80003704:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
80003708:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000370c:	58 08       	cp.w	r8,0
8000370e:	c0 31       	brne	80003714 <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
80003710:	30 18       	mov	r8,1
80003712:	c2 f8       	rjmp	80003770 <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003714:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003718:	58 68       	cp.w	r8,6
8000371a:	e0 88 00 04 	brls	80003722 <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
8000371e:	30 18       	mov	r8,1
80003720:	c2 88       	rjmp	80003770 <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003722:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003726:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000372a:	72 09       	ld.w	r9,r9[0x0]
8000372c:	ee fa ff fc 	ld.w	r10,r7[-4]
80003730:	2f 08       	sub	r8,-16
80003732:	a5 78       	lsl	r8,0x5
80003734:	f4 08 00 08 	add	r8,r10,r8
80003738:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
8000373a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000373e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003742:	72 19       	ld.w	r9,r9[0x4]
80003744:	ee fa ff fc 	ld.w	r10,r7[-4]
80003748:	a5 78       	lsl	r8,0x5
8000374a:	f4 08 00 08 	add	r8,r10,r8
8000374e:	f0 c8 fd fc 	sub	r8,r8,-516
80003752:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003758:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000375c:	72 29       	ld.w	r9,r9[0x8]
8000375e:	ee fa ff fc 	ld.w	r10,r7[-4]
80003762:	a5 78       	lsl	r8,0x5
80003764:	f4 08 00 08 	add	r8,r10,r8
80003768:	f0 c8 fd f8 	sub	r8,r8,-520
8000376c:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
8000376e:	30 08       	mov	r8,0
}
80003770:	10 9c       	mov	r12,r8
80003772:	2f dd       	sub	sp,-12
80003774:	e3 cd 80 80 	ldm	sp++,r7,pc

80003778 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
80003778:	eb cd 40 80 	pushm	r7,lr
8000377c:	1a 97       	mov	r7,sp
8000377e:	20 1d       	sub	sp,4
80003780:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003788:	e0 18 ff 80 	andl	r8,0xff80
8000378c:	c0 30       	breq	80003792 <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
8000378e:	30 18       	mov	r8,1
80003790:	c0 78       	rjmp	8000379e <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80003792:	fe 78 30 00 	mov	r8,-53248
80003796:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000379a:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
8000379c:	30 08       	mov	r8,0
}
8000379e:	10 9c       	mov	r12,r8
800037a0:	2f fd       	sub	sp,-4
800037a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800037a6 <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
800037a6:	eb cd 40 80 	pushm	r7,lr
800037aa:	1a 97       	mov	r7,sp
800037ac:	20 3d       	sub	sp,12
800037ae:	ef 4c ff f8 	st.w	r7[-8],r12
800037b2:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800037b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800037ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037be:	f2 08 00 08 	add	r8,r9,r8
800037c2:	20 18       	sub	r8,1
800037c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800037c8:	f0 09 0d 08 	divu	r8,r8,r9
800037cc:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
800037d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037d4:	58 08       	cp.w	r8,0
800037d6:	c0 70       	breq	800037e4 <getBaudDiv+0x3e>
800037d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037dc:	e0 48 00 ff 	cp.w	r8,255
800037e0:	e0 88 00 04 	brls	800037e8 <getBaudDiv+0x42>
		return -1;
800037e4:	3f f8       	mov	r8,-1
800037e6:	c0 48       	rjmp	800037ee <getBaudDiv+0x48>
	}

	return baudDiv;
800037e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800037ec:	5c 88       	casts.h	r8
}
800037ee:	10 9c       	mov	r12,r8
800037f0:	2f dd       	sub	sp,-12
800037f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800037f6 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800037f6:	eb cd 40 80 	pushm	r7,lr
800037fa:	1a 97       	mov	r7,sp
800037fc:	20 3d       	sub	sp,12
800037fe:	ef 4c ff f8 	st.w	r7[-8],r12
80003802:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003806:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000380a:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000380e:	30 18       	mov	r8,1
80003810:	f0 09 18 00 	cp.b	r9,r8
80003814:	e0 88 00 04 	brls	8000381c <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
80003818:	30 28       	mov	r8,2
8000381a:	c3 48       	rjmp	80003882 <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000381c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003820:	e0 69 00 80 	mov	r9,128
80003824:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000382a:	70 18       	ld.w	r8,r8[0x4]
8000382c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
80003830:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003834:	30 19       	mov	r9,1
80003836:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8000383a:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000383e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003842:	f1 38 00 0d 	ld.ub	r8,r8[13]
80003846:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000384a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000384e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003852:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003856:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
8000385a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000385e:	30 09       	mov	r9,0
80003860:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80003864:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003868:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000386c:	30 f9       	mov	r9,15
8000386e:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003872:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80003876:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000387a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000387e:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003880:	30 08       	mov	r8,0
}
80003882:	10 9c       	mov	r12,r8
80003884:	2f dd       	sub	sp,-12
80003886:	e3 cd 80 80 	ldm	sp++,r7,pc

8000388a <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
8000388a:	eb cd 40 80 	pushm	r7,lr
8000388e:	1a 97       	mov	r7,sp
80003890:	20 5d       	sub	sp,20
80003892:	ef 4c ff f8 	st.w	r7[-8],r12
80003896:	12 98       	mov	r8,r9
80003898:	16 99       	mov	r9,r11
8000389a:	ef 69 ff f4 	st.b	r7[-12],r9
8000389e:	14 99       	mov	r9,r10
800038a0:	ef 69 ff f0 	st.b	r7[-16],r9
800038a4:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
800038a8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800038ac:	30 18       	mov	r8,1
800038ae:	f0 09 18 00 	cp.b	r9,r8
800038b2:	e0 8b 00 09 	brhi	800038c4 <spi_selectionMode+0x3a>
800038b6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800038ba:	30 18       	mov	r8,1
800038bc:	f0 09 18 00 	cp.b	r9,r8
800038c0:	e0 88 00 04 	brls	800038c8 <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
800038c4:	30 28       	mov	r8,2
800038c6:	c2 88       	rjmp	80003916 <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
800038c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038cc:	70 18       	ld.w	r8,r8[0x4]
800038ce:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
800038d2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800038d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800038da:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038e2:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800038e6:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800038ea:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800038ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800038f2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800038f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038fa:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
800038fe:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
80003902:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003906:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
8000390a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000390e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003912:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003914:	30 08       	mov	r8,0
}
80003916:	10 9c       	mov	r12,r8
80003918:	2f bd       	sub	sp,-20
8000391a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000391e <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000391e:	eb cd 40 80 	pushm	r7,lr
80003922:	1a 97       	mov	r7,sp
80003924:	20 2d       	sub	sp,8
80003926:	ef 4c ff fc 	st.w	r7[-4],r12
8000392a:	16 98       	mov	r8,r11
8000392c:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003930:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003934:	70 18       	ld.w	r8,r8[0x4]
80003936:	10 99       	mov	r9,r8
80003938:	ea 19 00 0f 	orh	r9,0xf
8000393c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003940:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003942:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003946:	70 18       	ld.w	r8,r8[0x4]
80003948:	e2 18 00 04 	andl	r8,0x4,COH
8000394c:	c1 90       	breq	8000397e <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000394e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003952:	30 e8       	mov	r8,14
80003954:	f0 09 18 00 	cp.b	r9,r8
80003958:	e0 88 00 04 	brls	80003960 <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
8000395c:	30 28       	mov	r8,2
8000395e:	c2 88       	rjmp	800039ae <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003960:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003964:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
80003966:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000396a:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000396c:	ea 18 ff f0 	orh	r8,0xfff0
80003970:	e8 18 ff ff 	orl	r8,0xffff
80003974:	10 69       	and	r9,r8
80003976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000397a:	91 19       	st.w	r8[0x4],r9
8000397c:	c1 88       	rjmp	800039ac <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000397e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003982:	30 38       	mov	r8,3
80003984:	f0 09 18 00 	cp.b	r9,r8
80003988:	e0 88 00 04 	brls	80003990 <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
8000398c:	30 28       	mov	r8,2
8000398e:	c1 08       	rjmp	800039ae <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003990:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003994:	70 19       	ld.w	r9,r8[0x4]
80003996:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000399a:	2f 08       	sub	r8,-16
8000399c:	30 1a       	mov	r10,1
8000399e:	f4 08 09 48 	lsl	r8,r10,r8
800039a2:	5c d8       	com	r8
800039a4:	10 69       	and	r9,r8
800039a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039aa:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
800039ac:	30 08       	mov	r8,0
}
800039ae:	10 9c       	mov	r12,r8
800039b0:	2f ed       	sub	sp,-8
800039b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800039b6 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800039b6:	eb cd 40 80 	pushm	r7,lr
800039ba:	1a 97       	mov	r7,sp
800039bc:	20 3d       	sub	sp,12
800039be:	ef 4c ff f8 	st.w	r7[-8],r12
800039c2:	16 98       	mov	r8,r11
800039c4:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
800039c8:	e0 68 3a 98 	mov	r8,15000
800039cc:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039d0:	c0 f8       	rjmp	800039ee <spi_unselectChip+0x38>
		if (!timeout--) {
800039d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039d6:	58 08       	cp.w	r8,0
800039d8:	5f 08       	sreq	r8
800039da:	5c 58       	castu.b	r8
800039dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800039e0:	20 19       	sub	r9,1
800039e2:	ef 49 ff fc 	st.w	r7[-4],r9
800039e6:	58 08       	cp.w	r8,0
800039e8:	c0 30       	breq	800039ee <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
800039ea:	30 18       	mov	r8,1
800039ec:	c1 68       	rjmp	80003a18 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800039ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039f2:	70 48       	ld.w	r8,r8[0x10]
800039f4:	e2 18 02 00 	andl	r8,0x200,COH
800039f8:	ce d0       	breq	800039d2 <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800039fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039fe:	70 18       	ld.w	r8,r8[0x4]
80003a00:	10 99       	mov	r9,r8
80003a02:	ea 19 00 0f 	orh	r9,0xf
80003a06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a0a:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003a0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a10:	fc 19 01 00 	movh	r9,0x100
80003a14:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
80003a16:	30 08       	mov	r8,0
}
80003a18:	10 9c       	mov	r12,r8
80003a1a:	2f dd       	sub	sp,-12
80003a1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003a20 <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003a20:	eb cd 40 80 	pushm	r7,lr
80003a24:	1a 97       	mov	r7,sp
80003a26:	20 5d       	sub	sp,20
80003a28:	ef 4c ff f4 	st.w	r7[-12],r12
80003a2c:	ef 4b ff f0 	st.w	r7[-16],r11
80003a30:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003a38:	f1 39 00 0c 	ld.ub	r9,r8[12]
80003a3c:	30 38       	mov	r8,3
80003a3e:	f0 09 18 00 	cp.b	r9,r8
80003a42:	e0 8b 00 1d 	brhi	80003a7c <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
80003a46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003a4a:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a4e:	30 18       	mov	r8,1
80003a50:	f0 09 18 00 	cp.b	r9,r8
80003a54:	e0 8b 00 14 	brhi	80003a7c <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003a58:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003a5c:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a60:	30 78       	mov	r8,7
80003a62:	f0 09 18 00 	cp.b	r9,r8
80003a66:	e0 88 00 0b 	brls	80003a7c <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003a6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003a6e:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003a72:	31 08       	mov	r8,16
80003a74:	f0 09 18 00 	cp.b	r9,r8
80003a78:	e0 88 00 04 	brls	80003a80 <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
80003a7c:	30 28       	mov	r8,2
80003a7e:	c8 d8       	rjmp	80003b98 <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003a80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003a84:	70 18       	ld.w	r8,r8[0x4]
80003a86:	ee fb ff ec 	ld.w	r11,r7[-20]
80003a8a:	10 9c       	mov	r12,r8
80003a8c:	f0 1f 00 45 	mcall	80003ba0 <spi_setupChipReg+0x180>
80003a90:	18 98       	mov	r8,r12
80003a92:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
80003a96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a9a:	58 08       	cp.w	r8,0
80003a9c:	c0 34       	brge	80003aa2 <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
80003a9e:	30 28       	mov	r8,2
80003aa0:	c7 c8       	rjmp	80003b98 <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003aa2:	30 08       	mov	r8,0
80003aa4:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003aa8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003aac:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003ab0:	a1 98       	lsr	r8,0x1
80003ab2:	5c 58       	castu.b	r8
80003ab4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ab8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003abc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ac0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003ac4:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003ac8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003acc:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003ad0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ad4:	5f 08       	sreq	r8
80003ad6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003ada:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ade:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80003ae2:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003ae6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003aea:	f1 38 00 0b 	ld.ub	r8,r8[11]
80003aee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003af2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003af6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003afa:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80003afe:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003b02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b06:	f1 38 00 08 	ld.ub	r8,r8[8]
80003b0a:	20 88       	sub	r8,8
80003b0c:	5c 58       	castu.b	r8
80003b0e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003b12:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003b16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b1a:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80003b1e:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003b22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b26:	5c 58       	castu.b	r8
80003b28:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003b2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b30:	f1 38 00 09 	ld.ub	r8,r8[9]
80003b34:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003b38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b3c:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003b40:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
80003b44:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003b48:	11 88       	ld.ub	r8,r8[0x0]
80003b4a:	58 18       	cp.w	r8,1
80003b4c:	c1 10       	breq	80003b6e <spi_setupChipReg+0x14e>
80003b4e:	e0 89 00 05 	brgt	80003b58 <spi_setupChipReg+0x138>
80003b52:	58 08       	cp.w	r8,0
80003b54:	c0 70       	breq	80003b62 <spi_setupChipReg+0x142>
80003b56:	c1 e8       	rjmp	80003b92 <spi_setupChipReg+0x172>
80003b58:	58 28       	cp.w	r8,2
80003b5a:	c1 00       	breq	80003b7a <spi_setupChipReg+0x15a>
80003b5c:	58 38       	cp.w	r8,3
80003b5e:	c1 40       	breq	80003b86 <spi_setupChipReg+0x166>
80003b60:	c1 98       	rjmp	80003b92 <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003b62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b6a:	91 c9       	st.w	r8[0x30],r9
		break;
80003b6c:	c1 58       	rjmp	80003b96 <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003b6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b76:	91 d9       	st.w	r8[0x34],r9
		break;
80003b78:	c0 f8       	rjmp	80003b96 <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003b7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b82:	91 e9       	st.w	r8[0x38],r9
		break;
80003b84:	c0 98       	rjmp	80003b96 <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003b86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b8a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003b8e:	91 f9       	st.w	r8[0x3c],r9
		break;
80003b90:	c0 38       	rjmp	80003b96 <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
80003b92:	30 28       	mov	r8,2
80003b94:	c0 28       	rjmp	80003b98 <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
80003b96:	30 08       	mov	r8,0
}
80003b98:	10 9c       	mov	r12,r8
80003b9a:	2f bd       	sub	sp,-20
80003b9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ba0:	80 00       	ld.sh	r0,r0[0x0]
80003ba2:	37 a6       	mov	r6,122

80003ba4 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80003ba4:	eb cd 40 80 	pushm	r7,lr
80003ba8:	1a 97       	mov	r7,sp
80003baa:	20 1d       	sub	sp,4
80003bac:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003bb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bb4:	30 19       	mov	r9,1
80003bb6:	91 09       	st.w	r8[0x0],r9
}
80003bb8:	2f fd       	sub	sp,-4
80003bba:	e3 cd 80 80 	ldm	sp++,r7,pc

80003bbe <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003bbe:	eb cd 40 80 	pushm	r7,lr
80003bc2:	1a 97       	mov	r7,sp
80003bc4:	20 3d       	sub	sp,12
80003bc6:	ef 4c ff f8 	st.w	r7[-8],r12
80003bca:	16 98       	mov	r8,r11
80003bcc:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003bd0:	e0 68 3a 98 	mov	r8,15000
80003bd4:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003bd8:	c0 f8       	rjmp	80003bf6 <spi_write+0x38>
		if (!timeout--) {
80003bda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bde:	58 08       	cp.w	r8,0
80003be0:	5f 08       	sreq	r8
80003be2:	5c 58       	castu.b	r8
80003be4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003be8:	20 19       	sub	r9,1
80003bea:	ef 49 ff fc 	st.w	r7[-4],r9
80003bee:	58 08       	cp.w	r8,0
80003bf0:	c0 30       	breq	80003bf6 <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
80003bf2:	30 18       	mov	r8,1
80003bf4:	c0 d8       	rjmp	80003c0e <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003bf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bfa:	70 48       	ld.w	r8,r8[0x10]
80003bfc:	e2 18 00 02 	andl	r8,0x2,COH
80003c00:	ce d0       	breq	80003bda <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003c02:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80003c06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c0a:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
80003c0c:	30 08       	mov	r8,0
}
80003c0e:	10 9c       	mov	r12,r8
80003c10:	2f dd       	sub	sp,-12
80003c12:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c16 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003c16:	eb cd 40 80 	pushm	r7,lr
80003c1a:	1a 97       	mov	r7,sp
80003c1c:	20 3d       	sub	sp,12
80003c1e:	ef 4c ff f8 	st.w	r7[-8],r12
80003c22:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
80003c26:	e0 68 3a 98 	mov	r8,15000
80003c2a:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
80003c2e:	c0 f8       	rjmp	80003c4c <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c34:	58 08       	cp.w	r8,0
80003c36:	5f 08       	sreq	r8
80003c38:	5c 58       	castu.b	r8
80003c3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003c3e:	20 19       	sub	r9,1
80003c40:	ef 49 ff fc 	st.w	r7[-4],r9
80003c44:	58 08       	cp.w	r8,0
80003c46:	c0 30       	breq	80003c4c <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
80003c48:	30 18       	mov	r8,1
80003c4a:	c1 18       	rjmp	80003c6c <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003c4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c50:	70 48       	ld.w	r8,r8[0x10]
80003c52:	e2 18 02 01 	andl	r8,0x201,COH
80003c56:	e0 48 02 01 	cp.w	r8,513
80003c5a:	ce b1       	brne	80003c30 <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003c5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c60:	70 28       	ld.w	r8,r8[0x8]
80003c62:	5c 88       	casts.h	r8
80003c64:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003c68:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
80003c6a:	30 08       	mov	r8,0
}
80003c6c:	10 9c       	mov	r12,r8
80003c6e:	2f dd       	sub	sp,-12
80003c70:	e3 cd 80 80 	ldm	sp++,r7,pc

80003c74 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003c74:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003c78:	fe c0 a2 78 	sub	r0,pc,-23944

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003c7c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003c80:	d5 53       	csrf	0x15
  cp      r0, r1
80003c82:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003c84:	e0 61 05 10 	mov	r1,1296
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003c88:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80003c8a:	c0 72       	brcc	80003c98 <idata_load_loop_end>
  cp      r0, r1
80003c8c:	fe c2 99 b4 	sub	r2,pc,-26188

80003c90 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003c90:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80003c92:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003c94:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003c96:	cf d3       	brcs	80003c90 <idata_load_loop>

80003c98 <idata_load_loop_end>:
  mov     r2, 0
80003c98:	e0 60 05 10 	mov	r0,1296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003c9c:	e0 61 06 60 	mov	r1,1632
  cp      r0, r1
  brlo    udata_clear_loop
80003ca0:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003ca2:	c0 62       	brcc	80003cae <udata_clear_loop_end>
80003ca4:	30 02       	mov	r2,0
80003ca6:	30 03       	mov	r3,0

80003ca8 <udata_clear_loop>:
80003ca8:	a1 22       	st.d	r0++,r2
80003caa:	02 30       	cp.w	r0,r1
80003cac:	cf e3       	brcs	80003ca8 <udata_clear_loop>

80003cae <udata_clear_loop_end>:
80003cae:	fe cf fd 7a 	sub	pc,pc,-646
80003cb2:	d7 03       	nop

80003cb4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80003cb4:	eb cd 40 80 	pushm	r7,lr
80003cb8:	1a 97       	mov	r7,sp
	}
#endif

	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RCSYS:
		return OSC_SLOW_NOMINAL_HZ;
80003cba:	e0 78 c2 00 	mov	r8,115200

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80003cbe:	10 9c       	mov	r12,r8
80003cc0:	e3 cd 80 80 	ldm	sp++,r7,pc

80003cc4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80003cc4:	eb cd 40 80 	pushm	r7,lr
80003cc8:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80003cca:	f0 1f 00 04 	mcall	80003cd8 <sysclk_get_cpu_hz+0x14>
80003cce:	18 98       	mov	r8,r12
}
80003cd0:	10 9c       	mov	r12,r8
80003cd2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003cd6:	00 00       	add	r0,r0
80003cd8:	80 00       	ld.sh	r0,r0[0x0]
80003cda:	3c b4       	mov	r4,-53

80003cdc <display_init>:

// Include Files
#include "display_init.h"

void display_init(void)
{
80003cdc:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80003ce0:	1a 97       	mov	r7,sp
80003ce2:	21 0d       	sub	sp,64
	volatile avr32_pm_t* pm = &AVR32_PM;
80003ce4:	fe 78 0c 00 	mov	r8,-62464
80003ce8:	ef 48 ff dc 	st.w	r7[-36],r8
	   .spck_delay           = 0,
	   .trans_delay  		 = 8,
	   .stay_act             = 1,
	   .spi_mode             = 0,
	   .modfdis              = 1
	};
80003cec:	4f 68       	lddpc	r8,80003ec4 <display_init+0x1e8>
80003cee:	ee ca 00 34 	sub	r10,r7,52
80003cf2:	10 9b       	mov	r11,r8
80003cf4:	f6 e8 00 00 	ld.d	r8,r11[0]
80003cf8:	f4 e9 00 00 	st.d	r10[0],r8
80003cfc:	f6 e8 00 08 	ld.d	r8,r11[8]
80003d00:	f4 e9 00 08 	st.d	r10[8],r8

	// Switch clock to external 12 MHz crystal
	// 1) Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency.
	pm_enable_osc0_crystal(pm, FOSC0);
80003d04:	e0 6b 1b 00 	mov	r11,6912
80003d08:	ea 1b 00 b7 	orh	r11,0xb7
80003d0c:	ee fc ff dc 	ld.w	r12,r7[-36]
80003d10:	f0 1f 00 6e 	mcall	80003ec8 <display_init+0x1ec>

	// 2) Enable the OSC0
	pm_enable_clk0(pm, OSC0_STARTUP);
80003d14:	30 3b       	mov	r11,3
80003d16:	ee fc ff dc 	ld.w	r12,r7[-36]
80003d1a:	f0 1f 00 6d 	mcall	80003ecc <display_init+0x1f0>

	// 3) Set the main clock source as being OSC0.
	pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);
80003d1e:	30 1b       	mov	r11,1
80003d20:	ee fc ff dc 	ld.w	r12,r7[-36]
80003d24:	f0 1f 00 6b 	mcall	80003ed0 <display_init+0x1f4>

	// Initialize the delay function
	delay_init(12000000);
	// Delay for a ms, to allow the display to power up properly
	delay_ms(1);
80003d28:	f0 1f 00 6b 	mcall	80003ed4 <display_init+0x1f8>
80003d2c:	18 98       	mov	r8,r12
80003d2e:	30 19       	mov	r9,1
80003d30:	ef 49 ff e4 	st.w	r7[-28],r9
80003d34:	ef 48 ff e0 	st.w	r7[-32],r8
80003d38:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003d3c:	ef 48 ff ec 	st.w	r7[-20],r8
80003d40:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003d44:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80003d48:	ee f0 ff ec 	ld.w	r0,r7[-20]
80003d4c:	30 01       	mov	r1,0
80003d4e:	ee f2 ff e8 	ld.w	r2,r7[-24]
80003d52:	30 03       	mov	r3,0
80003d54:	e2 02 02 4a 	mul	r10,r1,r2
80003d58:	e6 00 02 48 	mul	r8,r3,r0
80003d5c:	10 0a       	add	r10,r8
80003d5e:	e0 02 06 48 	mulu.d	r8,r0,r2
80003d62:	12 0a       	add	r10,r9
80003d64:	14 99       	mov	r9,r10
80003d66:	e0 6a 03 e7 	mov	r10,999
80003d6a:	30 0b       	mov	r11,0
80003d6c:	f0 0a 00 0a 	add	r10,r8,r10
80003d70:	f2 0b 00 4b 	adc	r11,r9,r11
80003d74:	e0 68 03 e8 	mov	r8,1000
80003d78:	30 09       	mov	r9,0
80003d7a:	f0 1f 00 58 	mcall	80003ed8 <display_init+0x1fc>
80003d7e:	14 98       	mov	r8,r10
80003d80:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80003d82:	ef 48 ff f4 	st.w	r7[-12],r8
80003d86:	ee c8 00 40 	sub	r8,r7,64
80003d8a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80003d8e:	e1 b8 00 42 	mfsr	r8,0x108
80003d92:	10 99       	mov	r9,r8
80003d94:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003d98:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80003d9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003d9e:	70 09       	ld.w	r9,r8[0x0]
80003da0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003da4:	10 09       	add	r9,r8
80003da6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003daa:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80003dac:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003db0:	30 08       	mov	r8,0
80003db2:	f3 68 00 08 	st.b	r9[8],r8
80003db6:	ee c8 00 40 	sub	r8,r7,64
80003dba:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80003dbe:	e1 b8 00 42 	mfsr	r8,0x108
80003dc2:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003dc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dca:	f1 39 00 08 	ld.ub	r9,r8[8]
80003dce:	30 28       	mov	r8,2
80003dd0:	f0 09 18 00 	cp.b	r9,r8
80003dd4:	c0 31       	brne	80003dda <display_init+0xfe>
    return false;
80003dd6:	30 08       	mov	r8,0
80003dd8:	c4 38       	rjmp	80003e5e <display_init+0x182>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80003dda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003dde:	f1 39 00 08 	ld.ub	r9,r8[8]
80003de2:	30 18       	mov	r8,1
80003de4:	f0 09 18 00 	cp.b	r9,r8
80003de8:	c0 31       	brne	80003dee <display_init+0x112>
    return true;
80003dea:	30 18       	mov	r8,1
80003dec:	c3 98       	rjmp	80003e5e <display_init+0x182>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80003dee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003df2:	70 09       	ld.w	r9,r8[0x0]
80003df4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003df8:	70 18       	ld.w	r8,r8[0x4]
80003dfa:	10 39       	cp.w	r9,r8
80003dfc:	e0 88 00 1a 	brls	80003e30 <display_init+0x154>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80003e00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e04:	70 08       	ld.w	r8,r8[0x0]
80003e06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e0a:	10 39       	cp.w	r9,r8
80003e0c:	c1 02       	brcc	80003e2c <display_init+0x150>
80003e0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e12:	70 18       	ld.w	r8,r8[0x4]
80003e14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e18:	10 39       	cp.w	r9,r8
80003e1a:	e0 88 00 09 	brls	80003e2c <display_init+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003e1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e22:	30 18       	mov	r8,1
80003e24:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003e28:	30 18       	mov	r8,1
80003e2a:	c1 a8       	rjmp	80003e5e <display_init+0x182>
    }
    return false;
80003e2c:	30 08       	mov	r8,0
80003e2e:	c1 88       	rjmp	80003e5e <display_init+0x182>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80003e30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e34:	70 08       	ld.w	r8,r8[0x0]
80003e36:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e3a:	10 39       	cp.w	r9,r8
80003e3c:	c0 93       	brcs	80003e4e <display_init+0x172>
80003e3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e42:	70 18       	ld.w	r8,r8[0x4]
80003e44:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e48:	10 39       	cp.w	r9,r8
80003e4a:	e0 88 00 09 	brls	80003e5c <display_init+0x180>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80003e4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e52:	30 18       	mov	r8,1
80003e54:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003e58:	30 18       	mov	r8,1
80003e5a:	c0 28       	rjmp	80003e5e <display_init+0x182>
    }
    return false;
80003e5c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80003e5e:	58 08       	cp.w	r8,0
80003e60:	ca b0       	breq	80003db6 <display_init+0xda>

	// Enable the SPI peripheral on GPIO pins
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80003e62:	30 4b       	mov	r11,4
80003e64:	49 ec       	lddpc	r12,80003edc <display_init+0x200>
80003e66:	f0 1f 00 1f 	mcall	80003ee0 <display_init+0x204>
						sizeof(DIP204_SPI_GPIO_MAP) / 	sizeof(DIP204_SPI_GPIO_MAP[0]));

	// Initialize as SPI master
	spi_initMaster(DIP204_SPI, &spiOptions);
80003e6a:	ee c8 00 34 	sub	r8,r7,52
80003e6e:	10 9b       	mov	r11,r8
80003e70:	fe 7c 28 00 	mov	r12,-55296
80003e74:	f0 1f 00 1c 	mcall	80003ee4 <display_init+0x208>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80003e78:	30 09       	mov	r9,0
80003e7a:	30 0a       	mov	r10,0
80003e7c:	30 0b       	mov	r11,0
80003e7e:	fe 7c 28 00 	mov	r12,-55296
80003e82:	f0 1f 00 1a 	mcall	80003ee8 <display_init+0x20c>
	spi_enable(DIP204_SPI);
80003e86:	fe 7c 28 00 	mov	r12,-55296
80003e8a:	f0 1f 00 19 	mcall	80003eec <display_init+0x210>
	spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);
80003e8e:	ee c8 00 34 	sub	r8,r7,52
80003e92:	e0 6a 1b 00 	mov	r10,6912
80003e96:	ea 1a 00 b7 	orh	r10,0xb7
80003e9a:	10 9b       	mov	r11,r8
80003e9c:	fe 7c 28 00 	mov	r12,-55296
80003ea0:	f0 1f 00 14 	mcall	80003ef0 <display_init+0x214>

	dip204_init(backlight_IO, ON);
80003ea4:	30 1b       	mov	r11,1
80003ea6:	30 0c       	mov	r12,0
80003ea8:	f0 1f 00 13 	mcall	80003ef4 <display_init+0x218>
	dip204_clear_display();
80003eac:	f0 1f 00 13 	mcall	80003ef8 <display_init+0x21c>
	dip204_hide_cursor();
80003eb0:	f0 1f 00 13 	mcall	80003efc <display_init+0x220>
	dip204_set_cursor_position(1,1);
80003eb4:	30 1b       	mov	r11,1
80003eb6:	30 1c       	mov	r12,1
80003eb8:	f0 1f 00 12 	mcall	80003f00 <display_init+0x224>
}
80003ebc:	2f 0d       	sub	sp,-64
80003ebe:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80003ec2:	00 00       	add	r0,r0
80003ec4:	80 00       	ld.sh	r0,r0[0x0]
80003ec6:	9d 20       	st.w	lr[0x8],r0
80003ec8:	80 00       	ld.sh	r0,r0[0x0]
80003eca:	34 e0       	mov	r0,78
80003ecc:	80 00       	ld.sh	r0,r0[0x0]
80003ece:	35 44       	mov	r4,84
80003ed0:	80 00       	ld.sh	r0,r0[0x0]
80003ed2:	35 f0       	mov	r0,95
80003ed4:	80 00       	ld.sh	r0,r0[0x0]
80003ed6:	3c c4       	mov	r4,-52
80003ed8:	80 00       	ld.sh	r0,r0[0x0]
80003eda:	40 e0       	lddsp	r0,sp[0x38]
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	9d 30       	st.w	lr[0xc],r0
80003ee0:	80 00       	ld.sh	r0,r0[0x0]
80003ee2:	31 c8       	mov	r8,28
80003ee4:	80 00       	ld.sh	r0,r0[0x0]
80003ee6:	37 f6       	mov	r6,127
80003ee8:	80 00       	ld.sh	r0,r0[0x0]
80003eea:	38 8a       	mov	r10,-120
80003eec:	80 00       	ld.sh	r0,r0[0x0]
80003eee:	3b a4       	mov	r4,-70
80003ef0:	80 00       	ld.sh	r0,r0[0x0]
80003ef2:	3a 20       	mov	r0,-94
80003ef4:	80 00       	ld.sh	r0,r0[0x0]
80003ef6:	20 30       	sub	r0,3
80003ef8:	80 00       	ld.sh	r0,r0[0x0]
80003efa:	2b c8       	sub	r8,-68
80003efc:	80 00       	ld.sh	r0,r0[0x0]
80003efe:	2b 0c       	sub	r12,-80
80003f00:	80 00       	ld.sh	r0,r0[0x0]
80003f02:	2b 40       	sub	r0,-76
80003f04:	50 6f       	stdsp	sp[0x18],pc
80003f06:	74 65       	ld.w	r5,r10[0x18]
80003f08:	6e 74       	ld.w	r4,r7[0x1c]
80003f0a:	69 6f       	ld.w	pc,r4[0x58]
80003f0c:	6d 65       	ld.w	r5,r6[0x58]
80003f0e:	74 65       	ld.w	r5,r10[0x18]
80003f10:	72 3a       	ld.w	r10,r9[0xc]
80003f12:	20 25       	sub	r5,2
80003f14:	64 00       	ld.w	r0,r2[0x0]
80003f16:	00 00       	add	r0,r0
80003f18:	54 65       	stdsp	sp[0x118],r5
80003f1a:	6d 70       	ld.w	r0,r6[0x5c]
80003f1c:	65 72       	ld.w	r2,r2[0x5c]
80003f1e:	61 74       	ld.w	r4,r0[0x5c]
80003f20:	75 72       	ld.w	r2,r10[0x5c]
80003f22:	65 3a       	ld.w	r10,r2[0x4c]
80003f24:	20 25       	sub	r5,2
80003f26:	64 00       	ld.w	r0,r2[0x0]
80003f28:	4c 69       	lddpc	r9,80004040 <main+0x10c>
80003f2a:	67 68       	ld.w	r8,r3[0x58]
80003f2c:	74 3a       	ld.w	r10,r10[0xc]
80003f2e:	20 25       	sub	r5,2
80003f30:	64 00       	ld.w	r0,r2[0x0]
	...

80003f34 <main>:
#include "board.h"
#include "adc.h"
#include "display_init.h" 

int main(void)
{
80003f34:	eb cd 40 80 	pushm	r7,lr
80003f38:	1a 97       	mov	r7,sp
80003f3a:	20 9d       	sub	sp,36
   int pot_value, temp_value, light_value;
   int potentiometer, temperature, light;
   
   // For the dip204 cursor position
   unsigned int column = 1;	
80003f3c:	30 18       	mov	r8,1
80003f3e:	ef 48 ff f4 	st.w	r7[-12],r8
   unsigned int line = 1;
80003f42:	30 18       	mov	r8,1
80003f44:	ef 48 ff f8 	st.w	r7[-8],r8
   
   // Configure the ADC module and enable the potentiometer, temperature and light channel
   adc_configure(&AVR32_ADC);
80003f48:	fe 7c 3c 00 	mov	r12,-50176
80003f4c:	f0 1f 00 59 	mcall	800040b0 <main+0x17c>
   adc_enable(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
80003f50:	30 1b       	mov	r11,1
80003f52:	fe 7c 3c 00 	mov	r12,-50176
80003f56:	f0 1f 00 58 	mcall	800040b4 <main+0x180>
   adc_enable(&AVR32_ADC, ADC_TEMPERATURE_CHANNEL);
80003f5a:	30 0b       	mov	r11,0
80003f5c:	fe 7c 3c 00 	mov	r12,-50176
80003f60:	f0 1f 00 55 	mcall	800040b4 <main+0x180>
   adc_enable(&AVR32_ADC, ADC_LIGHT_CHANNEL);
80003f64:	30 2b       	mov	r11,2
80003f66:	fe 7c 3c 00 	mov	r12,-50176
80003f6a:	f0 1f 00 53 	mcall	800040b4 <main+0x180>

   display_init();
80003f6e:	f0 1f 00 53 	mcall	800040b8 <main+0x184>
   while(true)
   {
	    // Start a ADC sampling of all active channels
	    adc_start(&AVR32_ADC);
80003f72:	fe 7c 3c 00 	mov	r12,-50176
80003f76:	f0 1f 00 52 	mcall	800040bc <main+0x188>
		
		//Clear the screen
		dip204_clear_display();	
80003f7a:	f0 1f 00 52 	mcall	800040c0 <main+0x18c>
		
		// Get the potentiometer value
		pot_value = adc_get_value(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
80003f7e:	30 1b       	mov	r11,1
80003f80:	fe 7c 3c 00 	mov	r12,-50176
80003f84:	f0 1f 00 50 	mcall	800040c4 <main+0x190>
80003f88:	18 98       	mov	r8,r12
80003f8a:	ef 48 ff dc 	st.w	r7[-36],r8
		//Get the temperature value
		temp_value = adc_get_value(&AVR32_ADC, ADC_TEMPERATURE_CHANNEL);
80003f8e:	30 0b       	mov	r11,0
80003f90:	fe 7c 3c 00 	mov	r12,-50176
80003f94:	f0 1f 00 4c 	mcall	800040c4 <main+0x190>
80003f98:	18 98       	mov	r8,r12
80003f9a:	ef 48 ff e0 	st.w	r7[-32],r8
		//Get the light sensor value
		light_value = adc_get_value(&AVR32_ADC, ADC_LIGHT_CHANNEL);
80003f9e:	30 2b       	mov	r11,2
80003fa0:	fe 7c 3c 00 	mov	r12,-50176
80003fa4:	f0 1f 00 48 	mcall	800040c4 <main+0x190>
80003fa8:	18 98       	mov	r8,r12
80003faa:	ef 48 ff e4 	st.w	r7[-28],r8

		// Convert the potentiometer value to a value btwn 0-255
		potentiometer = pot_value * 255 / 1024;
80003fae:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003fb2:	12 98       	mov	r8,r9
80003fb4:	a9 68       	lsl	r8,0x8
80003fb6:	12 18       	sub	r8,r9
80003fb8:	f0 c9 fc 01 	sub	r9,r8,-1023
80003fbc:	58 08       	cp.w	r8,0
80003fbe:	f2 08 17 50 	movlt	r8,r9
80003fc2:	ab 48       	asr	r8,0xa
80003fc4:	ef 48 ff e8 	st.w	r7[-24],r8
		dip204_set_cursor_position(column, line); //First column and line
80003fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fcc:	5c 58       	castu.b	r8
80003fce:	10 99       	mov	r9,r8
80003fd0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003fd4:	5c 58       	castu.b	r8
80003fd6:	12 9b       	mov	r11,r9
80003fd8:	10 9c       	mov	r12,r8
80003fda:	f0 1f 00 3c 	mcall	800040c8 <main+0x194>
		dip204_printf_string("Potentiometer: %d", potentiometer); //print value
80003fde:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003fe2:	1a d8       	st.w	--sp,r8
80003fe4:	4b ac       	lddpc	r12,800040cc <main+0x198>
80003fe6:	f0 1f 00 3b 	mcall	800040d0 <main+0x19c>
80003fea:	2f fd       	sub	sp,-4
		// Convert the temperature value to a value btwn 0-255
		temperature = temp_value * 30 / 1024;
80003fec:	ee f9 ff e0 	ld.w	r9,r7[-32]
80003ff0:	12 98       	mov	r8,r9
80003ff2:	a5 68       	lsl	r8,0x4
80003ff4:	12 18       	sub	r8,r9
80003ff6:	a1 78       	lsl	r8,0x1
80003ff8:	f0 c9 fc 01 	sub	r9,r8,-1023
80003ffc:	58 08       	cp.w	r8,0
80003ffe:	f2 08 17 50 	movlt	r8,r9
80004002:	ab 48       	asr	r8,0xa
80004004:	ef 48 ff ec 	st.w	r7[-20],r8
		dip204_set_cursor_position(column, line+1);	//First column second line	 
80004008:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000400c:	5c 58       	castu.b	r8
8000400e:	2f f8       	sub	r8,-1
80004010:	5c 58       	castu.b	r8
80004012:	10 99       	mov	r9,r8
80004014:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004018:	5c 58       	castu.b	r8
8000401a:	12 9b       	mov	r11,r9
8000401c:	10 9c       	mov	r12,r8
8000401e:	f0 1f 00 2b 	mcall	800040c8 <main+0x194>
		dip204_printf_string("Temperature: %d", temperature); //print value
80004022:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004026:	1a d8       	st.w	--sp,r8
80004028:	4a bc       	lddpc	r12,800040d4 <main+0x1a0>
8000402a:	f0 1f 00 2a 	mcall	800040d0 <main+0x19c>
8000402e:	2f fd       	sub	sp,-4
		//Convert the light value to a value btwn 0-255
		light = light_value * 255 / 1024;
80004030:	ee f9 ff e4 	ld.w	r9,r7[-28]
80004034:	12 98       	mov	r8,r9
80004036:	a9 68       	lsl	r8,0x8
80004038:	12 18       	sub	r8,r9
8000403a:	f0 c9 fc 01 	sub	r9,r8,-1023
8000403e:	58 08       	cp.w	r8,0
80004040:	f2 08 17 50 	movlt	r8,r9
80004044:	ab 48       	asr	r8,0xa
80004046:	ef 48 ff f0 	st.w	r7[-16],r8
		dip204_set_cursor_position(column, line+2);	//First column third line	 
8000404a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000404e:	5c 58       	castu.b	r8
80004050:	2f e8       	sub	r8,-2
80004052:	5c 58       	castu.b	r8
80004054:	10 99       	mov	r9,r8
80004056:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000405a:	5c 58       	castu.b	r8
8000405c:	12 9b       	mov	r11,r9
8000405e:	10 9c       	mov	r12,r8
80004060:	f0 1f 00 1a 	mcall	800040c8 <main+0x194>
		dip204_printf_string("Light: %d", light); //print value
80004064:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004068:	1a d8       	st.w	--sp,r8
8000406a:	49 cc       	lddpc	r12,800040d8 <main+0x1a4>
8000406c:	f0 1f 00 19 	mcall	800040d0 <main+0x19c>
80004070:	2f fd       	sub	sp,-4
		int i = 0;
80004072:	30 08       	mov	r8,0
80004074:	ef 48 ff fc 	st.w	r7[-4],r8
		while (i < 10000)
80004078:	c0 68       	rjmp	80004084 <main+0x150>
		{
			i++;
8000407a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000407e:	2f f8       	sub	r8,-1
80004080:	ef 48 ff fc 	st.w	r7[-4],r8
		//Convert the light value to a value btwn 0-255
		light = light_value * 255 / 1024;
		dip204_set_cursor_position(column, line+2);	//First column third line	 
		dip204_printf_string("Light: %d", light); //print value
		int i = 0;
		while (i < 10000)
80004084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004088:	e0 48 27 0f 	cp.w	r8,9999
8000408c:	fe 9a ff f7 	brle	8000407a <main+0x146>
		{
			i++;
		}
				
		// Set the intensity of the LED
		LED_Set_Intensity(LED4, potentiometer);	//Red light
80004090:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004094:	5c 58       	castu.b	r8
80004096:	10 9b       	mov	r11,r8
80004098:	31 0c       	mov	r12,16
8000409a:	f0 1f 00 11 	mcall	800040dc <main+0x1a8>
		//LED_Set_Intensity(LED5, brightness_LED5); //Green light
		LED_Set_Intensity(LED6, potentiometer);	//Red light
8000409e:	ee f8 ff e8 	ld.w	r8,r7[-24]
800040a2:	5c 58       	castu.b	r8
800040a4:	10 9b       	mov	r11,r8
800040a6:	34 0c       	mov	r12,64
800040a8:	f0 1f 00 0d 	mcall	800040dc <main+0x1a8>
		//LED_Set_Intensity(LED7, brightness_LED5);	//Green light
   }
800040ac:	c6 3b       	rjmp	80003f72 <main+0x3e>
800040ae:	00 00       	add	r0,r0
800040b0:	80 00       	ld.sh	r0,r0[0x0]
800040b2:	2f 58       	sub	r8,-11
800040b4:	80 00       	ld.sh	r0,r0[0x0]
800040b6:	2f a8       	sub	r8,-6
800040b8:	80 00       	ld.sh	r0,r0[0x0]
800040ba:	3c dc       	mov	r12,-51
800040bc:	80 00       	ld.sh	r0,r0[0x0]
800040be:	2f 8e       	sub	lr,-8
800040c0:	80 00       	ld.sh	r0,r0[0x0]
800040c2:	2b c8       	sub	r8,-68
800040c4:	80 00       	ld.sh	r0,r0[0x0]
800040c6:	30 04       	mov	r4,0
800040c8:	80 00       	ld.sh	r0,r0[0x0]
800040ca:	2b 40       	sub	r0,-76
800040cc:	80 00       	ld.sh	r0,r0[0x0]
800040ce:	3f 04       	mov	r4,-16
800040d0:	80 00       	ld.sh	r0,r0[0x0]
800040d2:	2d 44       	sub	r4,-44
800040d4:	80 00       	ld.sh	r0,r0[0x0]
800040d6:	3f 18       	mov	r8,-15
800040d8:	80 00       	ld.sh	r0,r0[0x0]
800040da:	3f 28       	mov	r8,-14
800040dc:	80 00       	ld.sh	r0,r0[0x0]
800040de:	30 50       	mov	r0,5

800040e0 <__avr32_udiv64>:
800040e0:	d4 31       	pushm	r0-r7,lr
800040e2:	1a 97       	mov	r7,sp
800040e4:	20 3d       	sub	sp,12
800040e6:	10 9c       	mov	r12,r8
800040e8:	12 9e       	mov	lr,r9
800040ea:	14 93       	mov	r3,r10
800040ec:	58 09       	cp.w	r9,0
800040ee:	e0 81 00 bd 	brne	80004268 <__avr32_udiv64+0x188>
800040f2:	16 38       	cp.w	r8,r11
800040f4:	e0 88 00 40 	brls	80004174 <__avr32_udiv64+0x94>
800040f8:	f0 08 12 00 	clz	r8,r8
800040fc:	c0 d0       	breq	80004116 <__avr32_udiv64+0x36>
800040fe:	f6 08 09 4b 	lsl	r11,r11,r8
80004102:	f0 09 11 20 	rsub	r9,r8,32
80004106:	f8 08 09 4c 	lsl	r12,r12,r8
8000410a:	f4 09 0a 49 	lsr	r9,r10,r9
8000410e:	f4 08 09 43 	lsl	r3,r10,r8
80004112:	f3 eb 10 0b 	or	r11,r9,r11
80004116:	f8 0e 16 10 	lsr	lr,r12,0x10
8000411a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000411e:	f6 0e 0d 00 	divu	r0,r11,lr
80004122:	e6 0b 16 10 	lsr	r11,r3,0x10
80004126:	00 99       	mov	r9,r0
80004128:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000412c:	e0 0a 02 48 	mul	r8,r0,r10
80004130:	10 3b       	cp.w	r11,r8
80004132:	c0 a2       	brcc	80004146 <__avr32_udiv64+0x66>
80004134:	20 19       	sub	r9,1
80004136:	18 0b       	add	r11,r12
80004138:	18 3b       	cp.w	r11,r12
8000413a:	c0 63       	brcs	80004146 <__avr32_udiv64+0x66>
8000413c:	10 3b       	cp.w	r11,r8
8000413e:	f7 b9 03 01 	sublo	r9,1
80004142:	f7 dc e3 0b 	addcs	r11,r11,r12
80004146:	f6 08 01 01 	sub	r1,r11,r8
8000414a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000414e:	e2 0e 0d 00 	divu	r0,r1,lr
80004152:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80004156:	00 98       	mov	r8,r0
80004158:	e0 0a 02 4a 	mul	r10,r0,r10
8000415c:	14 33       	cp.w	r3,r10
8000415e:	c0 82       	brcc	8000416e <__avr32_udiv64+0x8e>
80004160:	20 18       	sub	r8,1
80004162:	18 03       	add	r3,r12
80004164:	18 33       	cp.w	r3,r12
80004166:	c0 43       	brcs	8000416e <__avr32_udiv64+0x8e>
80004168:	14 33       	cp.w	r3,r10
8000416a:	f7 b8 03 01 	sublo	r8,1
8000416e:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80004172:	cd f8       	rjmp	80004330 <__avr32_udiv64+0x250>
80004174:	58 08       	cp.w	r8,0
80004176:	c0 51       	brne	80004180 <__avr32_udiv64+0xa0>
80004178:	30 19       	mov	r9,1
8000417a:	f2 08 0d 08 	divu	r8,r9,r8
8000417e:	10 9c       	mov	r12,r8
80004180:	f8 06 12 00 	clz	r6,r12
80004184:	c0 41       	brne	8000418c <__avr32_udiv64+0xac>
80004186:	18 1b       	sub	r11,r12
80004188:	30 19       	mov	r9,1
8000418a:	c4 08       	rjmp	8000420a <__avr32_udiv64+0x12a>
8000418c:	ec 01 11 20 	rsub	r1,r6,32
80004190:	f4 01 0a 49 	lsr	r9,r10,r1
80004194:	f8 06 09 4c 	lsl	r12,r12,r6
80004198:	f6 06 09 48 	lsl	r8,r11,r6
8000419c:	f6 01 0a 41 	lsr	r1,r11,r1
800041a0:	f3 e8 10 08 	or	r8,r9,r8
800041a4:	f8 03 16 10 	lsr	r3,r12,0x10
800041a8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800041ac:	e2 03 0d 00 	divu	r0,r1,r3
800041b0:	f0 0b 16 10 	lsr	r11,r8,0x10
800041b4:	00 9e       	mov	lr,r0
800041b6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800041ba:	e0 05 02 49 	mul	r9,r0,r5
800041be:	12 3b       	cp.w	r11,r9
800041c0:	c0 a2       	brcc	800041d4 <__avr32_udiv64+0xf4>
800041c2:	20 1e       	sub	lr,1
800041c4:	18 0b       	add	r11,r12
800041c6:	18 3b       	cp.w	r11,r12
800041c8:	c0 63       	brcs	800041d4 <__avr32_udiv64+0xf4>
800041ca:	12 3b       	cp.w	r11,r9
800041cc:	f7 be 03 01 	sublo	lr,1
800041d0:	f7 dc e3 0b 	addcs	r11,r11,r12
800041d4:	12 1b       	sub	r11,r9
800041d6:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800041da:	f6 03 0d 02 	divu	r2,r11,r3
800041de:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800041e2:	04 99       	mov	r9,r2
800041e4:	e4 05 02 4b 	mul	r11,r2,r5
800041e8:	16 38       	cp.w	r8,r11
800041ea:	c0 a2       	brcc	800041fe <__avr32_udiv64+0x11e>
800041ec:	20 19       	sub	r9,1
800041ee:	18 08       	add	r8,r12
800041f0:	18 38       	cp.w	r8,r12
800041f2:	c0 63       	brcs	800041fe <__avr32_udiv64+0x11e>
800041f4:	16 38       	cp.w	r8,r11
800041f6:	f7 b9 03 01 	sublo	r9,1
800041fa:	f1 dc e3 08 	addcs	r8,r8,r12
800041fe:	f4 06 09 43 	lsl	r3,r10,r6
80004202:	f0 0b 01 0b 	sub	r11,r8,r11
80004206:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000420a:	f8 06 16 10 	lsr	r6,r12,0x10
8000420e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80004212:	f6 06 0d 00 	divu	r0,r11,r6
80004216:	e6 0b 16 10 	lsr	r11,r3,0x10
8000421a:	00 9a       	mov	r10,r0
8000421c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004220:	e0 0e 02 48 	mul	r8,r0,lr
80004224:	10 3b       	cp.w	r11,r8
80004226:	c0 a2       	brcc	8000423a <__avr32_udiv64+0x15a>
80004228:	20 1a       	sub	r10,1
8000422a:	18 0b       	add	r11,r12
8000422c:	18 3b       	cp.w	r11,r12
8000422e:	c0 63       	brcs	8000423a <__avr32_udiv64+0x15a>
80004230:	10 3b       	cp.w	r11,r8
80004232:	f7 ba 03 01 	sublo	r10,1
80004236:	f7 dc e3 0b 	addcs	r11,r11,r12
8000423a:	f6 08 01 01 	sub	r1,r11,r8
8000423e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80004242:	e2 06 0d 00 	divu	r0,r1,r6
80004246:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000424a:	00 98       	mov	r8,r0
8000424c:	e0 0e 02 4b 	mul	r11,r0,lr
80004250:	16 33       	cp.w	r3,r11
80004252:	c0 82       	brcc	80004262 <__avr32_udiv64+0x182>
80004254:	20 18       	sub	r8,1
80004256:	18 03       	add	r3,r12
80004258:	18 33       	cp.w	r3,r12
8000425a:	c0 43       	brcs	80004262 <__avr32_udiv64+0x182>
8000425c:	16 33       	cp.w	r3,r11
8000425e:	f7 b8 03 01 	sublo	r8,1
80004262:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80004266:	c6 98       	rjmp	80004338 <__avr32_udiv64+0x258>
80004268:	16 39       	cp.w	r9,r11
8000426a:	e0 8b 00 65 	brhi	80004334 <__avr32_udiv64+0x254>
8000426e:	f2 09 12 00 	clz	r9,r9
80004272:	c0 b1       	brne	80004288 <__avr32_udiv64+0x1a8>
80004274:	10 3a       	cp.w	r10,r8
80004276:	5f 2a       	srhs	r10
80004278:	1c 3b       	cp.w	r11,lr
8000427a:	5f b8       	srhi	r8
8000427c:	10 4a       	or	r10,r8
8000427e:	f2 0a 18 00 	cp.b	r10,r9
80004282:	c5 90       	breq	80004334 <__avr32_udiv64+0x254>
80004284:	30 18       	mov	r8,1
80004286:	c5 98       	rjmp	80004338 <__avr32_udiv64+0x258>
80004288:	f0 09 09 46 	lsl	r6,r8,r9
8000428c:	f2 03 11 20 	rsub	r3,r9,32
80004290:	fc 09 09 4e 	lsl	lr,lr,r9
80004294:	f0 03 0a 48 	lsr	r8,r8,r3
80004298:	f6 09 09 4c 	lsl	r12,r11,r9
8000429c:	f4 03 0a 42 	lsr	r2,r10,r3
800042a0:	ef 46 ff f4 	st.w	r7[-12],r6
800042a4:	f6 03 0a 43 	lsr	r3,r11,r3
800042a8:	18 42       	or	r2,r12
800042aa:	f1 ee 10 0c 	or	r12,r8,lr
800042ae:	f8 01 16 10 	lsr	r1,r12,0x10
800042b2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800042b6:	e6 01 0d 04 	divu	r4,r3,r1
800042ba:	e4 03 16 10 	lsr	r3,r2,0x10
800042be:	08 9e       	mov	lr,r4
800042c0:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800042c4:	e8 06 02 48 	mul	r8,r4,r6
800042c8:	10 33       	cp.w	r3,r8
800042ca:	c0 a2       	brcc	800042de <__avr32_udiv64+0x1fe>
800042cc:	20 1e       	sub	lr,1
800042ce:	18 03       	add	r3,r12
800042d0:	18 33       	cp.w	r3,r12
800042d2:	c0 63       	brcs	800042de <__avr32_udiv64+0x1fe>
800042d4:	10 33       	cp.w	r3,r8
800042d6:	f7 be 03 01 	sublo	lr,1
800042da:	e7 dc e3 03 	addcs	r3,r3,r12
800042de:	10 13       	sub	r3,r8
800042e0:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800042e4:	e6 01 0d 00 	divu	r0,r3,r1
800042e8:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800042ec:	00 98       	mov	r8,r0
800042ee:	e0 06 02 46 	mul	r6,r0,r6
800042f2:	0c 3b       	cp.w	r11,r6
800042f4:	c0 a2       	brcc	80004308 <__avr32_udiv64+0x228>
800042f6:	20 18       	sub	r8,1
800042f8:	18 0b       	add	r11,r12
800042fa:	18 3b       	cp.w	r11,r12
800042fc:	c0 63       	brcs	80004308 <__avr32_udiv64+0x228>
800042fe:	0c 3b       	cp.w	r11,r6
80004300:	f7 dc e3 0b 	addcs	r11,r11,r12
80004304:	f7 b8 03 01 	sublo	r8,1
80004308:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000430c:	ee f4 ff f4 	ld.w	r4,r7[-12]
80004310:	0c 1b       	sub	r11,r6
80004312:	f0 04 06 42 	mulu.d	r2,r8,r4
80004316:	06 95       	mov	r5,r3
80004318:	16 35       	cp.w	r5,r11
8000431a:	e0 8b 00 0a 	brhi	8000432e <__avr32_udiv64+0x24e>
8000431e:	5f 0b       	sreq	r11
80004320:	f4 09 09 49 	lsl	r9,r10,r9
80004324:	12 32       	cp.w	r2,r9
80004326:	5f b9       	srhi	r9
80004328:	f7 e9 00 09 	and	r9,r11,r9
8000432c:	c0 60       	breq	80004338 <__avr32_udiv64+0x258>
8000432e:	20 18       	sub	r8,1
80004330:	30 09       	mov	r9,0
80004332:	c0 38       	rjmp	80004338 <__avr32_udiv64+0x258>
80004334:	30 09       	mov	r9,0
80004336:	12 98       	mov	r8,r9
80004338:	10 9a       	mov	r10,r8
8000433a:	12 93       	mov	r3,r9
8000433c:	10 92       	mov	r2,r8
8000433e:	12 9b       	mov	r11,r9
80004340:	2f dd       	sub	sp,-12
80004342:	d8 32       	popm	r0-r7,pc

80004344 <memcpy>:
80004344:	58 8a       	cp.w	r10,8
80004346:	c2 f5       	brlt	800043a4 <memcpy+0x60>
80004348:	f9 eb 10 09 	or	r9,r12,r11
8000434c:	e2 19 00 03 	andl	r9,0x3,COH
80004350:	e0 81 00 97 	brne	8000447e <memcpy+0x13a>
80004354:	e0 4a 00 20 	cp.w	r10,32
80004358:	c3 b4       	brge	800043ce <memcpy+0x8a>
8000435a:	f4 08 14 02 	asr	r8,r10,0x2
8000435e:	f0 09 11 08 	rsub	r9,r8,8
80004362:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80004366:	76 69       	ld.w	r9,r11[0x18]
80004368:	99 69       	st.w	r12[0x18],r9
8000436a:	76 59       	ld.w	r9,r11[0x14]
8000436c:	99 59       	st.w	r12[0x14],r9
8000436e:	76 49       	ld.w	r9,r11[0x10]
80004370:	99 49       	st.w	r12[0x10],r9
80004372:	76 39       	ld.w	r9,r11[0xc]
80004374:	99 39       	st.w	r12[0xc],r9
80004376:	76 29       	ld.w	r9,r11[0x8]
80004378:	99 29       	st.w	r12[0x8],r9
8000437a:	76 19       	ld.w	r9,r11[0x4]
8000437c:	99 19       	st.w	r12[0x4],r9
8000437e:	76 09       	ld.w	r9,r11[0x0]
80004380:	99 09       	st.w	r12[0x0],r9
80004382:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80004386:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000438a:	e0 1a 00 03 	andl	r10,0x3
8000438e:	f4 0a 11 04 	rsub	r10,r10,4
80004392:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004396:	17 a9       	ld.ub	r9,r11[0x2]
80004398:	b0 a9       	st.b	r8[0x2],r9
8000439a:	17 99       	ld.ub	r9,r11[0x1]
8000439c:	b0 99       	st.b	r8[0x1],r9
8000439e:	17 89       	ld.ub	r9,r11[0x0]
800043a0:	b0 89       	st.b	r8[0x0],r9
800043a2:	5e fc       	retal	r12
800043a4:	f4 0a 11 09 	rsub	r10,r10,9
800043a8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800043ac:	17 f9       	ld.ub	r9,r11[0x7]
800043ae:	b8 f9       	st.b	r12[0x7],r9
800043b0:	17 e9       	ld.ub	r9,r11[0x6]
800043b2:	b8 e9       	st.b	r12[0x6],r9
800043b4:	17 d9       	ld.ub	r9,r11[0x5]
800043b6:	b8 d9       	st.b	r12[0x5],r9
800043b8:	17 c9       	ld.ub	r9,r11[0x4]
800043ba:	b8 c9       	st.b	r12[0x4],r9
800043bc:	17 b9       	ld.ub	r9,r11[0x3]
800043be:	b8 b9       	st.b	r12[0x3],r9
800043c0:	17 a9       	ld.ub	r9,r11[0x2]
800043c2:	b8 a9       	st.b	r12[0x2],r9
800043c4:	17 99       	ld.ub	r9,r11[0x1]
800043c6:	b8 99       	st.b	r12[0x1],r9
800043c8:	17 89       	ld.ub	r9,r11[0x0]
800043ca:	b8 89       	st.b	r12[0x0],r9
800043cc:	5e fc       	retal	r12
800043ce:	eb cd 40 c0 	pushm	r6-r7,lr
800043d2:	18 99       	mov	r9,r12
800043d4:	22 0a       	sub	r10,32
800043d6:	b7 07       	ld.d	r6,r11++
800043d8:	b3 26       	st.d	r9++,r6
800043da:	b7 07       	ld.d	r6,r11++
800043dc:	b3 26       	st.d	r9++,r6
800043de:	b7 07       	ld.d	r6,r11++
800043e0:	b3 26       	st.d	r9++,r6
800043e2:	b7 07       	ld.d	r6,r11++
800043e4:	b3 26       	st.d	r9++,r6
800043e6:	22 0a       	sub	r10,32
800043e8:	cf 74       	brge	800043d6 <memcpy+0x92>
800043ea:	2f 0a       	sub	r10,-16
800043ec:	c0 65       	brlt	800043f8 <memcpy+0xb4>
800043ee:	b7 07       	ld.d	r6,r11++
800043f0:	b3 26       	st.d	r9++,r6
800043f2:	b7 07       	ld.d	r6,r11++
800043f4:	b3 26       	st.d	r9++,r6
800043f6:	21 0a       	sub	r10,16
800043f8:	5c 3a       	neg	r10
800043fa:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800043fe:	d7 03       	nop
80004400:	d7 03       	nop
80004402:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004406:	f3 66 00 0e 	st.b	r9[14],r6
8000440a:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000440e:	f3 66 00 0d 	st.b	r9[13],r6
80004412:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004416:	f3 66 00 0c 	st.b	r9[12],r6
8000441a:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000441e:	f3 66 00 0b 	st.b	r9[11],r6
80004422:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004426:	f3 66 00 0a 	st.b	r9[10],r6
8000442a:	f7 36 00 09 	ld.ub	r6,r11[9]
8000442e:	f3 66 00 09 	st.b	r9[9],r6
80004432:	f7 36 00 08 	ld.ub	r6,r11[8]
80004436:	f3 66 00 08 	st.b	r9[8],r6
8000443a:	f7 36 00 07 	ld.ub	r6,r11[7]
8000443e:	f3 66 00 07 	st.b	r9[7],r6
80004442:	f7 36 00 06 	ld.ub	r6,r11[6]
80004446:	f3 66 00 06 	st.b	r9[6],r6
8000444a:	f7 36 00 05 	ld.ub	r6,r11[5]
8000444e:	f3 66 00 05 	st.b	r9[5],r6
80004452:	f7 36 00 04 	ld.ub	r6,r11[4]
80004456:	f3 66 00 04 	st.b	r9[4],r6
8000445a:	f7 36 00 03 	ld.ub	r6,r11[3]
8000445e:	f3 66 00 03 	st.b	r9[3],r6
80004462:	f7 36 00 02 	ld.ub	r6,r11[2]
80004466:	f3 66 00 02 	st.b	r9[2],r6
8000446a:	f7 36 00 01 	ld.ub	r6,r11[1]
8000446e:	f3 66 00 01 	st.b	r9[1],r6
80004472:	f7 36 00 00 	ld.ub	r6,r11[0]
80004476:	f3 66 00 00 	st.b	r9[0],r6
8000447a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000447e:	20 1a       	sub	r10,1
80004480:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80004484:	f8 0a 0b 09 	st.b	r12[r10],r9
80004488:	cf b1       	brne	8000447e <memcpy+0x13a>
8000448a:	5e fc       	retal	r12

8000448c <_vsprintf_r>:
8000448c:	d4 01       	pushm	lr
8000448e:	21 7d       	sub	sp,92
80004490:	e0 68 ff ff 	mov	r8,65535
80004494:	ea 18 7f ff 	orh	r8,0x7fff
80004498:	50 58       	stdsp	sp[0x14],r8
8000449a:	50 28       	stdsp	sp[0x8],r8
8000449c:	e0 68 02 08 	mov	r8,520
800044a0:	ba 68       	st.h	sp[0xc],r8
800044a2:	3f f8       	mov	r8,-1
800044a4:	50 4b       	stdsp	sp[0x10],r11
800044a6:	50 0b       	stdsp	sp[0x0],r11
800044a8:	ba 78       	st.h	sp[0xe],r8
800044aa:	1a 9b       	mov	r11,sp
800044ac:	ca 8d       	rcall	800047fc <_vfprintf_r>
800044ae:	30 09       	mov	r9,0
800044b0:	40 08       	lddsp	r8,sp[0x0]
800044b2:	b0 89       	st.b	r8[0x0],r9
800044b4:	2e 9d       	sub	sp,-92
800044b6:	d8 02       	popm	pc

800044b8 <vsprintf>:
800044b8:	d4 01       	pushm	lr
800044ba:	e0 68 00 fc 	mov	r8,252
800044be:	14 99       	mov	r9,r10
800044c0:	16 9a       	mov	r10,r11
800044c2:	18 9b       	mov	r11,r12
800044c4:	70 0c       	ld.w	r12,r8[0x0]
800044c6:	ce 3f       	rcall	8000448c <_vsprintf_r>
800044c8:	d8 02       	popm	pc
800044ca:	d7 03       	nop

800044cc <get_arg>:
800044cc:	d4 31       	pushm	r0-r7,lr
800044ce:	20 8d       	sub	sp,32
800044d0:	fa c4 ff bc 	sub	r4,sp,-68
800044d4:	50 4b       	stdsp	sp[0x10],r11
800044d6:	68 2e       	ld.w	lr,r4[0x8]
800044d8:	50 58       	stdsp	sp[0x14],r8
800044da:	12 96       	mov	r6,r9
800044dc:	7c 0b       	ld.w	r11,lr[0x0]
800044de:	70 05       	ld.w	r5,r8[0x0]
800044e0:	50 6e       	stdsp	sp[0x18],lr
800044e2:	58 0b       	cp.w	r11,0
800044e4:	f4 0b 17 00 	moveq	r11,r10
800044e8:	68 03       	ld.w	r3,r4[0x0]
800044ea:	68 11       	ld.w	r1,r4[0x4]
800044ec:	40 49       	lddsp	r9,sp[0x10]
800044ee:	30 08       	mov	r8,0
800044f0:	c2 89       	rjmp	80004740 <get_arg+0x274>
800044f2:	2f fb       	sub	r11,-1
800044f4:	32 5c       	mov	r12,37
800044f6:	17 8a       	ld.ub	r10,r11[0x0]
800044f8:	f8 0a 18 00 	cp.b	r10,r12
800044fc:	5f 1e       	srne	lr
800044fe:	f0 0a 18 00 	cp.b	r10,r8
80004502:	5f 1c       	srne	r12
80004504:	fd ec 00 0c 	and	r12,lr,r12
80004508:	f0 0c 18 00 	cp.b	r12,r8
8000450c:	cf 31       	brne	800044f2 <get_arg+0x26>
8000450e:	58 0a       	cp.w	r10,0
80004510:	e0 80 01 25 	breq	8000475a <get_arg+0x28e>
80004514:	30 0c       	mov	r12,0
80004516:	3f fa       	mov	r10,-1
80004518:	18 90       	mov	r0,r12
8000451a:	50 3a       	stdsp	sp[0xc],r10
8000451c:	18 94       	mov	r4,r12
8000451e:	18 92       	mov	r2,r12
80004520:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80004524:	16 97       	mov	r7,r11
80004526:	50 7c       	stdsp	sp[0x1c],r12
80004528:	fe cc a4 fc 	sub	r12,pc,-23300
8000452c:	0f 3a       	ld.ub	r10,r7++
8000452e:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80004532:	40 7c       	lddsp	r12,sp[0x1c]
80004534:	1c 0c       	add	r12,lr
80004536:	fe ce a5 d2 	sub	lr,pc,-23086
8000453a:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000453e:	20 1e       	sub	lr,1
80004540:	50 0e       	stdsp	sp[0x0],lr
80004542:	fe ce a6 4a 	sub	lr,pc,-22966
80004546:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000454a:	50 7c       	stdsp	sp[0x1c],r12
8000454c:	40 0c       	lddsp	r12,sp[0x0]
8000454e:	58 7c       	cp.w	r12,7
80004550:	e0 8b 00 f1 	brhi	80004732 <get_arg+0x266>
80004554:	fe ce a7 fc 	sub	lr,pc,-22532
80004558:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000455c:	36 8b       	mov	r11,104
8000455e:	f6 0a 18 00 	cp.b	r10,r11
80004562:	e0 80 00 e8 	breq	80004732 <get_arg+0x266>
80004566:	37 1b       	mov	r11,113
80004568:	f6 0a 18 00 	cp.b	r10,r11
8000456c:	c0 70       	breq	8000457a <get_arg+0xae>
8000456e:	34 cb       	mov	r11,76
80004570:	f6 0a 18 00 	cp.b	r10,r11
80004574:	c0 51       	brne	8000457e <get_arg+0xb2>
80004576:	a3 b4       	sbr	r4,0x3
80004578:	cd d8       	rjmp	80004732 <get_arg+0x266>
8000457a:	a5 b4       	sbr	r4,0x5
8000457c:	cd b8       	rjmp	80004732 <get_arg+0x266>
8000457e:	08 9a       	mov	r10,r4
80004580:	0e 9b       	mov	r11,r7
80004582:	a5 aa       	sbr	r10,0x4
80004584:	17 3c       	ld.ub	r12,r11++
80004586:	a5 b4       	sbr	r4,0x5
80004588:	36 ce       	mov	lr,108
8000458a:	fc 0c 18 00 	cp.b	r12,lr
8000458e:	e0 80 00 d3 	breq	80004734 <get_arg+0x268>
80004592:	14 94       	mov	r4,r10
80004594:	cc f8       	rjmp	80004732 <get_arg+0x266>
80004596:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000459a:	36 7c       	mov	r12,103
8000459c:	f8 0a 18 00 	cp.b	r10,r12
800045a0:	e0 8b 00 27 	brhi	800045ee <get_arg+0x122>
800045a4:	36 5b       	mov	r11,101
800045a6:	f6 0a 18 00 	cp.b	r10,r11
800045aa:	c4 82       	brcc	8000463a <get_arg+0x16e>
800045ac:	34 fb       	mov	r11,79
800045ae:	f6 0a 18 00 	cp.b	r10,r11
800045b2:	c4 80       	breq	80004642 <get_arg+0x176>
800045b4:	e0 8b 00 0c 	brhi	800045cc <get_arg+0x100>
800045b8:	34 5b       	mov	r11,69
800045ba:	f6 0a 18 00 	cp.b	r10,r11
800045be:	c3 e0       	breq	8000463a <get_arg+0x16e>
800045c0:	34 7b       	mov	r11,71
800045c2:	f6 0a 18 00 	cp.b	r10,r11
800045c6:	c3 a0       	breq	8000463a <get_arg+0x16e>
800045c8:	34 4b       	mov	r11,68
800045ca:	c0 88       	rjmp	800045da <get_arg+0x10e>
800045cc:	35 8b       	mov	r11,88
800045ce:	f6 0a 18 00 	cp.b	r10,r11
800045d2:	c2 c0       	breq	8000462a <get_arg+0x15e>
800045d4:	e0 8b 00 07 	brhi	800045e2 <get_arg+0x116>
800045d8:	35 5b       	mov	r11,85
800045da:	f6 0a 18 00 	cp.b	r10,r11
800045de:	c3 51       	brne	80004648 <get_arg+0x17c>
800045e0:	c3 18       	rjmp	80004642 <get_arg+0x176>
800045e2:	36 3b       	mov	r11,99
800045e4:	f6 0a 18 00 	cp.b	r10,r11
800045e8:	c2 f0       	breq	80004646 <get_arg+0x17a>
800045ea:	36 4b       	mov	r11,100
800045ec:	c0 e8       	rjmp	80004608 <get_arg+0x13c>
800045ee:	37 0b       	mov	r11,112
800045f0:	f6 0a 18 00 	cp.b	r10,r11
800045f4:	c2 50       	breq	8000463e <get_arg+0x172>
800045f6:	e0 8b 00 0d 	brhi	80004610 <get_arg+0x144>
800045fa:	36 eb       	mov	r11,110
800045fc:	f6 0a 18 00 	cp.b	r10,r11
80004600:	c1 f0       	breq	8000463e <get_arg+0x172>
80004602:	e0 8b 00 14 	brhi	8000462a <get_arg+0x15e>
80004606:	36 9b       	mov	r11,105
80004608:	f6 0a 18 00 	cp.b	r10,r11
8000460c:	c1 e1       	brne	80004648 <get_arg+0x17c>
8000460e:	c0 e8       	rjmp	8000462a <get_arg+0x15e>
80004610:	37 5b       	mov	r11,117
80004612:	f6 0a 18 00 	cp.b	r10,r11
80004616:	c0 a0       	breq	8000462a <get_arg+0x15e>
80004618:	37 8b       	mov	r11,120
8000461a:	f6 0a 18 00 	cp.b	r10,r11
8000461e:	c0 60       	breq	8000462a <get_arg+0x15e>
80004620:	37 3b       	mov	r11,115
80004622:	f6 0a 18 00 	cp.b	r10,r11
80004626:	c1 11       	brne	80004648 <get_arg+0x17c>
80004628:	c0 b8       	rjmp	8000463e <get_arg+0x172>
8000462a:	ed b4 00 04 	bld	r4,0x4
8000462e:	c0 a0       	breq	80004642 <get_arg+0x176>
80004630:	ed b4 00 05 	bld	r4,0x5
80004634:	c0 91       	brne	80004646 <get_arg+0x17a>
80004636:	30 20       	mov	r0,2
80004638:	c0 88       	rjmp	80004648 <get_arg+0x17c>
8000463a:	30 40       	mov	r0,4
8000463c:	c0 68       	rjmp	80004648 <get_arg+0x17c>
8000463e:	30 30       	mov	r0,3
80004640:	c0 48       	rjmp	80004648 <get_arg+0x17c>
80004642:	30 10       	mov	r0,1
80004644:	c0 28       	rjmp	80004648 <get_arg+0x17c>
80004646:	30 00       	mov	r0,0
80004648:	40 3b       	lddsp	r11,sp[0xc]
8000464a:	5b fb       	cp.w	r11,-1
8000464c:	c0 40       	breq	80004654 <get_arg+0x188>
8000464e:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80004652:	c7 08       	rjmp	80004732 <get_arg+0x266>
80004654:	58 60       	cp.w	r0,6
80004656:	e0 8b 00 6e 	brhi	80004732 <get_arg+0x266>
8000465a:	6c 0a       	ld.w	r10,r6[0x0]
8000465c:	ea cc ff ff 	sub	r12,r5,-1
80004660:	fe ce a8 e8 	sub	lr,pc,-22296
80004664:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80004668:	f4 cb ff f8 	sub	r11,r10,-8
8000466c:	8d 0b       	st.w	r6[0x0],r11
8000466e:	f4 ea 00 00 	ld.d	r10,r10[0]
80004672:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004676:	c0 f8       	rjmp	80004694 <get_arg+0x1c8>
80004678:	f4 cb ff fc 	sub	r11,r10,-4
8000467c:	8d 0b       	st.w	r6[0x0],r11
8000467e:	74 0a       	ld.w	r10,r10[0x0]
80004680:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004684:	c0 88       	rjmp	80004694 <get_arg+0x1c8>
80004686:	f4 cb ff f8 	sub	r11,r10,-8
8000468a:	8d 0b       	st.w	r6[0x0],r11
8000468c:	f4 ea 00 00 	ld.d	r10,r10[0]
80004690:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004694:	0e 9b       	mov	r11,r7
80004696:	18 95       	mov	r5,r12
80004698:	c4 e8       	rjmp	80004734 <get_arg+0x268>
8000469a:	62 0a       	ld.w	r10,r1[0x0]
8000469c:	5b fa       	cp.w	r10,-1
8000469e:	c0 b1       	brne	800046b4 <get_arg+0x1e8>
800046a0:	50 19       	stdsp	sp[0x4],r9
800046a2:	50 28       	stdsp	sp[0x8],r8
800046a4:	e0 6a 00 80 	mov	r10,128
800046a8:	30 0b       	mov	r11,0
800046aa:	02 9c       	mov	r12,r1
800046ac:	e0 a0 1d 78 	rcall	8000819c <memset>
800046b0:	40 28       	lddsp	r8,sp[0x8]
800046b2:	40 19       	lddsp	r9,sp[0x4]
800046b4:	e4 cc 00 01 	sub	r12,r2,1
800046b8:	0e 9b       	mov	r11,r7
800046ba:	50 3c       	stdsp	sp[0xc],r12
800046bc:	f2 0c 0c 49 	max	r9,r9,r12
800046c0:	c3 a8       	rjmp	80004734 <get_arg+0x268>
800046c2:	62 0a       	ld.w	r10,r1[0x0]
800046c4:	5b fa       	cp.w	r10,-1
800046c6:	c0 b1       	brne	800046dc <get_arg+0x210>
800046c8:	50 19       	stdsp	sp[0x4],r9
800046ca:	50 28       	stdsp	sp[0x8],r8
800046cc:	e0 6a 00 80 	mov	r10,128
800046d0:	30 0b       	mov	r11,0
800046d2:	02 9c       	mov	r12,r1
800046d4:	e0 a0 1d 64 	rcall	8000819c <memset>
800046d8:	40 28       	lddsp	r8,sp[0x8]
800046da:	40 19       	lddsp	r9,sp[0x4]
800046dc:	20 12       	sub	r2,1
800046de:	30 0a       	mov	r10,0
800046e0:	0e 9b       	mov	r11,r7
800046e2:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
800046e6:	f2 02 0c 49 	max	r9,r9,r2
800046ea:	c2 58       	rjmp	80004734 <get_arg+0x268>
800046ec:	16 97       	mov	r7,r11
800046ee:	6c 0a       	ld.w	r10,r6[0x0]
800046f0:	f4 cb ff fc 	sub	r11,r10,-4
800046f4:	8d 0b       	st.w	r6[0x0],r11
800046f6:	74 0a       	ld.w	r10,r10[0x0]
800046f8:	0e 9b       	mov	r11,r7
800046fa:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800046fe:	2f f5       	sub	r5,-1
80004700:	c1 a8       	rjmp	80004734 <get_arg+0x268>
80004702:	f4 c2 00 30 	sub	r2,r10,48
80004706:	c0 68       	rjmp	80004712 <get_arg+0x246>
80004708:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000470c:	2f f7       	sub	r7,-1
8000470e:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004712:	0f 8a       	ld.ub	r10,r7[0x0]
80004714:	58 0a       	cp.w	r10,0
80004716:	c0 e0       	breq	80004732 <get_arg+0x266>
80004718:	23 0a       	sub	r10,48
8000471a:	58 9a       	cp.w	r10,9
8000471c:	fe 98 ff f6 	brls	80004708 <get_arg+0x23c>
80004720:	c0 98       	rjmp	80004732 <get_arg+0x266>
80004722:	2f f7       	sub	r7,-1
80004724:	0f 8a       	ld.ub	r10,r7[0x0]
80004726:	58 0a       	cp.w	r10,0
80004728:	c0 50       	breq	80004732 <get_arg+0x266>
8000472a:	23 0a       	sub	r10,48
8000472c:	58 9a       	cp.w	r10,9
8000472e:	fe 98 ff fa 	brls	80004722 <get_arg+0x256>
80004732:	0e 9b       	mov	r11,r7
80004734:	40 7c       	lddsp	r12,sp[0x1c]
80004736:	30 ba       	mov	r10,11
80004738:	f4 0c 18 00 	cp.b	r12,r10
8000473c:	fe 91 fe f2 	brne	80004520 <get_arg+0x54>
80004740:	40 42       	lddsp	r2,sp[0x10]
80004742:	17 8c       	ld.ub	r12,r11[0x0]
80004744:	0a 32       	cp.w	r2,r5
80004746:	5f 4a       	srge	r10
80004748:	f0 0c 18 00 	cp.b	r12,r8
8000474c:	5f 1c       	srne	r12
8000474e:	f9 ea 00 0a 	and	r10,r12,r10
80004752:	f0 0a 18 00 	cp.b	r10,r8
80004756:	fe 91 fe cf 	brne	800044f4 <get_arg+0x28>
8000475a:	30 08       	mov	r8,0
8000475c:	40 4e       	lddsp	lr,sp[0x10]
8000475e:	17 8a       	ld.ub	r10,r11[0x0]
80004760:	e2 05 00 21 	add	r1,r1,r5<<0x2
80004764:	f0 0a 18 00 	cp.b	r10,r8
80004768:	fc 09 17 10 	movne	r9,lr
8000476c:	e6 05 00 38 	add	r8,r3,r5<<0x3
80004770:	06 9e       	mov	lr,r3
80004772:	c2 a8       	rjmp	800047c6 <get_arg+0x2fa>
80004774:	62 0a       	ld.w	r10,r1[0x0]
80004776:	58 3a       	cp.w	r10,3
80004778:	c1 e0       	breq	800047b4 <get_arg+0x2e8>
8000477a:	e0 89 00 07 	brgt	80004788 <get_arg+0x2bc>
8000477e:	58 1a       	cp.w	r10,1
80004780:	c1 a0       	breq	800047b4 <get_arg+0x2e8>
80004782:	58 2a       	cp.w	r10,2
80004784:	c1 81       	brne	800047b4 <get_arg+0x2e8>
80004786:	c0 58       	rjmp	80004790 <get_arg+0x2c4>
80004788:	58 5a       	cp.w	r10,5
8000478a:	c0 c0       	breq	800047a2 <get_arg+0x2d6>
8000478c:	c0 b5       	brlt	800047a2 <get_arg+0x2d6>
8000478e:	c1 38       	rjmp	800047b4 <get_arg+0x2e8>
80004790:	6c 0a       	ld.w	r10,r6[0x0]
80004792:	f4 cc ff f8 	sub	r12,r10,-8
80004796:	8d 0c       	st.w	r6[0x0],r12
80004798:	f4 e2 00 00 	ld.d	r2,r10[0]
8000479c:	f0 e3 00 00 	st.d	r8[0],r2
800047a0:	c1 08       	rjmp	800047c0 <get_arg+0x2f4>
800047a2:	6c 0a       	ld.w	r10,r6[0x0]
800047a4:	f4 cc ff f8 	sub	r12,r10,-8
800047a8:	8d 0c       	st.w	r6[0x0],r12
800047aa:	f4 e2 00 00 	ld.d	r2,r10[0]
800047ae:	f0 e3 00 00 	st.d	r8[0],r2
800047b2:	c0 78       	rjmp	800047c0 <get_arg+0x2f4>
800047b4:	6c 0a       	ld.w	r10,r6[0x0]
800047b6:	f4 cc ff fc 	sub	r12,r10,-4
800047ba:	8d 0c       	st.w	r6[0x0],r12
800047bc:	74 0a       	ld.w	r10,r10[0x0]
800047be:	91 0a       	st.w	r8[0x0],r10
800047c0:	2f f5       	sub	r5,-1
800047c2:	2f 88       	sub	r8,-8
800047c4:	2f c1       	sub	r1,-4
800047c6:	12 35       	cp.w	r5,r9
800047c8:	fe 9a ff d6 	brle	80004774 <get_arg+0x2a8>
800047cc:	1c 93       	mov	r3,lr
800047ce:	40 52       	lddsp	r2,sp[0x14]
800047d0:	40 6e       	lddsp	lr,sp[0x18]
800047d2:	85 05       	st.w	r2[0x0],r5
800047d4:	9d 0b       	st.w	lr[0x0],r11
800047d6:	40 4b       	lddsp	r11,sp[0x10]
800047d8:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
800047dc:	2f 8d       	sub	sp,-32
800047de:	d8 32       	popm	r0-r7,pc

800047e0 <__sprint_r>:
800047e0:	d4 21       	pushm	r4-r7,lr
800047e2:	14 97       	mov	r7,r10
800047e4:	74 28       	ld.w	r8,r10[0x8]
800047e6:	58 08       	cp.w	r8,0
800047e8:	c0 41       	brne	800047f0 <__sprint_r+0x10>
800047ea:	95 18       	st.w	r10[0x4],r8
800047ec:	10 9c       	mov	r12,r8
800047ee:	d8 22       	popm	r4-r7,pc
800047f0:	e0 a0 18 b4 	rcall	80007958 <__sfvwrite_r>
800047f4:	30 08       	mov	r8,0
800047f6:	8f 18       	st.w	r7[0x4],r8
800047f8:	8f 28       	st.w	r7[0x8],r8
800047fa:	d8 22       	popm	r4-r7,pc

800047fc <_vfprintf_r>:
800047fc:	d4 31       	pushm	r0-r7,lr
800047fe:	fa cd 06 bc 	sub	sp,sp,1724
80004802:	51 09       	stdsp	sp[0x40],r9
80004804:	16 91       	mov	r1,r11
80004806:	14 97       	mov	r7,r10
80004808:	18 95       	mov	r5,r12
8000480a:	e0 a0 1a 1d 	rcall	80007c44 <_localeconv_r>
8000480e:	78 0c       	ld.w	r12,r12[0x0]
80004810:	50 cc       	stdsp	sp[0x30],r12
80004812:	58 05       	cp.w	r5,0
80004814:	c0 70       	breq	80004822 <_vfprintf_r+0x26>
80004816:	6a 68       	ld.w	r8,r5[0x18]
80004818:	58 08       	cp.w	r8,0
8000481a:	c0 41       	brne	80004822 <_vfprintf_r+0x26>
8000481c:	0a 9c       	mov	r12,r5
8000481e:	e0 a0 17 3d 	rcall	80007698 <__sinit>
80004822:	fe c8 a6 e6 	sub	r8,pc,-22810
80004826:	10 31       	cp.w	r1,r8
80004828:	c0 31       	brne	8000482e <_vfprintf_r+0x32>
8000482a:	6a 01       	ld.w	r1,r5[0x0]
8000482c:	c0 c8       	rjmp	80004844 <_vfprintf_r+0x48>
8000482e:	fe c8 a6 d2 	sub	r8,pc,-22830
80004832:	10 31       	cp.w	r1,r8
80004834:	c0 31       	brne	8000483a <_vfprintf_r+0x3e>
80004836:	6a 11       	ld.w	r1,r5[0x4]
80004838:	c0 68       	rjmp	80004844 <_vfprintf_r+0x48>
8000483a:	fe c8 a6 be 	sub	r8,pc,-22850
8000483e:	10 31       	cp.w	r1,r8
80004840:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80004844:	82 68       	ld.sh	r8,r1[0xc]
80004846:	ed b8 00 03 	bld	r8,0x3
8000484a:	c0 41       	brne	80004852 <_vfprintf_r+0x56>
8000484c:	62 48       	ld.w	r8,r1[0x10]
8000484e:	58 08       	cp.w	r8,0
80004850:	c0 71       	brne	8000485e <_vfprintf_r+0x62>
80004852:	02 9b       	mov	r11,r1
80004854:	0a 9c       	mov	r12,r5
80004856:	e0 a0 0f 5d 	rcall	80006710 <__swsetup_r>
8000485a:	e0 81 0f 54 	brne	80006702 <_vfprintf_r+0x1f06>
8000485e:	82 68       	ld.sh	r8,r1[0xc]
80004860:	10 99       	mov	r9,r8
80004862:	e2 19 00 1a 	andl	r9,0x1a,COH
80004866:	58 a9       	cp.w	r9,10
80004868:	c3 c1       	brne	800048e0 <_vfprintf_r+0xe4>
8000486a:	82 79       	ld.sh	r9,r1[0xe]
8000486c:	30 0a       	mov	r10,0
8000486e:	f4 09 19 00 	cp.h	r9,r10
80004872:	c3 75       	brlt	800048e0 <_vfprintf_r+0xe4>
80004874:	a1 d8       	cbr	r8,0x1
80004876:	fb 58 05 d0 	st.h	sp[1488],r8
8000487a:	62 88       	ld.w	r8,r1[0x20]
8000487c:	fb 48 05 e4 	st.w	sp[1508],r8
80004880:	62 a8       	ld.w	r8,r1[0x28]
80004882:	fb 48 05 ec 	st.w	sp[1516],r8
80004886:	fa c8 ff bc 	sub	r8,sp,-68
8000488a:	fb 48 05 d4 	st.w	sp[1492],r8
8000488e:	fb 48 05 c4 	st.w	sp[1476],r8
80004892:	e0 68 04 00 	mov	r8,1024
80004896:	fb 48 05 d8 	st.w	sp[1496],r8
8000489a:	fb 48 05 cc 	st.w	sp[1484],r8
8000489e:	30 08       	mov	r8,0
800048a0:	fb 59 05 d2 	st.h	sp[1490],r9
800048a4:	0e 9a       	mov	r10,r7
800048a6:	41 09       	lddsp	r9,sp[0x40]
800048a8:	fa c7 fa 3c 	sub	r7,sp,-1476
800048ac:	fb 48 05 dc 	st.w	sp[1500],r8
800048b0:	0a 9c       	mov	r12,r5
800048b2:	0e 9b       	mov	r11,r7
800048b4:	ca 4f       	rcall	800047fc <_vfprintf_r>
800048b6:	50 bc       	stdsp	sp[0x2c],r12
800048b8:	c0 95       	brlt	800048ca <_vfprintf_r+0xce>
800048ba:	0e 9b       	mov	r11,r7
800048bc:	0a 9c       	mov	r12,r5
800048be:	e0 a0 16 15 	rcall	800074e8 <_fflush_r>
800048c2:	40 be       	lddsp	lr,sp[0x2c]
800048c4:	f9 be 01 ff 	movne	lr,-1
800048c8:	50 be       	stdsp	sp[0x2c],lr
800048ca:	fb 08 05 d0 	ld.sh	r8,sp[1488]
800048ce:	ed b8 00 06 	bld	r8,0x6
800048d2:	e0 81 0f 1a 	brne	80006706 <_vfprintf_r+0x1f0a>
800048d6:	82 68       	ld.sh	r8,r1[0xc]
800048d8:	a7 a8       	sbr	r8,0x6
800048da:	a2 68       	st.h	r1[0xc],r8
800048dc:	e0 8f 0f 15 	bral	80006706 <_vfprintf_r+0x1f0a>
800048e0:	30 08       	mov	r8,0
800048e2:	fb 48 06 b4 	st.w	sp[1716],r8
800048e6:	fb 48 06 90 	st.w	sp[1680],r8
800048ea:	fb 48 06 8c 	st.w	sp[1676],r8
800048ee:	fb 48 06 b0 	st.w	sp[1712],r8
800048f2:	30 08       	mov	r8,0
800048f4:	30 09       	mov	r9,0
800048f6:	50 a7       	stdsp	sp[0x28],r7
800048f8:	50 78       	stdsp	sp[0x1c],r8
800048fa:	fa c3 f9 e0 	sub	r3,sp,-1568
800048fe:	3f f8       	mov	r8,-1
80004900:	50 59       	stdsp	sp[0x14],r9
80004902:	fb 43 06 88 	st.w	sp[1672],r3
80004906:	fb 48 05 44 	st.w	sp[1348],r8
8000490a:	12 9c       	mov	r12,r9
8000490c:	50 69       	stdsp	sp[0x18],r9
8000490e:	50 d9       	stdsp	sp[0x34],r9
80004910:	50 e9       	stdsp	sp[0x38],r9
80004912:	50 b9       	stdsp	sp[0x2c],r9
80004914:	12 97       	mov	r7,r9
80004916:	0a 94       	mov	r4,r5
80004918:	40 a2       	lddsp	r2,sp[0x28]
8000491a:	32 5a       	mov	r10,37
8000491c:	30 08       	mov	r8,0
8000491e:	c0 28       	rjmp	80004922 <_vfprintf_r+0x126>
80004920:	2f f2       	sub	r2,-1
80004922:	05 89       	ld.ub	r9,r2[0x0]
80004924:	f0 09 18 00 	cp.b	r9,r8
80004928:	5f 1b       	srne	r11
8000492a:	f4 09 18 00 	cp.b	r9,r10
8000492e:	5f 19       	srne	r9
80004930:	f3 eb 00 0b 	and	r11,r9,r11
80004934:	f0 0b 18 00 	cp.b	r11,r8
80004938:	cf 41       	brne	80004920 <_vfprintf_r+0x124>
8000493a:	40 ab       	lddsp	r11,sp[0x28]
8000493c:	e4 0b 01 06 	sub	r6,r2,r11
80004940:	c1 e0       	breq	8000497c <_vfprintf_r+0x180>
80004942:	fa f8 06 90 	ld.w	r8,sp[1680]
80004946:	0c 08       	add	r8,r6
80004948:	87 0b       	st.w	r3[0x0],r11
8000494a:	fb 48 06 90 	st.w	sp[1680],r8
8000494e:	87 16       	st.w	r3[0x4],r6
80004950:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004954:	2f f8       	sub	r8,-1
80004956:	fb 48 06 8c 	st.w	sp[1676],r8
8000495a:	58 78       	cp.w	r8,7
8000495c:	e0 89 00 04 	brgt	80004964 <_vfprintf_r+0x168>
80004960:	2f 83       	sub	r3,-8
80004962:	c0 a8       	rjmp	80004976 <_vfprintf_r+0x17a>
80004964:	fa ca f9 78 	sub	r10,sp,-1672
80004968:	02 9b       	mov	r11,r1
8000496a:	08 9c       	mov	r12,r4
8000496c:	c3 af       	rcall	800047e0 <__sprint_r>
8000496e:	e0 81 0e c6 	brne	800066fa <_vfprintf_r+0x1efe>
80004972:	fa c3 f9 e0 	sub	r3,sp,-1568
80004976:	40 ba       	lddsp	r10,sp[0x2c]
80004978:	0c 0a       	add	r10,r6
8000497a:	50 ba       	stdsp	sp[0x2c],r10
8000497c:	05 89       	ld.ub	r9,r2[0x0]
8000497e:	30 08       	mov	r8,0
80004980:	f0 09 18 00 	cp.b	r9,r8
80004984:	e0 80 0e aa 	breq	800066d8 <_vfprintf_r+0x1edc>
80004988:	30 09       	mov	r9,0
8000498a:	fb 68 06 bb 	st.b	sp[1723],r8
8000498e:	0e 96       	mov	r6,r7
80004990:	e4 c8 ff ff 	sub	r8,r2,-1
80004994:	3f fe       	mov	lr,-1
80004996:	50 93       	stdsp	sp[0x24],r3
80004998:	50 41       	stdsp	sp[0x10],r1
8000499a:	0e 93       	mov	r3,r7
8000499c:	04 91       	mov	r1,r2
8000499e:	50 89       	stdsp	sp[0x20],r9
800049a0:	50 a8       	stdsp	sp[0x28],r8
800049a2:	50 2e       	stdsp	sp[0x8],lr
800049a4:	50 39       	stdsp	sp[0xc],r9
800049a6:	12 95       	mov	r5,r9
800049a8:	12 90       	mov	r0,r9
800049aa:	10 97       	mov	r7,r8
800049ac:	08 92       	mov	r2,r4
800049ae:	c0 78       	rjmp	800049bc <_vfprintf_r+0x1c0>
800049b0:	3f fc       	mov	r12,-1
800049b2:	08 97       	mov	r7,r4
800049b4:	50 2c       	stdsp	sp[0x8],r12
800049b6:	c0 38       	rjmp	800049bc <_vfprintf_r+0x1c0>
800049b8:	30 0b       	mov	r11,0
800049ba:	50 3b       	stdsp	sp[0xc],r11
800049bc:	0f 38       	ld.ub	r8,r7++
800049be:	c0 28       	rjmp	800049c2 <_vfprintf_r+0x1c6>
800049c0:	12 90       	mov	r0,r9
800049c2:	f0 c9 00 20 	sub	r9,r8,32
800049c6:	e0 49 00 58 	cp.w	r9,88
800049ca:	e0 8b 0a 30 	brhi	80005e2a <_vfprintf_r+0x162e>
800049ce:	fe ca ac 3a 	sub	r10,pc,-21446
800049d2:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
800049d6:	50 a7       	stdsp	sp[0x28],r7
800049d8:	50 80       	stdsp	sp[0x20],r0
800049da:	0c 97       	mov	r7,r6
800049dc:	04 94       	mov	r4,r2
800049de:	06 96       	mov	r6,r3
800049e0:	02 92       	mov	r2,r1
800049e2:	fe c9 aa 12 	sub	r9,pc,-21998
800049e6:	40 93       	lddsp	r3,sp[0x24]
800049e8:	10 90       	mov	r0,r8
800049ea:	40 41       	lddsp	r1,sp[0x10]
800049ec:	50 d9       	stdsp	sp[0x34],r9
800049ee:	e0 8f 08 8e 	bral	80005b0a <_vfprintf_r+0x130e>
800049f2:	30 08       	mov	r8,0
800049f4:	fb 39 06 bb 	ld.ub	r9,sp[1723]
800049f8:	f0 09 18 00 	cp.b	r9,r8
800049fc:	ce 01       	brne	800049bc <_vfprintf_r+0x1c0>
800049fe:	32 08       	mov	r8,32
80004a00:	c6 e8       	rjmp	80004adc <_vfprintf_r+0x2e0>
80004a02:	a1 a5       	sbr	r5,0x0
80004a04:	cd cb       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004a06:	0f 89       	ld.ub	r9,r7[0x0]
80004a08:	f2 c8 00 30 	sub	r8,r9,48
80004a0c:	58 98       	cp.w	r8,9
80004a0e:	e0 8b 00 1d 	brhi	80004a48 <_vfprintf_r+0x24c>
80004a12:	ee c8 ff ff 	sub	r8,r7,-1
80004a16:	30 0b       	mov	r11,0
80004a18:	23 09       	sub	r9,48
80004a1a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004a1e:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004a22:	11 39       	ld.ub	r9,r8++
80004a24:	f2 ca 00 30 	sub	r10,r9,48
80004a28:	58 9a       	cp.w	r10,9
80004a2a:	fe 98 ff f7 	brls	80004a18 <_vfprintf_r+0x21c>
80004a2e:	e0 49 00 24 	cp.w	r9,36
80004a32:	cc 31       	brne	800049b8 <_vfprintf_r+0x1bc>
80004a34:	e0 4b 00 20 	cp.w	r11,32
80004a38:	e0 89 0e 60 	brgt	800066f8 <_vfprintf_r+0x1efc>
80004a3c:	20 1b       	sub	r11,1
80004a3e:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004a42:	12 3b       	cp.w	r11,r9
80004a44:	c0 95       	brlt	80004a56 <_vfprintf_r+0x25a>
80004a46:	c1 08       	rjmp	80004a66 <_vfprintf_r+0x26a>
80004a48:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004a4c:	ec ca ff ff 	sub	r10,r6,-1
80004a50:	12 36       	cp.w	r6,r9
80004a52:	c1 f5       	brlt	80004a90 <_vfprintf_r+0x294>
80004a54:	c2 68       	rjmp	80004aa0 <_vfprintf_r+0x2a4>
80004a56:	fa ce f9 44 	sub	lr,sp,-1724
80004a5a:	10 97       	mov	r7,r8
80004a5c:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004a60:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004a64:	c3 58       	rjmp	80004ace <_vfprintf_r+0x2d2>
80004a66:	10 97       	mov	r7,r8
80004a68:	fa c8 f9 50 	sub	r8,sp,-1712
80004a6c:	1a d8       	st.w	--sp,r8
80004a6e:	fa c8 fa b8 	sub	r8,sp,-1352
80004a72:	1a d8       	st.w	--sp,r8
80004a74:	fa c8 fb b4 	sub	r8,sp,-1100
80004a78:	02 9a       	mov	r10,r1
80004a7a:	1a d8       	st.w	--sp,r8
80004a7c:	04 9c       	mov	r12,r2
80004a7e:	fa c8 f9 40 	sub	r8,sp,-1728
80004a82:	fa c9 ff b4 	sub	r9,sp,-76
80004a86:	fe b0 fd 23 	rcall	800044cc <get_arg>
80004a8a:	2f dd       	sub	sp,-12
80004a8c:	78 00       	ld.w	r0,r12[0x0]
80004a8e:	c2 08       	rjmp	80004ace <_vfprintf_r+0x2d2>
80004a90:	fa cc f9 44 	sub	r12,sp,-1724
80004a94:	14 96       	mov	r6,r10
80004a96:	f8 03 00 38 	add	r8,r12,r3<<0x3
80004a9a:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80004a9e:	c1 88       	rjmp	80004ace <_vfprintf_r+0x2d2>
80004aa0:	41 08       	lddsp	r8,sp[0x40]
80004aa2:	59 f9       	cp.w	r9,31
80004aa4:	e0 89 00 11 	brgt	80004ac6 <_vfprintf_r+0x2ca>
80004aa8:	f0 cb ff fc 	sub	r11,r8,-4
80004aac:	51 0b       	stdsp	sp[0x40],r11
80004aae:	70 00       	ld.w	r0,r8[0x0]
80004ab0:	fa cb f9 44 	sub	r11,sp,-1724
80004ab4:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004ab8:	f1 40 fd 88 	st.w	r8[-632],r0
80004abc:	2f f9       	sub	r9,-1
80004abe:	14 96       	mov	r6,r10
80004ac0:	fb 49 06 b4 	st.w	sp[1716],r9
80004ac4:	c0 58       	rjmp	80004ace <_vfprintf_r+0x2d2>
80004ac6:	70 00       	ld.w	r0,r8[0x0]
80004ac8:	14 96       	mov	r6,r10
80004aca:	2f c8       	sub	r8,-4
80004acc:	51 08       	stdsp	sp[0x40],r8
80004ace:	58 00       	cp.w	r0,0
80004ad0:	fe 94 ff 76 	brge	800049bc <_vfprintf_r+0x1c0>
80004ad4:	5c 30       	neg	r0
80004ad6:	a3 a5       	sbr	r5,0x2
80004ad8:	c7 2b       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004ada:	32 b8       	mov	r8,43
80004adc:	fb 68 06 bb 	st.b	sp[1723],r8
80004ae0:	c6 eb       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004ae2:	0f 38       	ld.ub	r8,r7++
80004ae4:	e0 48 00 2a 	cp.w	r8,42
80004ae8:	c0 30       	breq	80004aee <_vfprintf_r+0x2f2>
80004aea:	30 09       	mov	r9,0
80004aec:	c7 98       	rjmp	80004bde <_vfprintf_r+0x3e2>
80004aee:	0f 88       	ld.ub	r8,r7[0x0]
80004af0:	f0 c9 00 30 	sub	r9,r8,48
80004af4:	58 99       	cp.w	r9,9
80004af6:	e0 8b 00 1f 	brhi	80004b34 <_vfprintf_r+0x338>
80004afa:	ee c4 ff ff 	sub	r4,r7,-1
80004afe:	30 0b       	mov	r11,0
80004b00:	23 08       	sub	r8,48
80004b02:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004b06:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80004b0a:	09 38       	ld.ub	r8,r4++
80004b0c:	f0 c9 00 30 	sub	r9,r8,48
80004b10:	58 99       	cp.w	r9,9
80004b12:	fe 98 ff f7 	brls	80004b00 <_vfprintf_r+0x304>
80004b16:	e0 48 00 24 	cp.w	r8,36
80004b1a:	fe 91 ff 4f 	brne	800049b8 <_vfprintf_r+0x1bc>
80004b1e:	e0 4b 00 20 	cp.w	r11,32
80004b22:	e0 89 0d eb 	brgt	800066f8 <_vfprintf_r+0x1efc>
80004b26:	20 1b       	sub	r11,1
80004b28:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b2c:	10 3b       	cp.w	r11,r8
80004b2e:	c0 a5       	brlt	80004b42 <_vfprintf_r+0x346>
80004b30:	c1 18       	rjmp	80004b52 <_vfprintf_r+0x356>
80004b32:	d7 03       	nop
80004b34:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004b38:	ec c9 ff ff 	sub	r9,r6,-1
80004b3c:	14 36       	cp.w	r6,r10
80004b3e:	c1 f5       	brlt	80004b7c <_vfprintf_r+0x380>
80004b40:	c2 88       	rjmp	80004b90 <_vfprintf_r+0x394>
80004b42:	fa ca f9 44 	sub	r10,sp,-1724
80004b46:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80004b4a:	f6 fb fd 88 	ld.w	r11,r11[-632]
80004b4e:	50 2b       	stdsp	sp[0x8],r11
80004b50:	c3 c8       	rjmp	80004bc8 <_vfprintf_r+0x3cc>
80004b52:	fa c8 f9 50 	sub	r8,sp,-1712
80004b56:	1a d8       	st.w	--sp,r8
80004b58:	fa c8 fa b8 	sub	r8,sp,-1352
80004b5c:	1a d8       	st.w	--sp,r8
80004b5e:	fa c8 fb b4 	sub	r8,sp,-1100
80004b62:	02 9a       	mov	r10,r1
80004b64:	1a d8       	st.w	--sp,r8
80004b66:	04 9c       	mov	r12,r2
80004b68:	fa c8 f9 40 	sub	r8,sp,-1728
80004b6c:	fa c9 ff b4 	sub	r9,sp,-76
80004b70:	fe b0 fc ae 	rcall	800044cc <get_arg>
80004b74:	2f dd       	sub	sp,-12
80004b76:	78 0c       	ld.w	r12,r12[0x0]
80004b78:	50 2c       	stdsp	sp[0x8],r12
80004b7a:	c2 78       	rjmp	80004bc8 <_vfprintf_r+0x3cc>
80004b7c:	12 96       	mov	r6,r9
80004b7e:	0e 94       	mov	r4,r7
80004b80:	fa c9 f9 44 	sub	r9,sp,-1724
80004b84:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004b88:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004b8c:	50 28       	stdsp	sp[0x8],r8
80004b8e:	c1 d8       	rjmp	80004bc8 <_vfprintf_r+0x3cc>
80004b90:	41 08       	lddsp	r8,sp[0x40]
80004b92:	59 fa       	cp.w	r10,31
80004b94:	e0 89 00 14 	brgt	80004bbc <_vfprintf_r+0x3c0>
80004b98:	f0 cb ff fc 	sub	r11,r8,-4
80004b9c:	70 08       	ld.w	r8,r8[0x0]
80004b9e:	51 0b       	stdsp	sp[0x40],r11
80004ba0:	50 28       	stdsp	sp[0x8],r8
80004ba2:	fa c6 f9 44 	sub	r6,sp,-1724
80004ba6:	40 2e       	lddsp	lr,sp[0x8]
80004ba8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004bac:	f1 4e fd 88 	st.w	r8[-632],lr
80004bb0:	2f fa       	sub	r10,-1
80004bb2:	0e 94       	mov	r4,r7
80004bb4:	fb 4a 06 b4 	st.w	sp[1716],r10
80004bb8:	12 96       	mov	r6,r9
80004bba:	c0 78       	rjmp	80004bc8 <_vfprintf_r+0x3cc>
80004bbc:	70 0c       	ld.w	r12,r8[0x0]
80004bbe:	0e 94       	mov	r4,r7
80004bc0:	2f c8       	sub	r8,-4
80004bc2:	50 2c       	stdsp	sp[0x8],r12
80004bc4:	12 96       	mov	r6,r9
80004bc6:	51 08       	stdsp	sp[0x40],r8
80004bc8:	40 2b       	lddsp	r11,sp[0x8]
80004bca:	58 0b       	cp.w	r11,0
80004bcc:	fe 95 fe f2 	brlt	800049b0 <_vfprintf_r+0x1b4>
80004bd0:	08 97       	mov	r7,r4
80004bd2:	cf 5a       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004bd4:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004bd8:	0f 38       	ld.ub	r8,r7++
80004bda:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004bde:	f0 ca 00 30 	sub	r10,r8,48
80004be2:	58 9a       	cp.w	r10,9
80004be4:	fe 98 ff f8 	brls	80004bd4 <_vfprintf_r+0x3d8>
80004be8:	3f fa       	mov	r10,-1
80004bea:	f2 0a 0c 49 	max	r9,r9,r10
80004bee:	50 29       	stdsp	sp[0x8],r9
80004bf0:	ce 9a       	rjmp	800049c2 <_vfprintf_r+0x1c6>
80004bf2:	a7 b5       	sbr	r5,0x7
80004bf4:	ce 4a       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004bf6:	30 09       	mov	r9,0
80004bf8:	23 08       	sub	r8,48
80004bfa:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004bfe:	f0 09 00 19 	add	r9,r8,r9<<0x1
80004c02:	0f 38       	ld.ub	r8,r7++
80004c04:	f0 ca 00 30 	sub	r10,r8,48
80004c08:	58 9a       	cp.w	r10,9
80004c0a:	fe 98 ff f7 	brls	80004bf8 <_vfprintf_r+0x3fc>
80004c0e:	e0 48 00 24 	cp.w	r8,36
80004c12:	fe 91 fe d7 	brne	800049c0 <_vfprintf_r+0x1c4>
80004c16:	e0 49 00 20 	cp.w	r9,32
80004c1a:	e0 89 0d 6f 	brgt	800066f8 <_vfprintf_r+0x1efc>
80004c1e:	f2 c3 00 01 	sub	r3,r9,1
80004c22:	30 19       	mov	r9,1
80004c24:	50 39       	stdsp	sp[0xc],r9
80004c26:	cc ba       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004c28:	a3 b5       	sbr	r5,0x3
80004c2a:	cc 9a       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004c2c:	a7 a5       	sbr	r5,0x6
80004c2e:	cc 7a       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004c30:	0a 98       	mov	r8,r5
80004c32:	a5 b5       	sbr	r5,0x5
80004c34:	a5 a8       	sbr	r8,0x4
80004c36:	0f 89       	ld.ub	r9,r7[0x0]
80004c38:	36 ce       	mov	lr,108
80004c3a:	fc 09 18 00 	cp.b	r9,lr
80004c3e:	f7 b7 00 ff 	subeq	r7,-1
80004c42:	f0 05 17 10 	movne	r5,r8
80004c46:	cb ba       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004c48:	a5 b5       	sbr	r5,0x5
80004c4a:	cb 9a       	rjmp	800049bc <_vfprintf_r+0x1c0>
80004c4c:	50 a7       	stdsp	sp[0x28],r7
80004c4e:	50 80       	stdsp	sp[0x20],r0
80004c50:	0c 97       	mov	r7,r6
80004c52:	10 90       	mov	r0,r8
80004c54:	06 96       	mov	r6,r3
80004c56:	04 94       	mov	r4,r2
80004c58:	40 93       	lddsp	r3,sp[0x24]
80004c5a:	02 92       	mov	r2,r1
80004c5c:	0e 99       	mov	r9,r7
80004c5e:	40 41       	lddsp	r1,sp[0x10]
80004c60:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c64:	40 3c       	lddsp	r12,sp[0xc]
80004c66:	58 0c       	cp.w	r12,0
80004c68:	c1 d0       	breq	80004ca2 <_vfprintf_r+0x4a6>
80004c6a:	10 36       	cp.w	r6,r8
80004c6c:	c0 64       	brge	80004c78 <_vfprintf_r+0x47c>
80004c6e:	fa cb f9 44 	sub	r11,sp,-1724
80004c72:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c76:	c1 d8       	rjmp	80004cb0 <_vfprintf_r+0x4b4>
80004c78:	fa c8 f9 50 	sub	r8,sp,-1712
80004c7c:	1a d8       	st.w	--sp,r8
80004c7e:	fa c8 fa b8 	sub	r8,sp,-1352
80004c82:	1a d8       	st.w	--sp,r8
80004c84:	fa c8 fb b4 	sub	r8,sp,-1100
80004c88:	1a d8       	st.w	--sp,r8
80004c8a:	fa c8 f9 40 	sub	r8,sp,-1728
80004c8e:	fa c9 ff b4 	sub	r9,sp,-76
80004c92:	04 9a       	mov	r10,r2
80004c94:	0c 9b       	mov	r11,r6
80004c96:	08 9c       	mov	r12,r4
80004c98:	fe b0 fc 1a 	rcall	800044cc <get_arg>
80004c9c:	2f dd       	sub	sp,-12
80004c9e:	19 b8       	ld.ub	r8,r12[0x3]
80004ca0:	c2 28       	rjmp	80004ce4 <_vfprintf_r+0x4e8>
80004ca2:	2f f7       	sub	r7,-1
80004ca4:	10 39       	cp.w	r9,r8
80004ca6:	c0 84       	brge	80004cb6 <_vfprintf_r+0x4ba>
80004ca8:	fa ca f9 44 	sub	r10,sp,-1724
80004cac:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004cb0:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004cb4:	c1 88       	rjmp	80004ce4 <_vfprintf_r+0x4e8>
80004cb6:	41 09       	lddsp	r9,sp[0x40]
80004cb8:	59 f8       	cp.w	r8,31
80004cba:	e0 89 00 12 	brgt	80004cde <_vfprintf_r+0x4e2>
80004cbe:	f2 ca ff fc 	sub	r10,r9,-4
80004cc2:	51 0a       	stdsp	sp[0x40],r10
80004cc4:	72 09       	ld.w	r9,r9[0x0]
80004cc6:	fa c6 f9 44 	sub	r6,sp,-1724
80004cca:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004cce:	2f f8       	sub	r8,-1
80004cd0:	f5 49 fd 88 	st.w	r10[-632],r9
80004cd4:	fb 48 06 b4 	st.w	sp[1716],r8
80004cd8:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004cdc:	c0 48       	rjmp	80004ce4 <_vfprintf_r+0x4e8>
80004cde:	13 b8       	ld.ub	r8,r9[0x3]
80004ce0:	2f c9       	sub	r9,-4
80004ce2:	51 09       	stdsp	sp[0x40],r9
80004ce4:	fb 68 06 60 	st.b	sp[1632],r8
80004ce8:	30 0e       	mov	lr,0
80004cea:	30 08       	mov	r8,0
80004cec:	30 12       	mov	r2,1
80004cee:	fb 68 06 bb 	st.b	sp[1723],r8
80004cf2:	50 2e       	stdsp	sp[0x8],lr
80004cf4:	e0 8f 08 ad 	bral	80005e4e <_vfprintf_r+0x1652>
80004cf8:	50 a7       	stdsp	sp[0x28],r7
80004cfa:	50 80       	stdsp	sp[0x20],r0
80004cfc:	0c 97       	mov	r7,r6
80004cfe:	04 94       	mov	r4,r2
80004d00:	06 96       	mov	r6,r3
80004d02:	02 92       	mov	r2,r1
80004d04:	40 93       	lddsp	r3,sp[0x24]
80004d06:	10 90       	mov	r0,r8
80004d08:	40 41       	lddsp	r1,sp[0x10]
80004d0a:	a5 a5       	sbr	r5,0x4
80004d0c:	c0 a8       	rjmp	80004d20 <_vfprintf_r+0x524>
80004d0e:	50 a7       	stdsp	sp[0x28],r7
80004d10:	50 80       	stdsp	sp[0x20],r0
80004d12:	0c 97       	mov	r7,r6
80004d14:	04 94       	mov	r4,r2
80004d16:	06 96       	mov	r6,r3
80004d18:	02 92       	mov	r2,r1
80004d1a:	40 93       	lddsp	r3,sp[0x24]
80004d1c:	10 90       	mov	r0,r8
80004d1e:	40 41       	lddsp	r1,sp[0x10]
80004d20:	ed b5 00 05 	bld	r5,0x5
80004d24:	c5 11       	brne	80004dc6 <_vfprintf_r+0x5ca>
80004d26:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d2a:	40 3c       	lddsp	r12,sp[0xc]
80004d2c:	58 0c       	cp.w	r12,0
80004d2e:	c1 e0       	breq	80004d6a <_vfprintf_r+0x56e>
80004d30:	10 36       	cp.w	r6,r8
80004d32:	c0 64       	brge	80004d3e <_vfprintf_r+0x542>
80004d34:	fa cb f9 44 	sub	r11,sp,-1724
80004d38:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d3c:	c2 08       	rjmp	80004d7c <_vfprintf_r+0x580>
80004d3e:	fa c8 f9 50 	sub	r8,sp,-1712
80004d42:	1a d8       	st.w	--sp,r8
80004d44:	fa c8 fa b8 	sub	r8,sp,-1352
80004d48:	0c 9b       	mov	r11,r6
80004d4a:	1a d8       	st.w	--sp,r8
80004d4c:	fa c8 fb b4 	sub	r8,sp,-1100
80004d50:	1a d8       	st.w	--sp,r8
80004d52:	fa c9 ff b4 	sub	r9,sp,-76
80004d56:	fa c8 f9 40 	sub	r8,sp,-1728
80004d5a:	04 9a       	mov	r10,r2
80004d5c:	08 9c       	mov	r12,r4
80004d5e:	fe b0 fb b7 	rcall	800044cc <get_arg>
80004d62:	2f dd       	sub	sp,-12
80004d64:	78 1b       	ld.w	r11,r12[0x4]
80004d66:	78 09       	ld.w	r9,r12[0x0]
80004d68:	c2 b8       	rjmp	80004dbe <_vfprintf_r+0x5c2>
80004d6a:	ee ca ff ff 	sub	r10,r7,-1
80004d6e:	10 37       	cp.w	r7,r8
80004d70:	c0 b4       	brge	80004d86 <_vfprintf_r+0x58a>
80004d72:	fa c9 f9 44 	sub	r9,sp,-1724
80004d76:	14 97       	mov	r7,r10
80004d78:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004d7c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004d80:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004d84:	c1 d8       	rjmp	80004dbe <_vfprintf_r+0x5c2>
80004d86:	41 09       	lddsp	r9,sp[0x40]
80004d88:	59 f8       	cp.w	r8,31
80004d8a:	e0 89 00 14 	brgt	80004db2 <_vfprintf_r+0x5b6>
80004d8e:	f2 cb ff f8 	sub	r11,r9,-8
80004d92:	51 0b       	stdsp	sp[0x40],r11
80004d94:	fa c6 f9 44 	sub	r6,sp,-1724
80004d98:	72 1b       	ld.w	r11,r9[0x4]
80004d9a:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004d9e:	72 09       	ld.w	r9,r9[0x0]
80004da0:	f9 4b fd 8c 	st.w	r12[-628],r11
80004da4:	f9 49 fd 88 	st.w	r12[-632],r9
80004da8:	2f f8       	sub	r8,-1
80004daa:	14 97       	mov	r7,r10
80004dac:	fb 48 06 b4 	st.w	sp[1716],r8
80004db0:	c0 78       	rjmp	80004dbe <_vfprintf_r+0x5c2>
80004db2:	f2 c8 ff f8 	sub	r8,r9,-8
80004db6:	72 1b       	ld.w	r11,r9[0x4]
80004db8:	14 97       	mov	r7,r10
80004dba:	51 08       	stdsp	sp[0x40],r8
80004dbc:	72 09       	ld.w	r9,r9[0x0]
80004dbe:	16 98       	mov	r8,r11
80004dc0:	fa e9 00 00 	st.d	sp[0],r8
80004dc4:	ca e8       	rjmp	80004f20 <_vfprintf_r+0x724>
80004dc6:	ed b5 00 04 	bld	r5,0x4
80004dca:	c1 71       	brne	80004df8 <_vfprintf_r+0x5fc>
80004dcc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004dd0:	40 3e       	lddsp	lr,sp[0xc]
80004dd2:	58 0e       	cp.w	lr,0
80004dd4:	c0 80       	breq	80004de4 <_vfprintf_r+0x5e8>
80004dd6:	10 36       	cp.w	r6,r8
80004dd8:	c6 94       	brge	80004eaa <_vfprintf_r+0x6ae>
80004dda:	fa cc f9 44 	sub	r12,sp,-1724
80004dde:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004de2:	c8 28       	rjmp	80004ee6 <_vfprintf_r+0x6ea>
80004de4:	ee ca ff ff 	sub	r10,r7,-1
80004de8:	10 37       	cp.w	r7,r8
80004dea:	e0 84 00 81 	brge	80004eec <_vfprintf_r+0x6f0>
80004dee:	fa cb f9 44 	sub	r11,sp,-1724
80004df2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004df6:	c7 78       	rjmp	80004ee4 <_vfprintf_r+0x6e8>
80004df8:	ed b5 00 06 	bld	r5,0x6
80004dfc:	c4 b1       	brne	80004e92 <_vfprintf_r+0x696>
80004dfe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e02:	40 3c       	lddsp	r12,sp[0xc]
80004e04:	58 0c       	cp.w	r12,0
80004e06:	c1 d0       	breq	80004e40 <_vfprintf_r+0x644>
80004e08:	10 36       	cp.w	r6,r8
80004e0a:	c0 64       	brge	80004e16 <_vfprintf_r+0x61a>
80004e0c:	fa cb f9 44 	sub	r11,sp,-1724
80004e10:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e14:	c1 f8       	rjmp	80004e52 <_vfprintf_r+0x656>
80004e16:	fa c8 f9 50 	sub	r8,sp,-1712
80004e1a:	1a d8       	st.w	--sp,r8
80004e1c:	fa c8 fa b8 	sub	r8,sp,-1352
80004e20:	1a d8       	st.w	--sp,r8
80004e22:	fa c8 fb b4 	sub	r8,sp,-1100
80004e26:	1a d8       	st.w	--sp,r8
80004e28:	fa c8 f9 40 	sub	r8,sp,-1728
80004e2c:	fa c9 ff b4 	sub	r9,sp,-76
80004e30:	04 9a       	mov	r10,r2
80004e32:	0c 9b       	mov	r11,r6
80004e34:	08 9c       	mov	r12,r4
80004e36:	fe b0 fb 4b 	rcall	800044cc <get_arg>
80004e3a:	2f dd       	sub	sp,-12
80004e3c:	98 18       	ld.sh	r8,r12[0x2]
80004e3e:	c2 68       	rjmp	80004e8a <_vfprintf_r+0x68e>
80004e40:	ee ca ff ff 	sub	r10,r7,-1
80004e44:	10 37       	cp.w	r7,r8
80004e46:	c0 94       	brge	80004e58 <_vfprintf_r+0x65c>
80004e48:	fa c9 f9 44 	sub	r9,sp,-1724
80004e4c:	14 97       	mov	r7,r10
80004e4e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e52:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004e56:	c1 a8       	rjmp	80004e8a <_vfprintf_r+0x68e>
80004e58:	41 09       	lddsp	r9,sp[0x40]
80004e5a:	59 f8       	cp.w	r8,31
80004e5c:	e0 89 00 13 	brgt	80004e82 <_vfprintf_r+0x686>
80004e60:	f2 cb ff fc 	sub	r11,r9,-4
80004e64:	51 0b       	stdsp	sp[0x40],r11
80004e66:	72 09       	ld.w	r9,r9[0x0]
80004e68:	fa c6 f9 44 	sub	r6,sp,-1724
80004e6c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004e70:	2f f8       	sub	r8,-1
80004e72:	f7 49 fd 88 	st.w	r11[-632],r9
80004e76:	fb 48 06 b4 	st.w	sp[1716],r8
80004e7a:	14 97       	mov	r7,r10
80004e7c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004e80:	c0 58       	rjmp	80004e8a <_vfprintf_r+0x68e>
80004e82:	92 18       	ld.sh	r8,r9[0x2]
80004e84:	14 97       	mov	r7,r10
80004e86:	2f c9       	sub	r9,-4
80004e88:	51 09       	stdsp	sp[0x40],r9
80004e8a:	50 18       	stdsp	sp[0x4],r8
80004e8c:	bf 58       	asr	r8,0x1f
80004e8e:	50 08       	stdsp	sp[0x0],r8
80004e90:	c4 88       	rjmp	80004f20 <_vfprintf_r+0x724>
80004e92:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e96:	40 3c       	lddsp	r12,sp[0xc]
80004e98:	58 0c       	cp.w	r12,0
80004e9a:	c1 d0       	breq	80004ed4 <_vfprintf_r+0x6d8>
80004e9c:	10 36       	cp.w	r6,r8
80004e9e:	c0 64       	brge	80004eaa <_vfprintf_r+0x6ae>
80004ea0:	fa cb f9 44 	sub	r11,sp,-1724
80004ea4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004ea8:	c1 f8       	rjmp	80004ee6 <_vfprintf_r+0x6ea>
80004eaa:	fa c8 f9 50 	sub	r8,sp,-1712
80004eae:	1a d8       	st.w	--sp,r8
80004eb0:	fa c8 fa b8 	sub	r8,sp,-1352
80004eb4:	0c 9b       	mov	r11,r6
80004eb6:	1a d8       	st.w	--sp,r8
80004eb8:	fa c8 fb b4 	sub	r8,sp,-1100
80004ebc:	04 9a       	mov	r10,r2
80004ebe:	1a d8       	st.w	--sp,r8
80004ec0:	08 9c       	mov	r12,r4
80004ec2:	fa c8 f9 40 	sub	r8,sp,-1728
80004ec6:	fa c9 ff b4 	sub	r9,sp,-76
80004eca:	fe b0 fb 01 	rcall	800044cc <get_arg>
80004ece:	2f dd       	sub	sp,-12
80004ed0:	78 0b       	ld.w	r11,r12[0x0]
80004ed2:	c2 48       	rjmp	80004f1a <_vfprintf_r+0x71e>
80004ed4:	ee ca ff ff 	sub	r10,r7,-1
80004ed8:	10 37       	cp.w	r7,r8
80004eda:	c0 94       	brge	80004eec <_vfprintf_r+0x6f0>
80004edc:	fa c9 f9 44 	sub	r9,sp,-1724
80004ee0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004ee4:	14 97       	mov	r7,r10
80004ee6:	ec fb fd 88 	ld.w	r11,r6[-632]
80004eea:	c1 88       	rjmp	80004f1a <_vfprintf_r+0x71e>
80004eec:	41 09       	lddsp	r9,sp[0x40]
80004eee:	59 f8       	cp.w	r8,31
80004ef0:	e0 89 00 11 	brgt	80004f12 <_vfprintf_r+0x716>
80004ef4:	f2 cb ff fc 	sub	r11,r9,-4
80004ef8:	51 0b       	stdsp	sp[0x40],r11
80004efa:	fa c6 f9 44 	sub	r6,sp,-1724
80004efe:	72 0b       	ld.w	r11,r9[0x0]
80004f00:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f04:	f3 4b fd 88 	st.w	r9[-632],r11
80004f08:	2f f8       	sub	r8,-1
80004f0a:	14 97       	mov	r7,r10
80004f0c:	fb 48 06 b4 	st.w	sp[1716],r8
80004f10:	c0 58       	rjmp	80004f1a <_vfprintf_r+0x71e>
80004f12:	72 0b       	ld.w	r11,r9[0x0]
80004f14:	14 97       	mov	r7,r10
80004f16:	2f c9       	sub	r9,-4
80004f18:	51 09       	stdsp	sp[0x40],r9
80004f1a:	50 1b       	stdsp	sp[0x4],r11
80004f1c:	bf 5b       	asr	r11,0x1f
80004f1e:	50 0b       	stdsp	sp[0x0],r11
80004f20:	fa ea 00 00 	ld.d	r10,sp[0]
80004f24:	58 0a       	cp.w	r10,0
80004f26:	5c 2b       	cpc	r11
80004f28:	c0 e4       	brge	80004f44 <_vfprintf_r+0x748>
80004f2a:	30 08       	mov	r8,0
80004f2c:	fa ea 00 00 	ld.d	r10,sp[0]
80004f30:	30 09       	mov	r9,0
80004f32:	f0 0a 01 0a 	sub	r10,r8,r10
80004f36:	f2 0b 01 4b 	sbc	r11,r9,r11
80004f3a:	32 d8       	mov	r8,45
80004f3c:	fa eb 00 00 	st.d	sp[0],r10
80004f40:	fb 68 06 bb 	st.b	sp[1723],r8
80004f44:	30 18       	mov	r8,1
80004f46:	e0 8f 06 fa 	bral	80005d3a <_vfprintf_r+0x153e>
80004f4a:	50 a7       	stdsp	sp[0x28],r7
80004f4c:	50 80       	stdsp	sp[0x20],r0
80004f4e:	0c 97       	mov	r7,r6
80004f50:	04 94       	mov	r4,r2
80004f52:	06 96       	mov	r6,r3
80004f54:	02 92       	mov	r2,r1
80004f56:	40 93       	lddsp	r3,sp[0x24]
80004f58:	10 90       	mov	r0,r8
80004f5a:	40 41       	lddsp	r1,sp[0x10]
80004f5c:	0e 99       	mov	r9,r7
80004f5e:	ed b5 00 03 	bld	r5,0x3
80004f62:	c4 11       	brne	80004fe4 <_vfprintf_r+0x7e8>
80004f64:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f68:	40 3a       	lddsp	r10,sp[0xc]
80004f6a:	58 0a       	cp.w	r10,0
80004f6c:	c1 90       	breq	80004f9e <_vfprintf_r+0x7a2>
80004f6e:	10 36       	cp.w	r6,r8
80004f70:	c6 45       	brlt	80005038 <_vfprintf_r+0x83c>
80004f72:	fa c8 f9 50 	sub	r8,sp,-1712
80004f76:	1a d8       	st.w	--sp,r8
80004f78:	fa c8 fa b8 	sub	r8,sp,-1352
80004f7c:	1a d8       	st.w	--sp,r8
80004f7e:	fa c8 fb b4 	sub	r8,sp,-1100
80004f82:	0c 9b       	mov	r11,r6
80004f84:	1a d8       	st.w	--sp,r8
80004f86:	04 9a       	mov	r10,r2
80004f88:	fa c8 f9 40 	sub	r8,sp,-1728
80004f8c:	fa c9 ff b4 	sub	r9,sp,-76
80004f90:	08 9c       	mov	r12,r4
80004f92:	fe b0 fa 9d 	rcall	800044cc <get_arg>
80004f96:	2f dd       	sub	sp,-12
80004f98:	78 16       	ld.w	r6,r12[0x4]
80004f9a:	50 76       	stdsp	sp[0x1c],r6
80004f9c:	c4 88       	rjmp	8000502c <_vfprintf_r+0x830>
80004f9e:	2f f7       	sub	r7,-1
80004fa0:	10 39       	cp.w	r9,r8
80004fa2:	c0 c4       	brge	80004fba <_vfprintf_r+0x7be>
80004fa4:	fa ce f9 44 	sub	lr,sp,-1724
80004fa8:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004fac:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004fb0:	50 7c       	stdsp	sp[0x1c],r12
80004fb2:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004fb6:	50 56       	stdsp	sp[0x14],r6
80004fb8:	c6 68       	rjmp	80005084 <_vfprintf_r+0x888>
80004fba:	41 09       	lddsp	r9,sp[0x40]
80004fbc:	59 f8       	cp.w	r8,31
80004fbe:	e0 89 00 10 	brgt	80004fde <_vfprintf_r+0x7e2>
80004fc2:	f2 ca ff f8 	sub	r10,r9,-8
80004fc6:	72 1b       	ld.w	r11,r9[0x4]
80004fc8:	51 0a       	stdsp	sp[0x40],r10
80004fca:	72 09       	ld.w	r9,r9[0x0]
80004fcc:	fa ca f9 44 	sub	r10,sp,-1724
80004fd0:	50 7b       	stdsp	sp[0x1c],r11
80004fd2:	50 59       	stdsp	sp[0x14],r9
80004fd4:	f4 08 00 39 	add	r9,r10,r8<<0x3
80004fd8:	40 5b       	lddsp	r11,sp[0x14]
80004fda:	40 7a       	lddsp	r10,sp[0x1c]
80004fdc:	c4 78       	rjmp	8000506a <_vfprintf_r+0x86e>
80004fde:	72 18       	ld.w	r8,r9[0x4]
80004fe0:	50 78       	stdsp	sp[0x1c],r8
80004fe2:	c4 c8       	rjmp	8000507a <_vfprintf_r+0x87e>
80004fe4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004fe8:	40 3e       	lddsp	lr,sp[0xc]
80004fea:	58 0e       	cp.w	lr,0
80004fec:	c2 30       	breq	80005032 <_vfprintf_r+0x836>
80004fee:	10 36       	cp.w	r6,r8
80004ff0:	c0 94       	brge	80005002 <_vfprintf_r+0x806>
80004ff2:	fa cc f9 44 	sub	r12,sp,-1724
80004ff6:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004ffa:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004ffe:	50 7b       	stdsp	sp[0x1c],r11
80005000:	cd 9b       	rjmp	80004fb2 <_vfprintf_r+0x7b6>
80005002:	fa c8 f9 50 	sub	r8,sp,-1712
80005006:	1a d8       	st.w	--sp,r8
80005008:	fa c8 fa b8 	sub	r8,sp,-1352
8000500c:	04 9a       	mov	r10,r2
8000500e:	1a d8       	st.w	--sp,r8
80005010:	fa c8 fb b4 	sub	r8,sp,-1100
80005014:	0c 9b       	mov	r11,r6
80005016:	1a d8       	st.w	--sp,r8
80005018:	08 9c       	mov	r12,r4
8000501a:	fa c8 f9 40 	sub	r8,sp,-1728
8000501e:	fa c9 ff b4 	sub	r9,sp,-76
80005022:	fe b0 fa 55 	rcall	800044cc <get_arg>
80005026:	2f dd       	sub	sp,-12
80005028:	78 1a       	ld.w	r10,r12[0x4]
8000502a:	50 7a       	stdsp	sp[0x1c],r10
8000502c:	78 0c       	ld.w	r12,r12[0x0]
8000502e:	50 5c       	stdsp	sp[0x14],r12
80005030:	c2 a8       	rjmp	80005084 <_vfprintf_r+0x888>
80005032:	2f f7       	sub	r7,-1
80005034:	10 39       	cp.w	r9,r8
80005036:	c0 94       	brge	80005048 <_vfprintf_r+0x84c>
80005038:	fa c9 f9 44 	sub	r9,sp,-1724
8000503c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005040:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80005044:	50 78       	stdsp	sp[0x1c],r8
80005046:	cb 6b       	rjmp	80004fb2 <_vfprintf_r+0x7b6>
80005048:	41 09       	lddsp	r9,sp[0x40]
8000504a:	59 f8       	cp.w	r8,31
8000504c:	e0 89 00 15 	brgt	80005076 <_vfprintf_r+0x87a>
80005050:	f2 ca ff f8 	sub	r10,r9,-8
80005054:	72 16       	ld.w	r6,r9[0x4]
80005056:	72 09       	ld.w	r9,r9[0x0]
80005058:	51 0a       	stdsp	sp[0x40],r10
8000505a:	50 59       	stdsp	sp[0x14],r9
8000505c:	fa ce f9 44 	sub	lr,sp,-1724
80005060:	50 76       	stdsp	sp[0x1c],r6
80005062:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005066:	40 5b       	lddsp	r11,sp[0x14]
80005068:	0c 9a       	mov	r10,r6
8000506a:	f2 eb fd 88 	st.d	r9[-632],r10
8000506e:	2f f8       	sub	r8,-1
80005070:	fb 48 06 b4 	st.w	sp[1716],r8
80005074:	c0 88       	rjmp	80005084 <_vfprintf_r+0x888>
80005076:	72 1c       	ld.w	r12,r9[0x4]
80005078:	50 7c       	stdsp	sp[0x1c],r12
8000507a:	f2 c8 ff f8 	sub	r8,r9,-8
8000507e:	51 08       	stdsp	sp[0x40],r8
80005080:	72 09       	ld.w	r9,r9[0x0]
80005082:	50 59       	stdsp	sp[0x14],r9
80005084:	40 5b       	lddsp	r11,sp[0x14]
80005086:	40 7a       	lddsp	r10,sp[0x1c]
80005088:	e0 a0 1c de 	rcall	80008a44 <__isinfd>
8000508c:	18 96       	mov	r6,r12
8000508e:	c1 70       	breq	800050bc <_vfprintf_r+0x8c0>
80005090:	30 08       	mov	r8,0
80005092:	30 09       	mov	r9,0
80005094:	40 5b       	lddsp	r11,sp[0x14]
80005096:	40 7a       	lddsp	r10,sp[0x1c]
80005098:	e0 a0 21 cc 	rcall	80009430 <__avr32_f64_cmp_lt>
8000509c:	c0 40       	breq	800050a4 <_vfprintf_r+0x8a8>
8000509e:	32 d8       	mov	r8,45
800050a0:	fb 68 06 bb 	st.b	sp[1723],r8
800050a4:	fe c8 b0 c0 	sub	r8,pc,-20288
800050a8:	fe c6 b0 c0 	sub	r6,pc,-20288
800050ac:	a7 d5       	cbr	r5,0x7
800050ae:	e0 40 00 47 	cp.w	r0,71
800050b2:	f0 06 17 a0 	movle	r6,r8
800050b6:	30 32       	mov	r2,3
800050b8:	e0 8f 06 ce 	bral	80005e54 <_vfprintf_r+0x1658>
800050bc:	40 5b       	lddsp	r11,sp[0x14]
800050be:	40 7a       	lddsp	r10,sp[0x1c]
800050c0:	e0 a0 1c d7 	rcall	80008a6e <__isnand>
800050c4:	c0 e0       	breq	800050e0 <_vfprintf_r+0x8e4>
800050c6:	50 26       	stdsp	sp[0x8],r6
800050c8:	fe c8 b0 dc 	sub	r8,pc,-20260
800050cc:	fe c6 b0 dc 	sub	r6,pc,-20260
800050d0:	a7 d5       	cbr	r5,0x7
800050d2:	e0 40 00 47 	cp.w	r0,71
800050d6:	f0 06 17 a0 	movle	r6,r8
800050da:	30 32       	mov	r2,3
800050dc:	e0 8f 06 c2 	bral	80005e60 <_vfprintf_r+0x1664>
800050e0:	40 2a       	lddsp	r10,sp[0x8]
800050e2:	5b fa       	cp.w	r10,-1
800050e4:	c0 41       	brne	800050ec <_vfprintf_r+0x8f0>
800050e6:	30 69       	mov	r9,6
800050e8:	50 29       	stdsp	sp[0x8],r9
800050ea:	c1 18       	rjmp	8000510c <_vfprintf_r+0x910>
800050ec:	e0 40 00 47 	cp.w	r0,71
800050f0:	5f 09       	sreq	r9
800050f2:	e0 40 00 67 	cp.w	r0,103
800050f6:	5f 08       	sreq	r8
800050f8:	f3 e8 10 08 	or	r8,r9,r8
800050fc:	f8 08 18 00 	cp.b	r8,r12
80005100:	c0 60       	breq	8000510c <_vfprintf_r+0x910>
80005102:	40 28       	lddsp	r8,sp[0x8]
80005104:	58 08       	cp.w	r8,0
80005106:	f9 b8 00 01 	moveq	r8,1
8000510a:	50 28       	stdsp	sp[0x8],r8
8000510c:	40 78       	lddsp	r8,sp[0x1c]
8000510e:	40 59       	lddsp	r9,sp[0x14]
80005110:	fa e9 06 94 	st.d	sp[1684],r8
80005114:	a9 a5       	sbr	r5,0x8
80005116:	fa f8 06 94 	ld.w	r8,sp[1684]
8000511a:	58 08       	cp.w	r8,0
8000511c:	c0 65       	brlt	80005128 <_vfprintf_r+0x92c>
8000511e:	40 5e       	lddsp	lr,sp[0x14]
80005120:	30 0c       	mov	r12,0
80005122:	50 6e       	stdsp	sp[0x18],lr
80005124:	50 9c       	stdsp	sp[0x24],r12
80005126:	c0 78       	rjmp	80005134 <_vfprintf_r+0x938>
80005128:	40 5b       	lddsp	r11,sp[0x14]
8000512a:	32 da       	mov	r10,45
8000512c:	ee 1b 80 00 	eorh	r11,0x8000
80005130:	50 9a       	stdsp	sp[0x24],r10
80005132:	50 6b       	stdsp	sp[0x18],r11
80005134:	e0 40 00 46 	cp.w	r0,70
80005138:	5f 09       	sreq	r9
8000513a:	e0 40 00 66 	cp.w	r0,102
8000513e:	5f 08       	sreq	r8
80005140:	f3 e8 10 08 	or	r8,r9,r8
80005144:	50 48       	stdsp	sp[0x10],r8
80005146:	c0 40       	breq	8000514e <_vfprintf_r+0x952>
80005148:	40 22       	lddsp	r2,sp[0x8]
8000514a:	30 39       	mov	r9,3
8000514c:	c1 08       	rjmp	8000516c <_vfprintf_r+0x970>
8000514e:	e0 40 00 45 	cp.w	r0,69
80005152:	5f 09       	sreq	r9
80005154:	e0 40 00 65 	cp.w	r0,101
80005158:	5f 08       	sreq	r8
8000515a:	40 22       	lddsp	r2,sp[0x8]
8000515c:	10 49       	or	r9,r8
8000515e:	2f f2       	sub	r2,-1
80005160:	40 46       	lddsp	r6,sp[0x10]
80005162:	ec 09 18 00 	cp.b	r9,r6
80005166:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000516a:	30 29       	mov	r9,2
8000516c:	fa c8 f9 5c 	sub	r8,sp,-1700
80005170:	1a d8       	st.w	--sp,r8
80005172:	fa c8 f9 54 	sub	r8,sp,-1708
80005176:	1a d8       	st.w	--sp,r8
80005178:	fa c8 f9 4c 	sub	r8,sp,-1716
8000517c:	08 9c       	mov	r12,r4
8000517e:	1a d8       	st.w	--sp,r8
80005180:	04 98       	mov	r8,r2
80005182:	40 9b       	lddsp	r11,sp[0x24]
80005184:	40 aa       	lddsp	r10,sp[0x28]
80005186:	e0 a0 0b c3 	rcall	8000690c <_dtoa_r>
8000518a:	e0 40 00 47 	cp.w	r0,71
8000518e:	5f 19       	srne	r9
80005190:	e0 40 00 67 	cp.w	r0,103
80005194:	5f 18       	srne	r8
80005196:	18 96       	mov	r6,r12
80005198:	2f dd       	sub	sp,-12
8000519a:	f3 e8 00 08 	and	r8,r9,r8
8000519e:	c0 41       	brne	800051a6 <_vfprintf_r+0x9aa>
800051a0:	ed b5 00 00 	bld	r5,0x0
800051a4:	c3 01       	brne	80005204 <_vfprintf_r+0xa08>
800051a6:	ec 02 00 0e 	add	lr,r6,r2
800051aa:	50 3e       	stdsp	sp[0xc],lr
800051ac:	40 4c       	lddsp	r12,sp[0x10]
800051ae:	58 0c       	cp.w	r12,0
800051b0:	c1 50       	breq	800051da <_vfprintf_r+0x9de>
800051b2:	0d 89       	ld.ub	r9,r6[0x0]
800051b4:	33 08       	mov	r8,48
800051b6:	f0 09 18 00 	cp.b	r9,r8
800051ba:	c0 b1       	brne	800051d0 <_vfprintf_r+0x9d4>
800051bc:	30 08       	mov	r8,0
800051be:	30 09       	mov	r9,0
800051c0:	40 6b       	lddsp	r11,sp[0x18]
800051c2:	40 7a       	lddsp	r10,sp[0x1c]
800051c4:	e0 a0 20 ef 	rcall	800093a2 <__avr32_f64_cmp_eq>
800051c8:	fb b2 00 01 	rsubeq	r2,1
800051cc:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
800051d0:	40 3b       	lddsp	r11,sp[0xc]
800051d2:	fa f8 06 ac 	ld.w	r8,sp[1708]
800051d6:	10 0b       	add	r11,r8
800051d8:	50 3b       	stdsp	sp[0xc],r11
800051da:	40 6b       	lddsp	r11,sp[0x18]
800051dc:	30 08       	mov	r8,0
800051de:	30 09       	mov	r9,0
800051e0:	40 7a       	lddsp	r10,sp[0x1c]
800051e2:	e0 a0 20 e0 	rcall	800093a2 <__avr32_f64_cmp_eq>
800051e6:	c0 90       	breq	800051f8 <_vfprintf_r+0x9fc>
800051e8:	40 3a       	lddsp	r10,sp[0xc]
800051ea:	fb 4a 06 a4 	st.w	sp[1700],r10
800051ee:	c0 58       	rjmp	800051f8 <_vfprintf_r+0x9fc>
800051f0:	10 c9       	st.b	r8++,r9
800051f2:	fb 48 06 a4 	st.w	sp[1700],r8
800051f6:	c0 28       	rjmp	800051fa <_vfprintf_r+0x9fe>
800051f8:	33 09       	mov	r9,48
800051fa:	fa f8 06 a4 	ld.w	r8,sp[1700]
800051fe:	40 3e       	lddsp	lr,sp[0xc]
80005200:	1c 38       	cp.w	r8,lr
80005202:	cf 73       	brcs	800051f0 <_vfprintf_r+0x9f4>
80005204:	e0 40 00 47 	cp.w	r0,71
80005208:	5f 09       	sreq	r9
8000520a:	e0 40 00 67 	cp.w	r0,103
8000520e:	5f 08       	sreq	r8
80005210:	f3 e8 10 08 	or	r8,r9,r8
80005214:	fa f9 06 a4 	ld.w	r9,sp[1700]
80005218:	0c 19       	sub	r9,r6
8000521a:	50 69       	stdsp	sp[0x18],r9
8000521c:	58 08       	cp.w	r8,0
8000521e:	c0 b0       	breq	80005234 <_vfprintf_r+0xa38>
80005220:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005224:	5b d8       	cp.w	r8,-3
80005226:	c0 55       	brlt	80005230 <_vfprintf_r+0xa34>
80005228:	40 2c       	lddsp	r12,sp[0x8]
8000522a:	18 38       	cp.w	r8,r12
8000522c:	e0 8a 00 6a 	brle	80005300 <_vfprintf_r+0xb04>
80005230:	20 20       	sub	r0,2
80005232:	c0 58       	rjmp	8000523c <_vfprintf_r+0xa40>
80005234:	e0 40 00 65 	cp.w	r0,101
80005238:	e0 89 00 46 	brgt	800052c4 <_vfprintf_r+0xac8>
8000523c:	fa fb 06 ac 	ld.w	r11,sp[1708]
80005240:	fb 60 06 9c 	st.b	sp[1692],r0
80005244:	20 1b       	sub	r11,1
80005246:	fb 4b 06 ac 	st.w	sp[1708],r11
8000524a:	c0 47       	brpl	80005252 <_vfprintf_r+0xa56>
8000524c:	5c 3b       	neg	r11
8000524e:	32 d8       	mov	r8,45
80005250:	c0 28       	rjmp	80005254 <_vfprintf_r+0xa58>
80005252:	32 b8       	mov	r8,43
80005254:	fb 68 06 9d 	st.b	sp[1693],r8
80005258:	58 9b       	cp.w	r11,9
8000525a:	e0 8a 00 1d 	brle	80005294 <_vfprintf_r+0xa98>
8000525e:	fa c9 fa 35 	sub	r9,sp,-1483
80005262:	30 aa       	mov	r10,10
80005264:	12 98       	mov	r8,r9
80005266:	0e 9c       	mov	r12,r7
80005268:	0c 92       	mov	r2,r6
8000526a:	f6 0a 0c 06 	divs	r6,r11,r10
8000526e:	0e 9b       	mov	r11,r7
80005270:	2d 0b       	sub	r11,-48
80005272:	10 fb       	st.b	--r8,r11
80005274:	0c 9b       	mov	r11,r6
80005276:	58 96       	cp.w	r6,9
80005278:	fe 99 ff f9 	brgt	8000526a <_vfprintf_r+0xa6e>
8000527c:	2d 0b       	sub	r11,-48
8000527e:	18 97       	mov	r7,r12
80005280:	04 96       	mov	r6,r2
80005282:	10 fb       	st.b	--r8,r11
80005284:	fa ca f9 62 	sub	r10,sp,-1694
80005288:	c0 38       	rjmp	8000528e <_vfprintf_r+0xa92>
8000528a:	11 3b       	ld.ub	r11,r8++
8000528c:	14 cb       	st.b	r10++,r11
8000528e:	12 38       	cp.w	r8,r9
80005290:	cf d3       	brcs	8000528a <_vfprintf_r+0xa8e>
80005292:	c0 98       	rjmp	800052a4 <_vfprintf_r+0xaa8>
80005294:	2d 0b       	sub	r11,-48
80005296:	33 08       	mov	r8,48
80005298:	fb 6b 06 9f 	st.b	sp[1695],r11
8000529c:	fb 68 06 9e 	st.b	sp[1694],r8
800052a0:	fa ca f9 60 	sub	r10,sp,-1696
800052a4:	fa c8 f9 64 	sub	r8,sp,-1692
800052a8:	f4 08 01 08 	sub	r8,r10,r8
800052ac:	50 e8       	stdsp	sp[0x38],r8
800052ae:	10 92       	mov	r2,r8
800052b0:	40 6b       	lddsp	r11,sp[0x18]
800052b2:	16 02       	add	r2,r11
800052b4:	58 1b       	cp.w	r11,1
800052b6:	e0 89 00 05 	brgt	800052c0 <_vfprintf_r+0xac4>
800052ba:	ed b5 00 00 	bld	r5,0x0
800052be:	c3 51       	brne	80005328 <_vfprintf_r+0xb2c>
800052c0:	2f f2       	sub	r2,-1
800052c2:	c3 38       	rjmp	80005328 <_vfprintf_r+0xb2c>
800052c4:	e0 40 00 66 	cp.w	r0,102
800052c8:	c1 c1       	brne	80005300 <_vfprintf_r+0xb04>
800052ca:	fa f2 06 ac 	ld.w	r2,sp[1708]
800052ce:	58 02       	cp.w	r2,0
800052d0:	e0 8a 00 0c 	brle	800052e8 <_vfprintf_r+0xaec>
800052d4:	40 2a       	lddsp	r10,sp[0x8]
800052d6:	58 0a       	cp.w	r10,0
800052d8:	c0 41       	brne	800052e0 <_vfprintf_r+0xae4>
800052da:	ed b5 00 00 	bld	r5,0x0
800052de:	c2 51       	brne	80005328 <_vfprintf_r+0xb2c>
800052e0:	2f f2       	sub	r2,-1
800052e2:	40 29       	lddsp	r9,sp[0x8]
800052e4:	12 02       	add	r2,r9
800052e6:	c0 b8       	rjmp	800052fc <_vfprintf_r+0xb00>
800052e8:	40 28       	lddsp	r8,sp[0x8]
800052ea:	58 08       	cp.w	r8,0
800052ec:	c0 61       	brne	800052f8 <_vfprintf_r+0xafc>
800052ee:	ed b5 00 00 	bld	r5,0x0
800052f2:	c0 30       	breq	800052f8 <_vfprintf_r+0xafc>
800052f4:	30 12       	mov	r2,1
800052f6:	c1 98       	rjmp	80005328 <_vfprintf_r+0xb2c>
800052f8:	40 22       	lddsp	r2,sp[0x8]
800052fa:	2f e2       	sub	r2,-2
800052fc:	36 60       	mov	r0,102
800052fe:	c1 58       	rjmp	80005328 <_vfprintf_r+0xb2c>
80005300:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005304:	40 6e       	lddsp	lr,sp[0x18]
80005306:	1c 32       	cp.w	r2,lr
80005308:	c0 65       	brlt	80005314 <_vfprintf_r+0xb18>
8000530a:	ed b5 00 00 	bld	r5,0x0
8000530e:	f7 b2 00 ff 	subeq	r2,-1
80005312:	c0 a8       	rjmp	80005326 <_vfprintf_r+0xb2a>
80005314:	e4 08 11 02 	rsub	r8,r2,2
80005318:	40 6c       	lddsp	r12,sp[0x18]
8000531a:	58 02       	cp.w	r2,0
8000531c:	f0 02 17 a0 	movle	r2,r8
80005320:	f9 b2 09 01 	movgt	r2,1
80005324:	18 02       	add	r2,r12
80005326:	36 70       	mov	r0,103
80005328:	40 9b       	lddsp	r11,sp[0x24]
8000532a:	58 0b       	cp.w	r11,0
8000532c:	e0 80 05 94 	breq	80005e54 <_vfprintf_r+0x1658>
80005330:	32 d8       	mov	r8,45
80005332:	fb 68 06 bb 	st.b	sp[1723],r8
80005336:	e0 8f 05 93 	bral	80005e5c <_vfprintf_r+0x1660>
8000533a:	50 a7       	stdsp	sp[0x28],r7
8000533c:	04 94       	mov	r4,r2
8000533e:	0c 97       	mov	r7,r6
80005340:	02 92       	mov	r2,r1
80005342:	06 96       	mov	r6,r3
80005344:	40 41       	lddsp	r1,sp[0x10]
80005346:	40 93       	lddsp	r3,sp[0x24]
80005348:	0e 99       	mov	r9,r7
8000534a:	ed b5 00 05 	bld	r5,0x5
8000534e:	c4 81       	brne	800053de <_vfprintf_r+0xbe2>
80005350:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005354:	40 3e       	lddsp	lr,sp[0xc]
80005356:	58 0e       	cp.w	lr,0
80005358:	c1 d0       	breq	80005392 <_vfprintf_r+0xb96>
8000535a:	10 36       	cp.w	r6,r8
8000535c:	c0 64       	brge	80005368 <_vfprintf_r+0xb6c>
8000535e:	fa cc f9 44 	sub	r12,sp,-1724
80005362:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005366:	c1 d8       	rjmp	800053a0 <_vfprintf_r+0xba4>
80005368:	fa c8 f9 50 	sub	r8,sp,-1712
8000536c:	1a d8       	st.w	--sp,r8
8000536e:	fa c8 fa b8 	sub	r8,sp,-1352
80005372:	04 9a       	mov	r10,r2
80005374:	1a d8       	st.w	--sp,r8
80005376:	fa c8 fb b4 	sub	r8,sp,-1100
8000537a:	0c 9b       	mov	r11,r6
8000537c:	1a d8       	st.w	--sp,r8
8000537e:	08 9c       	mov	r12,r4
80005380:	fa c8 f9 40 	sub	r8,sp,-1728
80005384:	fa c9 ff b4 	sub	r9,sp,-76
80005388:	fe b0 f8 a2 	rcall	800044cc <get_arg>
8000538c:	2f dd       	sub	sp,-12
8000538e:	78 0a       	ld.w	r10,r12[0x0]
80005390:	c2 08       	rjmp	800053d0 <_vfprintf_r+0xbd4>
80005392:	2f f7       	sub	r7,-1
80005394:	10 39       	cp.w	r9,r8
80005396:	c0 84       	brge	800053a6 <_vfprintf_r+0xbaa>
80005398:	fa cb f9 44 	sub	r11,sp,-1724
8000539c:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053a0:	ec fa fd 88 	ld.w	r10,r6[-632]
800053a4:	c1 68       	rjmp	800053d0 <_vfprintf_r+0xbd4>
800053a6:	41 09       	lddsp	r9,sp[0x40]
800053a8:	59 f8       	cp.w	r8,31
800053aa:	e0 89 00 10 	brgt	800053ca <_vfprintf_r+0xbce>
800053ae:	f2 ca ff fc 	sub	r10,r9,-4
800053b2:	51 0a       	stdsp	sp[0x40],r10
800053b4:	fa c6 f9 44 	sub	r6,sp,-1724
800053b8:	72 0a       	ld.w	r10,r9[0x0]
800053ba:	ec 08 00 39 	add	r9,r6,r8<<0x3
800053be:	f3 4a fd 88 	st.w	r9[-632],r10
800053c2:	2f f8       	sub	r8,-1
800053c4:	fb 48 06 b4 	st.w	sp[1716],r8
800053c8:	c0 48       	rjmp	800053d0 <_vfprintf_r+0xbd4>
800053ca:	72 0a       	ld.w	r10,r9[0x0]
800053cc:	2f c9       	sub	r9,-4
800053ce:	51 09       	stdsp	sp[0x40],r9
800053d0:	40 be       	lddsp	lr,sp[0x2c]
800053d2:	1c 98       	mov	r8,lr
800053d4:	95 1e       	st.w	r10[0x4],lr
800053d6:	bf 58       	asr	r8,0x1f
800053d8:	95 08       	st.w	r10[0x0],r8
800053da:	fe 9f fa 9f 	bral	80004918 <_vfprintf_r+0x11c>
800053de:	ed b5 00 04 	bld	r5,0x4
800053e2:	c4 80       	breq	80005472 <_vfprintf_r+0xc76>
800053e4:	e2 15 00 40 	andl	r5,0x40,COH
800053e8:	c4 50       	breq	80005472 <_vfprintf_r+0xc76>
800053ea:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053ee:	40 3c       	lddsp	r12,sp[0xc]
800053f0:	58 0c       	cp.w	r12,0
800053f2:	c1 d0       	breq	8000542c <_vfprintf_r+0xc30>
800053f4:	10 36       	cp.w	r6,r8
800053f6:	c0 64       	brge	80005402 <_vfprintf_r+0xc06>
800053f8:	fa cb f9 44 	sub	r11,sp,-1724
800053fc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005400:	c1 d8       	rjmp	8000543a <_vfprintf_r+0xc3e>
80005402:	fa c8 f9 50 	sub	r8,sp,-1712
80005406:	1a d8       	st.w	--sp,r8
80005408:	fa c8 fa b8 	sub	r8,sp,-1352
8000540c:	04 9a       	mov	r10,r2
8000540e:	1a d8       	st.w	--sp,r8
80005410:	fa c8 fb b4 	sub	r8,sp,-1100
80005414:	0c 9b       	mov	r11,r6
80005416:	1a d8       	st.w	--sp,r8
80005418:	08 9c       	mov	r12,r4
8000541a:	fa c8 f9 40 	sub	r8,sp,-1728
8000541e:	fa c9 ff b4 	sub	r9,sp,-76
80005422:	fe b0 f8 55 	rcall	800044cc <get_arg>
80005426:	2f dd       	sub	sp,-12
80005428:	78 0a       	ld.w	r10,r12[0x0]
8000542a:	c2 08       	rjmp	8000546a <_vfprintf_r+0xc6e>
8000542c:	2f f7       	sub	r7,-1
8000542e:	10 39       	cp.w	r9,r8
80005430:	c0 84       	brge	80005440 <_vfprintf_r+0xc44>
80005432:	fa ca f9 44 	sub	r10,sp,-1724
80005436:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000543a:	ec fa fd 88 	ld.w	r10,r6[-632]
8000543e:	c1 68       	rjmp	8000546a <_vfprintf_r+0xc6e>
80005440:	41 09       	lddsp	r9,sp[0x40]
80005442:	59 f8       	cp.w	r8,31
80005444:	e0 89 00 10 	brgt	80005464 <_vfprintf_r+0xc68>
80005448:	f2 ca ff fc 	sub	r10,r9,-4
8000544c:	51 0a       	stdsp	sp[0x40],r10
8000544e:	fa c6 f9 44 	sub	r6,sp,-1724
80005452:	72 0a       	ld.w	r10,r9[0x0]
80005454:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005458:	f3 4a fd 88 	st.w	r9[-632],r10
8000545c:	2f f8       	sub	r8,-1
8000545e:	fb 48 06 b4 	st.w	sp[1716],r8
80005462:	c0 48       	rjmp	8000546a <_vfprintf_r+0xc6e>
80005464:	72 0a       	ld.w	r10,r9[0x0]
80005466:	2f c9       	sub	r9,-4
80005468:	51 09       	stdsp	sp[0x40],r9
8000546a:	40 be       	lddsp	lr,sp[0x2c]
8000546c:	b4 0e       	st.h	r10[0x0],lr
8000546e:	fe 9f fa 55 	bral	80004918 <_vfprintf_r+0x11c>
80005472:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005476:	40 3c       	lddsp	r12,sp[0xc]
80005478:	58 0c       	cp.w	r12,0
8000547a:	c1 d0       	breq	800054b4 <_vfprintf_r+0xcb8>
8000547c:	10 36       	cp.w	r6,r8
8000547e:	c0 64       	brge	8000548a <_vfprintf_r+0xc8e>
80005480:	fa cb f9 44 	sub	r11,sp,-1724
80005484:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005488:	c1 d8       	rjmp	800054c2 <_vfprintf_r+0xcc6>
8000548a:	fa c8 f9 50 	sub	r8,sp,-1712
8000548e:	1a d8       	st.w	--sp,r8
80005490:	fa c8 fa b8 	sub	r8,sp,-1352
80005494:	04 9a       	mov	r10,r2
80005496:	1a d8       	st.w	--sp,r8
80005498:	fa c8 fb b4 	sub	r8,sp,-1100
8000549c:	0c 9b       	mov	r11,r6
8000549e:	1a d8       	st.w	--sp,r8
800054a0:	08 9c       	mov	r12,r4
800054a2:	fa c8 f9 40 	sub	r8,sp,-1728
800054a6:	fa c9 ff b4 	sub	r9,sp,-76
800054aa:	fe b0 f8 11 	rcall	800044cc <get_arg>
800054ae:	2f dd       	sub	sp,-12
800054b0:	78 0a       	ld.w	r10,r12[0x0]
800054b2:	c2 08       	rjmp	800054f2 <_vfprintf_r+0xcf6>
800054b4:	2f f7       	sub	r7,-1
800054b6:	10 39       	cp.w	r9,r8
800054b8:	c0 84       	brge	800054c8 <_vfprintf_r+0xccc>
800054ba:	fa ca f9 44 	sub	r10,sp,-1724
800054be:	f4 06 00 36 	add	r6,r10,r6<<0x3
800054c2:	ec fa fd 88 	ld.w	r10,r6[-632]
800054c6:	c1 68       	rjmp	800054f2 <_vfprintf_r+0xcf6>
800054c8:	41 09       	lddsp	r9,sp[0x40]
800054ca:	59 f8       	cp.w	r8,31
800054cc:	e0 89 00 10 	brgt	800054ec <_vfprintf_r+0xcf0>
800054d0:	f2 ca ff fc 	sub	r10,r9,-4
800054d4:	51 0a       	stdsp	sp[0x40],r10
800054d6:	fa c6 f9 44 	sub	r6,sp,-1724
800054da:	72 0a       	ld.w	r10,r9[0x0]
800054dc:	ec 08 00 39 	add	r9,r6,r8<<0x3
800054e0:	f3 4a fd 88 	st.w	r9[-632],r10
800054e4:	2f f8       	sub	r8,-1
800054e6:	fb 48 06 b4 	st.w	sp[1716],r8
800054ea:	c0 48       	rjmp	800054f2 <_vfprintf_r+0xcf6>
800054ec:	72 0a       	ld.w	r10,r9[0x0]
800054ee:	2f c9       	sub	r9,-4
800054f0:	51 09       	stdsp	sp[0x40],r9
800054f2:	40 be       	lddsp	lr,sp[0x2c]
800054f4:	95 0e       	st.w	r10[0x0],lr
800054f6:	fe 9f fa 11 	bral	80004918 <_vfprintf_r+0x11c>
800054fa:	50 a7       	stdsp	sp[0x28],r7
800054fc:	50 80       	stdsp	sp[0x20],r0
800054fe:	0c 97       	mov	r7,r6
80005500:	04 94       	mov	r4,r2
80005502:	06 96       	mov	r6,r3
80005504:	02 92       	mov	r2,r1
80005506:	40 93       	lddsp	r3,sp[0x24]
80005508:	10 90       	mov	r0,r8
8000550a:	40 41       	lddsp	r1,sp[0x10]
8000550c:	a5 a5       	sbr	r5,0x4
8000550e:	c0 a8       	rjmp	80005522 <_vfprintf_r+0xd26>
80005510:	50 a7       	stdsp	sp[0x28],r7
80005512:	50 80       	stdsp	sp[0x20],r0
80005514:	0c 97       	mov	r7,r6
80005516:	04 94       	mov	r4,r2
80005518:	06 96       	mov	r6,r3
8000551a:	02 92       	mov	r2,r1
8000551c:	40 93       	lddsp	r3,sp[0x24]
8000551e:	10 90       	mov	r0,r8
80005520:	40 41       	lddsp	r1,sp[0x10]
80005522:	ed b5 00 05 	bld	r5,0x5
80005526:	c5 d1       	brne	800055e0 <_vfprintf_r+0xde4>
80005528:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000552c:	40 3c       	lddsp	r12,sp[0xc]
8000552e:	58 0c       	cp.w	r12,0
80005530:	c2 60       	breq	8000557c <_vfprintf_r+0xd80>
80005532:	10 36       	cp.w	r6,r8
80005534:	c0 a4       	brge	80005548 <_vfprintf_r+0xd4c>
80005536:	fa cb f9 44 	sub	r11,sp,-1724
8000553a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000553e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005542:	fa e9 00 00 	st.d	sp[0],r8
80005546:	c1 88       	rjmp	80005576 <_vfprintf_r+0xd7a>
80005548:	fa c8 f9 50 	sub	r8,sp,-1712
8000554c:	1a d8       	st.w	--sp,r8
8000554e:	fa c8 fa b8 	sub	r8,sp,-1352
80005552:	04 9a       	mov	r10,r2
80005554:	1a d8       	st.w	--sp,r8
80005556:	0c 9b       	mov	r11,r6
80005558:	fa c8 fb b4 	sub	r8,sp,-1100
8000555c:	08 9c       	mov	r12,r4
8000555e:	1a d8       	st.w	--sp,r8
80005560:	fa c8 f9 40 	sub	r8,sp,-1728
80005564:	fa c9 ff b4 	sub	r9,sp,-76
80005568:	fe b0 f7 b2 	rcall	800044cc <get_arg>
8000556c:	2f dd       	sub	sp,-12
8000556e:	f8 ea 00 00 	ld.d	r10,r12[0]
80005572:	fa eb 00 00 	st.d	sp[0],r10
80005576:	30 08       	mov	r8,0
80005578:	e0 8f 03 de 	bral	80005d34 <_vfprintf_r+0x1538>
8000557c:	ee ca ff ff 	sub	r10,r7,-1
80005580:	10 37       	cp.w	r7,r8
80005582:	c0 b4       	brge	80005598 <_vfprintf_r+0xd9c>
80005584:	fa c9 f9 44 	sub	r9,sp,-1724
80005588:	14 97       	mov	r7,r10
8000558a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000558e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005592:	fa eb 00 00 	st.d	sp[0],r10
80005596:	c1 88       	rjmp	800055c6 <_vfprintf_r+0xdca>
80005598:	41 09       	lddsp	r9,sp[0x40]
8000559a:	59 f8       	cp.w	r8,31
8000559c:	e0 89 00 18 	brgt	800055cc <_vfprintf_r+0xdd0>
800055a0:	f2 e6 00 00 	ld.d	r6,r9[0]
800055a4:	f2 cb ff f8 	sub	r11,r9,-8
800055a8:	fa e7 00 00 	st.d	sp[0],r6
800055ac:	51 0b       	stdsp	sp[0x40],r11
800055ae:	fa c6 f9 44 	sub	r6,sp,-1724
800055b2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800055b6:	fa e6 00 00 	ld.d	r6,sp[0]
800055ba:	f2 e7 fd 88 	st.d	r9[-632],r6
800055be:	2f f8       	sub	r8,-1
800055c0:	14 97       	mov	r7,r10
800055c2:	fb 48 06 b4 	st.w	sp[1716],r8
800055c6:	40 38       	lddsp	r8,sp[0xc]
800055c8:	e0 8f 03 b6 	bral	80005d34 <_vfprintf_r+0x1538>
800055cc:	f2 e6 00 00 	ld.d	r6,r9[0]
800055d0:	40 38       	lddsp	r8,sp[0xc]
800055d2:	fa e7 00 00 	st.d	sp[0],r6
800055d6:	2f 89       	sub	r9,-8
800055d8:	14 97       	mov	r7,r10
800055da:	51 09       	stdsp	sp[0x40],r9
800055dc:	e0 8f 03 ac 	bral	80005d34 <_vfprintf_r+0x1538>
800055e0:	ed b5 00 04 	bld	r5,0x4
800055e4:	c1 61       	brne	80005610 <_vfprintf_r+0xe14>
800055e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800055ea:	40 3e       	lddsp	lr,sp[0xc]
800055ec:	58 0e       	cp.w	lr,0
800055ee:	c0 80       	breq	800055fe <_vfprintf_r+0xe02>
800055f0:	10 36       	cp.w	r6,r8
800055f2:	c6 74       	brge	800056c0 <_vfprintf_r+0xec4>
800055f4:	fa cc f9 44 	sub	r12,sp,-1724
800055f8:	f8 06 00 36 	add	r6,r12,r6<<0x3
800055fc:	c8 08       	rjmp	800056fc <_vfprintf_r+0xf00>
800055fe:	ee ca ff ff 	sub	r10,r7,-1
80005602:	10 37       	cp.w	r7,r8
80005604:	c7 f4       	brge	80005702 <_vfprintf_r+0xf06>
80005606:	fa cb f9 44 	sub	r11,sp,-1724
8000560a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000560e:	c7 68       	rjmp	800056fa <_vfprintf_r+0xefe>
80005610:	ed b5 00 06 	bld	r5,0x6
80005614:	c4 a1       	brne	800056a8 <_vfprintf_r+0xeac>
80005616:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000561a:	40 3c       	lddsp	r12,sp[0xc]
8000561c:	58 0c       	cp.w	r12,0
8000561e:	c1 d0       	breq	80005658 <_vfprintf_r+0xe5c>
80005620:	10 36       	cp.w	r6,r8
80005622:	c0 64       	brge	8000562e <_vfprintf_r+0xe32>
80005624:	fa cb f9 44 	sub	r11,sp,-1724
80005628:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000562c:	c1 f8       	rjmp	8000566a <_vfprintf_r+0xe6e>
8000562e:	fa c8 f9 50 	sub	r8,sp,-1712
80005632:	1a d8       	st.w	--sp,r8
80005634:	fa c8 fa b8 	sub	r8,sp,-1352
80005638:	1a d8       	st.w	--sp,r8
8000563a:	fa c8 fb b4 	sub	r8,sp,-1100
8000563e:	1a d8       	st.w	--sp,r8
80005640:	fa c8 f9 40 	sub	r8,sp,-1728
80005644:	fa c9 ff b4 	sub	r9,sp,-76
80005648:	04 9a       	mov	r10,r2
8000564a:	0c 9b       	mov	r11,r6
8000564c:	08 9c       	mov	r12,r4
8000564e:	fe b0 f7 3f 	rcall	800044cc <get_arg>
80005652:	2f dd       	sub	sp,-12
80005654:	98 18       	ld.sh	r8,r12[0x2]
80005656:	c2 68       	rjmp	800056a2 <_vfprintf_r+0xea6>
80005658:	ee ca ff ff 	sub	r10,r7,-1
8000565c:	10 37       	cp.w	r7,r8
8000565e:	c0 94       	brge	80005670 <_vfprintf_r+0xe74>
80005660:	fa c9 f9 44 	sub	r9,sp,-1724
80005664:	14 97       	mov	r7,r10
80005666:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000566a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000566e:	c1 a8       	rjmp	800056a2 <_vfprintf_r+0xea6>
80005670:	41 09       	lddsp	r9,sp[0x40]
80005672:	59 f8       	cp.w	r8,31
80005674:	e0 89 00 13 	brgt	8000569a <_vfprintf_r+0xe9e>
80005678:	f2 cb ff fc 	sub	r11,r9,-4
8000567c:	51 0b       	stdsp	sp[0x40],r11
8000567e:	72 09       	ld.w	r9,r9[0x0]
80005680:	fa c6 f9 44 	sub	r6,sp,-1724
80005684:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005688:	2f f8       	sub	r8,-1
8000568a:	f7 49 fd 88 	st.w	r11[-632],r9
8000568e:	fb 48 06 b4 	st.w	sp[1716],r8
80005692:	14 97       	mov	r7,r10
80005694:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005698:	c0 58       	rjmp	800056a2 <_vfprintf_r+0xea6>
8000569a:	92 18       	ld.sh	r8,r9[0x2]
8000569c:	14 97       	mov	r7,r10
8000569e:	2f c9       	sub	r9,-4
800056a0:	51 09       	stdsp	sp[0x40],r9
800056a2:	5c 78       	castu.h	r8
800056a4:	50 18       	stdsp	sp[0x4],r8
800056a6:	c4 68       	rjmp	80005732 <_vfprintf_r+0xf36>
800056a8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800056ac:	40 3c       	lddsp	r12,sp[0xc]
800056ae:	58 0c       	cp.w	r12,0
800056b0:	c1 d0       	breq	800056ea <_vfprintf_r+0xeee>
800056b2:	10 36       	cp.w	r6,r8
800056b4:	c0 64       	brge	800056c0 <_vfprintf_r+0xec4>
800056b6:	fa cb f9 44 	sub	r11,sp,-1724
800056ba:	f6 06 00 36 	add	r6,r11,r6<<0x3
800056be:	c1 f8       	rjmp	800056fc <_vfprintf_r+0xf00>
800056c0:	fa c8 f9 50 	sub	r8,sp,-1712
800056c4:	1a d8       	st.w	--sp,r8
800056c6:	fa c8 fa b8 	sub	r8,sp,-1352
800056ca:	0c 9b       	mov	r11,r6
800056cc:	1a d8       	st.w	--sp,r8
800056ce:	fa c8 fb b4 	sub	r8,sp,-1100
800056d2:	04 9a       	mov	r10,r2
800056d4:	1a d8       	st.w	--sp,r8
800056d6:	08 9c       	mov	r12,r4
800056d8:	fa c8 f9 40 	sub	r8,sp,-1728
800056dc:	fa c9 ff b4 	sub	r9,sp,-76
800056e0:	fe b0 f6 f6 	rcall	800044cc <get_arg>
800056e4:	2f dd       	sub	sp,-12
800056e6:	78 0b       	ld.w	r11,r12[0x0]
800056e8:	c2 48       	rjmp	80005730 <_vfprintf_r+0xf34>
800056ea:	ee ca ff ff 	sub	r10,r7,-1
800056ee:	10 37       	cp.w	r7,r8
800056f0:	c0 94       	brge	80005702 <_vfprintf_r+0xf06>
800056f2:	fa c9 f9 44 	sub	r9,sp,-1724
800056f6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800056fa:	14 97       	mov	r7,r10
800056fc:	ec fb fd 88 	ld.w	r11,r6[-632]
80005700:	c1 88       	rjmp	80005730 <_vfprintf_r+0xf34>
80005702:	41 09       	lddsp	r9,sp[0x40]
80005704:	59 f8       	cp.w	r8,31
80005706:	e0 89 00 11 	brgt	80005728 <_vfprintf_r+0xf2c>
8000570a:	f2 cb ff fc 	sub	r11,r9,-4
8000570e:	51 0b       	stdsp	sp[0x40],r11
80005710:	fa c6 f9 44 	sub	r6,sp,-1724
80005714:	72 0b       	ld.w	r11,r9[0x0]
80005716:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000571a:	f3 4b fd 88 	st.w	r9[-632],r11
8000571e:	2f f8       	sub	r8,-1
80005720:	14 97       	mov	r7,r10
80005722:	fb 48 06 b4 	st.w	sp[1716],r8
80005726:	c0 58       	rjmp	80005730 <_vfprintf_r+0xf34>
80005728:	72 0b       	ld.w	r11,r9[0x0]
8000572a:	14 97       	mov	r7,r10
8000572c:	2f c9       	sub	r9,-4
8000572e:	51 09       	stdsp	sp[0x40],r9
80005730:	50 1b       	stdsp	sp[0x4],r11
80005732:	30 0e       	mov	lr,0
80005734:	50 0e       	stdsp	sp[0x0],lr
80005736:	1c 98       	mov	r8,lr
80005738:	e0 8f 02 fe 	bral	80005d34 <_vfprintf_r+0x1538>
8000573c:	50 a7       	stdsp	sp[0x28],r7
8000573e:	50 80       	stdsp	sp[0x20],r0
80005740:	0c 97       	mov	r7,r6
80005742:	04 94       	mov	r4,r2
80005744:	06 96       	mov	r6,r3
80005746:	02 92       	mov	r2,r1
80005748:	40 93       	lddsp	r3,sp[0x24]
8000574a:	40 41       	lddsp	r1,sp[0x10]
8000574c:	0e 99       	mov	r9,r7
8000574e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005752:	40 3c       	lddsp	r12,sp[0xc]
80005754:	58 0c       	cp.w	r12,0
80005756:	c1 d0       	breq	80005790 <_vfprintf_r+0xf94>
80005758:	10 36       	cp.w	r6,r8
8000575a:	c0 64       	brge	80005766 <_vfprintf_r+0xf6a>
8000575c:	fa cb f9 44 	sub	r11,sp,-1724
80005760:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005764:	c1 d8       	rjmp	8000579e <_vfprintf_r+0xfa2>
80005766:	fa c8 f9 50 	sub	r8,sp,-1712
8000576a:	1a d8       	st.w	--sp,r8
8000576c:	fa c8 fa b8 	sub	r8,sp,-1352
80005770:	1a d8       	st.w	--sp,r8
80005772:	fa c8 fb b4 	sub	r8,sp,-1100
80005776:	1a d8       	st.w	--sp,r8
80005778:	fa c9 ff b4 	sub	r9,sp,-76
8000577c:	fa c8 f9 40 	sub	r8,sp,-1728
80005780:	04 9a       	mov	r10,r2
80005782:	0c 9b       	mov	r11,r6
80005784:	08 9c       	mov	r12,r4
80005786:	fe b0 f6 a3 	rcall	800044cc <get_arg>
8000578a:	2f dd       	sub	sp,-12
8000578c:	78 09       	ld.w	r9,r12[0x0]
8000578e:	c2 18       	rjmp	800057d0 <_vfprintf_r+0xfd4>
80005790:	2f f7       	sub	r7,-1
80005792:	10 39       	cp.w	r9,r8
80005794:	c0 84       	brge	800057a4 <_vfprintf_r+0xfa8>
80005796:	fa ca f9 44 	sub	r10,sp,-1724
8000579a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000579e:	ec f9 fd 88 	ld.w	r9,r6[-632]
800057a2:	c1 78       	rjmp	800057d0 <_vfprintf_r+0xfd4>
800057a4:	41 09       	lddsp	r9,sp[0x40]
800057a6:	59 f8       	cp.w	r8,31
800057a8:	e0 89 00 10 	brgt	800057c8 <_vfprintf_r+0xfcc>
800057ac:	f2 ca ff fc 	sub	r10,r9,-4
800057b0:	51 0a       	stdsp	sp[0x40],r10
800057b2:	fa c6 f9 44 	sub	r6,sp,-1724
800057b6:	72 09       	ld.w	r9,r9[0x0]
800057b8:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800057bc:	f5 49 fd 88 	st.w	r10[-632],r9
800057c0:	2f f8       	sub	r8,-1
800057c2:	fb 48 06 b4 	st.w	sp[1716],r8
800057c6:	c0 58       	rjmp	800057d0 <_vfprintf_r+0xfd4>
800057c8:	f2 c8 ff fc 	sub	r8,r9,-4
800057cc:	51 08       	stdsp	sp[0x40],r8
800057ce:	72 09       	ld.w	r9,r9[0x0]
800057d0:	33 08       	mov	r8,48
800057d2:	fb 68 06 b8 	st.b	sp[1720],r8
800057d6:	37 88       	mov	r8,120
800057d8:	30 0e       	mov	lr,0
800057da:	fb 68 06 b9 	st.b	sp[1721],r8
800057de:	fe cc b7 ea 	sub	r12,pc,-18454
800057e2:	50 19       	stdsp	sp[0x4],r9
800057e4:	a1 b5       	sbr	r5,0x1
800057e6:	50 0e       	stdsp	sp[0x0],lr
800057e8:	50 dc       	stdsp	sp[0x34],r12
800057ea:	30 28       	mov	r8,2
800057ec:	37 80       	mov	r0,120
800057ee:	e0 8f 02 a3 	bral	80005d34 <_vfprintf_r+0x1538>
800057f2:	50 a7       	stdsp	sp[0x28],r7
800057f4:	50 80       	stdsp	sp[0x20],r0
800057f6:	10 90       	mov	r0,r8
800057f8:	30 08       	mov	r8,0
800057fa:	fb 68 06 bb 	st.b	sp[1723],r8
800057fe:	0c 97       	mov	r7,r6
80005800:	04 94       	mov	r4,r2
80005802:	06 96       	mov	r6,r3
80005804:	02 92       	mov	r2,r1
80005806:	40 93       	lddsp	r3,sp[0x24]
80005808:	40 41       	lddsp	r1,sp[0x10]
8000580a:	0e 99       	mov	r9,r7
8000580c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005810:	40 3b       	lddsp	r11,sp[0xc]
80005812:	58 0b       	cp.w	r11,0
80005814:	c1 d0       	breq	8000584e <_vfprintf_r+0x1052>
80005816:	10 36       	cp.w	r6,r8
80005818:	c0 64       	brge	80005824 <_vfprintf_r+0x1028>
8000581a:	fa ca f9 44 	sub	r10,sp,-1724
8000581e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005822:	c1 d8       	rjmp	8000585c <_vfprintf_r+0x1060>
80005824:	fa c8 f9 50 	sub	r8,sp,-1712
80005828:	1a d8       	st.w	--sp,r8
8000582a:	fa c8 fa b8 	sub	r8,sp,-1352
8000582e:	1a d8       	st.w	--sp,r8
80005830:	fa c8 fb b4 	sub	r8,sp,-1100
80005834:	0c 9b       	mov	r11,r6
80005836:	1a d8       	st.w	--sp,r8
80005838:	04 9a       	mov	r10,r2
8000583a:	fa c8 f9 40 	sub	r8,sp,-1728
8000583e:	fa c9 ff b4 	sub	r9,sp,-76
80005842:	08 9c       	mov	r12,r4
80005844:	fe b0 f6 44 	rcall	800044cc <get_arg>
80005848:	2f dd       	sub	sp,-12
8000584a:	78 06       	ld.w	r6,r12[0x0]
8000584c:	c2 08       	rjmp	8000588c <_vfprintf_r+0x1090>
8000584e:	2f f7       	sub	r7,-1
80005850:	10 39       	cp.w	r9,r8
80005852:	c0 84       	brge	80005862 <_vfprintf_r+0x1066>
80005854:	fa c9 f9 44 	sub	r9,sp,-1724
80005858:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000585c:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005860:	c1 68       	rjmp	8000588c <_vfprintf_r+0x1090>
80005862:	41 09       	lddsp	r9,sp[0x40]
80005864:	59 f8       	cp.w	r8,31
80005866:	e0 89 00 10 	brgt	80005886 <_vfprintf_r+0x108a>
8000586a:	f2 ca ff fc 	sub	r10,r9,-4
8000586e:	51 0a       	stdsp	sp[0x40],r10
80005870:	72 06       	ld.w	r6,r9[0x0]
80005872:	fa ce f9 44 	sub	lr,sp,-1724
80005876:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000587a:	f3 46 fd 88 	st.w	r9[-632],r6
8000587e:	2f f8       	sub	r8,-1
80005880:	fb 48 06 b4 	st.w	sp[1716],r8
80005884:	c0 48       	rjmp	8000588c <_vfprintf_r+0x1090>
80005886:	72 06       	ld.w	r6,r9[0x0]
80005888:	2f c9       	sub	r9,-4
8000588a:	51 09       	stdsp	sp[0x40],r9
8000588c:	40 2c       	lddsp	r12,sp[0x8]
8000588e:	58 0c       	cp.w	r12,0
80005890:	c1 05       	brlt	800058b0 <_vfprintf_r+0x10b4>
80005892:	18 9a       	mov	r10,r12
80005894:	30 0b       	mov	r11,0
80005896:	0c 9c       	mov	r12,r6
80005898:	e0 a0 14 58 	rcall	80008148 <memchr>
8000589c:	e0 80 02 df 	breq	80005e5a <_vfprintf_r+0x165e>
800058a0:	f8 06 01 02 	sub	r2,r12,r6
800058a4:	40 2b       	lddsp	r11,sp[0x8]
800058a6:	16 32       	cp.w	r2,r11
800058a8:	e0 89 02 d9 	brgt	80005e5a <_vfprintf_r+0x165e>
800058ac:	e0 8f 02 d4 	bral	80005e54 <_vfprintf_r+0x1658>
800058b0:	30 0a       	mov	r10,0
800058b2:	0c 9c       	mov	r12,r6
800058b4:	50 2a       	stdsp	sp[0x8],r10
800058b6:	e0 a0 19 33 	rcall	80008b1c <strlen>
800058ba:	18 92       	mov	r2,r12
800058bc:	e0 8f 02 d2 	bral	80005e60 <_vfprintf_r+0x1664>
800058c0:	50 a7       	stdsp	sp[0x28],r7
800058c2:	50 80       	stdsp	sp[0x20],r0
800058c4:	0c 97       	mov	r7,r6
800058c6:	04 94       	mov	r4,r2
800058c8:	06 96       	mov	r6,r3
800058ca:	02 92       	mov	r2,r1
800058cc:	40 93       	lddsp	r3,sp[0x24]
800058ce:	10 90       	mov	r0,r8
800058d0:	40 41       	lddsp	r1,sp[0x10]
800058d2:	a5 a5       	sbr	r5,0x4
800058d4:	c0 a8       	rjmp	800058e8 <_vfprintf_r+0x10ec>
800058d6:	50 a7       	stdsp	sp[0x28],r7
800058d8:	50 80       	stdsp	sp[0x20],r0
800058da:	0c 97       	mov	r7,r6
800058dc:	04 94       	mov	r4,r2
800058de:	06 96       	mov	r6,r3
800058e0:	02 92       	mov	r2,r1
800058e2:	40 93       	lddsp	r3,sp[0x24]
800058e4:	10 90       	mov	r0,r8
800058e6:	40 41       	lddsp	r1,sp[0x10]
800058e8:	ed b5 00 05 	bld	r5,0x5
800058ec:	c5 61       	brne	80005998 <_vfprintf_r+0x119c>
800058ee:	fa f8 06 b4 	ld.w	r8,sp[1716]
800058f2:	40 39       	lddsp	r9,sp[0xc]
800058f4:	58 09       	cp.w	r9,0
800058f6:	c2 10       	breq	80005938 <_vfprintf_r+0x113c>
800058f8:	10 36       	cp.w	r6,r8
800058fa:	c0 74       	brge	80005908 <_vfprintf_r+0x110c>
800058fc:	fa c8 f9 44 	sub	r8,sp,-1724
80005900:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005904:	c2 38       	rjmp	8000594a <_vfprintf_r+0x114e>
80005906:	d7 03       	nop
80005908:	fa c8 f9 50 	sub	r8,sp,-1712
8000590c:	1a d8       	st.w	--sp,r8
8000590e:	fa c8 fa b8 	sub	r8,sp,-1352
80005912:	1a d8       	st.w	--sp,r8
80005914:	fa c8 fb b4 	sub	r8,sp,-1100
80005918:	1a d8       	st.w	--sp,r8
8000591a:	fa c8 f9 40 	sub	r8,sp,-1728
8000591e:	fa c9 ff b4 	sub	r9,sp,-76
80005922:	04 9a       	mov	r10,r2
80005924:	0c 9b       	mov	r11,r6
80005926:	08 9c       	mov	r12,r4
80005928:	fe b0 f5 d2 	rcall	800044cc <get_arg>
8000592c:	2f dd       	sub	sp,-12
8000592e:	f8 e8 00 00 	ld.d	r8,r12[0]
80005932:	fa e9 00 00 	st.d	sp[0],r8
80005936:	c2 e8       	rjmp	80005992 <_vfprintf_r+0x1196>
80005938:	ee ca ff ff 	sub	r10,r7,-1
8000593c:	10 37       	cp.w	r7,r8
8000593e:	c0 b4       	brge	80005954 <_vfprintf_r+0x1158>
80005940:	fa c8 f9 44 	sub	r8,sp,-1724
80005944:	14 97       	mov	r7,r10
80005946:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000594a:	ec ea fd 88 	ld.d	r10,r6[-632]
8000594e:	fa eb 00 00 	st.d	sp[0],r10
80005952:	c2 08       	rjmp	80005992 <_vfprintf_r+0x1196>
80005954:	41 09       	lddsp	r9,sp[0x40]
80005956:	59 f8       	cp.w	r8,31
80005958:	e0 89 00 16 	brgt	80005984 <_vfprintf_r+0x1188>
8000595c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005960:	f2 cb ff f8 	sub	r11,r9,-8
80005964:	fa e7 00 00 	st.d	sp[0],r6
80005968:	51 0b       	stdsp	sp[0x40],r11
8000596a:	fa c6 f9 44 	sub	r6,sp,-1724
8000596e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005972:	fa e6 00 00 	ld.d	r6,sp[0]
80005976:	f2 e7 fd 88 	st.d	r9[-632],r6
8000597a:	2f f8       	sub	r8,-1
8000597c:	14 97       	mov	r7,r10
8000597e:	fb 48 06 b4 	st.w	sp[1716],r8
80005982:	c0 88       	rjmp	80005992 <_vfprintf_r+0x1196>
80005984:	f2 e6 00 00 	ld.d	r6,r9[0]
80005988:	2f 89       	sub	r9,-8
8000598a:	fa e7 00 00 	st.d	sp[0],r6
8000598e:	51 09       	stdsp	sp[0x40],r9
80005990:	14 97       	mov	r7,r10
80005992:	30 18       	mov	r8,1
80005994:	e0 8f 01 d0 	bral	80005d34 <_vfprintf_r+0x1538>
80005998:	ed b5 00 04 	bld	r5,0x4
8000599c:	c1 61       	brne	800059c8 <_vfprintf_r+0x11cc>
8000599e:	fa f8 06 b4 	ld.w	r8,sp[1716]
800059a2:	40 3e       	lddsp	lr,sp[0xc]
800059a4:	58 0e       	cp.w	lr,0
800059a6:	c0 80       	breq	800059b6 <_vfprintf_r+0x11ba>
800059a8:	10 36       	cp.w	r6,r8
800059aa:	c6 74       	brge	80005a78 <_vfprintf_r+0x127c>
800059ac:	fa cc f9 44 	sub	r12,sp,-1724
800059b0:	f8 06 00 36 	add	r6,r12,r6<<0x3
800059b4:	c8 08       	rjmp	80005ab4 <_vfprintf_r+0x12b8>
800059b6:	ee ca ff ff 	sub	r10,r7,-1
800059ba:	10 37       	cp.w	r7,r8
800059bc:	c7 f4       	brge	80005aba <_vfprintf_r+0x12be>
800059be:	fa cb f9 44 	sub	r11,sp,-1724
800059c2:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059c6:	c7 68       	rjmp	80005ab2 <_vfprintf_r+0x12b6>
800059c8:	ed b5 00 06 	bld	r5,0x6
800059cc:	c4 a1       	brne	80005a60 <_vfprintf_r+0x1264>
800059ce:	fa f8 06 b4 	ld.w	r8,sp[1716]
800059d2:	40 3c       	lddsp	r12,sp[0xc]
800059d4:	58 0c       	cp.w	r12,0
800059d6:	c1 d0       	breq	80005a10 <_vfprintf_r+0x1214>
800059d8:	10 36       	cp.w	r6,r8
800059da:	c0 64       	brge	800059e6 <_vfprintf_r+0x11ea>
800059dc:	fa cb f9 44 	sub	r11,sp,-1724
800059e0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059e4:	c1 f8       	rjmp	80005a22 <_vfprintf_r+0x1226>
800059e6:	fa c8 f9 50 	sub	r8,sp,-1712
800059ea:	1a d8       	st.w	--sp,r8
800059ec:	fa c8 fa b8 	sub	r8,sp,-1352
800059f0:	1a d8       	st.w	--sp,r8
800059f2:	fa c8 fb b4 	sub	r8,sp,-1100
800059f6:	1a d8       	st.w	--sp,r8
800059f8:	fa c8 f9 40 	sub	r8,sp,-1728
800059fc:	fa c9 ff b4 	sub	r9,sp,-76
80005a00:	04 9a       	mov	r10,r2
80005a02:	0c 9b       	mov	r11,r6
80005a04:	08 9c       	mov	r12,r4
80005a06:	fe b0 f5 63 	rcall	800044cc <get_arg>
80005a0a:	2f dd       	sub	sp,-12
80005a0c:	98 18       	ld.sh	r8,r12[0x2]
80005a0e:	c2 68       	rjmp	80005a5a <_vfprintf_r+0x125e>
80005a10:	ee ca ff ff 	sub	r10,r7,-1
80005a14:	10 37       	cp.w	r7,r8
80005a16:	c0 94       	brge	80005a28 <_vfprintf_r+0x122c>
80005a18:	fa c9 f9 44 	sub	r9,sp,-1724
80005a1c:	14 97       	mov	r7,r10
80005a1e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005a22:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005a26:	c1 a8       	rjmp	80005a5a <_vfprintf_r+0x125e>
80005a28:	41 09       	lddsp	r9,sp[0x40]
80005a2a:	59 f8       	cp.w	r8,31
80005a2c:	e0 89 00 13 	brgt	80005a52 <_vfprintf_r+0x1256>
80005a30:	f2 cb ff fc 	sub	r11,r9,-4
80005a34:	51 0b       	stdsp	sp[0x40],r11
80005a36:	72 09       	ld.w	r9,r9[0x0]
80005a38:	fa c6 f9 44 	sub	r6,sp,-1724
80005a3c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005a40:	2f f8       	sub	r8,-1
80005a42:	f7 49 fd 88 	st.w	r11[-632],r9
80005a46:	fb 48 06 b4 	st.w	sp[1716],r8
80005a4a:	14 97       	mov	r7,r10
80005a4c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005a50:	c0 58       	rjmp	80005a5a <_vfprintf_r+0x125e>
80005a52:	92 18       	ld.sh	r8,r9[0x2]
80005a54:	14 97       	mov	r7,r10
80005a56:	2f c9       	sub	r9,-4
80005a58:	51 09       	stdsp	sp[0x40],r9
80005a5a:	5c 78       	castu.h	r8
80005a5c:	50 18       	stdsp	sp[0x4],r8
80005a5e:	c4 68       	rjmp	80005aea <_vfprintf_r+0x12ee>
80005a60:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a64:	40 3c       	lddsp	r12,sp[0xc]
80005a66:	58 0c       	cp.w	r12,0
80005a68:	c1 d0       	breq	80005aa2 <_vfprintf_r+0x12a6>
80005a6a:	10 36       	cp.w	r6,r8
80005a6c:	c0 64       	brge	80005a78 <_vfprintf_r+0x127c>
80005a6e:	fa cb f9 44 	sub	r11,sp,-1724
80005a72:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a76:	c1 f8       	rjmp	80005ab4 <_vfprintf_r+0x12b8>
80005a78:	fa c8 f9 50 	sub	r8,sp,-1712
80005a7c:	1a d8       	st.w	--sp,r8
80005a7e:	fa c8 fa b8 	sub	r8,sp,-1352
80005a82:	0c 9b       	mov	r11,r6
80005a84:	1a d8       	st.w	--sp,r8
80005a86:	fa c8 fb b4 	sub	r8,sp,-1100
80005a8a:	04 9a       	mov	r10,r2
80005a8c:	1a d8       	st.w	--sp,r8
80005a8e:	08 9c       	mov	r12,r4
80005a90:	fa c8 f9 40 	sub	r8,sp,-1728
80005a94:	fa c9 ff b4 	sub	r9,sp,-76
80005a98:	fe b0 f5 1a 	rcall	800044cc <get_arg>
80005a9c:	2f dd       	sub	sp,-12
80005a9e:	78 0b       	ld.w	r11,r12[0x0]
80005aa0:	c2 48       	rjmp	80005ae8 <_vfprintf_r+0x12ec>
80005aa2:	ee ca ff ff 	sub	r10,r7,-1
80005aa6:	10 37       	cp.w	r7,r8
80005aa8:	c0 94       	brge	80005aba <_vfprintf_r+0x12be>
80005aaa:	fa c9 f9 44 	sub	r9,sp,-1724
80005aae:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005ab2:	14 97       	mov	r7,r10
80005ab4:	ec fb fd 88 	ld.w	r11,r6[-632]
80005ab8:	c1 88       	rjmp	80005ae8 <_vfprintf_r+0x12ec>
80005aba:	41 09       	lddsp	r9,sp[0x40]
80005abc:	59 f8       	cp.w	r8,31
80005abe:	e0 89 00 11 	brgt	80005ae0 <_vfprintf_r+0x12e4>
80005ac2:	f2 cb ff fc 	sub	r11,r9,-4
80005ac6:	51 0b       	stdsp	sp[0x40],r11
80005ac8:	fa c6 f9 44 	sub	r6,sp,-1724
80005acc:	72 0b       	ld.w	r11,r9[0x0]
80005ace:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005ad2:	f3 4b fd 88 	st.w	r9[-632],r11
80005ad6:	2f f8       	sub	r8,-1
80005ad8:	14 97       	mov	r7,r10
80005ada:	fb 48 06 b4 	st.w	sp[1716],r8
80005ade:	c0 58       	rjmp	80005ae8 <_vfprintf_r+0x12ec>
80005ae0:	72 0b       	ld.w	r11,r9[0x0]
80005ae2:	14 97       	mov	r7,r10
80005ae4:	2f c9       	sub	r9,-4
80005ae6:	51 09       	stdsp	sp[0x40],r9
80005ae8:	50 1b       	stdsp	sp[0x4],r11
80005aea:	30 0e       	mov	lr,0
80005aec:	30 18       	mov	r8,1
80005aee:	50 0e       	stdsp	sp[0x0],lr
80005af0:	c2 29       	rjmp	80005d34 <_vfprintf_r+0x1538>
80005af2:	50 a7       	stdsp	sp[0x28],r7
80005af4:	50 80       	stdsp	sp[0x20],r0
80005af6:	0c 97       	mov	r7,r6
80005af8:	04 94       	mov	r4,r2
80005afa:	06 96       	mov	r6,r3
80005afc:	02 92       	mov	r2,r1
80005afe:	fe cc bb 0a 	sub	r12,pc,-17654
80005b02:	40 93       	lddsp	r3,sp[0x24]
80005b04:	10 90       	mov	r0,r8
80005b06:	40 41       	lddsp	r1,sp[0x10]
80005b08:	50 dc       	stdsp	sp[0x34],r12
80005b0a:	ed b5 00 05 	bld	r5,0x5
80005b0e:	c5 51       	brne	80005bb8 <_vfprintf_r+0x13bc>
80005b10:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005b14:	40 3b       	lddsp	r11,sp[0xc]
80005b16:	58 0b       	cp.w	r11,0
80005b18:	c2 20       	breq	80005b5c <_vfprintf_r+0x1360>
80005b1a:	10 36       	cp.w	r6,r8
80005b1c:	c0 a4       	brge	80005b30 <_vfprintf_r+0x1334>
80005b1e:	fa ca f9 44 	sub	r10,sp,-1724
80005b22:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005b26:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005b2a:	fa e9 00 00 	st.d	sp[0],r8
80005b2e:	cf 28       	rjmp	80005d12 <_vfprintf_r+0x1516>
80005b30:	fa c8 f9 50 	sub	r8,sp,-1712
80005b34:	1a d8       	st.w	--sp,r8
80005b36:	fa c8 fa b8 	sub	r8,sp,-1352
80005b3a:	04 9a       	mov	r10,r2
80005b3c:	1a d8       	st.w	--sp,r8
80005b3e:	0c 9b       	mov	r11,r6
80005b40:	fa c8 fb b4 	sub	r8,sp,-1100
80005b44:	08 9c       	mov	r12,r4
80005b46:	1a d8       	st.w	--sp,r8
80005b48:	fa c8 f9 40 	sub	r8,sp,-1728
80005b4c:	fa c9 ff b4 	sub	r9,sp,-76
80005b50:	fe b0 f4 be 	rcall	800044cc <get_arg>
80005b54:	2f dd       	sub	sp,-12
80005b56:	f8 ea 00 00 	ld.d	r10,r12[0]
80005b5a:	c0 c8       	rjmp	80005b72 <_vfprintf_r+0x1376>
80005b5c:	ee ca ff ff 	sub	r10,r7,-1
80005b60:	10 37       	cp.w	r7,r8
80005b62:	c0 b4       	brge	80005b78 <_vfprintf_r+0x137c>
80005b64:	fa c9 f9 44 	sub	r9,sp,-1724
80005b68:	14 97       	mov	r7,r10
80005b6a:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005b6e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005b72:	fa eb 00 00 	st.d	sp[0],r10
80005b76:	cc e8       	rjmp	80005d12 <_vfprintf_r+0x1516>
80005b78:	41 09       	lddsp	r9,sp[0x40]
80005b7a:	59 f8       	cp.w	r8,31
80005b7c:	e0 89 00 16 	brgt	80005ba8 <_vfprintf_r+0x13ac>
80005b80:	f2 e6 00 00 	ld.d	r6,r9[0]
80005b84:	f2 cb ff f8 	sub	r11,r9,-8
80005b88:	fa e7 00 00 	st.d	sp[0],r6
80005b8c:	51 0b       	stdsp	sp[0x40],r11
80005b8e:	fa c6 f9 44 	sub	r6,sp,-1724
80005b92:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005b96:	fa e6 00 00 	ld.d	r6,sp[0]
80005b9a:	f2 e7 fd 88 	st.d	r9[-632],r6
80005b9e:	2f f8       	sub	r8,-1
80005ba0:	14 97       	mov	r7,r10
80005ba2:	fb 48 06 b4 	st.w	sp[1716],r8
80005ba6:	cb 68       	rjmp	80005d12 <_vfprintf_r+0x1516>
80005ba8:	f2 e6 00 00 	ld.d	r6,r9[0]
80005bac:	2f 89       	sub	r9,-8
80005bae:	fa e7 00 00 	st.d	sp[0],r6
80005bb2:	51 09       	stdsp	sp[0x40],r9
80005bb4:	14 97       	mov	r7,r10
80005bb6:	ca e8       	rjmp	80005d12 <_vfprintf_r+0x1516>
80005bb8:	ed b5 00 04 	bld	r5,0x4
80005bbc:	c1 71       	brne	80005bea <_vfprintf_r+0x13ee>
80005bbe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005bc2:	40 3e       	lddsp	lr,sp[0xc]
80005bc4:	58 0e       	cp.w	lr,0
80005bc6:	c0 80       	breq	80005bd6 <_vfprintf_r+0x13da>
80005bc8:	10 36       	cp.w	r6,r8
80005bca:	c6 94       	brge	80005c9c <_vfprintf_r+0x14a0>
80005bcc:	fa cc f9 44 	sub	r12,sp,-1724
80005bd0:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005bd4:	c8 28       	rjmp	80005cd8 <_vfprintf_r+0x14dc>
80005bd6:	ee ca ff ff 	sub	r10,r7,-1
80005bda:	10 37       	cp.w	r7,r8
80005bdc:	e0 84 00 81 	brge	80005cde <_vfprintf_r+0x14e2>
80005be0:	fa cb f9 44 	sub	r11,sp,-1724
80005be4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005be8:	c7 78       	rjmp	80005cd6 <_vfprintf_r+0x14da>
80005bea:	ed b5 00 06 	bld	r5,0x6
80005bee:	c4 b1       	brne	80005c84 <_vfprintf_r+0x1488>
80005bf0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005bf4:	40 3c       	lddsp	r12,sp[0xc]
80005bf6:	58 0c       	cp.w	r12,0
80005bf8:	c1 d0       	breq	80005c32 <_vfprintf_r+0x1436>
80005bfa:	10 36       	cp.w	r6,r8
80005bfc:	c0 64       	brge	80005c08 <_vfprintf_r+0x140c>
80005bfe:	fa cb f9 44 	sub	r11,sp,-1724
80005c02:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005c06:	c1 f8       	rjmp	80005c44 <_vfprintf_r+0x1448>
80005c08:	fa c8 f9 50 	sub	r8,sp,-1712
80005c0c:	1a d8       	st.w	--sp,r8
80005c0e:	fa c8 fa b8 	sub	r8,sp,-1352
80005c12:	1a d8       	st.w	--sp,r8
80005c14:	fa c8 fb b4 	sub	r8,sp,-1100
80005c18:	1a d8       	st.w	--sp,r8
80005c1a:	fa c8 f9 40 	sub	r8,sp,-1728
80005c1e:	fa c9 ff b4 	sub	r9,sp,-76
80005c22:	04 9a       	mov	r10,r2
80005c24:	0c 9b       	mov	r11,r6
80005c26:	08 9c       	mov	r12,r4
80005c28:	fe b0 f4 52 	rcall	800044cc <get_arg>
80005c2c:	2f dd       	sub	sp,-12
80005c2e:	98 18       	ld.sh	r8,r12[0x2]
80005c30:	c2 78       	rjmp	80005c7e <_vfprintf_r+0x1482>
80005c32:	ee ca ff ff 	sub	r10,r7,-1
80005c36:	10 37       	cp.w	r7,r8
80005c38:	c0 a4       	brge	80005c4c <_vfprintf_r+0x1450>
80005c3a:	fa c9 f9 44 	sub	r9,sp,-1724
80005c3e:	14 97       	mov	r7,r10
80005c40:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005c44:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005c48:	c1 b8       	rjmp	80005c7e <_vfprintf_r+0x1482>
80005c4a:	d7 03       	nop
80005c4c:	41 09       	lddsp	r9,sp[0x40]
80005c4e:	59 f8       	cp.w	r8,31
80005c50:	e0 89 00 13 	brgt	80005c76 <_vfprintf_r+0x147a>
80005c54:	f2 cb ff fc 	sub	r11,r9,-4
80005c58:	51 0b       	stdsp	sp[0x40],r11
80005c5a:	72 09       	ld.w	r9,r9[0x0]
80005c5c:	fa c6 f9 44 	sub	r6,sp,-1724
80005c60:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005c64:	2f f8       	sub	r8,-1
80005c66:	f7 49 fd 88 	st.w	r11[-632],r9
80005c6a:	fb 48 06 b4 	st.w	sp[1716],r8
80005c6e:	14 97       	mov	r7,r10
80005c70:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005c74:	c0 58       	rjmp	80005c7e <_vfprintf_r+0x1482>
80005c76:	92 18       	ld.sh	r8,r9[0x2]
80005c78:	14 97       	mov	r7,r10
80005c7a:	2f c9       	sub	r9,-4
80005c7c:	51 09       	stdsp	sp[0x40],r9
80005c7e:	5c 78       	castu.h	r8
80005c80:	50 18       	stdsp	sp[0x4],r8
80005c82:	c4 68       	rjmp	80005d0e <_vfprintf_r+0x1512>
80005c84:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005c88:	40 3c       	lddsp	r12,sp[0xc]
80005c8a:	58 0c       	cp.w	r12,0
80005c8c:	c1 d0       	breq	80005cc6 <_vfprintf_r+0x14ca>
80005c8e:	10 36       	cp.w	r6,r8
80005c90:	c0 64       	brge	80005c9c <_vfprintf_r+0x14a0>
80005c92:	fa cb f9 44 	sub	r11,sp,-1724
80005c96:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005c9a:	c1 f8       	rjmp	80005cd8 <_vfprintf_r+0x14dc>
80005c9c:	fa c8 f9 50 	sub	r8,sp,-1712
80005ca0:	1a d8       	st.w	--sp,r8
80005ca2:	fa c8 fa b8 	sub	r8,sp,-1352
80005ca6:	0c 9b       	mov	r11,r6
80005ca8:	1a d8       	st.w	--sp,r8
80005caa:	fa c8 fb b4 	sub	r8,sp,-1100
80005cae:	04 9a       	mov	r10,r2
80005cb0:	1a d8       	st.w	--sp,r8
80005cb2:	08 9c       	mov	r12,r4
80005cb4:	fa c8 f9 40 	sub	r8,sp,-1728
80005cb8:	fa c9 ff b4 	sub	r9,sp,-76
80005cbc:	fe b0 f4 08 	rcall	800044cc <get_arg>
80005cc0:	2f dd       	sub	sp,-12
80005cc2:	78 0b       	ld.w	r11,r12[0x0]
80005cc4:	c2 48       	rjmp	80005d0c <_vfprintf_r+0x1510>
80005cc6:	ee ca ff ff 	sub	r10,r7,-1
80005cca:	10 37       	cp.w	r7,r8
80005ccc:	c0 94       	brge	80005cde <_vfprintf_r+0x14e2>
80005cce:	fa c9 f9 44 	sub	r9,sp,-1724
80005cd2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005cd6:	14 97       	mov	r7,r10
80005cd8:	ec fb fd 88 	ld.w	r11,r6[-632]
80005cdc:	c1 88       	rjmp	80005d0c <_vfprintf_r+0x1510>
80005cde:	41 09       	lddsp	r9,sp[0x40]
80005ce0:	59 f8       	cp.w	r8,31
80005ce2:	e0 89 00 11 	brgt	80005d04 <_vfprintf_r+0x1508>
80005ce6:	f2 cb ff fc 	sub	r11,r9,-4
80005cea:	51 0b       	stdsp	sp[0x40],r11
80005cec:	fa c6 f9 44 	sub	r6,sp,-1724
80005cf0:	72 0b       	ld.w	r11,r9[0x0]
80005cf2:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005cf6:	f3 4b fd 88 	st.w	r9[-632],r11
80005cfa:	2f f8       	sub	r8,-1
80005cfc:	14 97       	mov	r7,r10
80005cfe:	fb 48 06 b4 	st.w	sp[1716],r8
80005d02:	c0 58       	rjmp	80005d0c <_vfprintf_r+0x1510>
80005d04:	72 0b       	ld.w	r11,r9[0x0]
80005d06:	14 97       	mov	r7,r10
80005d08:	2f c9       	sub	r9,-4
80005d0a:	51 09       	stdsp	sp[0x40],r9
80005d0c:	50 1b       	stdsp	sp[0x4],r11
80005d0e:	30 0e       	mov	lr,0
80005d10:	50 0e       	stdsp	sp[0x0],lr
80005d12:	40 08       	lddsp	r8,sp[0x0]
80005d14:	40 1c       	lddsp	r12,sp[0x4]
80005d16:	18 48       	or	r8,r12
80005d18:	5f 19       	srne	r9
80005d1a:	0a 98       	mov	r8,r5
80005d1c:	eb e9 00 09 	and	r9,r5,r9
80005d20:	a1 b8       	sbr	r8,0x1
80005d22:	58 09       	cp.w	r9,0
80005d24:	c0 70       	breq	80005d32 <_vfprintf_r+0x1536>
80005d26:	10 95       	mov	r5,r8
80005d28:	fb 60 06 b9 	st.b	sp[1721],r0
80005d2c:	33 08       	mov	r8,48
80005d2e:	fb 68 06 b8 	st.b	sp[1720],r8
80005d32:	30 28       	mov	r8,2
80005d34:	30 09       	mov	r9,0
80005d36:	fb 69 06 bb 	st.b	sp[1723],r9
80005d3a:	0a 99       	mov	r9,r5
80005d3c:	a7 d9       	cbr	r9,0x7
80005d3e:	40 2b       	lddsp	r11,sp[0x8]
80005d40:	40 16       	lddsp	r6,sp[0x4]
80005d42:	58 0b       	cp.w	r11,0
80005d44:	5f 1a       	srne	r10
80005d46:	f2 05 17 40 	movge	r5,r9
80005d4a:	fa c2 f9 78 	sub	r2,sp,-1672
80005d4e:	40 09       	lddsp	r9,sp[0x0]
80005d50:	0c 49       	or	r9,r6
80005d52:	5f 19       	srne	r9
80005d54:	f5 e9 10 09 	or	r9,r10,r9
80005d58:	c5 c0       	breq	80005e10 <_vfprintf_r+0x1614>
80005d5a:	30 19       	mov	r9,1
80005d5c:	f2 08 18 00 	cp.b	r8,r9
80005d60:	c0 60       	breq	80005d6c <_vfprintf_r+0x1570>
80005d62:	30 29       	mov	r9,2
80005d64:	f2 08 18 00 	cp.b	r8,r9
80005d68:	c0 41       	brne	80005d70 <_vfprintf_r+0x1574>
80005d6a:	c3 c8       	rjmp	80005de2 <_vfprintf_r+0x15e6>
80005d6c:	04 96       	mov	r6,r2
80005d6e:	c3 08       	rjmp	80005dce <_vfprintf_r+0x15d2>
80005d70:	04 96       	mov	r6,r2
80005d72:	fa e8 00 00 	ld.d	r8,sp[0]
80005d76:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005d7a:	2d 0a       	sub	r10,-48
80005d7c:	0c fa       	st.b	--r6,r10
80005d7e:	f0 0b 16 03 	lsr	r11,r8,0x3
80005d82:	f2 0c 16 03 	lsr	r12,r9,0x3
80005d86:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005d8a:	18 99       	mov	r9,r12
80005d8c:	16 98       	mov	r8,r11
80005d8e:	58 08       	cp.w	r8,0
80005d90:	5c 29       	cpc	r9
80005d92:	cf 21       	brne	80005d76 <_vfprintf_r+0x157a>
80005d94:	fa e9 00 00 	st.d	sp[0],r8
80005d98:	ed b5 00 00 	bld	r5,0x0
80005d9c:	c4 51       	brne	80005e26 <_vfprintf_r+0x162a>
80005d9e:	33 09       	mov	r9,48
80005da0:	f2 0a 18 00 	cp.b	r10,r9
80005da4:	c4 10       	breq	80005e26 <_vfprintf_r+0x162a>
80005da6:	0c f9       	st.b	--r6,r9
80005da8:	c3 f8       	rjmp	80005e26 <_vfprintf_r+0x162a>
80005daa:	fa ea 00 00 	ld.d	r10,sp[0]
80005dae:	30 a8       	mov	r8,10
80005db0:	30 09       	mov	r9,0
80005db2:	e0 a0 1c ff 	rcall	800097b0 <__avr32_umod64>
80005db6:	30 a8       	mov	r8,10
80005db8:	2d 0a       	sub	r10,-48
80005dba:	30 09       	mov	r9,0
80005dbc:	ac 8a       	st.b	r6[0x0],r10
80005dbe:	fa ea 00 00 	ld.d	r10,sp[0]
80005dc2:	fe b0 f1 8f 	rcall	800040e0 <__avr32_udiv64>
80005dc6:	16 99       	mov	r9,r11
80005dc8:	14 98       	mov	r8,r10
80005dca:	fa e9 00 00 	st.d	sp[0],r8
80005dce:	20 16       	sub	r6,1
80005dd0:	fa ea 00 00 	ld.d	r10,sp[0]
80005dd4:	58 9a       	cp.w	r10,9
80005dd6:	5c 2b       	cpc	r11
80005dd8:	fe 9b ff e9 	brhi	80005daa <_vfprintf_r+0x15ae>
80005ddc:	1b f8       	ld.ub	r8,sp[0x7]
80005dde:	2d 08       	sub	r8,-48
80005de0:	c2 08       	rjmp	80005e20 <_vfprintf_r+0x1624>
80005de2:	04 96       	mov	r6,r2
80005de4:	fa e8 00 00 	ld.d	r8,sp[0]
80005de8:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005dec:	40 de       	lddsp	lr,sp[0x34]
80005dee:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005df2:	0c fa       	st.b	--r6,r10
80005df4:	f2 0b 16 04 	lsr	r11,r9,0x4
80005df8:	f0 0a 16 04 	lsr	r10,r8,0x4
80005dfc:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005e00:	16 99       	mov	r9,r11
80005e02:	14 98       	mov	r8,r10
80005e04:	58 08       	cp.w	r8,0
80005e06:	5c 29       	cpc	r9
80005e08:	cf 01       	brne	80005de8 <_vfprintf_r+0x15ec>
80005e0a:	fa e9 00 00 	st.d	sp[0],r8
80005e0e:	c0 c8       	rjmp	80005e26 <_vfprintf_r+0x162a>
80005e10:	58 08       	cp.w	r8,0
80005e12:	c0 91       	brne	80005e24 <_vfprintf_r+0x1628>
80005e14:	ed b5 00 00 	bld	r5,0x0
80005e18:	c0 61       	brne	80005e24 <_vfprintf_r+0x1628>
80005e1a:	fa c6 f9 79 	sub	r6,sp,-1671
80005e1e:	33 08       	mov	r8,48
80005e20:	ac 88       	st.b	r6[0x0],r8
80005e22:	c0 28       	rjmp	80005e26 <_vfprintf_r+0x162a>
80005e24:	04 96       	mov	r6,r2
80005e26:	0c 12       	sub	r2,r6
80005e28:	c1 c8       	rjmp	80005e60 <_vfprintf_r+0x1664>
80005e2a:	50 a7       	stdsp	sp[0x28],r7
80005e2c:	50 80       	stdsp	sp[0x20],r0
80005e2e:	40 93       	lddsp	r3,sp[0x24]
80005e30:	0c 97       	mov	r7,r6
80005e32:	10 90       	mov	r0,r8
80005e34:	04 94       	mov	r4,r2
80005e36:	40 41       	lddsp	r1,sp[0x10]
80005e38:	58 08       	cp.w	r8,0
80005e3a:	e0 80 04 4f 	breq	800066d8 <_vfprintf_r+0x1edc>
80005e3e:	fb 68 06 60 	st.b	sp[1632],r8
80005e42:	30 0c       	mov	r12,0
80005e44:	30 08       	mov	r8,0
80005e46:	30 12       	mov	r2,1
80005e48:	fb 68 06 bb 	st.b	sp[1723],r8
80005e4c:	50 2c       	stdsp	sp[0x8],r12
80005e4e:	fa c6 f9 a0 	sub	r6,sp,-1632
80005e52:	c0 78       	rjmp	80005e60 <_vfprintf_r+0x1664>
80005e54:	30 0b       	mov	r11,0
80005e56:	50 2b       	stdsp	sp[0x8],r11
80005e58:	c0 48       	rjmp	80005e60 <_vfprintf_r+0x1664>
80005e5a:	40 22       	lddsp	r2,sp[0x8]
80005e5c:	30 0a       	mov	r10,0
80005e5e:	50 2a       	stdsp	sp[0x8],r10
80005e60:	40 29       	lddsp	r9,sp[0x8]
80005e62:	e4 09 0c 49 	max	r9,r2,r9
80005e66:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005e6a:	50 39       	stdsp	sp[0xc],r9
80005e6c:	0a 9e       	mov	lr,r5
80005e6e:	30 09       	mov	r9,0
80005e70:	e2 1e 00 02 	andl	lr,0x2,COH
80005e74:	f2 08 18 00 	cp.b	r8,r9
80005e78:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005e7c:	f7 b8 01 ff 	subne	r8,-1
80005e80:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005e84:	0a 9b       	mov	r11,r5
80005e86:	58 0e       	cp.w	lr,0
80005e88:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005e8c:	f7 bc 01 fe 	subne	r12,-2
80005e90:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005e94:	e2 1b 00 84 	andl	r11,0x84,COH
80005e98:	50 fe       	stdsp	sp[0x3c],lr
80005e9a:	50 9b       	stdsp	sp[0x24],r11
80005e9c:	c4 71       	brne	80005f2a <_vfprintf_r+0x172e>
80005e9e:	40 8a       	lddsp	r10,sp[0x20]
80005ea0:	40 39       	lddsp	r9,sp[0xc]
80005ea2:	12 1a       	sub	r10,r9
80005ea4:	50 4a       	stdsp	sp[0x10],r10
80005ea6:	58 0a       	cp.w	r10,0
80005ea8:	e0 89 00 20 	brgt	80005ee8 <_vfprintf_r+0x16ec>
80005eac:	c3 f8       	rjmp	80005f2a <_vfprintf_r+0x172e>
80005eae:	2f 09       	sub	r9,-16
80005eb0:	2f f8       	sub	r8,-1
80005eb2:	fe ce be a6 	sub	lr,pc,-16730
80005eb6:	31 0c       	mov	r12,16
80005eb8:	fb 49 06 90 	st.w	sp[1680],r9
80005ebc:	87 0e       	st.w	r3[0x0],lr
80005ebe:	87 1c       	st.w	r3[0x4],r12
80005ec0:	fb 48 06 8c 	st.w	sp[1676],r8
80005ec4:	58 78       	cp.w	r8,7
80005ec6:	e0 89 00 04 	brgt	80005ece <_vfprintf_r+0x16d2>
80005eca:	2f 83       	sub	r3,-8
80005ecc:	c0 b8       	rjmp	80005ee2 <_vfprintf_r+0x16e6>
80005ece:	fa ca f9 78 	sub	r10,sp,-1672
80005ed2:	02 9b       	mov	r11,r1
80005ed4:	08 9c       	mov	r12,r4
80005ed6:	fe b0 f4 85 	rcall	800047e0 <__sprint_r>
80005eda:	e0 81 04 10 	brne	800066fa <_vfprintf_r+0x1efe>
80005ede:	fa c3 f9 e0 	sub	r3,sp,-1568
80005ee2:	40 4b       	lddsp	r11,sp[0x10]
80005ee4:	21 0b       	sub	r11,16
80005ee6:	50 4b       	stdsp	sp[0x10],r11
80005ee8:	fa f9 06 90 	ld.w	r9,sp[1680]
80005eec:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005ef0:	fe ca be e4 	sub	r10,pc,-16668
80005ef4:	40 4e       	lddsp	lr,sp[0x10]
80005ef6:	59 0e       	cp.w	lr,16
80005ef8:	fe 99 ff db 	brgt	80005eae <_vfprintf_r+0x16b2>
80005efc:	1c 09       	add	r9,lr
80005efe:	2f f8       	sub	r8,-1
80005f00:	87 0a       	st.w	r3[0x0],r10
80005f02:	fb 49 06 90 	st.w	sp[1680],r9
80005f06:	87 1e       	st.w	r3[0x4],lr
80005f08:	fb 48 06 8c 	st.w	sp[1676],r8
80005f0c:	58 78       	cp.w	r8,7
80005f0e:	e0 89 00 04 	brgt	80005f16 <_vfprintf_r+0x171a>
80005f12:	2f 83       	sub	r3,-8
80005f14:	c0 b8       	rjmp	80005f2a <_vfprintf_r+0x172e>
80005f16:	fa ca f9 78 	sub	r10,sp,-1672
80005f1a:	02 9b       	mov	r11,r1
80005f1c:	08 9c       	mov	r12,r4
80005f1e:	fe b0 f4 61 	rcall	800047e0 <__sprint_r>
80005f22:	e0 81 03 ec 	brne	800066fa <_vfprintf_r+0x1efe>
80005f26:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f2a:	30 09       	mov	r9,0
80005f2c:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005f30:	f2 08 18 00 	cp.b	r8,r9
80005f34:	c1 f0       	breq	80005f72 <_vfprintf_r+0x1776>
80005f36:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f3a:	fa c9 f9 45 	sub	r9,sp,-1723
80005f3e:	2f f8       	sub	r8,-1
80005f40:	87 09       	st.w	r3[0x0],r9
80005f42:	fb 48 06 90 	st.w	sp[1680],r8
80005f46:	30 19       	mov	r9,1
80005f48:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f4c:	87 19       	st.w	r3[0x4],r9
80005f4e:	2f f8       	sub	r8,-1
80005f50:	fb 48 06 8c 	st.w	sp[1676],r8
80005f54:	58 78       	cp.w	r8,7
80005f56:	e0 89 00 04 	brgt	80005f5e <_vfprintf_r+0x1762>
80005f5a:	2f 83       	sub	r3,-8
80005f5c:	c0 b8       	rjmp	80005f72 <_vfprintf_r+0x1776>
80005f5e:	fa ca f9 78 	sub	r10,sp,-1672
80005f62:	02 9b       	mov	r11,r1
80005f64:	08 9c       	mov	r12,r4
80005f66:	fe b0 f4 3d 	rcall	800047e0 <__sprint_r>
80005f6a:	e0 81 03 c8 	brne	800066fa <_vfprintf_r+0x1efe>
80005f6e:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f72:	40 fc       	lddsp	r12,sp[0x3c]
80005f74:	58 0c       	cp.w	r12,0
80005f76:	c1 f0       	breq	80005fb4 <_vfprintf_r+0x17b8>
80005f78:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f7c:	fa c9 f9 48 	sub	r9,sp,-1720
80005f80:	2f e8       	sub	r8,-2
80005f82:	87 09       	st.w	r3[0x0],r9
80005f84:	fb 48 06 90 	st.w	sp[1680],r8
80005f88:	30 29       	mov	r9,2
80005f8a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f8e:	87 19       	st.w	r3[0x4],r9
80005f90:	2f f8       	sub	r8,-1
80005f92:	fb 48 06 8c 	st.w	sp[1676],r8
80005f96:	58 78       	cp.w	r8,7
80005f98:	e0 89 00 04 	brgt	80005fa0 <_vfprintf_r+0x17a4>
80005f9c:	2f 83       	sub	r3,-8
80005f9e:	c0 b8       	rjmp	80005fb4 <_vfprintf_r+0x17b8>
80005fa0:	fa ca f9 78 	sub	r10,sp,-1672
80005fa4:	02 9b       	mov	r11,r1
80005fa6:	08 9c       	mov	r12,r4
80005fa8:	fe b0 f4 1c 	rcall	800047e0 <__sprint_r>
80005fac:	e0 81 03 a7 	brne	800066fa <_vfprintf_r+0x1efe>
80005fb0:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fb4:	40 9b       	lddsp	r11,sp[0x24]
80005fb6:	e0 4b 00 80 	cp.w	r11,128
80005fba:	c4 71       	brne	80006048 <_vfprintf_r+0x184c>
80005fbc:	40 8a       	lddsp	r10,sp[0x20]
80005fbe:	40 39       	lddsp	r9,sp[0xc]
80005fc0:	12 1a       	sub	r10,r9
80005fc2:	50 4a       	stdsp	sp[0x10],r10
80005fc4:	58 0a       	cp.w	r10,0
80005fc6:	e0 89 00 20 	brgt	80006006 <_vfprintf_r+0x180a>
80005fca:	c3 f8       	rjmp	80006048 <_vfprintf_r+0x184c>
80005fcc:	2f 09       	sub	r9,-16
80005fce:	2f f8       	sub	r8,-1
80005fd0:	fe ce bf b4 	sub	lr,pc,-16460
80005fd4:	31 0c       	mov	r12,16
80005fd6:	fb 49 06 90 	st.w	sp[1680],r9
80005fda:	87 0e       	st.w	r3[0x0],lr
80005fdc:	87 1c       	st.w	r3[0x4],r12
80005fde:	fb 48 06 8c 	st.w	sp[1676],r8
80005fe2:	58 78       	cp.w	r8,7
80005fe4:	e0 89 00 04 	brgt	80005fec <_vfprintf_r+0x17f0>
80005fe8:	2f 83       	sub	r3,-8
80005fea:	c0 b8       	rjmp	80006000 <_vfprintf_r+0x1804>
80005fec:	fa ca f9 78 	sub	r10,sp,-1672
80005ff0:	02 9b       	mov	r11,r1
80005ff2:	08 9c       	mov	r12,r4
80005ff4:	fe b0 f3 f6 	rcall	800047e0 <__sprint_r>
80005ff8:	e0 81 03 81 	brne	800066fa <_vfprintf_r+0x1efe>
80005ffc:	fa c3 f9 e0 	sub	r3,sp,-1568
80006000:	40 4b       	lddsp	r11,sp[0x10]
80006002:	21 0b       	sub	r11,16
80006004:	50 4b       	stdsp	sp[0x10],r11
80006006:	fa f9 06 90 	ld.w	r9,sp[1680]
8000600a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000600e:	fe ca bf f2 	sub	r10,pc,-16398
80006012:	40 4e       	lddsp	lr,sp[0x10]
80006014:	59 0e       	cp.w	lr,16
80006016:	fe 99 ff db 	brgt	80005fcc <_vfprintf_r+0x17d0>
8000601a:	1c 09       	add	r9,lr
8000601c:	2f f8       	sub	r8,-1
8000601e:	87 0a       	st.w	r3[0x0],r10
80006020:	fb 49 06 90 	st.w	sp[1680],r9
80006024:	87 1e       	st.w	r3[0x4],lr
80006026:	fb 48 06 8c 	st.w	sp[1676],r8
8000602a:	58 78       	cp.w	r8,7
8000602c:	e0 89 00 04 	brgt	80006034 <_vfprintf_r+0x1838>
80006030:	2f 83       	sub	r3,-8
80006032:	c0 b8       	rjmp	80006048 <_vfprintf_r+0x184c>
80006034:	fa ca f9 78 	sub	r10,sp,-1672
80006038:	02 9b       	mov	r11,r1
8000603a:	08 9c       	mov	r12,r4
8000603c:	fe b0 f3 d2 	rcall	800047e0 <__sprint_r>
80006040:	e0 81 03 5d 	brne	800066fa <_vfprintf_r+0x1efe>
80006044:	fa c3 f9 e0 	sub	r3,sp,-1568
80006048:	40 2c       	lddsp	r12,sp[0x8]
8000604a:	04 1c       	sub	r12,r2
8000604c:	50 2c       	stdsp	sp[0x8],r12
8000604e:	58 0c       	cp.w	r12,0
80006050:	e0 89 00 20 	brgt	80006090 <_vfprintf_r+0x1894>
80006054:	c3 f8       	rjmp	800060d2 <_vfprintf_r+0x18d6>
80006056:	2f 09       	sub	r9,-16
80006058:	2f f8       	sub	r8,-1
8000605a:	fe cb c0 3e 	sub	r11,pc,-16322
8000605e:	31 0a       	mov	r10,16
80006060:	fb 49 06 90 	st.w	sp[1680],r9
80006064:	87 0b       	st.w	r3[0x0],r11
80006066:	87 1a       	st.w	r3[0x4],r10
80006068:	fb 48 06 8c 	st.w	sp[1676],r8
8000606c:	58 78       	cp.w	r8,7
8000606e:	e0 89 00 04 	brgt	80006076 <_vfprintf_r+0x187a>
80006072:	2f 83       	sub	r3,-8
80006074:	c0 b8       	rjmp	8000608a <_vfprintf_r+0x188e>
80006076:	fa ca f9 78 	sub	r10,sp,-1672
8000607a:	02 9b       	mov	r11,r1
8000607c:	08 9c       	mov	r12,r4
8000607e:	fe b0 f3 b1 	rcall	800047e0 <__sprint_r>
80006082:	e0 81 03 3c 	brne	800066fa <_vfprintf_r+0x1efe>
80006086:	fa c3 f9 e0 	sub	r3,sp,-1568
8000608a:	40 29       	lddsp	r9,sp[0x8]
8000608c:	21 09       	sub	r9,16
8000608e:	50 29       	stdsp	sp[0x8],r9
80006090:	fa f9 06 90 	ld.w	r9,sp[1680]
80006094:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006098:	fe ca c0 7c 	sub	r10,pc,-16260
8000609c:	40 2e       	lddsp	lr,sp[0x8]
8000609e:	59 0e       	cp.w	lr,16
800060a0:	fe 99 ff db 	brgt	80006056 <_vfprintf_r+0x185a>
800060a4:	1c 09       	add	r9,lr
800060a6:	2f f8       	sub	r8,-1
800060a8:	87 0a       	st.w	r3[0x0],r10
800060aa:	fb 49 06 90 	st.w	sp[1680],r9
800060ae:	87 1e       	st.w	r3[0x4],lr
800060b0:	fb 48 06 8c 	st.w	sp[1676],r8
800060b4:	58 78       	cp.w	r8,7
800060b6:	e0 89 00 04 	brgt	800060be <_vfprintf_r+0x18c2>
800060ba:	2f 83       	sub	r3,-8
800060bc:	c0 b8       	rjmp	800060d2 <_vfprintf_r+0x18d6>
800060be:	fa ca f9 78 	sub	r10,sp,-1672
800060c2:	02 9b       	mov	r11,r1
800060c4:	08 9c       	mov	r12,r4
800060c6:	fe b0 f3 8d 	rcall	800047e0 <__sprint_r>
800060ca:	e0 81 03 18 	brne	800066fa <_vfprintf_r+0x1efe>
800060ce:	fa c3 f9 e0 	sub	r3,sp,-1568
800060d2:	ed b5 00 08 	bld	r5,0x8
800060d6:	c0 b0       	breq	800060ec <_vfprintf_r+0x18f0>
800060d8:	fa f8 06 90 	ld.w	r8,sp[1680]
800060dc:	87 12       	st.w	r3[0x4],r2
800060de:	87 06       	st.w	r3[0x0],r6
800060e0:	f0 02 00 02 	add	r2,r8,r2
800060e4:	fb 42 06 90 	st.w	sp[1680],r2
800060e8:	e0 8f 01 d4 	bral	80006490 <_vfprintf_r+0x1c94>
800060ec:	e0 40 00 65 	cp.w	r0,101
800060f0:	e0 8a 01 d6 	brle	8000649c <_vfprintf_r+0x1ca0>
800060f4:	30 08       	mov	r8,0
800060f6:	30 09       	mov	r9,0
800060f8:	40 5b       	lddsp	r11,sp[0x14]
800060fa:	40 7a       	lddsp	r10,sp[0x1c]
800060fc:	e0 a0 19 53 	rcall	800093a2 <__avr32_f64_cmp_eq>
80006100:	c7 90       	breq	800061f2 <_vfprintf_r+0x19f6>
80006102:	fa f8 06 90 	ld.w	r8,sp[1680]
80006106:	fe c9 c0 fe 	sub	r9,pc,-16130
8000610a:	2f f8       	sub	r8,-1
8000610c:	87 09       	st.w	r3[0x0],r9
8000610e:	fb 48 06 90 	st.w	sp[1680],r8
80006112:	30 19       	mov	r9,1
80006114:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006118:	87 19       	st.w	r3[0x4],r9
8000611a:	2f f8       	sub	r8,-1
8000611c:	fb 48 06 8c 	st.w	sp[1676],r8
80006120:	58 78       	cp.w	r8,7
80006122:	e0 89 00 05 	brgt	8000612c <_vfprintf_r+0x1930>
80006126:	2f 83       	sub	r3,-8
80006128:	c0 c8       	rjmp	80006140 <_vfprintf_r+0x1944>
8000612a:	d7 03       	nop
8000612c:	fa ca f9 78 	sub	r10,sp,-1672
80006130:	02 9b       	mov	r11,r1
80006132:	08 9c       	mov	r12,r4
80006134:	fe b0 f3 56 	rcall	800047e0 <__sprint_r>
80006138:	e0 81 02 e1 	brne	800066fa <_vfprintf_r+0x1efe>
8000613c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006140:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006144:	40 6c       	lddsp	r12,sp[0x18]
80006146:	18 38       	cp.w	r8,r12
80006148:	c0 55       	brlt	80006152 <_vfprintf_r+0x1956>
8000614a:	ed b5 00 00 	bld	r5,0x0
8000614e:	e0 81 02 6b 	brne	80006624 <_vfprintf_r+0x1e28>
80006152:	fa f8 06 90 	ld.w	r8,sp[1680]
80006156:	2f f8       	sub	r8,-1
80006158:	40 cb       	lddsp	r11,sp[0x30]
8000615a:	fb 48 06 90 	st.w	sp[1680],r8
8000615e:	30 19       	mov	r9,1
80006160:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006164:	87 0b       	st.w	r3[0x0],r11
80006166:	2f f8       	sub	r8,-1
80006168:	87 19       	st.w	r3[0x4],r9
8000616a:	fb 48 06 8c 	st.w	sp[1676],r8
8000616e:	58 78       	cp.w	r8,7
80006170:	e0 89 00 04 	brgt	80006178 <_vfprintf_r+0x197c>
80006174:	2f 83       	sub	r3,-8
80006176:	c0 b8       	rjmp	8000618c <_vfprintf_r+0x1990>
80006178:	fa ca f9 78 	sub	r10,sp,-1672
8000617c:	02 9b       	mov	r11,r1
8000617e:	08 9c       	mov	r12,r4
80006180:	fe b0 f3 30 	rcall	800047e0 <__sprint_r>
80006184:	e0 81 02 bb 	brne	800066fa <_vfprintf_r+0x1efe>
80006188:	fa c3 f9 e0 	sub	r3,sp,-1568
8000618c:	40 66       	lddsp	r6,sp[0x18]
8000618e:	20 16       	sub	r6,1
80006190:	58 06       	cp.w	r6,0
80006192:	e0 89 00 1d 	brgt	800061cc <_vfprintf_r+0x19d0>
80006196:	e0 8f 02 47 	bral	80006624 <_vfprintf_r+0x1e28>
8000619a:	2f 09       	sub	r9,-16
8000619c:	2f f8       	sub	r8,-1
8000619e:	fb 49 06 90 	st.w	sp[1680],r9
800061a2:	87 02       	st.w	r3[0x0],r2
800061a4:	87 10       	st.w	r3[0x4],r0
800061a6:	fb 48 06 8c 	st.w	sp[1676],r8
800061aa:	58 78       	cp.w	r8,7
800061ac:	e0 89 00 04 	brgt	800061b4 <_vfprintf_r+0x19b8>
800061b0:	2f 83       	sub	r3,-8
800061b2:	c0 b8       	rjmp	800061c8 <_vfprintf_r+0x19cc>
800061b4:	fa ca f9 78 	sub	r10,sp,-1672
800061b8:	02 9b       	mov	r11,r1
800061ba:	08 9c       	mov	r12,r4
800061bc:	fe b0 f3 12 	rcall	800047e0 <__sprint_r>
800061c0:	e0 81 02 9d 	brne	800066fa <_vfprintf_r+0x1efe>
800061c4:	fa c3 f9 e0 	sub	r3,sp,-1568
800061c8:	21 06       	sub	r6,16
800061ca:	c0 48       	rjmp	800061d2 <_vfprintf_r+0x19d6>
800061cc:	fe c2 c1 b0 	sub	r2,pc,-15952
800061d0:	31 00       	mov	r0,16
800061d2:	fa f9 06 90 	ld.w	r9,sp[1680]
800061d6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800061da:	fe ca c1 be 	sub	r10,pc,-15938
800061de:	59 06       	cp.w	r6,16
800061e0:	fe 99 ff dd 	brgt	8000619a <_vfprintf_r+0x199e>
800061e4:	0c 09       	add	r9,r6
800061e6:	87 0a       	st.w	r3[0x0],r10
800061e8:	fb 49 06 90 	st.w	sp[1680],r9
800061ec:	2f f8       	sub	r8,-1
800061ee:	87 16       	st.w	r3[0x4],r6
800061f0:	c5 39       	rjmp	80006496 <_vfprintf_r+0x1c9a>
800061f2:	fa fa 06 ac 	ld.w	r10,sp[1708]
800061f6:	58 0a       	cp.w	r10,0
800061f8:	e0 89 00 92 	brgt	8000631c <_vfprintf_r+0x1b20>
800061fc:	fa f8 06 90 	ld.w	r8,sp[1680]
80006200:	fe c9 c1 f8 	sub	r9,pc,-15880
80006204:	2f f8       	sub	r8,-1
80006206:	87 09       	st.w	r3[0x0],r9
80006208:	fb 48 06 90 	st.w	sp[1680],r8
8000620c:	30 19       	mov	r9,1
8000620e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006212:	87 19       	st.w	r3[0x4],r9
80006214:	2f f8       	sub	r8,-1
80006216:	fb 48 06 8c 	st.w	sp[1676],r8
8000621a:	58 78       	cp.w	r8,7
8000621c:	e0 89 00 04 	brgt	80006224 <_vfprintf_r+0x1a28>
80006220:	2f 83       	sub	r3,-8
80006222:	c0 b8       	rjmp	80006238 <_vfprintf_r+0x1a3c>
80006224:	fa ca f9 78 	sub	r10,sp,-1672
80006228:	02 9b       	mov	r11,r1
8000622a:	08 9c       	mov	r12,r4
8000622c:	fe b0 f2 da 	rcall	800047e0 <__sprint_r>
80006230:	e0 81 02 65 	brne	800066fa <_vfprintf_r+0x1efe>
80006234:	fa c3 f9 e0 	sub	r3,sp,-1568
80006238:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000623c:	58 08       	cp.w	r8,0
8000623e:	c0 81       	brne	8000624e <_vfprintf_r+0x1a52>
80006240:	40 6a       	lddsp	r10,sp[0x18]
80006242:	58 0a       	cp.w	r10,0
80006244:	c0 51       	brne	8000624e <_vfprintf_r+0x1a52>
80006246:	ed b5 00 00 	bld	r5,0x0
8000624a:	e0 81 01 ed 	brne	80006624 <_vfprintf_r+0x1e28>
8000624e:	40 c9       	lddsp	r9,sp[0x30]
80006250:	fa f8 06 90 	ld.w	r8,sp[1680]
80006254:	2f f8       	sub	r8,-1
80006256:	87 09       	st.w	r3[0x0],r9
80006258:	fb 48 06 90 	st.w	sp[1680],r8
8000625c:	30 19       	mov	r9,1
8000625e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006262:	87 19       	st.w	r3[0x4],r9
80006264:	2f f8       	sub	r8,-1
80006266:	fb 48 06 8c 	st.w	sp[1676],r8
8000626a:	58 78       	cp.w	r8,7
8000626c:	e0 89 00 04 	brgt	80006274 <_vfprintf_r+0x1a78>
80006270:	2f 83       	sub	r3,-8
80006272:	c0 b8       	rjmp	80006288 <_vfprintf_r+0x1a8c>
80006274:	fa ca f9 78 	sub	r10,sp,-1672
80006278:	02 9b       	mov	r11,r1
8000627a:	08 9c       	mov	r12,r4
8000627c:	fe b0 f2 b2 	rcall	800047e0 <__sprint_r>
80006280:	e0 81 02 3d 	brne	800066fa <_vfprintf_r+0x1efe>
80006284:	fa c3 f9 e0 	sub	r3,sp,-1568
80006288:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000628c:	5c 32       	neg	r2
8000628e:	58 02       	cp.w	r2,0
80006290:	e0 89 00 1d 	brgt	800062ca <_vfprintf_r+0x1ace>
80006294:	c3 d8       	rjmp	8000630e <_vfprintf_r+0x1b12>
80006296:	2f 09       	sub	r9,-16
80006298:	2f f8       	sub	r8,-1
8000629a:	31 0e       	mov	lr,16
8000629c:	fb 49 06 90 	st.w	sp[1680],r9
800062a0:	87 00       	st.w	r3[0x0],r0
800062a2:	87 1e       	st.w	r3[0x4],lr
800062a4:	fb 48 06 8c 	st.w	sp[1676],r8
800062a8:	58 78       	cp.w	r8,7
800062aa:	e0 89 00 04 	brgt	800062b2 <_vfprintf_r+0x1ab6>
800062ae:	2f 83       	sub	r3,-8
800062b0:	c0 b8       	rjmp	800062c6 <_vfprintf_r+0x1aca>
800062b2:	fa ca f9 78 	sub	r10,sp,-1672
800062b6:	02 9b       	mov	r11,r1
800062b8:	08 9c       	mov	r12,r4
800062ba:	fe b0 f2 93 	rcall	800047e0 <__sprint_r>
800062be:	e0 81 02 1e 	brne	800066fa <_vfprintf_r+0x1efe>
800062c2:	fa c3 f9 e0 	sub	r3,sp,-1568
800062c6:	21 02       	sub	r2,16
800062c8:	c0 38       	rjmp	800062ce <_vfprintf_r+0x1ad2>
800062ca:	fe c0 c2 ae 	sub	r0,pc,-15698
800062ce:	fa f9 06 90 	ld.w	r9,sp[1680]
800062d2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800062d6:	fe ca c2 ba 	sub	r10,pc,-15686
800062da:	59 02       	cp.w	r2,16
800062dc:	fe 99 ff dd 	brgt	80006296 <_vfprintf_r+0x1a9a>
800062e0:	04 09       	add	r9,r2
800062e2:	2f f8       	sub	r8,-1
800062e4:	87 0a       	st.w	r3[0x0],r10
800062e6:	fb 49 06 90 	st.w	sp[1680],r9
800062ea:	87 12       	st.w	r3[0x4],r2
800062ec:	fb 48 06 8c 	st.w	sp[1676],r8
800062f0:	58 78       	cp.w	r8,7
800062f2:	e0 89 00 04 	brgt	800062fa <_vfprintf_r+0x1afe>
800062f6:	2f 83       	sub	r3,-8
800062f8:	c0 b8       	rjmp	8000630e <_vfprintf_r+0x1b12>
800062fa:	fa ca f9 78 	sub	r10,sp,-1672
800062fe:	02 9b       	mov	r11,r1
80006300:	08 9c       	mov	r12,r4
80006302:	fe b0 f2 6f 	rcall	800047e0 <__sprint_r>
80006306:	e0 81 01 fa 	brne	800066fa <_vfprintf_r+0x1efe>
8000630a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000630e:	40 6c       	lddsp	r12,sp[0x18]
80006310:	fa f8 06 90 	ld.w	r8,sp[1680]
80006314:	87 06       	st.w	r3[0x0],r6
80006316:	87 1c       	st.w	r3[0x4],r12
80006318:	18 08       	add	r8,r12
8000631a:	cb 98       	rjmp	8000648c <_vfprintf_r+0x1c90>
8000631c:	fa f9 06 90 	ld.w	r9,sp[1680]
80006320:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006324:	40 6b       	lddsp	r11,sp[0x18]
80006326:	16 3a       	cp.w	r10,r11
80006328:	c6 f5       	brlt	80006406 <_vfprintf_r+0x1c0a>
8000632a:	16 09       	add	r9,r11
8000632c:	2f f8       	sub	r8,-1
8000632e:	87 06       	st.w	r3[0x0],r6
80006330:	fb 49 06 90 	st.w	sp[1680],r9
80006334:	87 1b       	st.w	r3[0x4],r11
80006336:	fb 48 06 8c 	st.w	sp[1676],r8
8000633a:	58 78       	cp.w	r8,7
8000633c:	e0 89 00 04 	brgt	80006344 <_vfprintf_r+0x1b48>
80006340:	2f 83       	sub	r3,-8
80006342:	c0 b8       	rjmp	80006358 <_vfprintf_r+0x1b5c>
80006344:	fa ca f9 78 	sub	r10,sp,-1672
80006348:	02 9b       	mov	r11,r1
8000634a:	08 9c       	mov	r12,r4
8000634c:	fe b0 f2 4a 	rcall	800047e0 <__sprint_r>
80006350:	e0 81 01 d5 	brne	800066fa <_vfprintf_r+0x1efe>
80006354:	fa c3 f9 e0 	sub	r3,sp,-1568
80006358:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000635c:	40 6a       	lddsp	r10,sp[0x18]
8000635e:	14 16       	sub	r6,r10
80006360:	58 06       	cp.w	r6,0
80006362:	e0 89 00 1c 	brgt	8000639a <_vfprintf_r+0x1b9e>
80006366:	c3 d8       	rjmp	800063e0 <_vfprintf_r+0x1be4>
80006368:	2f 09       	sub	r9,-16
8000636a:	2f f8       	sub	r8,-1
8000636c:	fb 49 06 90 	st.w	sp[1680],r9
80006370:	87 02       	st.w	r3[0x0],r2
80006372:	87 10       	st.w	r3[0x4],r0
80006374:	fb 48 06 8c 	st.w	sp[1676],r8
80006378:	58 78       	cp.w	r8,7
8000637a:	e0 89 00 04 	brgt	80006382 <_vfprintf_r+0x1b86>
8000637e:	2f 83       	sub	r3,-8
80006380:	c0 b8       	rjmp	80006396 <_vfprintf_r+0x1b9a>
80006382:	fa ca f9 78 	sub	r10,sp,-1672
80006386:	02 9b       	mov	r11,r1
80006388:	08 9c       	mov	r12,r4
8000638a:	fe b0 f2 2b 	rcall	800047e0 <__sprint_r>
8000638e:	e0 81 01 b6 	brne	800066fa <_vfprintf_r+0x1efe>
80006392:	fa c3 f9 e0 	sub	r3,sp,-1568
80006396:	21 06       	sub	r6,16
80006398:	c0 48       	rjmp	800063a0 <_vfprintf_r+0x1ba4>
8000639a:	fe c2 c3 7e 	sub	r2,pc,-15490
8000639e:	31 00       	mov	r0,16
800063a0:	fa f9 06 90 	ld.w	r9,sp[1680]
800063a4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063a8:	fe ca c3 8c 	sub	r10,pc,-15476
800063ac:	59 06       	cp.w	r6,16
800063ae:	fe 99 ff dd 	brgt	80006368 <_vfprintf_r+0x1b6c>
800063b2:	0c 09       	add	r9,r6
800063b4:	2f f8       	sub	r8,-1
800063b6:	87 0a       	st.w	r3[0x0],r10
800063b8:	fb 49 06 90 	st.w	sp[1680],r9
800063bc:	87 16       	st.w	r3[0x4],r6
800063be:	fb 48 06 8c 	st.w	sp[1676],r8
800063c2:	58 78       	cp.w	r8,7
800063c4:	e0 89 00 04 	brgt	800063cc <_vfprintf_r+0x1bd0>
800063c8:	2f 83       	sub	r3,-8
800063ca:	c0 b8       	rjmp	800063e0 <_vfprintf_r+0x1be4>
800063cc:	fa ca f9 78 	sub	r10,sp,-1672
800063d0:	02 9b       	mov	r11,r1
800063d2:	08 9c       	mov	r12,r4
800063d4:	fe b0 f2 06 	rcall	800047e0 <__sprint_r>
800063d8:	e0 81 01 91 	brne	800066fa <_vfprintf_r+0x1efe>
800063dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800063e0:	ed b5 00 00 	bld	r5,0x0
800063e4:	e0 81 01 20 	brne	80006624 <_vfprintf_r+0x1e28>
800063e8:	40 c9       	lddsp	r9,sp[0x30]
800063ea:	fa f8 06 90 	ld.w	r8,sp[1680]
800063ee:	2f f8       	sub	r8,-1
800063f0:	87 09       	st.w	r3[0x0],r9
800063f2:	fb 48 06 90 	st.w	sp[1680],r8
800063f6:	30 19       	mov	r9,1
800063f8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063fc:	87 19       	st.w	r3[0x4],r9
800063fe:	2f f8       	sub	r8,-1
80006400:	fb 48 06 8c 	st.w	sp[1676],r8
80006404:	c0 29       	rjmp	80006608 <_vfprintf_r+0x1e0c>
80006406:	14 09       	add	r9,r10
80006408:	2f f8       	sub	r8,-1
8000640a:	fb 49 06 90 	st.w	sp[1680],r9
8000640e:	87 06       	st.w	r3[0x0],r6
80006410:	87 1a       	st.w	r3[0x4],r10
80006412:	fb 48 06 8c 	st.w	sp[1676],r8
80006416:	58 78       	cp.w	r8,7
80006418:	e0 89 00 04 	brgt	80006420 <_vfprintf_r+0x1c24>
8000641c:	2f 83       	sub	r3,-8
8000641e:	c0 b8       	rjmp	80006434 <_vfprintf_r+0x1c38>
80006420:	fa ca f9 78 	sub	r10,sp,-1672
80006424:	02 9b       	mov	r11,r1
80006426:	08 9c       	mov	r12,r4
80006428:	fe b0 f1 dc 	rcall	800047e0 <__sprint_r>
8000642c:	e0 81 01 67 	brne	800066fa <_vfprintf_r+0x1efe>
80006430:	fa c3 f9 e0 	sub	r3,sp,-1568
80006434:	40 c8       	lddsp	r8,sp[0x30]
80006436:	87 08       	st.w	r3[0x0],r8
80006438:	fa f8 06 90 	ld.w	r8,sp[1680]
8000643c:	2f f8       	sub	r8,-1
8000643e:	30 19       	mov	r9,1
80006440:	fb 48 06 90 	st.w	sp[1680],r8
80006444:	87 19       	st.w	r3[0x4],r9
80006446:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000644a:	2f f8       	sub	r8,-1
8000644c:	fb 48 06 8c 	st.w	sp[1676],r8
80006450:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006454:	58 78       	cp.w	r8,7
80006456:	e0 89 00 04 	brgt	8000645e <_vfprintf_r+0x1c62>
8000645a:	2f 83       	sub	r3,-8
8000645c:	c0 b8       	rjmp	80006472 <_vfprintf_r+0x1c76>
8000645e:	fa ca f9 78 	sub	r10,sp,-1672
80006462:	02 9b       	mov	r11,r1
80006464:	08 9c       	mov	r12,r4
80006466:	fe b0 f1 bd 	rcall	800047e0 <__sprint_r>
8000646a:	e0 81 01 48 	brne	800066fa <_vfprintf_r+0x1efe>
8000646e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006472:	04 06       	add	r6,r2
80006474:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006478:	87 06       	st.w	r3[0x0],r6
8000647a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000647e:	40 66       	lddsp	r6,sp[0x18]
80006480:	40 6e       	lddsp	lr,sp[0x18]
80006482:	10 16       	sub	r6,r8
80006484:	f2 08 01 08 	sub	r8,r9,r8
80006488:	87 16       	st.w	r3[0x4],r6
8000648a:	1c 08       	add	r8,lr
8000648c:	fb 48 06 90 	st.w	sp[1680],r8
80006490:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006494:	2f f8       	sub	r8,-1
80006496:	fb 48 06 8c 	st.w	sp[1676],r8
8000649a:	cb 78       	rjmp	80006608 <_vfprintf_r+0x1e0c>
8000649c:	40 6c       	lddsp	r12,sp[0x18]
8000649e:	58 1c       	cp.w	r12,1
800064a0:	e0 89 00 06 	brgt	800064ac <_vfprintf_r+0x1cb0>
800064a4:	ed b5 00 00 	bld	r5,0x0
800064a8:	e0 81 00 85 	brne	800065b2 <_vfprintf_r+0x1db6>
800064ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800064b0:	2f f8       	sub	r8,-1
800064b2:	30 19       	mov	r9,1
800064b4:	fb 48 06 90 	st.w	sp[1680],r8
800064b8:	87 06       	st.w	r3[0x0],r6
800064ba:	fa f8 06 8c 	ld.w	r8,sp[1676]
800064be:	87 19       	st.w	r3[0x4],r9
800064c0:	2f f8       	sub	r8,-1
800064c2:	fb 48 06 8c 	st.w	sp[1676],r8
800064c6:	58 78       	cp.w	r8,7
800064c8:	e0 89 00 04 	brgt	800064d0 <_vfprintf_r+0x1cd4>
800064cc:	2f 83       	sub	r3,-8
800064ce:	c0 b8       	rjmp	800064e4 <_vfprintf_r+0x1ce8>
800064d0:	fa ca f9 78 	sub	r10,sp,-1672
800064d4:	02 9b       	mov	r11,r1
800064d6:	08 9c       	mov	r12,r4
800064d8:	fe b0 f1 84 	rcall	800047e0 <__sprint_r>
800064dc:	e0 81 01 0f 	brne	800066fa <_vfprintf_r+0x1efe>
800064e0:	fa c3 f9 e0 	sub	r3,sp,-1568
800064e4:	fa f8 06 90 	ld.w	r8,sp[1680]
800064e8:	2f f8       	sub	r8,-1
800064ea:	40 cb       	lddsp	r11,sp[0x30]
800064ec:	fb 48 06 90 	st.w	sp[1680],r8
800064f0:	30 19       	mov	r9,1
800064f2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800064f6:	87 0b       	st.w	r3[0x0],r11
800064f8:	2f f8       	sub	r8,-1
800064fa:	87 19       	st.w	r3[0x4],r9
800064fc:	fb 48 06 8c 	st.w	sp[1676],r8
80006500:	58 78       	cp.w	r8,7
80006502:	e0 89 00 05 	brgt	8000650c <_vfprintf_r+0x1d10>
80006506:	2f 83       	sub	r3,-8
80006508:	c0 c8       	rjmp	80006520 <_vfprintf_r+0x1d24>
8000650a:	d7 03       	nop
8000650c:	fa ca f9 78 	sub	r10,sp,-1672
80006510:	02 9b       	mov	r11,r1
80006512:	08 9c       	mov	r12,r4
80006514:	fe b0 f1 66 	rcall	800047e0 <__sprint_r>
80006518:	e0 81 00 f1 	brne	800066fa <_vfprintf_r+0x1efe>
8000651c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006520:	30 08       	mov	r8,0
80006522:	30 09       	mov	r9,0
80006524:	40 5b       	lddsp	r11,sp[0x14]
80006526:	40 7a       	lddsp	r10,sp[0x1c]
80006528:	e0 a0 17 3d 	rcall	800093a2 <__avr32_f64_cmp_eq>
8000652c:	40 68       	lddsp	r8,sp[0x18]
8000652e:	20 18       	sub	r8,1
80006530:	58 0c       	cp.w	r12,0
80006532:	c0 d1       	brne	8000654c <_vfprintf_r+0x1d50>
80006534:	2f f6       	sub	r6,-1
80006536:	87 18       	st.w	r3[0x4],r8
80006538:	87 06       	st.w	r3[0x0],r6
8000653a:	fa f6 06 90 	ld.w	r6,sp[1680]
8000653e:	10 06       	add	r6,r8
80006540:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006544:	fb 46 06 90 	st.w	sp[1680],r6
80006548:	2f f8       	sub	r8,-1
8000654a:	c3 18       	rjmp	800065ac <_vfprintf_r+0x1db0>
8000654c:	10 96       	mov	r6,r8
8000654e:	58 08       	cp.w	r8,0
80006550:	e0 89 00 1c 	brgt	80006588 <_vfprintf_r+0x1d8c>
80006554:	c4 b8       	rjmp	800065ea <_vfprintf_r+0x1dee>
80006556:	2f 09       	sub	r9,-16
80006558:	2f f8       	sub	r8,-1
8000655a:	fb 49 06 90 	st.w	sp[1680],r9
8000655e:	87 02       	st.w	r3[0x0],r2
80006560:	87 10       	st.w	r3[0x4],r0
80006562:	fb 48 06 8c 	st.w	sp[1676],r8
80006566:	58 78       	cp.w	r8,7
80006568:	e0 89 00 04 	brgt	80006570 <_vfprintf_r+0x1d74>
8000656c:	2f 83       	sub	r3,-8
8000656e:	c0 b8       	rjmp	80006584 <_vfprintf_r+0x1d88>
80006570:	fa ca f9 78 	sub	r10,sp,-1672
80006574:	02 9b       	mov	r11,r1
80006576:	08 9c       	mov	r12,r4
80006578:	fe b0 f1 34 	rcall	800047e0 <__sprint_r>
8000657c:	e0 81 00 bf 	brne	800066fa <_vfprintf_r+0x1efe>
80006580:	fa c3 f9 e0 	sub	r3,sp,-1568
80006584:	21 06       	sub	r6,16
80006586:	c0 48       	rjmp	8000658e <_vfprintf_r+0x1d92>
80006588:	fe c2 c5 6c 	sub	r2,pc,-14996
8000658c:	31 00       	mov	r0,16
8000658e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006592:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006596:	fe ca c5 7a 	sub	r10,pc,-14982
8000659a:	59 06       	cp.w	r6,16
8000659c:	fe 99 ff dd 	brgt	80006556 <_vfprintf_r+0x1d5a>
800065a0:	0c 09       	add	r9,r6
800065a2:	87 0a       	st.w	r3[0x0],r10
800065a4:	fb 49 06 90 	st.w	sp[1680],r9
800065a8:	2f f8       	sub	r8,-1
800065aa:	87 16       	st.w	r3[0x4],r6
800065ac:	fb 48 06 8c 	st.w	sp[1676],r8
800065b0:	c0 e8       	rjmp	800065cc <_vfprintf_r+0x1dd0>
800065b2:	fa f8 06 90 	ld.w	r8,sp[1680]
800065b6:	2f f8       	sub	r8,-1
800065b8:	30 19       	mov	r9,1
800065ba:	fb 48 06 90 	st.w	sp[1680],r8
800065be:	87 06       	st.w	r3[0x0],r6
800065c0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800065c4:	87 19       	st.w	r3[0x4],r9
800065c6:	2f f8       	sub	r8,-1
800065c8:	fb 48 06 8c 	st.w	sp[1676],r8
800065cc:	58 78       	cp.w	r8,7
800065ce:	e0 89 00 04 	brgt	800065d6 <_vfprintf_r+0x1dda>
800065d2:	2f 83       	sub	r3,-8
800065d4:	c0 b8       	rjmp	800065ea <_vfprintf_r+0x1dee>
800065d6:	fa ca f9 78 	sub	r10,sp,-1672
800065da:	02 9b       	mov	r11,r1
800065dc:	08 9c       	mov	r12,r4
800065de:	fe b0 f1 01 	rcall	800047e0 <__sprint_r>
800065e2:	e0 81 00 8c 	brne	800066fa <_vfprintf_r+0x1efe>
800065e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800065ea:	40 ea       	lddsp	r10,sp[0x38]
800065ec:	fa f8 06 90 	ld.w	r8,sp[1680]
800065f0:	14 08       	add	r8,r10
800065f2:	fa c9 f9 64 	sub	r9,sp,-1692
800065f6:	fb 48 06 90 	st.w	sp[1680],r8
800065fa:	87 1a       	st.w	r3[0x4],r10
800065fc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006600:	87 09       	st.w	r3[0x0],r9
80006602:	2f f8       	sub	r8,-1
80006604:	fb 48 06 8c 	st.w	sp[1676],r8
80006608:	58 78       	cp.w	r8,7
8000660a:	e0 89 00 04 	brgt	80006612 <_vfprintf_r+0x1e16>
8000660e:	2f 83       	sub	r3,-8
80006610:	c0 a8       	rjmp	80006624 <_vfprintf_r+0x1e28>
80006612:	fa ca f9 78 	sub	r10,sp,-1672
80006616:	02 9b       	mov	r11,r1
80006618:	08 9c       	mov	r12,r4
8000661a:	fe b0 f0 e3 	rcall	800047e0 <__sprint_r>
8000661e:	c6 e1       	brne	800066fa <_vfprintf_r+0x1efe>
80006620:	fa c3 f9 e0 	sub	r3,sp,-1568
80006624:	e2 15 00 04 	andl	r5,0x4,COH
80006628:	c3 f0       	breq	800066a6 <_vfprintf_r+0x1eaa>
8000662a:	40 86       	lddsp	r6,sp[0x20]
8000662c:	40 39       	lddsp	r9,sp[0xc]
8000662e:	12 16       	sub	r6,r9
80006630:	58 06       	cp.w	r6,0
80006632:	e0 89 00 1a 	brgt	80006666 <_vfprintf_r+0x1e6a>
80006636:	c3 88       	rjmp	800066a6 <_vfprintf_r+0x1eaa>
80006638:	2f 09       	sub	r9,-16
8000663a:	2f f8       	sub	r8,-1
8000663c:	fb 49 06 90 	st.w	sp[1680],r9
80006640:	87 05       	st.w	r3[0x0],r5
80006642:	87 12       	st.w	r3[0x4],r2
80006644:	fb 48 06 8c 	st.w	sp[1676],r8
80006648:	58 78       	cp.w	r8,7
8000664a:	e0 89 00 04 	brgt	80006652 <_vfprintf_r+0x1e56>
8000664e:	2f 83       	sub	r3,-8
80006650:	c0 98       	rjmp	80006662 <_vfprintf_r+0x1e66>
80006652:	00 9a       	mov	r10,r0
80006654:	02 9b       	mov	r11,r1
80006656:	08 9c       	mov	r12,r4
80006658:	fe b0 f0 c4 	rcall	800047e0 <__sprint_r>
8000665c:	c4 f1       	brne	800066fa <_vfprintf_r+0x1efe>
8000665e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006662:	21 06       	sub	r6,16
80006664:	c0 68       	rjmp	80006670 <_vfprintf_r+0x1e74>
80006666:	fe c5 c6 5a 	sub	r5,pc,-14758
8000666a:	31 02       	mov	r2,16
8000666c:	fa c0 f9 78 	sub	r0,sp,-1672
80006670:	fa f9 06 90 	ld.w	r9,sp[1680]
80006674:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006678:	fe ca c6 6c 	sub	r10,pc,-14740
8000667c:	59 06       	cp.w	r6,16
8000667e:	fe 99 ff dd 	brgt	80006638 <_vfprintf_r+0x1e3c>
80006682:	0c 09       	add	r9,r6
80006684:	2f f8       	sub	r8,-1
80006686:	87 0a       	st.w	r3[0x0],r10
80006688:	87 16       	st.w	r3[0x4],r6
8000668a:	fb 49 06 90 	st.w	sp[1680],r9
8000668e:	fb 48 06 8c 	st.w	sp[1676],r8
80006692:	58 78       	cp.w	r8,7
80006694:	e0 8a 00 09 	brle	800066a6 <_vfprintf_r+0x1eaa>
80006698:	fa ca f9 78 	sub	r10,sp,-1672
8000669c:	02 9b       	mov	r11,r1
8000669e:	08 9c       	mov	r12,r4
800066a0:	fe b0 f0 a0 	rcall	800047e0 <__sprint_r>
800066a4:	c2 b1       	brne	800066fa <_vfprintf_r+0x1efe>
800066a6:	40 bc       	lddsp	r12,sp[0x2c]
800066a8:	40 36       	lddsp	r6,sp[0xc]
800066aa:	40 8e       	lddsp	lr,sp[0x20]
800066ac:	ec 0e 0c 48 	max	r8,r6,lr
800066b0:	10 0c       	add	r12,r8
800066b2:	50 bc       	stdsp	sp[0x2c],r12
800066b4:	fa f8 06 90 	ld.w	r8,sp[1680]
800066b8:	58 08       	cp.w	r8,0
800066ba:	c0 80       	breq	800066ca <_vfprintf_r+0x1ece>
800066bc:	fa ca f9 78 	sub	r10,sp,-1672
800066c0:	02 9b       	mov	r11,r1
800066c2:	08 9c       	mov	r12,r4
800066c4:	fe b0 f0 8e 	rcall	800047e0 <__sprint_r>
800066c8:	c1 91       	brne	800066fa <_vfprintf_r+0x1efe>
800066ca:	30 0b       	mov	r11,0
800066cc:	fa c3 f9 e0 	sub	r3,sp,-1568
800066d0:	fb 4b 06 8c 	st.w	sp[1676],r11
800066d4:	fe 9f f1 22 	bral	80004918 <_vfprintf_r+0x11c>
800066d8:	08 95       	mov	r5,r4
800066da:	fa f8 06 90 	ld.w	r8,sp[1680]
800066de:	58 08       	cp.w	r8,0
800066e0:	c0 80       	breq	800066f0 <_vfprintf_r+0x1ef4>
800066e2:	08 9c       	mov	r12,r4
800066e4:	fa ca f9 78 	sub	r10,sp,-1672
800066e8:	02 9b       	mov	r11,r1
800066ea:	fe b0 f0 7b 	rcall	800047e0 <__sprint_r>
800066ee:	c0 61       	brne	800066fa <_vfprintf_r+0x1efe>
800066f0:	30 08       	mov	r8,0
800066f2:	fb 48 06 8c 	st.w	sp[1676],r8
800066f6:	c0 28       	rjmp	800066fa <_vfprintf_r+0x1efe>
800066f8:	40 41       	lddsp	r1,sp[0x10]
800066fa:	82 68       	ld.sh	r8,r1[0xc]
800066fc:	ed b8 00 06 	bld	r8,0x6
80006700:	c0 31       	brne	80006706 <_vfprintf_r+0x1f0a>
80006702:	3f fa       	mov	r10,-1
80006704:	50 ba       	stdsp	sp[0x2c],r10
80006706:	40 bc       	lddsp	r12,sp[0x2c]
80006708:	fe 3d f9 44 	sub	sp,-1724
8000670c:	d8 32       	popm	r0-r7,pc
8000670e:	d7 03       	nop

80006710 <__swsetup_r>:
80006710:	d4 21       	pushm	r4-r7,lr
80006712:	e0 68 00 fc 	mov	r8,252
80006716:	18 96       	mov	r6,r12
80006718:	16 97       	mov	r7,r11
8000671a:	70 0c       	ld.w	r12,r8[0x0]
8000671c:	58 0c       	cp.w	r12,0
8000671e:	c0 60       	breq	8000672a <__swsetup_r+0x1a>
80006720:	78 68       	ld.w	r8,r12[0x18]
80006722:	58 08       	cp.w	r8,0
80006724:	c0 31       	brne	8000672a <__swsetup_r+0x1a>
80006726:	e0 a0 07 b9 	rcall	80007698 <__sinit>
8000672a:	fe c8 c5 ee 	sub	r8,pc,-14866
8000672e:	10 37       	cp.w	r7,r8
80006730:	c0 61       	brne	8000673c <__swsetup_r+0x2c>
80006732:	e0 68 00 fc 	mov	r8,252
80006736:	70 08       	ld.w	r8,r8[0x0]
80006738:	70 07       	ld.w	r7,r8[0x0]
8000673a:	c1 28       	rjmp	8000675e <__swsetup_r+0x4e>
8000673c:	fe c8 c5 e0 	sub	r8,pc,-14880
80006740:	10 37       	cp.w	r7,r8
80006742:	c0 61       	brne	8000674e <__swsetup_r+0x3e>
80006744:	e0 68 00 fc 	mov	r8,252
80006748:	70 08       	ld.w	r8,r8[0x0]
8000674a:	70 17       	ld.w	r7,r8[0x4]
8000674c:	c0 98       	rjmp	8000675e <__swsetup_r+0x4e>
8000674e:	fe c8 c5 d2 	sub	r8,pc,-14894
80006752:	10 37       	cp.w	r7,r8
80006754:	c0 51       	brne	8000675e <__swsetup_r+0x4e>
80006756:	e0 68 00 fc 	mov	r8,252
8000675a:	70 08       	ld.w	r8,r8[0x0]
8000675c:	70 27       	ld.w	r7,r8[0x8]
8000675e:	8e 68       	ld.sh	r8,r7[0xc]
80006760:	ed b8 00 03 	bld	r8,0x3
80006764:	c1 e0       	breq	800067a0 <__swsetup_r+0x90>
80006766:	ed b8 00 04 	bld	r8,0x4
8000676a:	c3 e1       	brne	800067e6 <__swsetup_r+0xd6>
8000676c:	ed b8 00 02 	bld	r8,0x2
80006770:	c1 51       	brne	8000679a <__swsetup_r+0x8a>
80006772:	6e db       	ld.w	r11,r7[0x34]
80006774:	58 0b       	cp.w	r11,0
80006776:	c0 a0       	breq	8000678a <__swsetup_r+0x7a>
80006778:	ee c8 ff bc 	sub	r8,r7,-68
8000677c:	10 3b       	cp.w	r11,r8
8000677e:	c0 40       	breq	80006786 <__swsetup_r+0x76>
80006780:	0c 9c       	mov	r12,r6
80006782:	e0 a0 08 25 	rcall	800077cc <_free_r>
80006786:	30 08       	mov	r8,0
80006788:	8f d8       	st.w	r7[0x34],r8
8000678a:	8e 68       	ld.sh	r8,r7[0xc]
8000678c:	e0 18 ff db 	andl	r8,0xffdb
80006790:	ae 68       	st.h	r7[0xc],r8
80006792:	30 08       	mov	r8,0
80006794:	8f 18       	st.w	r7[0x4],r8
80006796:	6e 48       	ld.w	r8,r7[0x10]
80006798:	8f 08       	st.w	r7[0x0],r8
8000679a:	8e 68       	ld.sh	r8,r7[0xc]
8000679c:	a3 b8       	sbr	r8,0x3
8000679e:	ae 68       	st.h	r7[0xc],r8
800067a0:	6e 48       	ld.w	r8,r7[0x10]
800067a2:	58 08       	cp.w	r8,0
800067a4:	c0 b1       	brne	800067ba <__swsetup_r+0xaa>
800067a6:	8e 68       	ld.sh	r8,r7[0xc]
800067a8:	e2 18 02 80 	andl	r8,0x280,COH
800067ac:	e0 48 02 00 	cp.w	r8,512
800067b0:	c0 50       	breq	800067ba <__swsetup_r+0xaa>
800067b2:	0c 9c       	mov	r12,r6
800067b4:	0e 9b       	mov	r11,r7
800067b6:	e0 a0 0a 4b 	rcall	80007c4c <__smakebuf_r>
800067ba:	8e 69       	ld.sh	r9,r7[0xc]
800067bc:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800067c0:	c0 70       	breq	800067ce <__swsetup_r+0xbe>
800067c2:	30 08       	mov	r8,0
800067c4:	8f 28       	st.w	r7[0x8],r8
800067c6:	6e 58       	ld.w	r8,r7[0x14]
800067c8:	5c 38       	neg	r8
800067ca:	8f 68       	st.w	r7[0x18],r8
800067cc:	c0 68       	rjmp	800067d8 <__swsetup_r+0xc8>
800067ce:	ed b9 00 01 	bld	r9,0x1
800067d2:	ef f8 10 05 	ld.wne	r8,r7[0x14]
800067d6:	8f 28       	st.w	r7[0x8],r8
800067d8:	6e 48       	ld.w	r8,r7[0x10]
800067da:	58 08       	cp.w	r8,0
800067dc:	c0 61       	brne	800067e8 <__swsetup_r+0xd8>
800067de:	8e 68       	ld.sh	r8,r7[0xc]
800067e0:	ed b8 00 07 	bld	r8,0x7
800067e4:	c0 21       	brne	800067e8 <__swsetup_r+0xd8>
800067e6:	dc 2a       	popm	r4-r7,pc,r12=-1
800067e8:	d8 2a       	popm	r4-r7,pc,r12=0
800067ea:	d7 03       	nop

800067ec <quorem>:
800067ec:	d4 31       	pushm	r0-r7,lr
800067ee:	20 2d       	sub	sp,8
800067f0:	18 97       	mov	r7,r12
800067f2:	78 48       	ld.w	r8,r12[0x10]
800067f4:	76 46       	ld.w	r6,r11[0x10]
800067f6:	0c 38       	cp.w	r8,r6
800067f8:	c0 34       	brge	800067fe <quorem+0x12>
800067fa:	30 0c       	mov	r12,0
800067fc:	c8 58       	rjmp	80006906 <quorem+0x11a>
800067fe:	ec c2 ff fc 	sub	r2,r6,-4
80006802:	f6 c3 ff ec 	sub	r3,r11,-20
80006806:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000680a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000680e:	2f f9       	sub	r9,-1
80006810:	20 16       	sub	r6,1
80006812:	f8 09 0d 08 	divu	r8,r12,r9
80006816:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000681a:	ee c4 ff ec 	sub	r4,r7,-20
8000681e:	10 95       	mov	r5,r8
80006820:	58 08       	cp.w	r8,0
80006822:	c4 10       	breq	800068a4 <quorem+0xb8>
80006824:	30 09       	mov	r9,0
80006826:	06 9a       	mov	r10,r3
80006828:	08 98       	mov	r8,r4
8000682a:	12 91       	mov	r1,r9
8000682c:	50 0b       	stdsp	sp[0x0],r11
8000682e:	70 0e       	ld.w	lr,r8[0x0]
80006830:	b1 8e       	lsr	lr,0x10
80006832:	50 1e       	stdsp	sp[0x4],lr
80006834:	15 0e       	ld.w	lr,r10++
80006836:	fc 00 16 10 	lsr	r0,lr,0x10
8000683a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000683e:	ea 0e 03 41 	mac	r1,r5,lr
80006842:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80006846:	b1 81       	lsr	r1,0x10
80006848:	40 1b       	lddsp	r11,sp[0x4]
8000684a:	ea 00 02 40 	mul	r0,r5,r0
8000684e:	e2 00 00 00 	add	r0,r1,r0
80006852:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80006856:	02 1b       	sub	r11,r1
80006858:	50 1b       	stdsp	sp[0x4],r11
8000685a:	70 0b       	ld.w	r11,r8[0x0]
8000685c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80006860:	02 09       	add	r9,r1
80006862:	f2 0e 01 0e 	sub	lr,r9,lr
80006866:	b0 1e       	st.h	r8[0x2],lr
80006868:	fc 09 14 10 	asr	r9,lr,0x10
8000686c:	40 1e       	lddsp	lr,sp[0x4]
8000686e:	fc 09 00 09 	add	r9,lr,r9
80006872:	b0 09       	st.h	r8[0x0],r9
80006874:	e0 01 16 10 	lsr	r1,r0,0x10
80006878:	2f c8       	sub	r8,-4
8000687a:	b1 49       	asr	r9,0x10
8000687c:	04 3a       	cp.w	r10,r2
8000687e:	fe 98 ff d8 	brls	8000682e <quorem+0x42>
80006882:	40 0b       	lddsp	r11,sp[0x0]
80006884:	58 0c       	cp.w	r12,0
80006886:	c0 f1       	brne	800068a4 <quorem+0xb8>
80006888:	ec c8 ff fb 	sub	r8,r6,-5
8000688c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006890:	c0 28       	rjmp	80006894 <quorem+0xa8>
80006892:	20 16       	sub	r6,1
80006894:	20 48       	sub	r8,4
80006896:	08 38       	cp.w	r8,r4
80006898:	e0 88 00 05 	brls	800068a2 <quorem+0xb6>
8000689c:	70 09       	ld.w	r9,r8[0x0]
8000689e:	58 09       	cp.w	r9,0
800068a0:	cf 90       	breq	80006892 <quorem+0xa6>
800068a2:	8f 46       	st.w	r7[0x10],r6
800068a4:	0e 9c       	mov	r12,r7
800068a6:	e0 a0 0c fb 	rcall	8000829c <__mcmp>
800068aa:	c2 d5       	brlt	80006904 <quorem+0x118>
800068ac:	2f f5       	sub	r5,-1
800068ae:	08 98       	mov	r8,r4
800068b0:	30 09       	mov	r9,0
800068b2:	07 0b       	ld.w	r11,r3++
800068b4:	f6 0a 16 10 	lsr	r10,r11,0x10
800068b8:	70 0c       	ld.w	r12,r8[0x0]
800068ba:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800068be:	f8 0e 16 10 	lsr	lr,r12,0x10
800068c2:	14 1e       	sub	lr,r10
800068c4:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800068c8:	16 1a       	sub	r10,r11
800068ca:	12 0a       	add	r10,r9
800068cc:	b0 1a       	st.h	r8[0x2],r10
800068ce:	b1 4a       	asr	r10,0x10
800068d0:	fc 0a 00 09 	add	r9,lr,r10
800068d4:	b0 09       	st.h	r8[0x0],r9
800068d6:	2f c8       	sub	r8,-4
800068d8:	b1 49       	asr	r9,0x10
800068da:	04 33       	cp.w	r3,r2
800068dc:	fe 98 ff eb 	brls	800068b2 <quorem+0xc6>
800068e0:	ec c8 ff fb 	sub	r8,r6,-5
800068e4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800068e8:	58 09       	cp.w	r9,0
800068ea:	c0 d1       	brne	80006904 <quorem+0x118>
800068ec:	ee 08 00 28 	add	r8,r7,r8<<0x2
800068f0:	c0 28       	rjmp	800068f4 <quorem+0x108>
800068f2:	20 16       	sub	r6,1
800068f4:	20 48       	sub	r8,4
800068f6:	08 38       	cp.w	r8,r4
800068f8:	e0 88 00 05 	brls	80006902 <quorem+0x116>
800068fc:	70 09       	ld.w	r9,r8[0x0]
800068fe:	58 09       	cp.w	r9,0
80006900:	cf 90       	breq	800068f2 <quorem+0x106>
80006902:	8f 46       	st.w	r7[0x10],r6
80006904:	0a 9c       	mov	r12,r5
80006906:	2f ed       	sub	sp,-8
80006908:	d8 32       	popm	r0-r7,pc
8000690a:	d7 03       	nop

8000690c <_dtoa_r>:
8000690c:	d4 31       	pushm	r0-r7,lr
8000690e:	21 ad       	sub	sp,104
80006910:	fa c4 ff 74 	sub	r4,sp,-140
80006914:	18 97       	mov	r7,r12
80006916:	16 95       	mov	r5,r11
80006918:	68 2c       	ld.w	r12,r4[0x8]
8000691a:	50 c9       	stdsp	sp[0x30],r9
8000691c:	68 16       	ld.w	r6,r4[0x4]
8000691e:	68 09       	ld.w	r9,r4[0x0]
80006920:	50 e8       	stdsp	sp[0x38],r8
80006922:	14 94       	mov	r4,r10
80006924:	51 2c       	stdsp	sp[0x48],r12
80006926:	fa e5 00 08 	st.d	sp[8],r4
8000692a:	51 59       	stdsp	sp[0x54],r9
8000692c:	6e 95       	ld.w	r5,r7[0x24]
8000692e:	58 05       	cp.w	r5,0
80006930:	c0 91       	brne	80006942 <_dtoa_r+0x36>
80006932:	31 0c       	mov	r12,16
80006934:	e0 a0 09 ea 	rcall	80007d08 <malloc>
80006938:	99 35       	st.w	r12[0xc],r5
8000693a:	8f 9c       	st.w	r7[0x24],r12
8000693c:	99 15       	st.w	r12[0x4],r5
8000693e:	99 25       	st.w	r12[0x8],r5
80006940:	99 05       	st.w	r12[0x0],r5
80006942:	6e 99       	ld.w	r9,r7[0x24]
80006944:	72 08       	ld.w	r8,r9[0x0]
80006946:	58 08       	cp.w	r8,0
80006948:	c0 f0       	breq	80006966 <_dtoa_r+0x5a>
8000694a:	72 1a       	ld.w	r10,r9[0x4]
8000694c:	91 1a       	st.w	r8[0x4],r10
8000694e:	30 1a       	mov	r10,1
80006950:	72 19       	ld.w	r9,r9[0x4]
80006952:	f4 09 09 49 	lsl	r9,r10,r9
80006956:	10 9b       	mov	r11,r8
80006958:	91 29       	st.w	r8[0x8],r9
8000695a:	0e 9c       	mov	r12,r7
8000695c:	e0 a0 0c ba 	rcall	800082d0 <_Bfree>
80006960:	6e 98       	ld.w	r8,r7[0x24]
80006962:	30 09       	mov	r9,0
80006964:	91 09       	st.w	r8[0x0],r9
80006966:	40 28       	lddsp	r8,sp[0x8]
80006968:	10 94       	mov	r4,r8
8000696a:	58 08       	cp.w	r8,0
8000696c:	c0 64       	brge	80006978 <_dtoa_r+0x6c>
8000696e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80006972:	50 28       	stdsp	sp[0x8],r8
80006974:	30 18       	mov	r8,1
80006976:	c0 28       	rjmp	8000697a <_dtoa_r+0x6e>
80006978:	30 08       	mov	r8,0
8000697a:	8d 08       	st.w	r6[0x0],r8
8000697c:	fc 1c 7f f0 	movh	r12,0x7ff0
80006980:	40 26       	lddsp	r6,sp[0x8]
80006982:	0c 98       	mov	r8,r6
80006984:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80006988:	18 38       	cp.w	r8,r12
8000698a:	c2 01       	brne	800069ca <_dtoa_r+0xbe>
8000698c:	e0 68 27 0f 	mov	r8,9999
80006990:	41 5b       	lddsp	r11,sp[0x54]
80006992:	97 08       	st.w	r11[0x0],r8
80006994:	40 3a       	lddsp	r10,sp[0xc]
80006996:	58 0a       	cp.w	r10,0
80006998:	c0 71       	brne	800069a6 <_dtoa_r+0x9a>
8000699a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
8000699e:	c0 41       	brne	800069a6 <_dtoa_r+0x9a>
800069a0:	fe cc c8 74 	sub	r12,pc,-14220
800069a4:	c0 38       	rjmp	800069aa <_dtoa_r+0x9e>
800069a6:	fe cc c8 6e 	sub	r12,pc,-14226
800069aa:	41 29       	lddsp	r9,sp[0x48]
800069ac:	58 09       	cp.w	r9,0
800069ae:	e0 80 05 9a 	breq	800074e2 <_dtoa_r+0xbd6>
800069b2:	f8 c8 ff fd 	sub	r8,r12,-3
800069b6:	f8 c9 ff f8 	sub	r9,r12,-8
800069ba:	11 8b       	ld.ub	r11,r8[0x0]
800069bc:	30 0a       	mov	r10,0
800069be:	41 25       	lddsp	r5,sp[0x48]
800069c0:	f4 0b 18 00 	cp.b	r11,r10
800069c4:	f2 08 17 10 	movne	r8,r9
800069c8:	c1 68       	rjmp	800069f4 <_dtoa_r+0xe8>
800069ca:	fa ea 00 08 	ld.d	r10,sp[8]
800069ce:	30 08       	mov	r8,0
800069d0:	fa eb 00 3c 	st.d	sp[60],r10
800069d4:	30 09       	mov	r9,0
800069d6:	e0 a0 14 e6 	rcall	800093a2 <__avr32_f64_cmp_eq>
800069da:	c1 00       	breq	800069fa <_dtoa_r+0xee>
800069dc:	30 18       	mov	r8,1
800069de:	41 5a       	lddsp	r10,sp[0x54]
800069e0:	95 08       	st.w	r10[0x0],r8
800069e2:	fe cc c9 da 	sub	r12,pc,-13862
800069e6:	41 29       	lddsp	r9,sp[0x48]
800069e8:	f8 08 00 08 	add	r8,r12,r8
800069ec:	58 09       	cp.w	r9,0
800069ee:	e0 80 05 7a 	breq	800074e2 <_dtoa_r+0xbd6>
800069f2:	12 95       	mov	r5,r9
800069f4:	8b 08       	st.w	r5[0x0],r8
800069f6:	e0 8f 05 76 	bral	800074e2 <_dtoa_r+0xbd6>
800069fa:	fa c8 ff 9c 	sub	r8,sp,-100
800069fe:	fa c9 ff a0 	sub	r9,sp,-96
80006a02:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a06:	0e 9c       	mov	r12,r7
80006a08:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006a0c:	e0 a0 0c b4 	rcall	80008374 <__d2b>
80006a10:	18 93       	mov	r3,r12
80006a12:	58 05       	cp.w	r5,0
80006a14:	c0 d0       	breq	80006a2e <_dtoa_r+0x122>
80006a16:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a1a:	30 04       	mov	r4,0
80006a1c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006a20:	ea c5 03 ff 	sub	r5,r5,1023
80006a24:	10 9b       	mov	r11,r8
80006a26:	51 74       	stdsp	sp[0x5c],r4
80006a28:	ea 1b 3f f0 	orh	r11,0x3ff0
80006a2c:	c2 58       	rjmp	80006a76 <_dtoa_r+0x16a>
80006a2e:	41 88       	lddsp	r8,sp[0x60]
80006a30:	41 9c       	lddsp	r12,sp[0x64]
80006a32:	10 0c       	add	r12,r8
80006a34:	f8 c5 fb ce 	sub	r5,r12,-1074
80006a38:	e0 45 00 20 	cp.w	r5,32
80006a3c:	e0 8a 00 0e 	brle	80006a58 <_dtoa_r+0x14c>
80006a40:	f8 cc fb ee 	sub	r12,r12,-1042
80006a44:	40 3b       	lddsp	r11,sp[0xc]
80006a46:	ea 08 11 40 	rsub	r8,r5,64
80006a4a:	f6 0c 0a 4c 	lsr	r12,r11,r12
80006a4e:	ec 08 09 46 	lsl	r6,r6,r8
80006a52:	0c 4c       	or	r12,r6
80006a54:	c0 78       	rjmp	80006a62 <_dtoa_r+0x156>
80006a56:	d7 03       	nop
80006a58:	ea 0c 11 20 	rsub	r12,r5,32
80006a5c:	40 3a       	lddsp	r10,sp[0xc]
80006a5e:	f4 0c 09 4c 	lsl	r12,r10,r12
80006a62:	e0 a0 14 2c 	rcall	800092ba <__avr32_u32_to_f64>
80006a66:	fc 18 fe 10 	movh	r8,0xfe10
80006a6a:	30 19       	mov	r9,1
80006a6c:	ea c5 04 33 	sub	r5,r5,1075
80006a70:	f0 0b 00 0b 	add	r11,r8,r11
80006a74:	51 79       	stdsp	sp[0x5c],r9
80006a76:	30 08       	mov	r8,0
80006a78:	fc 19 3f f8 	movh	r9,0x3ff8
80006a7c:	e0 a0 12 b4 	rcall	80008fe4 <__avr32_f64_sub>
80006a80:	e0 68 43 61 	mov	r8,17249
80006a84:	ea 18 63 6f 	orh	r8,0x636f
80006a88:	e0 69 87 a7 	mov	r9,34727
80006a8c:	ea 19 3f d2 	orh	r9,0x3fd2
80006a90:	e0 a0 11 be 	rcall	80008e0c <__avr32_f64_mul>
80006a94:	e0 68 c8 b3 	mov	r8,51379
80006a98:	ea 18 8b 60 	orh	r8,0x8b60
80006a9c:	e0 69 8a 28 	mov	r9,35368
80006aa0:	ea 19 3f c6 	orh	r9,0x3fc6
80006aa4:	e0 a0 13 6e 	rcall	80009180 <__avr32_f64_add>
80006aa8:	0a 9c       	mov	r12,r5
80006aaa:	14 90       	mov	r0,r10
80006aac:	16 91       	mov	r1,r11
80006aae:	e0 a0 14 0a 	rcall	800092c2 <__avr32_s32_to_f64>
80006ab2:	e0 68 79 fb 	mov	r8,31227
80006ab6:	ea 18 50 9f 	orh	r8,0x509f
80006aba:	e0 69 44 13 	mov	r9,17427
80006abe:	ea 19 3f d3 	orh	r9,0x3fd3
80006ac2:	e0 a0 11 a5 	rcall	80008e0c <__avr32_f64_mul>
80006ac6:	14 98       	mov	r8,r10
80006ac8:	16 99       	mov	r9,r11
80006aca:	00 9a       	mov	r10,r0
80006acc:	02 9b       	mov	r11,r1
80006ace:	e0 a0 13 59 	rcall	80009180 <__avr32_f64_add>
80006ad2:	14 90       	mov	r0,r10
80006ad4:	16 91       	mov	r1,r11
80006ad6:	e0 a0 13 df 	rcall	80009294 <__avr32_f64_to_s32>
80006ada:	30 08       	mov	r8,0
80006adc:	18 96       	mov	r6,r12
80006ade:	30 09       	mov	r9,0
80006ae0:	00 9a       	mov	r10,r0
80006ae2:	02 9b       	mov	r11,r1
80006ae4:	e0 a0 14 a6 	rcall	80009430 <__avr32_f64_cmp_lt>
80006ae8:	c0 c0       	breq	80006b00 <_dtoa_r+0x1f4>
80006aea:	0c 9c       	mov	r12,r6
80006aec:	e0 a0 13 eb 	rcall	800092c2 <__avr32_s32_to_f64>
80006af0:	14 98       	mov	r8,r10
80006af2:	16 99       	mov	r9,r11
80006af4:	00 9a       	mov	r10,r0
80006af6:	02 9b       	mov	r11,r1
80006af8:	e0 a0 14 55 	rcall	800093a2 <__avr32_f64_cmp_eq>
80006afc:	f7 b6 00 01 	subeq	r6,1
80006b00:	59 66       	cp.w	r6,22
80006b02:	e0 88 00 05 	brls	80006b0c <_dtoa_r+0x200>
80006b06:	30 18       	mov	r8,1
80006b08:	51 48       	stdsp	sp[0x50],r8
80006b0a:	c1 38       	rjmp	80006b30 <_dtoa_r+0x224>
80006b0c:	fe c8 c9 24 	sub	r8,pc,-14044
80006b10:	fa ea 00 3c 	ld.d	r10,sp[60]
80006b14:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80006b18:	e0 a0 14 8c 	rcall	80009430 <__avr32_f64_cmp_lt>
80006b1c:	f9 b4 00 00 	moveq	r4,0
80006b20:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006b24:	f7 b6 01 01 	subne	r6,1
80006b28:	f9 bc 01 00 	movne	r12,0
80006b2c:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006b30:	41 90       	lddsp	r0,sp[0x64]
80006b32:	20 10       	sub	r0,1
80006b34:	0a 10       	sub	r0,r5
80006b36:	c0 46       	brmi	80006b3e <_dtoa_r+0x232>
80006b38:	50 40       	stdsp	sp[0x10],r0
80006b3a:	30 00       	mov	r0,0
80006b3c:	c0 48       	rjmp	80006b44 <_dtoa_r+0x238>
80006b3e:	30 0b       	mov	r11,0
80006b40:	5c 30       	neg	r0
80006b42:	50 4b       	stdsp	sp[0x10],r11
80006b44:	ec 02 11 00 	rsub	r2,r6,0
80006b48:	58 06       	cp.w	r6,0
80006b4a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80006b4e:	f5 d6 e4 0a 	addge	r10,r10,r6
80006b52:	fb fa 4a 04 	st.wge	sp[0x10],r10
80006b56:	fb f6 4a 11 	st.wge	sp[0x44],r6
80006b5a:	f9 b2 04 00 	movge	r2,0
80006b5e:	e1 d6 e5 10 	sublt	r0,r0,r6
80006b62:	f9 b9 05 00 	movlt	r9,0
80006b66:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80006b6a:	40 c8       	lddsp	r8,sp[0x30]
80006b6c:	58 98       	cp.w	r8,9
80006b6e:	e0 8b 00 20 	brhi	80006bae <_dtoa_r+0x2a2>
80006b72:	58 58       	cp.w	r8,5
80006b74:	f9 b4 0a 01 	movle	r4,1
80006b78:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80006b7c:	f7 b5 09 04 	subgt	r5,4
80006b80:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80006b84:	f9 b4 09 00 	movgt	r4,0
80006b88:	40 cc       	lddsp	r12,sp[0x30]
80006b8a:	58 3c       	cp.w	r12,3
80006b8c:	c2 d0       	breq	80006be6 <_dtoa_r+0x2da>
80006b8e:	e0 89 00 05 	brgt	80006b98 <_dtoa_r+0x28c>
80006b92:	58 2c       	cp.w	r12,2
80006b94:	c1 01       	brne	80006bb4 <_dtoa_r+0x2a8>
80006b96:	c1 88       	rjmp	80006bc6 <_dtoa_r+0x2ba>
80006b98:	40 cb       	lddsp	r11,sp[0x30]
80006b9a:	58 4b       	cp.w	r11,4
80006b9c:	c0 60       	breq	80006ba8 <_dtoa_r+0x29c>
80006b9e:	58 5b       	cp.w	r11,5
80006ba0:	c0 a1       	brne	80006bb4 <_dtoa_r+0x2a8>
80006ba2:	30 1a       	mov	r10,1
80006ba4:	50 da       	stdsp	sp[0x34],r10
80006ba6:	c2 28       	rjmp	80006bea <_dtoa_r+0x2de>
80006ba8:	30 19       	mov	r9,1
80006baa:	50 d9       	stdsp	sp[0x34],r9
80006bac:	c0 f8       	rjmp	80006bca <_dtoa_r+0x2be>
80006bae:	30 08       	mov	r8,0
80006bb0:	30 14       	mov	r4,1
80006bb2:	50 c8       	stdsp	sp[0x30],r8
80006bb4:	3f f5       	mov	r5,-1
80006bb6:	30 1c       	mov	r12,1
80006bb8:	30 0b       	mov	r11,0
80006bba:	50 95       	stdsp	sp[0x24],r5
80006bbc:	50 dc       	stdsp	sp[0x34],r12
80006bbe:	0a 91       	mov	r1,r5
80006bc0:	31 28       	mov	r8,18
80006bc2:	50 eb       	stdsp	sp[0x38],r11
80006bc4:	c2 08       	rjmp	80006c04 <_dtoa_r+0x2f8>
80006bc6:	30 0a       	mov	r10,0
80006bc8:	50 da       	stdsp	sp[0x34],r10
80006bca:	40 e9       	lddsp	r9,sp[0x38]
80006bcc:	58 09       	cp.w	r9,0
80006bce:	e0 89 00 07 	brgt	80006bdc <_dtoa_r+0x2d0>
80006bd2:	30 18       	mov	r8,1
80006bd4:	50 98       	stdsp	sp[0x24],r8
80006bd6:	10 91       	mov	r1,r8
80006bd8:	50 e8       	stdsp	sp[0x38],r8
80006bda:	c1 58       	rjmp	80006c04 <_dtoa_r+0x2f8>
80006bdc:	40 e5       	lddsp	r5,sp[0x38]
80006bde:	50 95       	stdsp	sp[0x24],r5
80006be0:	0a 91       	mov	r1,r5
80006be2:	0a 98       	mov	r8,r5
80006be4:	c1 08       	rjmp	80006c04 <_dtoa_r+0x2f8>
80006be6:	30 0c       	mov	r12,0
80006be8:	50 dc       	stdsp	sp[0x34],r12
80006bea:	40 eb       	lddsp	r11,sp[0x38]
80006bec:	ec 0b 00 0b 	add	r11,r6,r11
80006bf0:	50 9b       	stdsp	sp[0x24],r11
80006bf2:	16 98       	mov	r8,r11
80006bf4:	2f f8       	sub	r8,-1
80006bf6:	58 08       	cp.w	r8,0
80006bf8:	e0 89 00 05 	brgt	80006c02 <_dtoa_r+0x2f6>
80006bfc:	10 91       	mov	r1,r8
80006bfe:	30 18       	mov	r8,1
80006c00:	c0 28       	rjmp	80006c04 <_dtoa_r+0x2f8>
80006c02:	10 91       	mov	r1,r8
80006c04:	30 09       	mov	r9,0
80006c06:	6e 9a       	ld.w	r10,r7[0x24]
80006c08:	95 19       	st.w	r10[0x4],r9
80006c0a:	30 49       	mov	r9,4
80006c0c:	c0 68       	rjmp	80006c18 <_dtoa_r+0x30c>
80006c0e:	d7 03       	nop
80006c10:	6a 1a       	ld.w	r10,r5[0x4]
80006c12:	a1 79       	lsl	r9,0x1
80006c14:	2f fa       	sub	r10,-1
80006c16:	8b 1a       	st.w	r5[0x4],r10
80006c18:	6e 95       	ld.w	r5,r7[0x24]
80006c1a:	f2 ca ff ec 	sub	r10,r9,-20
80006c1e:	10 3a       	cp.w	r10,r8
80006c20:	fe 98 ff f8 	brls	80006c10 <_dtoa_r+0x304>
80006c24:	6a 1b       	ld.w	r11,r5[0x4]
80006c26:	0e 9c       	mov	r12,r7
80006c28:	e0 a0 0b 6e 	rcall	80008304 <_Balloc>
80006c2c:	58 e1       	cp.w	r1,14
80006c2e:	5f 88       	srls	r8
80006c30:	8b 0c       	st.w	r5[0x0],r12
80006c32:	f1 e4 00 04 	and	r4,r8,r4
80006c36:	6e 98       	ld.w	r8,r7[0x24]
80006c38:	70 08       	ld.w	r8,r8[0x0]
80006c3a:	50 88       	stdsp	sp[0x20],r8
80006c3c:	e0 80 01 82 	breq	80006f40 <_dtoa_r+0x634>
80006c40:	58 06       	cp.w	r6,0
80006c42:	e0 8a 00 43 	brle	80006cc8 <_dtoa_r+0x3bc>
80006c46:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80006c4a:	fe c8 ca 62 	sub	r8,pc,-13726
80006c4e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006c52:	fa e5 00 18 	st.d	sp[24],r4
80006c56:	ec 04 14 04 	asr	r4,r6,0x4
80006c5a:	ed b4 00 04 	bld	r4,0x4
80006c5e:	c0 30       	breq	80006c64 <_dtoa_r+0x358>
80006c60:	30 25       	mov	r5,2
80006c62:	c1 08       	rjmp	80006c82 <_dtoa_r+0x376>
80006c64:	fe c8 c9 b4 	sub	r8,pc,-13900
80006c68:	f0 e8 00 20 	ld.d	r8,r8[32]
80006c6c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006c70:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006c74:	e0 a0 14 12 	rcall	80009498 <__avr32_f64_div>
80006c78:	30 35       	mov	r5,3
80006c7a:	14 98       	mov	r8,r10
80006c7c:	16 99       	mov	r9,r11
80006c7e:	fa e9 00 08 	st.d	sp[8],r8
80006c82:	fe cc c9 d2 	sub	r12,pc,-13870
80006c86:	50 a3       	stdsp	sp[0x28],r3
80006c88:	0c 93       	mov	r3,r6
80006c8a:	18 96       	mov	r6,r12
80006c8c:	c0 f8       	rjmp	80006caa <_dtoa_r+0x39e>
80006c8e:	fa ea 00 18 	ld.d	r10,sp[24]
80006c92:	ed b4 00 00 	bld	r4,0x0
80006c96:	c0 81       	brne	80006ca6 <_dtoa_r+0x39a>
80006c98:	ec e8 00 00 	ld.d	r8,r6[0]
80006c9c:	2f f5       	sub	r5,-1
80006c9e:	e0 a0 10 b7 	rcall	80008e0c <__avr32_f64_mul>
80006ca2:	fa eb 00 18 	st.d	sp[24],r10
80006ca6:	a1 54       	asr	r4,0x1
80006ca8:	2f 86       	sub	r6,-8
80006caa:	58 04       	cp.w	r4,0
80006cac:	cf 11       	brne	80006c8e <_dtoa_r+0x382>
80006cae:	fa e8 00 18 	ld.d	r8,sp[24]
80006cb2:	fa ea 00 08 	ld.d	r10,sp[8]
80006cb6:	06 96       	mov	r6,r3
80006cb8:	e0 a0 13 f0 	rcall	80009498 <__avr32_f64_div>
80006cbc:	40 a3       	lddsp	r3,sp[0x28]
80006cbe:	14 98       	mov	r8,r10
80006cc0:	16 99       	mov	r9,r11
80006cc2:	fa e9 00 08 	st.d	sp[8],r8
80006cc6:	c2 f8       	rjmp	80006d24 <_dtoa_r+0x418>
80006cc8:	ec 08 11 00 	rsub	r8,r6,0
80006ccc:	c0 31       	brne	80006cd2 <_dtoa_r+0x3c6>
80006cce:	30 25       	mov	r5,2
80006cd0:	c2 a8       	rjmp	80006d24 <_dtoa_r+0x418>
80006cd2:	fe cc ca 22 	sub	r12,pc,-13790
80006cd6:	f0 04 14 04 	asr	r4,r8,0x4
80006cda:	50 1c       	stdsp	sp[0x4],r12
80006cdc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006ce0:	fe c9 ca f8 	sub	r9,pc,-13576
80006ce4:	fa ea 00 3c 	ld.d	r10,sp[60]
80006ce8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006cec:	e0 a0 10 90 	rcall	80008e0c <__avr32_f64_mul>
80006cf0:	40 1c       	lddsp	r12,sp[0x4]
80006cf2:	50 63       	stdsp	sp[0x18],r3
80006cf4:	30 25       	mov	r5,2
80006cf6:	0c 93       	mov	r3,r6
80006cf8:	fa eb 00 08 	st.d	sp[8],r10
80006cfc:	18 96       	mov	r6,r12
80006cfe:	c0 f8       	rjmp	80006d1c <_dtoa_r+0x410>
80006d00:	fa ea 00 08 	ld.d	r10,sp[8]
80006d04:	ed b4 00 00 	bld	r4,0x0
80006d08:	c0 81       	brne	80006d18 <_dtoa_r+0x40c>
80006d0a:	ec e8 00 00 	ld.d	r8,r6[0]
80006d0e:	2f f5       	sub	r5,-1
80006d10:	e0 a0 10 7e 	rcall	80008e0c <__avr32_f64_mul>
80006d14:	fa eb 00 08 	st.d	sp[8],r10
80006d18:	a1 54       	asr	r4,0x1
80006d1a:	2f 86       	sub	r6,-8
80006d1c:	58 04       	cp.w	r4,0
80006d1e:	cf 11       	brne	80006d00 <_dtoa_r+0x3f4>
80006d20:	06 96       	mov	r6,r3
80006d22:	40 63       	lddsp	r3,sp[0x18]
80006d24:	41 4a       	lddsp	r10,sp[0x50]
80006d26:	58 0a       	cp.w	r10,0
80006d28:	c2 a0       	breq	80006d7c <_dtoa_r+0x470>
80006d2a:	fa e8 00 08 	ld.d	r8,sp[8]
80006d2e:	58 01       	cp.w	r1,0
80006d30:	5f 94       	srgt	r4
80006d32:	fa e9 00 18 	st.d	sp[24],r8
80006d36:	30 08       	mov	r8,0
80006d38:	fc 19 3f f0 	movh	r9,0x3ff0
80006d3c:	fa ea 00 18 	ld.d	r10,sp[24]
80006d40:	e0 a0 13 78 	rcall	80009430 <__avr32_f64_cmp_lt>
80006d44:	f9 bc 00 00 	moveq	r12,0
80006d48:	f9 bc 01 01 	movne	r12,1
80006d4c:	e9 ec 00 0c 	and	r12,r4,r12
80006d50:	c1 60       	breq	80006d7c <_dtoa_r+0x470>
80006d52:	40 98       	lddsp	r8,sp[0x24]
80006d54:	58 08       	cp.w	r8,0
80006d56:	e0 8a 00 f1 	brle	80006f38 <_dtoa_r+0x62c>
80006d5a:	30 08       	mov	r8,0
80006d5c:	fc 19 40 24 	movh	r9,0x4024
80006d60:	ec c4 00 01 	sub	r4,r6,1
80006d64:	fa ea 00 18 	ld.d	r10,sp[24]
80006d68:	2f f5       	sub	r5,-1
80006d6a:	50 64       	stdsp	sp[0x18],r4
80006d6c:	e0 a0 10 50 	rcall	80008e0c <__avr32_f64_mul>
80006d70:	40 94       	lddsp	r4,sp[0x24]
80006d72:	14 98       	mov	r8,r10
80006d74:	16 99       	mov	r9,r11
80006d76:	fa e9 00 08 	st.d	sp[8],r8
80006d7a:	c0 38       	rjmp	80006d80 <_dtoa_r+0x474>
80006d7c:	50 66       	stdsp	sp[0x18],r6
80006d7e:	02 94       	mov	r4,r1
80006d80:	0a 9c       	mov	r12,r5
80006d82:	e0 a0 12 a0 	rcall	800092c2 <__avr32_s32_to_f64>
80006d86:	fa e8 00 08 	ld.d	r8,sp[8]
80006d8a:	e0 a0 10 41 	rcall	80008e0c <__avr32_f64_mul>
80006d8e:	30 08       	mov	r8,0
80006d90:	fc 19 40 1c 	movh	r9,0x401c
80006d94:	e0 a0 11 f6 	rcall	80009180 <__avr32_f64_add>
80006d98:	14 98       	mov	r8,r10
80006d9a:	16 99       	mov	r9,r11
80006d9c:	fa e9 00 28 	st.d	sp[40],r8
80006da0:	fc 18 fc c0 	movh	r8,0xfcc0
80006da4:	40 a5       	lddsp	r5,sp[0x28]
80006da6:	10 05       	add	r5,r8
80006da8:	50 a5       	stdsp	sp[0x28],r5
80006daa:	58 04       	cp.w	r4,0
80006dac:	c2 11       	brne	80006dee <_dtoa_r+0x4e2>
80006dae:	fa ea 00 08 	ld.d	r10,sp[8]
80006db2:	30 08       	mov	r8,0
80006db4:	fc 19 40 14 	movh	r9,0x4014
80006db8:	e0 a0 11 16 	rcall	80008fe4 <__avr32_f64_sub>
80006dbc:	40 bc       	lddsp	r12,sp[0x2c]
80006dbe:	fa eb 00 08 	st.d	sp[8],r10
80006dc2:	14 98       	mov	r8,r10
80006dc4:	16 99       	mov	r9,r11
80006dc6:	18 9a       	mov	r10,r12
80006dc8:	0a 9b       	mov	r11,r5
80006dca:	e0 a0 13 33 	rcall	80009430 <__avr32_f64_cmp_lt>
80006dce:	e0 81 02 54 	brne	80007276 <_dtoa_r+0x96a>
80006dd2:	0a 98       	mov	r8,r5
80006dd4:	40 b9       	lddsp	r9,sp[0x2c]
80006dd6:	ee 18 80 00 	eorh	r8,0x8000
80006dda:	fa ea 00 08 	ld.d	r10,sp[8]
80006dde:	10 95       	mov	r5,r8
80006de0:	12 98       	mov	r8,r9
80006de2:	0a 99       	mov	r9,r5
80006de4:	e0 a0 13 26 	rcall	80009430 <__avr32_f64_cmp_lt>
80006de8:	e0 81 02 3e 	brne	80007264 <_dtoa_r+0x958>
80006dec:	ca 68       	rjmp	80006f38 <_dtoa_r+0x62c>
80006dee:	fe c9 cc 06 	sub	r9,pc,-13306
80006df2:	e8 c8 00 01 	sub	r8,r4,1
80006df6:	40 d5       	lddsp	r5,sp[0x34]
80006df8:	58 05       	cp.w	r5,0
80006dfa:	c4 f0       	breq	80006e98 <_dtoa_r+0x58c>
80006dfc:	30 0c       	mov	r12,0
80006dfe:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006e02:	51 3c       	stdsp	sp[0x4c],r12
80006e04:	30 0a       	mov	r10,0
80006e06:	fc 1b 3f e0 	movh	r11,0x3fe0
80006e0a:	e0 a0 13 47 	rcall	80009498 <__avr32_f64_div>
80006e0e:	fa e8 00 28 	ld.d	r8,sp[40]
80006e12:	40 85       	lddsp	r5,sp[0x20]
80006e14:	e0 a0 10 e8 	rcall	80008fe4 <__avr32_f64_sub>
80006e18:	fa eb 00 28 	st.d	sp[40],r10
80006e1c:	fa ea 00 08 	ld.d	r10,sp[8]
80006e20:	e0 a0 12 3a 	rcall	80009294 <__avr32_f64_to_s32>
80006e24:	51 6c       	stdsp	sp[0x58],r12
80006e26:	e0 a0 12 4e 	rcall	800092c2 <__avr32_s32_to_f64>
80006e2a:	14 98       	mov	r8,r10
80006e2c:	16 99       	mov	r9,r11
80006e2e:	fa ea 00 08 	ld.d	r10,sp[8]
80006e32:	e0 a0 10 d9 	rcall	80008fe4 <__avr32_f64_sub>
80006e36:	fa eb 00 08 	st.d	sp[8],r10
80006e3a:	41 68       	lddsp	r8,sp[0x58]
80006e3c:	2d 08       	sub	r8,-48
80006e3e:	0a c8       	st.b	r5++,r8
80006e40:	41 39       	lddsp	r9,sp[0x4c]
80006e42:	2f f9       	sub	r9,-1
80006e44:	51 39       	stdsp	sp[0x4c],r9
80006e46:	fa e8 00 28 	ld.d	r8,sp[40]
80006e4a:	e0 a0 12 f3 	rcall	80009430 <__avr32_f64_cmp_lt>
80006e4e:	e0 81 03 39 	brne	800074c0 <_dtoa_r+0xbb4>
80006e52:	fa e8 00 08 	ld.d	r8,sp[8]
80006e56:	30 0a       	mov	r10,0
80006e58:	fc 1b 3f f0 	movh	r11,0x3ff0
80006e5c:	e0 a0 10 c4 	rcall	80008fe4 <__avr32_f64_sub>
80006e60:	fa e8 00 28 	ld.d	r8,sp[40]
80006e64:	e0 a0 12 e6 	rcall	80009430 <__avr32_f64_cmp_lt>
80006e68:	fa ea 00 28 	ld.d	r10,sp[40]
80006e6c:	30 08       	mov	r8,0
80006e6e:	fc 19 40 24 	movh	r9,0x4024
80006e72:	e0 81 00 da 	brne	80007026 <_dtoa_r+0x71a>
80006e76:	41 3c       	lddsp	r12,sp[0x4c]
80006e78:	08 3c       	cp.w	r12,r4
80006e7a:	c5 f4       	brge	80006f38 <_dtoa_r+0x62c>
80006e7c:	e0 a0 0f c8 	rcall	80008e0c <__avr32_f64_mul>
80006e80:	30 08       	mov	r8,0
80006e82:	fa eb 00 28 	st.d	sp[40],r10
80006e86:	fc 19 40 24 	movh	r9,0x4024
80006e8a:	fa ea 00 08 	ld.d	r10,sp[8]
80006e8e:	e0 a0 0f bf 	rcall	80008e0c <__avr32_f64_mul>
80006e92:	fa eb 00 08 	st.d	sp[8],r10
80006e96:	cc 3b       	rjmp	80006e1c <_dtoa_r+0x510>
80006e98:	40 85       	lddsp	r5,sp[0x20]
80006e9a:	08 05       	add	r5,r4
80006e9c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006ea0:	51 35       	stdsp	sp[0x4c],r5
80006ea2:	fa e8 00 28 	ld.d	r8,sp[40]
80006ea6:	40 85       	lddsp	r5,sp[0x20]
80006ea8:	e0 a0 0f b2 	rcall	80008e0c <__avr32_f64_mul>
80006eac:	fa eb 00 28 	st.d	sp[40],r10
80006eb0:	fa ea 00 08 	ld.d	r10,sp[8]
80006eb4:	e0 a0 11 f0 	rcall	80009294 <__avr32_f64_to_s32>
80006eb8:	51 6c       	stdsp	sp[0x58],r12
80006eba:	e0 a0 12 04 	rcall	800092c2 <__avr32_s32_to_f64>
80006ebe:	14 98       	mov	r8,r10
80006ec0:	16 99       	mov	r9,r11
80006ec2:	fa ea 00 08 	ld.d	r10,sp[8]
80006ec6:	e0 a0 10 8f 	rcall	80008fe4 <__avr32_f64_sub>
80006eca:	fa eb 00 08 	st.d	sp[8],r10
80006ece:	41 68       	lddsp	r8,sp[0x58]
80006ed0:	2d 08       	sub	r8,-48
80006ed2:	0a c8       	st.b	r5++,r8
80006ed4:	41 3c       	lddsp	r12,sp[0x4c]
80006ed6:	18 35       	cp.w	r5,r12
80006ed8:	c2 81       	brne	80006f28 <_dtoa_r+0x61c>
80006eda:	30 08       	mov	r8,0
80006edc:	fc 19 3f e0 	movh	r9,0x3fe0
80006ee0:	fa ea 00 28 	ld.d	r10,sp[40]
80006ee4:	e0 a0 11 4e 	rcall	80009180 <__avr32_f64_add>
80006ee8:	40 85       	lddsp	r5,sp[0x20]
80006eea:	fa e8 00 08 	ld.d	r8,sp[8]
80006eee:	08 05       	add	r5,r4
80006ef0:	e0 a0 12 a0 	rcall	80009430 <__avr32_f64_cmp_lt>
80006ef4:	e0 81 00 99 	brne	80007026 <_dtoa_r+0x71a>
80006ef8:	fa e8 00 28 	ld.d	r8,sp[40]
80006efc:	30 0a       	mov	r10,0
80006efe:	fc 1b 3f e0 	movh	r11,0x3fe0
80006f02:	e0 a0 10 71 	rcall	80008fe4 <__avr32_f64_sub>
80006f06:	14 98       	mov	r8,r10
80006f08:	16 99       	mov	r9,r11
80006f0a:	fa ea 00 08 	ld.d	r10,sp[8]
80006f0e:	e0 a0 12 91 	rcall	80009430 <__avr32_f64_cmp_lt>
80006f12:	c1 30       	breq	80006f38 <_dtoa_r+0x62c>
80006f14:	33 09       	mov	r9,48
80006f16:	0a 98       	mov	r8,r5
80006f18:	11 7a       	ld.ub	r10,--r8
80006f1a:	f2 0a 18 00 	cp.b	r10,r9
80006f1e:	e0 81 02 d1 	brne	800074c0 <_dtoa_r+0xbb4>
80006f22:	10 95       	mov	r5,r8
80006f24:	cf 9b       	rjmp	80006f16 <_dtoa_r+0x60a>
80006f26:	d7 03       	nop
80006f28:	30 08       	mov	r8,0
80006f2a:	fc 19 40 24 	movh	r9,0x4024
80006f2e:	e0 a0 0f 6f 	rcall	80008e0c <__avr32_f64_mul>
80006f32:	fa eb 00 08 	st.d	sp[8],r10
80006f36:	cb db       	rjmp	80006eb0 <_dtoa_r+0x5a4>
80006f38:	fa ea 00 3c 	ld.d	r10,sp[60]
80006f3c:	fa eb 00 08 	st.d	sp[8],r10
80006f40:	58 e6       	cp.w	r6,14
80006f42:	5f ab       	srle	r11
80006f44:	41 8a       	lddsp	r10,sp[0x60]
80006f46:	30 08       	mov	r8,0
80006f48:	f4 09 11 ff 	rsub	r9,r10,-1
80006f4c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006f50:	f0 09 18 00 	cp.b	r9,r8
80006f54:	e0 80 00 82 	breq	80007058 <_dtoa_r+0x74c>
80006f58:	40 ea       	lddsp	r10,sp[0x38]
80006f5a:	58 01       	cp.w	r1,0
80006f5c:	5f a9       	srle	r9
80006f5e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006f62:	fe ca cd 7a 	sub	r10,pc,-12934
80006f66:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006f6a:	fa e5 00 10 	st.d	sp[16],r4
80006f6e:	f0 09 18 00 	cp.b	r9,r8
80006f72:	c1 40       	breq	80006f9a <_dtoa_r+0x68e>
80006f74:	58 01       	cp.w	r1,0
80006f76:	e0 81 01 77 	brne	80007264 <_dtoa_r+0x958>
80006f7a:	30 08       	mov	r8,0
80006f7c:	fc 19 40 14 	movh	r9,0x4014
80006f80:	08 9a       	mov	r10,r4
80006f82:	0a 9b       	mov	r11,r5
80006f84:	e0 a0 0f 44 	rcall	80008e0c <__avr32_f64_mul>
80006f88:	fa e8 00 08 	ld.d	r8,sp[8]
80006f8c:	e0 a0 12 1e 	rcall	800093c8 <__avr32_f64_cmp_ge>
80006f90:	e0 81 01 6a 	brne	80007264 <_dtoa_r+0x958>
80006f94:	02 92       	mov	r2,r1
80006f96:	e0 8f 01 72 	bral	8000727a <_dtoa_r+0x96e>
80006f9a:	40 85       	lddsp	r5,sp[0x20]
80006f9c:	30 14       	mov	r4,1
80006f9e:	fa e8 00 10 	ld.d	r8,sp[16]
80006fa2:	fa ea 00 08 	ld.d	r10,sp[8]
80006fa6:	e0 a0 12 79 	rcall	80009498 <__avr32_f64_div>
80006faa:	e0 a0 11 75 	rcall	80009294 <__avr32_f64_to_s32>
80006fae:	18 92       	mov	r2,r12
80006fb0:	e0 a0 11 89 	rcall	800092c2 <__avr32_s32_to_f64>
80006fb4:	fa e8 00 10 	ld.d	r8,sp[16]
80006fb8:	e0 a0 0f 2a 	rcall	80008e0c <__avr32_f64_mul>
80006fbc:	14 98       	mov	r8,r10
80006fbe:	16 99       	mov	r9,r11
80006fc0:	fa ea 00 08 	ld.d	r10,sp[8]
80006fc4:	e0 a0 10 10 	rcall	80008fe4 <__avr32_f64_sub>
80006fc8:	fa eb 00 08 	st.d	sp[8],r10
80006fcc:	e4 c8 ff d0 	sub	r8,r2,-48
80006fd0:	0a c8       	st.b	r5++,r8
80006fd2:	fc 19 40 24 	movh	r9,0x4024
80006fd6:	30 08       	mov	r8,0
80006fd8:	02 34       	cp.w	r4,r1
80006fda:	c3 31       	brne	80007040 <_dtoa_r+0x734>
80006fdc:	fa e8 00 08 	ld.d	r8,sp[8]
80006fe0:	e0 a0 10 d0 	rcall	80009180 <__avr32_f64_add>
80006fe4:	16 91       	mov	r1,r11
80006fe6:	14 90       	mov	r0,r10
80006fe8:	14 98       	mov	r8,r10
80006fea:	02 99       	mov	r9,r1
80006fec:	fa ea 00 10 	ld.d	r10,sp[16]
80006ff0:	e0 a0 12 20 	rcall	80009430 <__avr32_f64_cmp_lt>
80006ff4:	c1 a1       	brne	80007028 <_dtoa_r+0x71c>
80006ff6:	fa e8 00 10 	ld.d	r8,sp[16]
80006ffa:	00 9a       	mov	r10,r0
80006ffc:	02 9b       	mov	r11,r1
80006ffe:	e0 a0 11 d2 	rcall	800093a2 <__avr32_f64_cmp_eq>
80007002:	e0 80 02 5e 	breq	800074be <_dtoa_r+0xbb2>
80007006:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000700a:	c0 f1       	brne	80007028 <_dtoa_r+0x71c>
8000700c:	e0 8f 02 59 	bral	800074be <_dtoa_r+0xbb2>
80007010:	40 8a       	lddsp	r10,sp[0x20]
80007012:	14 38       	cp.w	r8,r10
80007014:	c0 30       	breq	8000701a <_dtoa_r+0x70e>
80007016:	10 95       	mov	r5,r8
80007018:	c0 98       	rjmp	8000702a <_dtoa_r+0x71e>
8000701a:	33 08       	mov	r8,48
8000701c:	40 89       	lddsp	r9,sp[0x20]
8000701e:	2f f6       	sub	r6,-1
80007020:	b2 88       	st.b	r9[0x0],r8
80007022:	40 88       	lddsp	r8,sp[0x20]
80007024:	c0 88       	rjmp	80007034 <_dtoa_r+0x728>
80007026:	40 66       	lddsp	r6,sp[0x18]
80007028:	33 99       	mov	r9,57
8000702a:	0a 98       	mov	r8,r5
8000702c:	11 7a       	ld.ub	r10,--r8
8000702e:	f2 0a 18 00 	cp.b	r10,r9
80007032:	ce f0       	breq	80007010 <_dtoa_r+0x704>
80007034:	50 66       	stdsp	sp[0x18],r6
80007036:	11 89       	ld.ub	r9,r8[0x0]
80007038:	2f f9       	sub	r9,-1
8000703a:	b0 89       	st.b	r8[0x0],r9
8000703c:	e0 8f 02 42 	bral	800074c0 <_dtoa_r+0xbb4>
80007040:	e0 a0 0e e6 	rcall	80008e0c <__avr32_f64_mul>
80007044:	2f f4       	sub	r4,-1
80007046:	fa eb 00 08 	st.d	sp[8],r10
8000704a:	30 08       	mov	r8,0
8000704c:	30 09       	mov	r9,0
8000704e:	e0 a0 11 aa 	rcall	800093a2 <__avr32_f64_cmp_eq>
80007052:	ca 60       	breq	80006f9e <_dtoa_r+0x692>
80007054:	e0 8f 02 35 	bral	800074be <_dtoa_r+0xbb2>
80007058:	40 d8       	lddsp	r8,sp[0x34]
8000705a:	58 08       	cp.w	r8,0
8000705c:	c0 51       	brne	80007066 <_dtoa_r+0x75a>
8000705e:	04 98       	mov	r8,r2
80007060:	00 95       	mov	r5,r0
80007062:	40 d4       	lddsp	r4,sp[0x34]
80007064:	c3 78       	rjmp	800070d2 <_dtoa_r+0x7c6>
80007066:	40 c5       	lddsp	r5,sp[0x30]
80007068:	58 15       	cp.w	r5,1
8000706a:	e0 89 00 0f 	brgt	80007088 <_dtoa_r+0x77c>
8000706e:	41 74       	lddsp	r4,sp[0x5c]
80007070:	58 04       	cp.w	r4,0
80007072:	c0 40       	breq	8000707a <_dtoa_r+0x76e>
80007074:	f4 c9 fb cd 	sub	r9,r10,-1075
80007078:	c0 48       	rjmp	80007080 <_dtoa_r+0x774>
8000707a:	41 99       	lddsp	r9,sp[0x64]
8000707c:	f2 09 11 36 	rsub	r9,r9,54
80007080:	04 98       	mov	r8,r2
80007082:	00 95       	mov	r5,r0
80007084:	c1 c8       	rjmp	800070bc <_dtoa_r+0x7b0>
80007086:	d7 03       	nop
80007088:	e2 c8 00 01 	sub	r8,r1,1
8000708c:	58 01       	cp.w	r1,0
8000708e:	e0 05 17 40 	movge	r5,r0
80007092:	e2 09 17 40 	movge	r9,r1
80007096:	e1 d1 e5 15 	sublt	r5,r0,r1
8000709a:	f9 b9 05 00 	movlt	r9,0
8000709e:	10 32       	cp.w	r2,r8
800070a0:	e5 d8 e4 18 	subge	r8,r2,r8
800070a4:	f1 d2 e5 18 	sublt	r8,r8,r2
800070a8:	e5 d8 e5 02 	addlt	r2,r2,r8
800070ac:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800070b0:	f9 d8 e5 0c 	addlt	r12,r12,r8
800070b4:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800070b8:	f9 b8 05 00 	movlt	r8,0
800070bc:	40 4b       	lddsp	r11,sp[0x10]
800070be:	12 0b       	add	r11,r9
800070c0:	50 08       	stdsp	sp[0x0],r8
800070c2:	50 4b       	stdsp	sp[0x10],r11
800070c4:	12 00       	add	r0,r9
800070c6:	30 1b       	mov	r11,1
800070c8:	0e 9c       	mov	r12,r7
800070ca:	e0 a0 0a d1 	rcall	8000866c <__i2b>
800070ce:	40 08       	lddsp	r8,sp[0x0]
800070d0:	18 94       	mov	r4,r12
800070d2:	40 4a       	lddsp	r10,sp[0x10]
800070d4:	58 05       	cp.w	r5,0
800070d6:	5f 99       	srgt	r9
800070d8:	58 0a       	cp.w	r10,0
800070da:	5f 9a       	srgt	r10
800070dc:	f5 e9 00 09 	and	r9,r10,r9
800070e0:	c0 80       	breq	800070f0 <_dtoa_r+0x7e4>
800070e2:	40 4c       	lddsp	r12,sp[0x10]
800070e4:	f8 05 0d 49 	min	r9,r12,r5
800070e8:	12 1c       	sub	r12,r9
800070ea:	12 10       	sub	r0,r9
800070ec:	50 4c       	stdsp	sp[0x10],r12
800070ee:	12 15       	sub	r5,r9
800070f0:	58 02       	cp.w	r2,0
800070f2:	e0 8a 00 27 	brle	80007140 <_dtoa_r+0x834>
800070f6:	40 db       	lddsp	r11,sp[0x34]
800070f8:	58 0b       	cp.w	r11,0
800070fa:	c1 d0       	breq	80007134 <_dtoa_r+0x828>
800070fc:	58 08       	cp.w	r8,0
800070fe:	e0 8a 00 17 	brle	8000712c <_dtoa_r+0x820>
80007102:	10 9a       	mov	r10,r8
80007104:	50 08       	stdsp	sp[0x0],r8
80007106:	08 9b       	mov	r11,r4
80007108:	0e 9c       	mov	r12,r7
8000710a:	e0 a0 0a f7 	rcall	800086f8 <__pow5mult>
8000710e:	06 9a       	mov	r10,r3
80007110:	18 9b       	mov	r11,r12
80007112:	18 94       	mov	r4,r12
80007114:	0e 9c       	mov	r12,r7
80007116:	e0 a0 0a 2b 	rcall	8000856c <__multiply>
8000711a:	18 99       	mov	r9,r12
8000711c:	06 9b       	mov	r11,r3
8000711e:	50 19       	stdsp	sp[0x4],r9
80007120:	0e 9c       	mov	r12,r7
80007122:	e0 a0 08 d7 	rcall	800082d0 <_Bfree>
80007126:	40 19       	lddsp	r9,sp[0x4]
80007128:	40 08       	lddsp	r8,sp[0x0]
8000712a:	12 93       	mov	r3,r9
8000712c:	e4 08 01 0a 	sub	r10,r2,r8
80007130:	c0 80       	breq	80007140 <_dtoa_r+0x834>
80007132:	c0 28       	rjmp	80007136 <_dtoa_r+0x82a>
80007134:	04 9a       	mov	r10,r2
80007136:	06 9b       	mov	r11,r3
80007138:	0e 9c       	mov	r12,r7
8000713a:	e0 a0 0a df 	rcall	800086f8 <__pow5mult>
8000713e:	18 93       	mov	r3,r12
80007140:	30 1b       	mov	r11,1
80007142:	0e 9c       	mov	r12,r7
80007144:	e0 a0 0a 94 	rcall	8000866c <__i2b>
80007148:	41 1a       	lddsp	r10,sp[0x44]
8000714a:	18 92       	mov	r2,r12
8000714c:	58 0a       	cp.w	r10,0
8000714e:	e0 8a 00 07 	brle	8000715c <_dtoa_r+0x850>
80007152:	18 9b       	mov	r11,r12
80007154:	0e 9c       	mov	r12,r7
80007156:	e0 a0 0a d1 	rcall	800086f8 <__pow5mult>
8000715a:	18 92       	mov	r2,r12
8000715c:	40 c9       	lddsp	r9,sp[0x30]
8000715e:	58 19       	cp.w	r9,1
80007160:	e0 89 00 14 	brgt	80007188 <_dtoa_r+0x87c>
80007164:	40 38       	lddsp	r8,sp[0xc]
80007166:	58 08       	cp.w	r8,0
80007168:	c1 01       	brne	80007188 <_dtoa_r+0x87c>
8000716a:	40 29       	lddsp	r9,sp[0x8]
8000716c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80007170:	c0 c1       	brne	80007188 <_dtoa_r+0x87c>
80007172:	12 98       	mov	r8,r9
80007174:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80007178:	c0 80       	breq	80007188 <_dtoa_r+0x87c>
8000717a:	40 4c       	lddsp	r12,sp[0x10]
8000717c:	30 1b       	mov	r11,1
8000717e:	2f fc       	sub	r12,-1
80007180:	2f f0       	sub	r0,-1
80007182:	50 4c       	stdsp	sp[0x10],r12
80007184:	50 6b       	stdsp	sp[0x18],r11
80007186:	c0 38       	rjmp	8000718c <_dtoa_r+0x880>
80007188:	30 0a       	mov	r10,0
8000718a:	50 6a       	stdsp	sp[0x18],r10
8000718c:	41 19       	lddsp	r9,sp[0x44]
8000718e:	58 09       	cp.w	r9,0
80007190:	c0 31       	brne	80007196 <_dtoa_r+0x88a>
80007192:	30 1c       	mov	r12,1
80007194:	c0 98       	rjmp	800071a6 <_dtoa_r+0x89a>
80007196:	64 48       	ld.w	r8,r2[0x10]
80007198:	2f c8       	sub	r8,-4
8000719a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000719e:	e0 a0 08 08 	rcall	800081ae <__hi0bits>
800071a2:	f8 0c 11 20 	rsub	r12,r12,32
800071a6:	40 4b       	lddsp	r11,sp[0x10]
800071a8:	f8 0b 00 08 	add	r8,r12,r11
800071ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800071b0:	c0 c0       	breq	800071c8 <_dtoa_r+0x8bc>
800071b2:	f0 08 11 20 	rsub	r8,r8,32
800071b6:	58 48       	cp.w	r8,4
800071b8:	e0 8a 00 06 	brle	800071c4 <_dtoa_r+0x8b8>
800071bc:	20 48       	sub	r8,4
800071be:	10 0b       	add	r11,r8
800071c0:	50 4b       	stdsp	sp[0x10],r11
800071c2:	c0 78       	rjmp	800071d0 <_dtoa_r+0x8c4>
800071c4:	58 48       	cp.w	r8,4
800071c6:	c0 70       	breq	800071d4 <_dtoa_r+0x8c8>
800071c8:	40 4a       	lddsp	r10,sp[0x10]
800071ca:	2e 48       	sub	r8,-28
800071cc:	10 0a       	add	r10,r8
800071ce:	50 4a       	stdsp	sp[0x10],r10
800071d0:	10 00       	add	r0,r8
800071d2:	10 05       	add	r5,r8
800071d4:	58 00       	cp.w	r0,0
800071d6:	e0 8a 00 08 	brle	800071e6 <_dtoa_r+0x8da>
800071da:	06 9b       	mov	r11,r3
800071dc:	00 9a       	mov	r10,r0
800071de:	0e 9c       	mov	r12,r7
800071e0:	e0 a0 09 82 	rcall	800084e4 <__lshift>
800071e4:	18 93       	mov	r3,r12
800071e6:	40 49       	lddsp	r9,sp[0x10]
800071e8:	58 09       	cp.w	r9,0
800071ea:	e0 8a 00 08 	brle	800071fa <_dtoa_r+0x8ee>
800071ee:	04 9b       	mov	r11,r2
800071f0:	12 9a       	mov	r10,r9
800071f2:	0e 9c       	mov	r12,r7
800071f4:	e0 a0 09 78 	rcall	800084e4 <__lshift>
800071f8:	18 92       	mov	r2,r12
800071fa:	41 48       	lddsp	r8,sp[0x50]
800071fc:	58 08       	cp.w	r8,0
800071fe:	c1 b0       	breq	80007234 <_dtoa_r+0x928>
80007200:	04 9b       	mov	r11,r2
80007202:	06 9c       	mov	r12,r3
80007204:	e0 a0 08 4c 	rcall	8000829c <__mcmp>
80007208:	c1 64       	brge	80007234 <_dtoa_r+0x928>
8000720a:	06 9b       	mov	r11,r3
8000720c:	30 09       	mov	r9,0
8000720e:	30 aa       	mov	r10,10
80007210:	0e 9c       	mov	r12,r7
80007212:	e0 a0 0a 35 	rcall	8000867c <__multadd>
80007216:	20 16       	sub	r6,1
80007218:	18 93       	mov	r3,r12
8000721a:	40 dc       	lddsp	r12,sp[0x34]
8000721c:	58 0c       	cp.w	r12,0
8000721e:	c0 31       	brne	80007224 <_dtoa_r+0x918>
80007220:	40 91       	lddsp	r1,sp[0x24]
80007222:	c0 98       	rjmp	80007234 <_dtoa_r+0x928>
80007224:	08 9b       	mov	r11,r4
80007226:	40 91       	lddsp	r1,sp[0x24]
80007228:	30 09       	mov	r9,0
8000722a:	30 aa       	mov	r10,10
8000722c:	0e 9c       	mov	r12,r7
8000722e:	e0 a0 0a 27 	rcall	8000867c <__multadd>
80007232:	18 94       	mov	r4,r12
80007234:	58 01       	cp.w	r1,0
80007236:	5f a9       	srle	r9
80007238:	40 cb       	lddsp	r11,sp[0x30]
8000723a:	58 2b       	cp.w	r11,2
8000723c:	5f 98       	srgt	r8
8000723e:	f3 e8 00 08 	and	r8,r9,r8
80007242:	c2 50       	breq	8000728c <_dtoa_r+0x980>
80007244:	58 01       	cp.w	r1,0
80007246:	c1 11       	brne	80007268 <_dtoa_r+0x95c>
80007248:	04 9b       	mov	r11,r2
8000724a:	02 99       	mov	r9,r1
8000724c:	30 5a       	mov	r10,5
8000724e:	0e 9c       	mov	r12,r7
80007250:	e0 a0 0a 16 	rcall	8000867c <__multadd>
80007254:	18 92       	mov	r2,r12
80007256:	18 9b       	mov	r11,r12
80007258:	06 9c       	mov	r12,r3
8000725a:	e0 a0 08 21 	rcall	8000829c <__mcmp>
8000725e:	e0 89 00 0f 	brgt	8000727c <_dtoa_r+0x970>
80007262:	c0 38       	rjmp	80007268 <_dtoa_r+0x95c>
80007264:	30 02       	mov	r2,0
80007266:	04 94       	mov	r4,r2
80007268:	40 ea       	lddsp	r10,sp[0x38]
8000726a:	30 09       	mov	r9,0
8000726c:	5c da       	com	r10
8000726e:	40 85       	lddsp	r5,sp[0x20]
80007270:	50 6a       	stdsp	sp[0x18],r10
80007272:	50 49       	stdsp	sp[0x10],r9
80007274:	c0 f9       	rjmp	80007492 <_dtoa_r+0xb86>
80007276:	08 92       	mov	r2,r4
80007278:	40 66       	lddsp	r6,sp[0x18]
8000727a:	04 94       	mov	r4,r2
8000727c:	2f f6       	sub	r6,-1
8000727e:	50 66       	stdsp	sp[0x18],r6
80007280:	33 18       	mov	r8,49
80007282:	40 85       	lddsp	r5,sp[0x20]
80007284:	0a c8       	st.b	r5++,r8
80007286:	30 08       	mov	r8,0
80007288:	50 48       	stdsp	sp[0x10],r8
8000728a:	c0 49       	rjmp	80007492 <_dtoa_r+0xb86>
8000728c:	40 dc       	lddsp	r12,sp[0x34]
8000728e:	58 0c       	cp.w	r12,0
80007290:	e0 80 00 b5 	breq	800073fa <_dtoa_r+0xaee>
80007294:	58 05       	cp.w	r5,0
80007296:	e0 8a 00 08 	brle	800072a6 <_dtoa_r+0x99a>
8000729a:	08 9b       	mov	r11,r4
8000729c:	0a 9a       	mov	r10,r5
8000729e:	0e 9c       	mov	r12,r7
800072a0:	e0 a0 09 22 	rcall	800084e4 <__lshift>
800072a4:	18 94       	mov	r4,r12
800072a6:	40 6b       	lddsp	r11,sp[0x18]
800072a8:	58 0b       	cp.w	r11,0
800072aa:	c0 31       	brne	800072b0 <_dtoa_r+0x9a4>
800072ac:	08 9c       	mov	r12,r4
800072ae:	c1 38       	rjmp	800072d4 <_dtoa_r+0x9c8>
800072b0:	68 1b       	ld.w	r11,r4[0x4]
800072b2:	0e 9c       	mov	r12,r7
800072b4:	e0 a0 08 28 	rcall	80008304 <_Balloc>
800072b8:	68 4a       	ld.w	r10,r4[0x10]
800072ba:	18 95       	mov	r5,r12
800072bc:	e8 cb ff f4 	sub	r11,r4,-12
800072c0:	2f ea       	sub	r10,-2
800072c2:	2f 4c       	sub	r12,-12
800072c4:	a3 6a       	lsl	r10,0x2
800072c6:	fe b0 e8 3f 	rcall	80004344 <memcpy>
800072ca:	0a 9b       	mov	r11,r5
800072cc:	30 1a       	mov	r10,1
800072ce:	0e 9c       	mov	r12,r7
800072d0:	e0 a0 09 0a 	rcall	800084e4 <__lshift>
800072d4:	50 44       	stdsp	sp[0x10],r4
800072d6:	40 3a       	lddsp	r10,sp[0xc]
800072d8:	30 19       	mov	r9,1
800072da:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800072de:	18 94       	mov	r4,r12
800072e0:	50 da       	stdsp	sp[0x34],r10
800072e2:	40 85       	lddsp	r5,sp[0x20]
800072e4:	50 99       	stdsp	sp[0x24],r9
800072e6:	50 26       	stdsp	sp[0x8],r6
800072e8:	50 e1       	stdsp	sp[0x38],r1
800072ea:	04 9b       	mov	r11,r2
800072ec:	06 9c       	mov	r12,r3
800072ee:	fe b0 fa 7f 	rcall	800067ec <quorem>
800072f2:	40 4b       	lddsp	r11,sp[0x10]
800072f4:	f8 c0 ff d0 	sub	r0,r12,-48
800072f8:	06 9c       	mov	r12,r3
800072fa:	e0 a0 07 d1 	rcall	8000829c <__mcmp>
800072fe:	08 9a       	mov	r10,r4
80007300:	50 6c       	stdsp	sp[0x18],r12
80007302:	04 9b       	mov	r11,r2
80007304:	0e 9c       	mov	r12,r7
80007306:	e0 a0 08 87 	rcall	80008414 <__mdiff>
8000730a:	18 91       	mov	r1,r12
8000730c:	78 38       	ld.w	r8,r12[0xc]
8000730e:	58 08       	cp.w	r8,0
80007310:	c0 30       	breq	80007316 <_dtoa_r+0xa0a>
80007312:	30 16       	mov	r6,1
80007314:	c0 68       	rjmp	80007320 <_dtoa_r+0xa14>
80007316:	18 9b       	mov	r11,r12
80007318:	06 9c       	mov	r12,r3
8000731a:	e0 a0 07 c1 	rcall	8000829c <__mcmp>
8000731e:	18 96       	mov	r6,r12
80007320:	0e 9c       	mov	r12,r7
80007322:	02 9b       	mov	r11,r1
80007324:	e0 a0 07 d6 	rcall	800082d0 <_Bfree>
80007328:	40 cc       	lddsp	r12,sp[0x30]
8000732a:	ed ec 10 08 	or	r8,r6,r12
8000732e:	c0 d1       	brne	80007348 <_dtoa_r+0xa3c>
80007330:	40 db       	lddsp	r11,sp[0x34]
80007332:	58 0b       	cp.w	r11,0
80007334:	c0 a1       	brne	80007348 <_dtoa_r+0xa3c>
80007336:	40 26       	lddsp	r6,sp[0x8]
80007338:	e0 40 00 39 	cp.w	r0,57
8000733c:	c3 00       	breq	8000739c <_dtoa_r+0xa90>
8000733e:	40 6a       	lddsp	r10,sp[0x18]
80007340:	58 0a       	cp.w	r10,0
80007342:	e0 89 00 24 	brgt	8000738a <_dtoa_r+0xa7e>
80007346:	c2 f8       	rjmp	800073a4 <_dtoa_r+0xa98>
80007348:	40 69       	lddsp	r9,sp[0x18]
8000734a:	58 09       	cp.w	r9,0
8000734c:	c0 85       	brlt	8000735c <_dtoa_r+0xa50>
8000734e:	12 98       	mov	r8,r9
80007350:	40 cc       	lddsp	r12,sp[0x30]
80007352:	18 48       	or	r8,r12
80007354:	c1 d1       	brne	8000738e <_dtoa_r+0xa82>
80007356:	40 db       	lddsp	r11,sp[0x34]
80007358:	58 0b       	cp.w	r11,0
8000735a:	c1 a1       	brne	8000738e <_dtoa_r+0xa82>
8000735c:	0c 99       	mov	r9,r6
8000735e:	40 26       	lddsp	r6,sp[0x8]
80007360:	58 09       	cp.w	r9,0
80007362:	e0 8a 00 21 	brle	800073a4 <_dtoa_r+0xa98>
80007366:	06 9b       	mov	r11,r3
80007368:	30 1a       	mov	r10,1
8000736a:	0e 9c       	mov	r12,r7
8000736c:	e0 a0 08 bc 	rcall	800084e4 <__lshift>
80007370:	04 9b       	mov	r11,r2
80007372:	18 93       	mov	r3,r12
80007374:	e0 a0 07 94 	rcall	8000829c <__mcmp>
80007378:	e0 89 00 06 	brgt	80007384 <_dtoa_r+0xa78>
8000737c:	c1 41       	brne	800073a4 <_dtoa_r+0xa98>
8000737e:	ed b0 00 00 	bld	r0,0x0
80007382:	c1 11       	brne	800073a4 <_dtoa_r+0xa98>
80007384:	e0 40 00 39 	cp.w	r0,57
80007388:	c0 a0       	breq	8000739c <_dtoa_r+0xa90>
8000738a:	2f f0       	sub	r0,-1
8000738c:	c0 c8       	rjmp	800073a4 <_dtoa_r+0xa98>
8000738e:	58 06       	cp.w	r6,0
80007390:	e0 8a 00 0c 	brle	800073a8 <_dtoa_r+0xa9c>
80007394:	40 26       	lddsp	r6,sp[0x8]
80007396:	e0 40 00 39 	cp.w	r0,57
8000739a:	c0 41       	brne	800073a2 <_dtoa_r+0xa96>
8000739c:	33 98       	mov	r8,57
8000739e:	0a c8       	st.b	r5++,r8
800073a0:	c6 78       	rjmp	8000746e <_dtoa_r+0xb62>
800073a2:	2f f0       	sub	r0,-1
800073a4:	0a c0       	st.b	r5++,r0
800073a6:	c7 58       	rjmp	80007490 <_dtoa_r+0xb84>
800073a8:	0a c0       	st.b	r5++,r0
800073aa:	40 9a       	lddsp	r10,sp[0x24]
800073ac:	40 e9       	lddsp	r9,sp[0x38]
800073ae:	12 3a       	cp.w	r10,r9
800073b0:	c4 30       	breq	80007436 <_dtoa_r+0xb2a>
800073b2:	06 9b       	mov	r11,r3
800073b4:	30 09       	mov	r9,0
800073b6:	30 aa       	mov	r10,10
800073b8:	0e 9c       	mov	r12,r7
800073ba:	e0 a0 09 61 	rcall	8000867c <__multadd>
800073be:	40 48       	lddsp	r8,sp[0x10]
800073c0:	18 93       	mov	r3,r12
800073c2:	08 38       	cp.w	r8,r4
800073c4:	c0 91       	brne	800073d6 <_dtoa_r+0xaca>
800073c6:	10 9b       	mov	r11,r8
800073c8:	30 09       	mov	r9,0
800073ca:	30 aa       	mov	r10,10
800073cc:	0e 9c       	mov	r12,r7
800073ce:	e0 a0 09 57 	rcall	8000867c <__multadd>
800073d2:	50 4c       	stdsp	sp[0x10],r12
800073d4:	c0 e8       	rjmp	800073f0 <_dtoa_r+0xae4>
800073d6:	40 4b       	lddsp	r11,sp[0x10]
800073d8:	30 09       	mov	r9,0
800073da:	30 aa       	mov	r10,10
800073dc:	0e 9c       	mov	r12,r7
800073de:	e0 a0 09 4f 	rcall	8000867c <__multadd>
800073e2:	08 9b       	mov	r11,r4
800073e4:	50 4c       	stdsp	sp[0x10],r12
800073e6:	30 09       	mov	r9,0
800073e8:	30 aa       	mov	r10,10
800073ea:	0e 9c       	mov	r12,r7
800073ec:	e0 a0 09 48 	rcall	8000867c <__multadd>
800073f0:	18 94       	mov	r4,r12
800073f2:	40 9c       	lddsp	r12,sp[0x24]
800073f4:	2f fc       	sub	r12,-1
800073f6:	50 9c       	stdsp	sp[0x24],r12
800073f8:	c7 9b       	rjmp	800072ea <_dtoa_r+0x9de>
800073fa:	30 18       	mov	r8,1
800073fc:	06 90       	mov	r0,r3
800073fe:	40 85       	lddsp	r5,sp[0x20]
80007400:	08 93       	mov	r3,r4
80007402:	0c 94       	mov	r4,r6
80007404:	10 96       	mov	r6,r8
80007406:	04 9b       	mov	r11,r2
80007408:	00 9c       	mov	r12,r0
8000740a:	fe b0 f9 f1 	rcall	800067ec <quorem>
8000740e:	2d 0c       	sub	r12,-48
80007410:	0a cc       	st.b	r5++,r12
80007412:	02 36       	cp.w	r6,r1
80007414:	c0 a4       	brge	80007428 <_dtoa_r+0xb1c>
80007416:	00 9b       	mov	r11,r0
80007418:	30 09       	mov	r9,0
8000741a:	30 aa       	mov	r10,10
8000741c:	0e 9c       	mov	r12,r7
8000741e:	2f f6       	sub	r6,-1
80007420:	e0 a0 09 2e 	rcall	8000867c <__multadd>
80007424:	18 90       	mov	r0,r12
80007426:	cf 0b       	rjmp	80007406 <_dtoa_r+0xafa>
80007428:	08 96       	mov	r6,r4
8000742a:	30 0b       	mov	r11,0
8000742c:	06 94       	mov	r4,r3
8000742e:	50 4b       	stdsp	sp[0x10],r11
80007430:	00 93       	mov	r3,r0
80007432:	18 90       	mov	r0,r12
80007434:	c0 28       	rjmp	80007438 <_dtoa_r+0xb2c>
80007436:	40 26       	lddsp	r6,sp[0x8]
80007438:	06 9b       	mov	r11,r3
8000743a:	30 1a       	mov	r10,1
8000743c:	0e 9c       	mov	r12,r7
8000743e:	e0 a0 08 53 	rcall	800084e4 <__lshift>
80007442:	04 9b       	mov	r11,r2
80007444:	18 93       	mov	r3,r12
80007446:	e0 a0 07 2b 	rcall	8000829c <__mcmp>
8000744a:	e0 89 00 12 	brgt	8000746e <_dtoa_r+0xb62>
8000744e:	c1 b1       	brne	80007484 <_dtoa_r+0xb78>
80007450:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80007454:	c0 d1       	brne	8000746e <_dtoa_r+0xb62>
80007456:	c1 78       	rjmp	80007484 <_dtoa_r+0xb78>
80007458:	40 89       	lddsp	r9,sp[0x20]
8000745a:	12 38       	cp.w	r8,r9
8000745c:	c0 30       	breq	80007462 <_dtoa_r+0xb56>
8000745e:	10 95       	mov	r5,r8
80007460:	c0 88       	rjmp	80007470 <_dtoa_r+0xb64>
80007462:	2f f6       	sub	r6,-1
80007464:	50 66       	stdsp	sp[0x18],r6
80007466:	33 18       	mov	r8,49
80007468:	40 8c       	lddsp	r12,sp[0x20]
8000746a:	b8 88       	st.b	r12[0x0],r8
8000746c:	c1 38       	rjmp	80007492 <_dtoa_r+0xb86>
8000746e:	33 9a       	mov	r10,57
80007470:	0a 98       	mov	r8,r5
80007472:	11 79       	ld.ub	r9,--r8
80007474:	f4 09 18 00 	cp.b	r9,r10
80007478:	cf 00       	breq	80007458 <_dtoa_r+0xb4c>
8000747a:	2f f9       	sub	r9,-1
8000747c:	b0 89       	st.b	r8[0x0],r9
8000747e:	c0 98       	rjmp	80007490 <_dtoa_r+0xb84>
80007480:	10 95       	mov	r5,r8
80007482:	c0 28       	rjmp	80007486 <_dtoa_r+0xb7a>
80007484:	33 09       	mov	r9,48
80007486:	0a 98       	mov	r8,r5
80007488:	11 7a       	ld.ub	r10,--r8
8000748a:	f2 0a 18 00 	cp.b	r10,r9
8000748e:	cf 90       	breq	80007480 <_dtoa_r+0xb74>
80007490:	50 66       	stdsp	sp[0x18],r6
80007492:	04 9b       	mov	r11,r2
80007494:	0e 9c       	mov	r12,r7
80007496:	e0 a0 07 1d 	rcall	800082d0 <_Bfree>
8000749a:	58 04       	cp.w	r4,0
8000749c:	c1 20       	breq	800074c0 <_dtoa_r+0xbb4>
8000749e:	40 4b       	lddsp	r11,sp[0x10]
800074a0:	08 3b       	cp.w	r11,r4
800074a2:	5f 19       	srne	r9
800074a4:	58 0b       	cp.w	r11,0
800074a6:	5f 18       	srne	r8
800074a8:	f3 e8 00 08 	and	r8,r9,r8
800074ac:	c0 40       	breq	800074b4 <_dtoa_r+0xba8>
800074ae:	0e 9c       	mov	r12,r7
800074b0:	e0 a0 07 10 	rcall	800082d0 <_Bfree>
800074b4:	08 9b       	mov	r11,r4
800074b6:	0e 9c       	mov	r12,r7
800074b8:	e0 a0 07 0c 	rcall	800082d0 <_Bfree>
800074bc:	c0 28       	rjmp	800074c0 <_dtoa_r+0xbb4>
800074be:	50 66       	stdsp	sp[0x18],r6
800074c0:	0e 9c       	mov	r12,r7
800074c2:	06 9b       	mov	r11,r3
800074c4:	e0 a0 07 06 	rcall	800082d0 <_Bfree>
800074c8:	30 08       	mov	r8,0
800074ca:	aa 88       	st.b	r5[0x0],r8
800074cc:	40 68       	lddsp	r8,sp[0x18]
800074ce:	41 5a       	lddsp	r10,sp[0x54]
800074d0:	2f f8       	sub	r8,-1
800074d2:	41 29       	lddsp	r9,sp[0x48]
800074d4:	95 08       	st.w	r10[0x0],r8
800074d6:	40 8c       	lddsp	r12,sp[0x20]
800074d8:	58 09       	cp.w	r9,0
800074da:	fb f8 10 12 	ld.wne	r8,sp[0x48]
800074de:	f1 f5 1a 00 	st.wne	r8[0x0],r5
800074e2:	2e 6d       	sub	sp,-104
800074e4:	d8 32       	popm	r0-r7,pc
800074e6:	d7 03       	nop

800074e8 <_fflush_r>:
800074e8:	d4 21       	pushm	r4-r7,lr
800074ea:	16 97       	mov	r7,r11
800074ec:	18 96       	mov	r6,r12
800074ee:	76 48       	ld.w	r8,r11[0x10]
800074f0:	58 08       	cp.w	r8,0
800074f2:	c7 f0       	breq	800075f0 <_fflush_r+0x108>
800074f4:	58 0c       	cp.w	r12,0
800074f6:	c0 50       	breq	80007500 <_fflush_r+0x18>
800074f8:	78 68       	ld.w	r8,r12[0x18]
800074fa:	58 08       	cp.w	r8,0
800074fc:	c0 21       	brne	80007500 <_fflush_r+0x18>
800074fe:	cc dc       	rcall	80007698 <__sinit>
80007500:	fe c8 d3 c4 	sub	r8,pc,-11324
80007504:	10 37       	cp.w	r7,r8
80007506:	c0 31       	brne	8000750c <_fflush_r+0x24>
80007508:	6c 07       	ld.w	r7,r6[0x0]
8000750a:	c0 c8       	rjmp	80007522 <_fflush_r+0x3a>
8000750c:	fe c8 d3 b0 	sub	r8,pc,-11344
80007510:	10 37       	cp.w	r7,r8
80007512:	c0 31       	brne	80007518 <_fflush_r+0x30>
80007514:	6c 17       	ld.w	r7,r6[0x4]
80007516:	c0 68       	rjmp	80007522 <_fflush_r+0x3a>
80007518:	fe c8 d3 9c 	sub	r8,pc,-11364
8000751c:	10 37       	cp.w	r7,r8
8000751e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007522:	8e 6a       	ld.sh	r10,r7[0xc]
80007524:	14 98       	mov	r8,r10
80007526:	ed ba 00 03 	bld	r10,0x3
8000752a:	c4 20       	breq	800075ae <_fflush_r+0xc6>
8000752c:	ab ba       	sbr	r10,0xb
8000752e:	ae 6a       	st.h	r7[0xc],r10
80007530:	6e 18       	ld.w	r8,r7[0x4]
80007532:	58 08       	cp.w	r8,0
80007534:	e0 89 00 06 	brgt	80007540 <_fflush_r+0x58>
80007538:	6f 08       	ld.w	r8,r7[0x40]
8000753a:	58 08       	cp.w	r8,0
8000753c:	e0 8a 00 5a 	brle	800075f0 <_fflush_r+0x108>
80007540:	6e b8       	ld.w	r8,r7[0x2c]
80007542:	58 08       	cp.w	r8,0
80007544:	c5 60       	breq	800075f0 <_fflush_r+0x108>
80007546:	e2 1a 10 00 	andl	r10,0x1000,COH
8000754a:	c0 30       	breq	80007550 <_fflush_r+0x68>
8000754c:	6f 55       	ld.w	r5,r7[0x54]
8000754e:	c0 f8       	rjmp	8000756c <_fflush_r+0x84>
80007550:	30 19       	mov	r9,1
80007552:	6e 8b       	ld.w	r11,r7[0x20]
80007554:	0c 9c       	mov	r12,r6
80007556:	5d 18       	icall	r8
80007558:	18 95       	mov	r5,r12
8000755a:	5b fc       	cp.w	r12,-1
8000755c:	c0 81       	brne	8000756c <_fflush_r+0x84>
8000755e:	6c 38       	ld.w	r8,r6[0xc]
80007560:	59 d8       	cp.w	r8,29
80007562:	c4 70       	breq	800075f0 <_fflush_r+0x108>
80007564:	8e 68       	ld.sh	r8,r7[0xc]
80007566:	a7 a8       	sbr	r8,0x6
80007568:	ae 68       	st.h	r7[0xc],r8
8000756a:	d8 22       	popm	r4-r7,pc
8000756c:	8e 68       	ld.sh	r8,r7[0xc]
8000756e:	ed b8 00 02 	bld	r8,0x2
80007572:	c0 91       	brne	80007584 <_fflush_r+0x9c>
80007574:	6e 18       	ld.w	r8,r7[0x4]
80007576:	10 15       	sub	r5,r8
80007578:	6e d8       	ld.w	r8,r7[0x34]
8000757a:	58 08       	cp.w	r8,0
8000757c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80007580:	eb d8 e1 15 	subne	r5,r5,r8
80007584:	6e b8       	ld.w	r8,r7[0x2c]
80007586:	0c 9c       	mov	r12,r6
80007588:	30 09       	mov	r9,0
8000758a:	0a 9a       	mov	r10,r5
8000758c:	6e 8b       	ld.w	r11,r7[0x20]
8000758e:	5d 18       	icall	r8
80007590:	8e 68       	ld.sh	r8,r7[0xc]
80007592:	0a 3c       	cp.w	r12,r5
80007594:	c2 61       	brne	800075e0 <_fflush_r+0xf8>
80007596:	ab d8       	cbr	r8,0xb
80007598:	30 0c       	mov	r12,0
8000759a:	6e 49       	ld.w	r9,r7[0x10]
8000759c:	ae 68       	st.h	r7[0xc],r8
8000759e:	8f 1c       	st.w	r7[0x4],r12
800075a0:	8f 09       	st.w	r7[0x0],r9
800075a2:	ed b8 00 0c 	bld	r8,0xc
800075a6:	c2 51       	brne	800075f0 <_fflush_r+0x108>
800075a8:	ef 45 00 54 	st.w	r7[84],r5
800075ac:	d8 22       	popm	r4-r7,pc
800075ae:	6e 45       	ld.w	r5,r7[0x10]
800075b0:	58 05       	cp.w	r5,0
800075b2:	c1 f0       	breq	800075f0 <_fflush_r+0x108>
800075b4:	6e 04       	ld.w	r4,r7[0x0]
800075b6:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800075ba:	8f 05       	st.w	r7[0x0],r5
800075bc:	f9 b8 01 00 	movne	r8,0
800075c0:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800075c4:	0a 14       	sub	r4,r5
800075c6:	8f 28       	st.w	r7[0x8],r8
800075c8:	c1 18       	rjmp	800075ea <_fflush_r+0x102>
800075ca:	08 99       	mov	r9,r4
800075cc:	0a 9a       	mov	r10,r5
800075ce:	6e a8       	ld.w	r8,r7[0x28]
800075d0:	6e 8b       	ld.w	r11,r7[0x20]
800075d2:	0c 9c       	mov	r12,r6
800075d4:	5d 18       	icall	r8
800075d6:	18 14       	sub	r4,r12
800075d8:	58 0c       	cp.w	r12,0
800075da:	e0 89 00 07 	brgt	800075e8 <_fflush_r+0x100>
800075de:	8e 68       	ld.sh	r8,r7[0xc]
800075e0:	a7 a8       	sbr	r8,0x6
800075e2:	3f fc       	mov	r12,-1
800075e4:	ae 68       	st.h	r7[0xc],r8
800075e6:	d8 22       	popm	r4-r7,pc
800075e8:	18 05       	add	r5,r12
800075ea:	58 04       	cp.w	r4,0
800075ec:	fe 99 ff ef 	brgt	800075ca <_fflush_r+0xe2>
800075f0:	d8 2a       	popm	r4-r7,pc,r12=0
800075f2:	d7 03       	nop

800075f4 <__sfp_lock_acquire>:
800075f4:	5e fc       	retal	r12

800075f6 <__sfp_lock_release>:
800075f6:	5e fc       	retal	r12

800075f8 <_cleanup_r>:
800075f8:	d4 01       	pushm	lr
800075fa:	fe cb e8 6a 	sub	r11,pc,-6038
800075fe:	e0 a0 02 fd 	rcall	80007bf8 <_fwalk>
80007602:	d8 02       	popm	pc

80007604 <__sfmoreglue>:
80007604:	d4 21       	pushm	r4-r7,lr
80007606:	16 95       	mov	r5,r11
80007608:	f6 06 10 5c 	mul	r6,r11,92
8000760c:	ec cb ff f4 	sub	r11,r6,-12
80007610:	e0 a0 03 84 	rcall	80007d18 <_malloc_r>
80007614:	18 97       	mov	r7,r12
80007616:	c0 90       	breq	80007628 <__sfmoreglue+0x24>
80007618:	99 15       	st.w	r12[0x4],r5
8000761a:	30 0b       	mov	r11,0
8000761c:	2f 4c       	sub	r12,-12
8000761e:	0c 9a       	mov	r10,r6
80007620:	8f 2c       	st.w	r7[0x8],r12
80007622:	8f 0b       	st.w	r7[0x0],r11
80007624:	e0 a0 05 bc 	rcall	8000819c <memset>
80007628:	0e 9c       	mov	r12,r7
8000762a:	d8 22       	popm	r4-r7,pc

8000762c <__sfp>:
8000762c:	d4 21       	pushm	r4-r7,lr
8000762e:	fe c8 d8 da 	sub	r8,pc,-10022
80007632:	18 96       	mov	r6,r12
80007634:	70 07       	ld.w	r7,r8[0x0]
80007636:	6e 68       	ld.w	r8,r7[0x18]
80007638:	58 08       	cp.w	r8,0
8000763a:	c0 31       	brne	80007640 <__sfp+0x14>
8000763c:	0e 9c       	mov	r12,r7
8000763e:	c2 dc       	rcall	80007698 <__sinit>
80007640:	ee c7 ff 28 	sub	r7,r7,-216
80007644:	30 05       	mov	r5,0
80007646:	6e 2c       	ld.w	r12,r7[0x8]
80007648:	6e 18       	ld.w	r8,r7[0x4]
8000764a:	c0 68       	rjmp	80007656 <__sfp+0x2a>
8000764c:	98 69       	ld.sh	r9,r12[0xc]
8000764e:	ea 09 19 00 	cp.h	r9,r5
80007652:	c1 10       	breq	80007674 <__sfp+0x48>
80007654:	2a 4c       	sub	r12,-92
80007656:	20 18       	sub	r8,1
80007658:	cf a7       	brpl	8000764c <__sfp+0x20>
8000765a:	6e 08       	ld.w	r8,r7[0x0]
8000765c:	58 08       	cp.w	r8,0
8000765e:	c0 61       	brne	8000766a <__sfp+0x3e>
80007660:	30 4b       	mov	r11,4
80007662:	0c 9c       	mov	r12,r6
80007664:	cd 0f       	rcall	80007604 <__sfmoreglue>
80007666:	8f 0c       	st.w	r7[0x0],r12
80007668:	c0 30       	breq	8000766e <__sfp+0x42>
8000766a:	6e 07       	ld.w	r7,r7[0x0]
8000766c:	ce db       	rjmp	80007646 <__sfp+0x1a>
8000766e:	30 c8       	mov	r8,12
80007670:	8d 38       	st.w	r6[0xc],r8
80007672:	d8 22       	popm	r4-r7,pc
80007674:	30 08       	mov	r8,0
80007676:	f9 48 00 4c 	st.w	r12[76],r8
8000767a:	99 08       	st.w	r12[0x0],r8
8000767c:	99 28       	st.w	r12[0x8],r8
8000767e:	99 18       	st.w	r12[0x4],r8
80007680:	99 48       	st.w	r12[0x10],r8
80007682:	99 58       	st.w	r12[0x14],r8
80007684:	99 68       	st.w	r12[0x18],r8
80007686:	99 d8       	st.w	r12[0x34],r8
80007688:	99 e8       	st.w	r12[0x38],r8
8000768a:	f9 48 00 48 	st.w	r12[72],r8
8000768e:	3f f8       	mov	r8,-1
80007690:	b8 78       	st.h	r12[0xe],r8
80007692:	30 18       	mov	r8,1
80007694:	b8 68       	st.h	r12[0xc],r8
80007696:	d8 22       	popm	r4-r7,pc

80007698 <__sinit>:
80007698:	d4 21       	pushm	r4-r7,lr
8000769a:	18 96       	mov	r6,r12
8000769c:	78 67       	ld.w	r7,r12[0x18]
8000769e:	58 07       	cp.w	r7,0
800076a0:	c4 91       	brne	80007732 <__sinit+0x9a>
800076a2:	fe c8 00 aa 	sub	r8,pc,170
800076a6:	30 15       	mov	r5,1
800076a8:	99 a8       	st.w	r12[0x28],r8
800076aa:	f9 47 00 d8 	st.w	r12[216],r7
800076ae:	f9 47 00 dc 	st.w	r12[220],r7
800076b2:	f9 47 00 e0 	st.w	r12[224],r7
800076b6:	99 65       	st.w	r12[0x18],r5
800076b8:	cb af       	rcall	8000762c <__sfp>
800076ba:	8d 0c       	st.w	r6[0x0],r12
800076bc:	0c 9c       	mov	r12,r6
800076be:	cb 7f       	rcall	8000762c <__sfp>
800076c0:	8d 1c       	st.w	r6[0x4],r12
800076c2:	0c 9c       	mov	r12,r6
800076c4:	cb 4f       	rcall	8000762c <__sfp>
800076c6:	6c 09       	ld.w	r9,r6[0x0]
800076c8:	30 48       	mov	r8,4
800076ca:	93 07       	st.w	r9[0x0],r7
800076cc:	b2 68       	st.h	r9[0xc],r8
800076ce:	93 17       	st.w	r9[0x4],r7
800076d0:	93 27       	st.w	r9[0x8],r7
800076d2:	6c 18       	ld.w	r8,r6[0x4]
800076d4:	b2 77       	st.h	r9[0xe],r7
800076d6:	93 47       	st.w	r9[0x10],r7
800076d8:	93 57       	st.w	r9[0x14],r7
800076da:	93 67       	st.w	r9[0x18],r7
800076dc:	93 89       	st.w	r9[0x20],r9
800076de:	91 07       	st.w	r8[0x0],r7
800076e0:	91 17       	st.w	r8[0x4],r7
800076e2:	91 27       	st.w	r8[0x8],r7
800076e4:	fe ce eb e4 	sub	lr,pc,-5148
800076e8:	fe cb ec 14 	sub	r11,pc,-5100
800076ec:	93 9e       	st.w	r9[0x24],lr
800076ee:	93 ab       	st.w	r9[0x28],r11
800076f0:	fe ca ec 3c 	sub	r10,pc,-5060
800076f4:	fe c4 ec 48 	sub	r4,pc,-5048
800076f8:	93 ba       	st.w	r9[0x2c],r10
800076fa:	93 c4       	st.w	r9[0x30],r4
800076fc:	30 99       	mov	r9,9
800076fe:	b0 69       	st.h	r8[0xc],r9
80007700:	b0 75       	st.h	r8[0xe],r5
80007702:	91 c4       	st.w	r8[0x30],r4
80007704:	91 47       	st.w	r8[0x10],r7
80007706:	91 57       	st.w	r8[0x14],r7
80007708:	91 67       	st.w	r8[0x18],r7
8000770a:	91 88       	st.w	r8[0x20],r8
8000770c:	91 9e       	st.w	r8[0x24],lr
8000770e:	91 ab       	st.w	r8[0x28],r11
80007710:	91 ba       	st.w	r8[0x2c],r10
80007712:	8d 2c       	st.w	r6[0x8],r12
80007714:	31 28       	mov	r8,18
80007716:	99 07       	st.w	r12[0x0],r7
80007718:	b8 68       	st.h	r12[0xc],r8
8000771a:	99 17       	st.w	r12[0x4],r7
8000771c:	99 27       	st.w	r12[0x8],r7
8000771e:	30 28       	mov	r8,2
80007720:	b8 78       	st.h	r12[0xe],r8
80007722:	99 c4       	st.w	r12[0x30],r4
80007724:	99 67       	st.w	r12[0x18],r7
80007726:	99 9e       	st.w	r12[0x24],lr
80007728:	99 ab       	st.w	r12[0x28],r11
8000772a:	99 ba       	st.w	r12[0x2c],r10
8000772c:	99 47       	st.w	r12[0x10],r7
8000772e:	99 57       	st.w	r12[0x14],r7
80007730:	99 8c       	st.w	r12[0x20],r12
80007732:	d8 22       	popm	r4-r7,pc

80007734 <_malloc_trim_r>:
80007734:	d4 21       	pushm	r4-r7,lr
80007736:	16 95       	mov	r5,r11
80007738:	18 97       	mov	r7,r12
8000773a:	e0 a0 05 38 	rcall	800081aa <__malloc_lock>
8000773e:	e0 64 01 00 	mov	r4,256
80007742:	68 28       	ld.w	r8,r4[0x8]
80007744:	70 16       	ld.w	r6,r8[0x4]
80007746:	e0 16 ff fc 	andl	r6,0xfffc
8000774a:	ec c8 ff 91 	sub	r8,r6,-111
8000774e:	f0 05 01 05 	sub	r5,r8,r5
80007752:	e0 15 ff 80 	andl	r5,0xff80
80007756:	ea c5 00 80 	sub	r5,r5,128
8000775a:	e0 45 00 7f 	cp.w	r5,127
8000775e:	e0 8a 00 25 	brle	800077a8 <_malloc_trim_r+0x74>
80007762:	30 0b       	mov	r11,0
80007764:	0e 9c       	mov	r12,r7
80007766:	e0 a0 09 93 	rcall	80008a8c <_sbrk_r>
8000776a:	68 28       	ld.w	r8,r4[0x8]
8000776c:	0c 08       	add	r8,r6
8000776e:	10 3c       	cp.w	r12,r8
80007770:	c1 c1       	brne	800077a8 <_malloc_trim_r+0x74>
80007772:	ea 0b 11 00 	rsub	r11,r5,0
80007776:	0e 9c       	mov	r12,r7
80007778:	e0 a0 09 8a 	rcall	80008a8c <_sbrk_r>
8000777c:	5b fc       	cp.w	r12,-1
8000777e:	c1 91       	brne	800077b0 <_malloc_trim_r+0x7c>
80007780:	30 0b       	mov	r11,0
80007782:	0e 9c       	mov	r12,r7
80007784:	e0 a0 09 84 	rcall	80008a8c <_sbrk_r>
80007788:	68 28       	ld.w	r8,r4[0x8]
8000778a:	f8 08 01 09 	sub	r9,r12,r8
8000778e:	58 f9       	cp.w	r9,15
80007790:	e0 8a 00 0c 	brle	800077a8 <_malloc_trim_r+0x74>
80007794:	a1 a9       	sbr	r9,0x0
80007796:	91 19       	st.w	r8[0x4],r9
80007798:	e0 68 05 0c 	mov	r8,1292
8000779c:	70 09       	ld.w	r9,r8[0x0]
8000779e:	e0 68 06 2c 	mov	r8,1580
800077a2:	f8 09 01 09 	sub	r9,r12,r9
800077a6:	91 09       	st.w	r8[0x0],r9
800077a8:	0e 9c       	mov	r12,r7
800077aa:	e0 a0 05 01 	rcall	800081ac <__malloc_unlock>
800077ae:	d8 2a       	popm	r4-r7,pc,r12=0
800077b0:	68 28       	ld.w	r8,r4[0x8]
800077b2:	0a 16       	sub	r6,r5
800077b4:	a1 a6       	sbr	r6,0x0
800077b6:	91 16       	st.w	r8[0x4],r6
800077b8:	e0 68 06 2c 	mov	r8,1580
800077bc:	70 09       	ld.w	r9,r8[0x0]
800077be:	0a 19       	sub	r9,r5
800077c0:	0e 9c       	mov	r12,r7
800077c2:	91 09       	st.w	r8[0x0],r9
800077c4:	e0 a0 04 f4 	rcall	800081ac <__malloc_unlock>
800077c8:	da 2a       	popm	r4-r7,pc,r12=1
800077ca:	d7 03       	nop

800077cc <_free_r>:
800077cc:	d4 21       	pushm	r4-r7,lr
800077ce:	16 96       	mov	r6,r11
800077d0:	18 97       	mov	r7,r12
800077d2:	58 0b       	cp.w	r11,0
800077d4:	e0 80 00 c0 	breq	80007954 <_free_r+0x188>
800077d8:	e0 a0 04 e9 	rcall	800081aa <__malloc_lock>
800077dc:	20 86       	sub	r6,8
800077de:	e0 6a 01 00 	mov	r10,256
800077e2:	6c 18       	ld.w	r8,r6[0x4]
800077e4:	74 2e       	ld.w	lr,r10[0x8]
800077e6:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800077ea:	a1 c8       	cbr	r8,0x0
800077ec:	ec 08 00 09 	add	r9,r6,r8
800077f0:	72 1b       	ld.w	r11,r9[0x4]
800077f2:	e0 1b ff fc 	andl	r11,0xfffc
800077f6:	1c 39       	cp.w	r9,lr
800077f8:	c1 e1       	brne	80007834 <_free_r+0x68>
800077fa:	f6 08 00 08 	add	r8,r11,r8
800077fe:	58 0c       	cp.w	r12,0
80007800:	c0 81       	brne	80007810 <_free_r+0x44>
80007802:	6c 09       	ld.w	r9,r6[0x0]
80007804:	12 16       	sub	r6,r9
80007806:	12 08       	add	r8,r9
80007808:	6c 3b       	ld.w	r11,r6[0xc]
8000780a:	6c 29       	ld.w	r9,r6[0x8]
8000780c:	97 29       	st.w	r11[0x8],r9
8000780e:	93 3b       	st.w	r9[0xc],r11
80007810:	10 99       	mov	r9,r8
80007812:	95 26       	st.w	r10[0x8],r6
80007814:	a1 a9       	sbr	r9,0x0
80007816:	8d 19       	st.w	r6[0x4],r9
80007818:	e0 69 05 08 	mov	r9,1288
8000781c:	72 09       	ld.w	r9,r9[0x0]
8000781e:	12 38       	cp.w	r8,r9
80007820:	c0 63       	brcs	8000782c <_free_r+0x60>
80007822:	e0 68 06 28 	mov	r8,1576
80007826:	0e 9c       	mov	r12,r7
80007828:	70 0b       	ld.w	r11,r8[0x0]
8000782a:	c8 5f       	rcall	80007734 <_malloc_trim_r>
8000782c:	0e 9c       	mov	r12,r7
8000782e:	e0 a0 04 bf 	rcall	800081ac <__malloc_unlock>
80007832:	d8 22       	popm	r4-r7,pc
80007834:	93 1b       	st.w	r9[0x4],r11
80007836:	58 0c       	cp.w	r12,0
80007838:	c0 30       	breq	8000783e <_free_r+0x72>
8000783a:	30 0c       	mov	r12,0
8000783c:	c1 08       	rjmp	8000785c <_free_r+0x90>
8000783e:	6c 0e       	ld.w	lr,r6[0x0]
80007840:	f4 c5 ff f8 	sub	r5,r10,-8
80007844:	1c 16       	sub	r6,lr
80007846:	1c 08       	add	r8,lr
80007848:	6c 2e       	ld.w	lr,r6[0x8]
8000784a:	0a 3e       	cp.w	lr,r5
8000784c:	f9 bc 00 01 	moveq	r12,1
80007850:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007854:	eb fe 1a 02 	st.wne	r5[0x8],lr
80007858:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000785c:	f2 0b 00 0e 	add	lr,r9,r11
80007860:	7c 1e       	ld.w	lr,lr[0x4]
80007862:	ed be 00 00 	bld	lr,0x0
80007866:	c1 40       	breq	8000788e <_free_r+0xc2>
80007868:	16 08       	add	r8,r11
8000786a:	58 0c       	cp.w	r12,0
8000786c:	c0 d1       	brne	80007886 <_free_r+0xba>
8000786e:	e0 6e 01 00 	mov	lr,256
80007872:	72 2b       	ld.w	r11,r9[0x8]
80007874:	2f 8e       	sub	lr,-8
80007876:	1c 3b       	cp.w	r11,lr
80007878:	c0 71       	brne	80007886 <_free_r+0xba>
8000787a:	97 36       	st.w	r11[0xc],r6
8000787c:	97 26       	st.w	r11[0x8],r6
8000787e:	8d 2b       	st.w	r6[0x8],r11
80007880:	8d 3b       	st.w	r6[0xc],r11
80007882:	30 1c       	mov	r12,1
80007884:	c0 58       	rjmp	8000788e <_free_r+0xc2>
80007886:	72 2b       	ld.w	r11,r9[0x8]
80007888:	72 39       	ld.w	r9,r9[0xc]
8000788a:	93 2b       	st.w	r9[0x8],r11
8000788c:	97 39       	st.w	r11[0xc],r9
8000788e:	10 99       	mov	r9,r8
80007890:	ec 08 09 08 	st.w	r6[r8],r8
80007894:	a1 a9       	sbr	r9,0x0
80007896:	8d 19       	st.w	r6[0x4],r9
80007898:	58 0c       	cp.w	r12,0
8000789a:	c5 a1       	brne	8000794e <_free_r+0x182>
8000789c:	e0 48 01 ff 	cp.w	r8,511
800078a0:	e0 8b 00 13 	brhi	800078c6 <_free_r+0xfa>
800078a4:	a3 98       	lsr	r8,0x3
800078a6:	f4 08 00 39 	add	r9,r10,r8<<0x3
800078aa:	72 2b       	ld.w	r11,r9[0x8]
800078ac:	8d 39       	st.w	r6[0xc],r9
800078ae:	8d 2b       	st.w	r6[0x8],r11
800078b0:	97 36       	st.w	r11[0xc],r6
800078b2:	93 26       	st.w	r9[0x8],r6
800078b4:	a3 48       	asr	r8,0x2
800078b6:	74 19       	ld.w	r9,r10[0x4]
800078b8:	30 1b       	mov	r11,1
800078ba:	f6 08 09 48 	lsl	r8,r11,r8
800078be:	f3 e8 10 08 	or	r8,r9,r8
800078c2:	95 18       	st.w	r10[0x4],r8
800078c4:	c4 58       	rjmp	8000794e <_free_r+0x182>
800078c6:	f0 0b 16 09 	lsr	r11,r8,0x9
800078ca:	58 4b       	cp.w	r11,4
800078cc:	e0 8b 00 06 	brhi	800078d8 <_free_r+0x10c>
800078d0:	f0 0b 16 06 	lsr	r11,r8,0x6
800078d4:	2c 8b       	sub	r11,-56
800078d6:	c2 08       	rjmp	80007916 <_free_r+0x14a>
800078d8:	59 4b       	cp.w	r11,20
800078da:	e0 8b 00 04 	brhi	800078e2 <_free_r+0x116>
800078de:	2a 5b       	sub	r11,-91
800078e0:	c1 b8       	rjmp	80007916 <_free_r+0x14a>
800078e2:	e0 4b 00 54 	cp.w	r11,84
800078e6:	e0 8b 00 06 	brhi	800078f2 <_free_r+0x126>
800078ea:	f0 0b 16 0c 	lsr	r11,r8,0xc
800078ee:	29 2b       	sub	r11,-110
800078f0:	c1 38       	rjmp	80007916 <_free_r+0x14a>
800078f2:	e0 4b 01 54 	cp.w	r11,340
800078f6:	e0 8b 00 06 	brhi	80007902 <_free_r+0x136>
800078fa:	f0 0b 16 0f 	lsr	r11,r8,0xf
800078fe:	28 9b       	sub	r11,-119
80007900:	c0 b8       	rjmp	80007916 <_free_r+0x14a>
80007902:	e0 4b 05 54 	cp.w	r11,1364
80007906:	e0 88 00 05 	brls	80007910 <_free_r+0x144>
8000790a:	37 eb       	mov	r11,126
8000790c:	c0 58       	rjmp	80007916 <_free_r+0x14a>
8000790e:	d7 03       	nop
80007910:	f0 0b 16 12 	lsr	r11,r8,0x12
80007914:	28 4b       	sub	r11,-124
80007916:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000791a:	78 29       	ld.w	r9,r12[0x8]
8000791c:	18 39       	cp.w	r9,r12
8000791e:	c0 e1       	brne	8000793a <_free_r+0x16e>
80007920:	74 18       	ld.w	r8,r10[0x4]
80007922:	a3 4b       	asr	r11,0x2
80007924:	30 1c       	mov	r12,1
80007926:	f8 0b 09 4b 	lsl	r11,r12,r11
8000792a:	f1 eb 10 0b 	or	r11,r8,r11
8000792e:	12 98       	mov	r8,r9
80007930:	95 1b       	st.w	r10[0x4],r11
80007932:	c0 a8       	rjmp	80007946 <_free_r+0x17a>
80007934:	72 29       	ld.w	r9,r9[0x8]
80007936:	18 39       	cp.w	r9,r12
80007938:	c0 60       	breq	80007944 <_free_r+0x178>
8000793a:	72 1a       	ld.w	r10,r9[0x4]
8000793c:	e0 1a ff fc 	andl	r10,0xfffc
80007940:	14 38       	cp.w	r8,r10
80007942:	cf 93       	brcs	80007934 <_free_r+0x168>
80007944:	72 38       	ld.w	r8,r9[0xc]
80007946:	8d 38       	st.w	r6[0xc],r8
80007948:	8d 29       	st.w	r6[0x8],r9
8000794a:	93 36       	st.w	r9[0xc],r6
8000794c:	91 26       	st.w	r8[0x8],r6
8000794e:	0e 9c       	mov	r12,r7
80007950:	e0 a0 04 2e 	rcall	800081ac <__malloc_unlock>
80007954:	d8 22       	popm	r4-r7,pc
80007956:	d7 03       	nop

80007958 <__sfvwrite_r>:
80007958:	d4 31       	pushm	r0-r7,lr
8000795a:	20 3d       	sub	sp,12
8000795c:	14 94       	mov	r4,r10
8000795e:	18 95       	mov	r5,r12
80007960:	16 97       	mov	r7,r11
80007962:	74 28       	ld.w	r8,r10[0x8]
80007964:	58 08       	cp.w	r8,0
80007966:	e0 80 01 45 	breq	80007bf0 <__sfvwrite_r+0x298>
8000796a:	96 68       	ld.sh	r8,r11[0xc]
8000796c:	ed b8 00 03 	bld	r8,0x3
80007970:	c0 41       	brne	80007978 <__sfvwrite_r+0x20>
80007972:	76 48       	ld.w	r8,r11[0x10]
80007974:	58 08       	cp.w	r8,0
80007976:	c0 c1       	brne	8000798e <__sfvwrite_r+0x36>
80007978:	0e 9b       	mov	r11,r7
8000797a:	0a 9c       	mov	r12,r5
8000797c:	fe b0 f6 ca 	rcall	80006710 <__swsetup_r>
80007980:	c0 70       	breq	8000798e <__sfvwrite_r+0x36>
80007982:	8e 68       	ld.sh	r8,r7[0xc]
80007984:	a7 a8       	sbr	r8,0x6
80007986:	ae 68       	st.h	r7[0xc],r8
80007988:	30 98       	mov	r8,9
8000798a:	8b 38       	st.w	r5[0xc],r8
8000798c:	c3 09       	rjmp	80007bec <__sfvwrite_r+0x294>
8000798e:	8e 63       	ld.sh	r3,r7[0xc]
80007990:	68 00       	ld.w	r0,r4[0x0]
80007992:	06 96       	mov	r6,r3
80007994:	e2 16 00 02 	andl	r6,0x2,COH
80007998:	c2 10       	breq	800079da <__sfvwrite_r+0x82>
8000799a:	30 03       	mov	r3,0
8000799c:	e0 62 04 00 	mov	r2,1024
800079a0:	06 96       	mov	r6,r3
800079a2:	c0 48       	rjmp	800079aa <__sfvwrite_r+0x52>
800079a4:	60 03       	ld.w	r3,r0[0x0]
800079a6:	60 16       	ld.w	r6,r0[0x4]
800079a8:	2f 80       	sub	r0,-8
800079aa:	58 06       	cp.w	r6,0
800079ac:	cf c0       	breq	800079a4 <__sfvwrite_r+0x4c>
800079ae:	e0 46 04 00 	cp.w	r6,1024
800079b2:	ec 09 17 80 	movls	r9,r6
800079b6:	e4 09 17 b0 	movhi	r9,r2
800079ba:	06 9a       	mov	r10,r3
800079bc:	6e a8       	ld.w	r8,r7[0x28]
800079be:	6e 8b       	ld.w	r11,r7[0x20]
800079c0:	0a 9c       	mov	r12,r5
800079c2:	5d 18       	icall	r8
800079c4:	18 16       	sub	r6,r12
800079c6:	58 0c       	cp.w	r12,0
800079c8:	e0 8a 01 0f 	brle	80007be6 <__sfvwrite_r+0x28e>
800079cc:	68 28       	ld.w	r8,r4[0x8]
800079ce:	18 18       	sub	r8,r12
800079d0:	89 28       	st.w	r4[0x8],r8
800079d2:	e0 80 01 0f 	breq	80007bf0 <__sfvwrite_r+0x298>
800079d6:	18 03       	add	r3,r12
800079d8:	ce 9b       	rjmp	800079aa <__sfvwrite_r+0x52>
800079da:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
800079de:	c0 70       	breq	800079ec <__sfvwrite_r+0x94>
800079e0:	50 06       	stdsp	sp[0x0],r6
800079e2:	0c 93       	mov	r3,r6
800079e4:	0c 91       	mov	r1,r6
800079e6:	50 15       	stdsp	sp[0x4],r5
800079e8:	08 92       	mov	r2,r4
800079ea:	c9 e8       	rjmp	80007b26 <__sfvwrite_r+0x1ce>
800079ec:	06 96       	mov	r6,r3
800079ee:	08 91       	mov	r1,r4
800079f0:	c0 48       	rjmp	800079f8 <__sfvwrite_r+0xa0>
800079f2:	60 03       	ld.w	r3,r0[0x0]
800079f4:	60 16       	ld.w	r6,r0[0x4]
800079f6:	2f 80       	sub	r0,-8
800079f8:	58 06       	cp.w	r6,0
800079fa:	cf c0       	breq	800079f2 <__sfvwrite_r+0x9a>
800079fc:	8e 68       	ld.sh	r8,r7[0xc]
800079fe:	6e 24       	ld.w	r4,r7[0x8]
80007a00:	10 99       	mov	r9,r8
80007a02:	e2 19 02 00 	andl	r9,0x200,COH
80007a06:	c5 50       	breq	80007ab0 <__sfvwrite_r+0x158>
80007a08:	08 36       	cp.w	r6,r4
80007a0a:	c4 33       	brcs	80007a90 <__sfvwrite_r+0x138>
80007a0c:	10 99       	mov	r9,r8
80007a0e:	e2 19 04 80 	andl	r9,0x480,COH
80007a12:	c3 f0       	breq	80007a90 <__sfvwrite_r+0x138>
80007a14:	6e 4b       	ld.w	r11,r7[0x10]
80007a16:	6e 09       	ld.w	r9,r7[0x0]
80007a18:	16 19       	sub	r9,r11
80007a1a:	50 09       	stdsp	sp[0x0],r9
80007a1c:	6e 59       	ld.w	r9,r7[0x14]
80007a1e:	10 9c       	mov	r12,r8
80007a20:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007a24:	30 28       	mov	r8,2
80007a26:	f4 08 0c 08 	divs	r8,r10,r8
80007a2a:	fa e9 00 04 	st.d	sp[4],r8
80007a2e:	10 94       	mov	r4,r8
80007a30:	40 09       	lddsp	r9,sp[0x0]
80007a32:	e2 1c 04 00 	andl	r12,0x400,COH
80007a36:	2f f9       	sub	r9,-1
80007a38:	0c 09       	add	r9,r6
80007a3a:	12 38       	cp.w	r8,r9
80007a3c:	f2 04 17 30 	movlo	r4,r9
80007a40:	58 0c       	cp.w	r12,0
80007a42:	c1 00       	breq	80007a62 <__sfvwrite_r+0x10a>
80007a44:	08 9b       	mov	r11,r4
80007a46:	0a 9c       	mov	r12,r5
80007a48:	c6 8d       	rcall	80007d18 <_malloc_r>
80007a4a:	18 92       	mov	r2,r12
80007a4c:	c1 40       	breq	80007a74 <__sfvwrite_r+0x11c>
80007a4e:	40 0a       	lddsp	r10,sp[0x0]
80007a50:	6e 4b       	ld.w	r11,r7[0x10]
80007a52:	fe b0 e4 79 	rcall	80004344 <memcpy>
80007a56:	8e 68       	ld.sh	r8,r7[0xc]
80007a58:	e0 18 fb 7f 	andl	r8,0xfb7f
80007a5c:	a7 b8       	sbr	r8,0x7
80007a5e:	ae 68       	st.h	r7[0xc],r8
80007a60:	c0 d8       	rjmp	80007a7a <__sfvwrite_r+0x122>
80007a62:	08 9a       	mov	r10,r4
80007a64:	0a 9c       	mov	r12,r5
80007a66:	e0 a0 06 8f 	rcall	80008784 <_realloc_r>
80007a6a:	18 92       	mov	r2,r12
80007a6c:	c0 71       	brne	80007a7a <__sfvwrite_r+0x122>
80007a6e:	6e 4b       	ld.w	r11,r7[0x10]
80007a70:	0a 9c       	mov	r12,r5
80007a72:	ca de       	rcall	800077cc <_free_r>
80007a74:	30 c8       	mov	r8,12
80007a76:	8b 38       	st.w	r5[0xc],r8
80007a78:	cb 78       	rjmp	80007be6 <__sfvwrite_r+0x28e>
80007a7a:	40 0a       	lddsp	r10,sp[0x0]
80007a7c:	40 09       	lddsp	r9,sp[0x0]
80007a7e:	e8 0a 01 0a 	sub	r10,r4,r10
80007a82:	e4 09 00 08 	add	r8,r2,r9
80007a86:	8f 54       	st.w	r7[0x14],r4
80007a88:	8f 2a       	st.w	r7[0x8],r10
80007a8a:	8f 08       	st.w	r7[0x0],r8
80007a8c:	8f 42       	st.w	r7[0x10],r2
80007a8e:	0c 94       	mov	r4,r6
80007a90:	08 36       	cp.w	r6,r4
80007a92:	ec 04 17 30 	movlo	r4,r6
80007a96:	06 9b       	mov	r11,r3
80007a98:	08 9a       	mov	r10,r4
80007a9a:	6e 0c       	ld.w	r12,r7[0x0]
80007a9c:	e0 a0 03 61 	rcall	8000815e <memmove>
80007aa0:	6e 08       	ld.w	r8,r7[0x0]
80007aa2:	08 08       	add	r8,r4
80007aa4:	8f 08       	st.w	r7[0x0],r8
80007aa6:	6e 28       	ld.w	r8,r7[0x8]
80007aa8:	08 18       	sub	r8,r4
80007aaa:	0c 94       	mov	r4,r6
80007aac:	8f 28       	st.w	r7[0x8],r8
80007aae:	c3 08       	rjmp	80007b0e <__sfvwrite_r+0x1b6>
80007ab0:	08 36       	cp.w	r6,r4
80007ab2:	5f ba       	srhi	r10
80007ab4:	6e 0c       	ld.w	r12,r7[0x0]
80007ab6:	6e 48       	ld.w	r8,r7[0x10]
80007ab8:	10 3c       	cp.w	r12,r8
80007aba:	5f b8       	srhi	r8
80007abc:	f5 e8 00 08 	and	r8,r10,r8
80007ac0:	f2 08 18 00 	cp.b	r8,r9
80007ac4:	c0 e0       	breq	80007ae0 <__sfvwrite_r+0x188>
80007ac6:	06 9b       	mov	r11,r3
80007ac8:	08 9a       	mov	r10,r4
80007aca:	e0 a0 03 4a 	rcall	8000815e <memmove>
80007ace:	6e 08       	ld.w	r8,r7[0x0]
80007ad0:	08 08       	add	r8,r4
80007ad2:	0e 9b       	mov	r11,r7
80007ad4:	8f 08       	st.w	r7[0x0],r8
80007ad6:	0a 9c       	mov	r12,r5
80007ad8:	fe b0 fd 08 	rcall	800074e8 <_fflush_r>
80007adc:	c1 90       	breq	80007b0e <__sfvwrite_r+0x1b6>
80007ade:	c8 48       	rjmp	80007be6 <__sfvwrite_r+0x28e>
80007ae0:	6e 59       	ld.w	r9,r7[0x14]
80007ae2:	12 36       	cp.w	r6,r9
80007ae4:	c0 a3       	brcs	80007af8 <__sfvwrite_r+0x1a0>
80007ae6:	6e a8       	ld.w	r8,r7[0x28]
80007ae8:	06 9a       	mov	r10,r3
80007aea:	6e 8b       	ld.w	r11,r7[0x20]
80007aec:	0a 9c       	mov	r12,r5
80007aee:	5d 18       	icall	r8
80007af0:	18 94       	mov	r4,r12
80007af2:	e0 89 00 0e 	brgt	80007b0e <__sfvwrite_r+0x1b6>
80007af6:	c7 88       	rjmp	80007be6 <__sfvwrite_r+0x28e>
80007af8:	0c 9a       	mov	r10,r6
80007afa:	06 9b       	mov	r11,r3
80007afc:	e0 a0 03 31 	rcall	8000815e <memmove>
80007b00:	6e 08       	ld.w	r8,r7[0x0]
80007b02:	0c 08       	add	r8,r6
80007b04:	0c 94       	mov	r4,r6
80007b06:	8f 08       	st.w	r7[0x0],r8
80007b08:	6e 28       	ld.w	r8,r7[0x8]
80007b0a:	0c 18       	sub	r8,r6
80007b0c:	8f 28       	st.w	r7[0x8],r8
80007b0e:	62 28       	ld.w	r8,r1[0x8]
80007b10:	08 18       	sub	r8,r4
80007b12:	83 28       	st.w	r1[0x8],r8
80007b14:	c6 e0       	breq	80007bf0 <__sfvwrite_r+0x298>
80007b16:	08 16       	sub	r6,r4
80007b18:	08 03       	add	r3,r4
80007b1a:	c6 fb       	rjmp	800079f8 <__sfvwrite_r+0xa0>
80007b1c:	60 03       	ld.w	r3,r0[0x0]
80007b1e:	60 11       	ld.w	r1,r0[0x4]
80007b20:	30 08       	mov	r8,0
80007b22:	2f 80       	sub	r0,-8
80007b24:	50 08       	stdsp	sp[0x0],r8
80007b26:	58 01       	cp.w	r1,0
80007b28:	cf a0       	breq	80007b1c <__sfvwrite_r+0x1c4>
80007b2a:	40 0a       	lddsp	r10,sp[0x0]
80007b2c:	58 0a       	cp.w	r10,0
80007b2e:	c1 51       	brne	80007b58 <__sfvwrite_r+0x200>
80007b30:	e2 c6 ff ff 	sub	r6,r1,-1
80007b34:	02 9a       	mov	r10,r1
80007b36:	30 ab       	mov	r11,10
80007b38:	06 9c       	mov	r12,r3
80007b3a:	e0 a0 03 07 	rcall	80008148 <memchr>
80007b3e:	f8 c8 ff ff 	sub	r8,r12,-1
80007b42:	58 0c       	cp.w	r12,0
80007b44:	f1 d3 e1 16 	subne	r6,r8,r3
80007b48:	f9 b9 01 01 	movne	r9,1
80007b4c:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007b50:	f9 b8 00 01 	moveq	r8,1
80007b54:	fb f8 0a 00 	st.weq	sp[0x0],r8
80007b58:	02 36       	cp.w	r6,r1
80007b5a:	ec 04 17 80 	movls	r4,r6
80007b5e:	e2 04 17 b0 	movhi	r4,r1
80007b62:	6e 59       	ld.w	r9,r7[0x14]
80007b64:	6e 25       	ld.w	r5,r7[0x8]
80007b66:	f2 05 00 05 	add	r5,r9,r5
80007b6a:	0a 34       	cp.w	r4,r5
80007b6c:	5f 9a       	srgt	r10
80007b6e:	6e 0c       	ld.w	r12,r7[0x0]
80007b70:	6e 48       	ld.w	r8,r7[0x10]
80007b72:	10 3c       	cp.w	r12,r8
80007b74:	5f b8       	srhi	r8
80007b76:	f5 e8 00 08 	and	r8,r10,r8
80007b7a:	30 0a       	mov	r10,0
80007b7c:	f4 08 18 00 	cp.b	r8,r10
80007b80:	c0 e0       	breq	80007b9c <__sfvwrite_r+0x244>
80007b82:	06 9b       	mov	r11,r3
80007b84:	0a 9a       	mov	r10,r5
80007b86:	e0 a0 02 ec 	rcall	8000815e <memmove>
80007b8a:	6e 08       	ld.w	r8,r7[0x0]
80007b8c:	0a 08       	add	r8,r5
80007b8e:	0e 9b       	mov	r11,r7
80007b90:	8f 08       	st.w	r7[0x0],r8
80007b92:	40 1c       	lddsp	r12,sp[0x4]
80007b94:	fe b0 fc aa 	rcall	800074e8 <_fflush_r>
80007b98:	c1 80       	breq	80007bc8 <__sfvwrite_r+0x270>
80007b9a:	c2 68       	rjmp	80007be6 <__sfvwrite_r+0x28e>
80007b9c:	12 34       	cp.w	r4,r9
80007b9e:	c0 a5       	brlt	80007bb2 <__sfvwrite_r+0x25a>
80007ba0:	6e a8       	ld.w	r8,r7[0x28]
80007ba2:	06 9a       	mov	r10,r3
80007ba4:	6e 8b       	ld.w	r11,r7[0x20]
80007ba6:	40 1c       	lddsp	r12,sp[0x4]
80007ba8:	5d 18       	icall	r8
80007baa:	18 95       	mov	r5,r12
80007bac:	e0 89 00 0e 	brgt	80007bc8 <__sfvwrite_r+0x270>
80007bb0:	c1 b8       	rjmp	80007be6 <__sfvwrite_r+0x28e>
80007bb2:	08 9a       	mov	r10,r4
80007bb4:	06 9b       	mov	r11,r3
80007bb6:	e0 a0 02 d4 	rcall	8000815e <memmove>
80007bba:	6e 08       	ld.w	r8,r7[0x0]
80007bbc:	08 08       	add	r8,r4
80007bbe:	08 95       	mov	r5,r4
80007bc0:	8f 08       	st.w	r7[0x0],r8
80007bc2:	6e 28       	ld.w	r8,r7[0x8]
80007bc4:	08 18       	sub	r8,r4
80007bc6:	8f 28       	st.w	r7[0x8],r8
80007bc8:	0a 16       	sub	r6,r5
80007bca:	c0 71       	brne	80007bd8 <__sfvwrite_r+0x280>
80007bcc:	0e 9b       	mov	r11,r7
80007bce:	40 1c       	lddsp	r12,sp[0x4]
80007bd0:	fe b0 fc 8c 	rcall	800074e8 <_fflush_r>
80007bd4:	c0 91       	brne	80007be6 <__sfvwrite_r+0x28e>
80007bd6:	50 06       	stdsp	sp[0x0],r6
80007bd8:	64 28       	ld.w	r8,r2[0x8]
80007bda:	0a 18       	sub	r8,r5
80007bdc:	85 28       	st.w	r2[0x8],r8
80007bde:	c0 90       	breq	80007bf0 <__sfvwrite_r+0x298>
80007be0:	0a 11       	sub	r1,r5
80007be2:	0a 03       	add	r3,r5
80007be4:	ca 1b       	rjmp	80007b26 <__sfvwrite_r+0x1ce>
80007be6:	8e 68       	ld.sh	r8,r7[0xc]
80007be8:	a7 a8       	sbr	r8,0x6
80007bea:	ae 68       	st.h	r7[0xc],r8
80007bec:	3f fc       	mov	r12,-1
80007bee:	c0 28       	rjmp	80007bf2 <__sfvwrite_r+0x29a>
80007bf0:	30 0c       	mov	r12,0
80007bf2:	2f dd       	sub	sp,-12
80007bf4:	d8 32       	popm	r0-r7,pc
80007bf6:	d7 03       	nop

80007bf8 <_fwalk>:
80007bf8:	d4 31       	pushm	r0-r7,lr
80007bfa:	30 05       	mov	r5,0
80007bfc:	16 91       	mov	r1,r11
80007bfe:	f8 c7 ff 28 	sub	r7,r12,-216
80007c02:	0a 92       	mov	r2,r5
80007c04:	fe b0 fc f8 	rcall	800075f4 <__sfp_lock_acquire>
80007c08:	3f f3       	mov	r3,-1
80007c0a:	c1 68       	rjmp	80007c36 <_fwalk+0x3e>
80007c0c:	6e 26       	ld.w	r6,r7[0x8]
80007c0e:	6e 14       	ld.w	r4,r7[0x4]
80007c10:	2f 46       	sub	r6,-12
80007c12:	c0 c8       	rjmp	80007c2a <_fwalk+0x32>
80007c14:	8c 08       	ld.sh	r8,r6[0x0]
80007c16:	e4 08 19 00 	cp.h	r8,r2
80007c1a:	c0 70       	breq	80007c28 <_fwalk+0x30>
80007c1c:	8c 18       	ld.sh	r8,r6[0x2]
80007c1e:	e6 08 19 00 	cp.h	r8,r3
80007c22:	c0 30       	breq	80007c28 <_fwalk+0x30>
80007c24:	5d 11       	icall	r1
80007c26:	18 45       	or	r5,r12
80007c28:	2a 46       	sub	r6,-92
80007c2a:	20 14       	sub	r4,1
80007c2c:	ec cc 00 0c 	sub	r12,r6,12
80007c30:	58 04       	cp.w	r4,0
80007c32:	cf 14       	brge	80007c14 <_fwalk+0x1c>
80007c34:	6e 07       	ld.w	r7,r7[0x0]
80007c36:	58 07       	cp.w	r7,0
80007c38:	ce a1       	brne	80007c0c <_fwalk+0x14>
80007c3a:	fe b0 fc de 	rcall	800075f6 <__sfp_lock_release>
80007c3e:	0a 9c       	mov	r12,r5
80007c40:	d8 32       	popm	r0-r7,pc
80007c42:	d7 03       	nop

80007c44 <_localeconv_r>:
80007c44:	fe cc da a8 	sub	r12,pc,-9560
80007c48:	5e fc       	retal	r12
80007c4a:	d7 03       	nop

80007c4c <__smakebuf_r>:
80007c4c:	d4 21       	pushm	r4-r7,lr
80007c4e:	20 fd       	sub	sp,60
80007c50:	96 68       	ld.sh	r8,r11[0xc]
80007c52:	16 97       	mov	r7,r11
80007c54:	18 96       	mov	r6,r12
80007c56:	e2 18 00 02 	andl	r8,0x2,COH
80007c5a:	c3 c1       	brne	80007cd2 <__smakebuf_r+0x86>
80007c5c:	96 7b       	ld.sh	r11,r11[0xe]
80007c5e:	f0 0b 19 00 	cp.h	r11,r8
80007c62:	c0 55       	brlt	80007c6c <__smakebuf_r+0x20>
80007c64:	1a 9a       	mov	r10,sp
80007c66:	e0 a0 08 9d 	rcall	80008da0 <_fstat_r>
80007c6a:	c0 f4       	brge	80007c88 <__smakebuf_r+0x3c>
80007c6c:	8e 65       	ld.sh	r5,r7[0xc]
80007c6e:	0a 98       	mov	r8,r5
80007c70:	ab b8       	sbr	r8,0xb
80007c72:	e2 15 00 80 	andl	r5,0x80,COH
80007c76:	ae 68       	st.h	r7[0xc],r8
80007c78:	30 04       	mov	r4,0
80007c7a:	e0 68 04 00 	mov	r8,1024
80007c7e:	f9 b5 01 40 	movne	r5,64
80007c82:	f0 05 17 00 	moveq	r5,r8
80007c86:	c1 c8       	rjmp	80007cbe <__smakebuf_r+0x72>
80007c88:	40 18       	lddsp	r8,sp[0x4]
80007c8a:	e2 18 f0 00 	andl	r8,0xf000,COH
80007c8e:	e0 48 20 00 	cp.w	r8,8192
80007c92:	5f 04       	sreq	r4
80007c94:	e0 48 80 00 	cp.w	r8,32768
80007c98:	c0 e1       	brne	80007cb4 <__smakebuf_r+0x68>
80007c9a:	6e b9       	ld.w	r9,r7[0x2c]
80007c9c:	fe c8 f1 e8 	sub	r8,pc,-3608
80007ca0:	10 39       	cp.w	r9,r8
80007ca2:	c0 91       	brne	80007cb4 <__smakebuf_r+0x68>
80007ca4:	8e 68       	ld.sh	r8,r7[0xc]
80007ca6:	e0 65 04 00 	mov	r5,1024
80007caa:	ab a8       	sbr	r8,0xa
80007cac:	ef 45 00 50 	st.w	r7[80],r5
80007cb0:	ae 68       	st.h	r7[0xc],r8
80007cb2:	c0 68       	rjmp	80007cbe <__smakebuf_r+0x72>
80007cb4:	8e 68       	ld.sh	r8,r7[0xc]
80007cb6:	e0 65 04 00 	mov	r5,1024
80007cba:	ab b8       	sbr	r8,0xb
80007cbc:	ae 68       	st.h	r7[0xc],r8
80007cbe:	0a 9b       	mov	r11,r5
80007cc0:	0c 9c       	mov	r12,r6
80007cc2:	c2 bc       	rcall	80007d18 <_malloc_r>
80007cc4:	8e 68       	ld.sh	r8,r7[0xc]
80007cc6:	c0 d1       	brne	80007ce0 <__smakebuf_r+0x94>
80007cc8:	ed b8 00 09 	bld	r8,0x9
80007ccc:	c1 b0       	breq	80007d02 <__smakebuf_r+0xb6>
80007cce:	a1 b8       	sbr	r8,0x1
80007cd0:	ae 68       	st.h	r7[0xc],r8
80007cd2:	ee c8 ff b9 	sub	r8,r7,-71
80007cd6:	8f 48       	st.w	r7[0x10],r8
80007cd8:	8f 08       	st.w	r7[0x0],r8
80007cda:	30 18       	mov	r8,1
80007cdc:	8f 58       	st.w	r7[0x14],r8
80007cde:	c1 28       	rjmp	80007d02 <__smakebuf_r+0xb6>
80007ce0:	a7 b8       	sbr	r8,0x7
80007ce2:	8f 4c       	st.w	r7[0x10],r12
80007ce4:	ae 68       	st.h	r7[0xc],r8
80007ce6:	8f 55       	st.w	r7[0x14],r5
80007ce8:	fe c8 06 f0 	sub	r8,pc,1776
80007cec:	8f 0c       	st.w	r7[0x0],r12
80007cee:	8d a8       	st.w	r6[0x28],r8
80007cf0:	58 04       	cp.w	r4,0
80007cf2:	c0 80       	breq	80007d02 <__smakebuf_r+0xb6>
80007cf4:	8e 7c       	ld.sh	r12,r7[0xe]
80007cf6:	e0 a0 07 47 	rcall	80008b84 <isatty>
80007cfa:	c0 40       	breq	80007d02 <__smakebuf_r+0xb6>
80007cfc:	8e 68       	ld.sh	r8,r7[0xc]
80007cfe:	a1 a8       	sbr	r8,0x0
80007d00:	ae 68       	st.h	r7[0xc],r8
80007d02:	2f 1d       	sub	sp,-60
80007d04:	d8 22       	popm	r4-r7,pc
80007d06:	d7 03       	nop

80007d08 <malloc>:
80007d08:	d4 01       	pushm	lr
80007d0a:	e0 68 00 fc 	mov	r8,252
80007d0e:	18 9b       	mov	r11,r12
80007d10:	70 0c       	ld.w	r12,r8[0x0]
80007d12:	c0 3c       	rcall	80007d18 <_malloc_r>
80007d14:	d8 02       	popm	pc
80007d16:	d7 03       	nop

80007d18 <_malloc_r>:
80007d18:	d4 31       	pushm	r0-r7,lr
80007d1a:	f6 c8 ff f5 	sub	r8,r11,-11
80007d1e:	18 95       	mov	r5,r12
80007d20:	10 97       	mov	r7,r8
80007d22:	e0 17 ff f8 	andl	r7,0xfff8
80007d26:	59 68       	cp.w	r8,22
80007d28:	f9 b7 08 10 	movls	r7,16
80007d2c:	16 37       	cp.w	r7,r11
80007d2e:	5f 38       	srlo	r8
80007d30:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007d34:	c0 50       	breq	80007d3e <_malloc_r+0x26>
80007d36:	30 c8       	mov	r8,12
80007d38:	99 38       	st.w	r12[0xc],r8
80007d3a:	e0 8f 01 f7 	bral	80008128 <_malloc_r+0x410>
80007d3e:	e0 a0 02 36 	rcall	800081aa <__malloc_lock>
80007d42:	e0 47 01 f7 	cp.w	r7,503
80007d46:	e0 8b 00 1d 	brhi	80007d80 <_malloc_r+0x68>
80007d4a:	ee 03 16 03 	lsr	r3,r7,0x3
80007d4e:	e0 68 01 00 	mov	r8,256
80007d52:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007d56:	70 36       	ld.w	r6,r8[0xc]
80007d58:	10 36       	cp.w	r6,r8
80007d5a:	c0 61       	brne	80007d66 <_malloc_r+0x4e>
80007d5c:	ec c8 ff f8 	sub	r8,r6,-8
80007d60:	70 36       	ld.w	r6,r8[0xc]
80007d62:	10 36       	cp.w	r6,r8
80007d64:	c0 c0       	breq	80007d7c <_malloc_r+0x64>
80007d66:	6c 18       	ld.w	r8,r6[0x4]
80007d68:	e0 18 ff fc 	andl	r8,0xfffc
80007d6c:	6c 3a       	ld.w	r10,r6[0xc]
80007d6e:	ec 08 00 09 	add	r9,r6,r8
80007d72:	0a 9c       	mov	r12,r5
80007d74:	6c 28       	ld.w	r8,r6[0x8]
80007d76:	95 28       	st.w	r10[0x8],r8
80007d78:	91 3a       	st.w	r8[0xc],r10
80007d7a:	c4 78       	rjmp	80007e08 <_malloc_r+0xf0>
80007d7c:	2f e3       	sub	r3,-2
80007d7e:	c4 d8       	rjmp	80007e18 <_malloc_r+0x100>
80007d80:	ee 03 16 09 	lsr	r3,r7,0x9
80007d84:	c0 41       	brne	80007d8c <_malloc_r+0x74>
80007d86:	ee 03 16 03 	lsr	r3,r7,0x3
80007d8a:	c2 68       	rjmp	80007dd6 <_malloc_r+0xbe>
80007d8c:	58 43       	cp.w	r3,4
80007d8e:	e0 8b 00 06 	brhi	80007d9a <_malloc_r+0x82>
80007d92:	ee 03 16 06 	lsr	r3,r7,0x6
80007d96:	2c 83       	sub	r3,-56
80007d98:	c1 f8       	rjmp	80007dd6 <_malloc_r+0xbe>
80007d9a:	59 43       	cp.w	r3,20
80007d9c:	e0 8b 00 04 	brhi	80007da4 <_malloc_r+0x8c>
80007da0:	2a 53       	sub	r3,-91
80007da2:	c1 a8       	rjmp	80007dd6 <_malloc_r+0xbe>
80007da4:	e0 43 00 54 	cp.w	r3,84
80007da8:	e0 8b 00 06 	brhi	80007db4 <_malloc_r+0x9c>
80007dac:	ee 03 16 0c 	lsr	r3,r7,0xc
80007db0:	29 23       	sub	r3,-110
80007db2:	c1 28       	rjmp	80007dd6 <_malloc_r+0xbe>
80007db4:	e0 43 01 54 	cp.w	r3,340
80007db8:	e0 8b 00 06 	brhi	80007dc4 <_malloc_r+0xac>
80007dbc:	ee 03 16 0f 	lsr	r3,r7,0xf
80007dc0:	28 93       	sub	r3,-119
80007dc2:	c0 a8       	rjmp	80007dd6 <_malloc_r+0xbe>
80007dc4:	e0 43 05 54 	cp.w	r3,1364
80007dc8:	e0 88 00 04 	brls	80007dd0 <_malloc_r+0xb8>
80007dcc:	37 e3       	mov	r3,126
80007dce:	c0 48       	rjmp	80007dd6 <_malloc_r+0xbe>
80007dd0:	ee 03 16 12 	lsr	r3,r7,0x12
80007dd4:	28 43       	sub	r3,-124
80007dd6:	e0 6a 01 00 	mov	r10,256
80007dda:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007dde:	74 36       	ld.w	r6,r10[0xc]
80007de0:	c1 98       	rjmp	80007e12 <_malloc_r+0xfa>
80007de2:	6c 19       	ld.w	r9,r6[0x4]
80007de4:	e0 19 ff fc 	andl	r9,0xfffc
80007de8:	f2 07 01 0b 	sub	r11,r9,r7
80007dec:	58 fb       	cp.w	r11,15
80007dee:	e0 8a 00 04 	brle	80007df6 <_malloc_r+0xde>
80007df2:	20 13       	sub	r3,1
80007df4:	c1 18       	rjmp	80007e16 <_malloc_r+0xfe>
80007df6:	6c 38       	ld.w	r8,r6[0xc]
80007df8:	58 0b       	cp.w	r11,0
80007dfa:	c0 b5       	brlt	80007e10 <_malloc_r+0xf8>
80007dfc:	6c 2a       	ld.w	r10,r6[0x8]
80007dfe:	ec 09 00 09 	add	r9,r6,r9
80007e02:	0a 9c       	mov	r12,r5
80007e04:	91 2a       	st.w	r8[0x8],r10
80007e06:	95 38       	st.w	r10[0xc],r8
80007e08:	72 18       	ld.w	r8,r9[0x4]
80007e0a:	a1 a8       	sbr	r8,0x0
80007e0c:	93 18       	st.w	r9[0x4],r8
80007e0e:	cb c8       	rjmp	80007f86 <_malloc_r+0x26e>
80007e10:	10 96       	mov	r6,r8
80007e12:	14 36       	cp.w	r6,r10
80007e14:	ce 71       	brne	80007de2 <_malloc_r+0xca>
80007e16:	2f f3       	sub	r3,-1
80007e18:	e0 6a 01 00 	mov	r10,256
80007e1c:	f4 cc ff f8 	sub	r12,r10,-8
80007e20:	78 26       	ld.w	r6,r12[0x8]
80007e22:	18 36       	cp.w	r6,r12
80007e24:	c6 c0       	breq	80007efc <_malloc_r+0x1e4>
80007e26:	6c 19       	ld.w	r9,r6[0x4]
80007e28:	e0 19 ff fc 	andl	r9,0xfffc
80007e2c:	f2 07 01 08 	sub	r8,r9,r7
80007e30:	58 f8       	cp.w	r8,15
80007e32:	e0 89 00 8f 	brgt	80007f50 <_malloc_r+0x238>
80007e36:	99 3c       	st.w	r12[0xc],r12
80007e38:	99 2c       	st.w	r12[0x8],r12
80007e3a:	58 08       	cp.w	r8,0
80007e3c:	c0 55       	brlt	80007e46 <_malloc_r+0x12e>
80007e3e:	ec 09 00 09 	add	r9,r6,r9
80007e42:	0a 9c       	mov	r12,r5
80007e44:	ce 2b       	rjmp	80007e08 <_malloc_r+0xf0>
80007e46:	e0 49 01 ff 	cp.w	r9,511
80007e4a:	e0 8b 00 13 	brhi	80007e70 <_malloc_r+0x158>
80007e4e:	a3 99       	lsr	r9,0x3
80007e50:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007e54:	70 2b       	ld.w	r11,r8[0x8]
80007e56:	8d 38       	st.w	r6[0xc],r8
80007e58:	8d 2b       	st.w	r6[0x8],r11
80007e5a:	97 36       	st.w	r11[0xc],r6
80007e5c:	91 26       	st.w	r8[0x8],r6
80007e5e:	a3 49       	asr	r9,0x2
80007e60:	74 18       	ld.w	r8,r10[0x4]
80007e62:	30 1b       	mov	r11,1
80007e64:	f6 09 09 49 	lsl	r9,r11,r9
80007e68:	f1 e9 10 09 	or	r9,r8,r9
80007e6c:	95 19       	st.w	r10[0x4],r9
80007e6e:	c4 78       	rjmp	80007efc <_malloc_r+0x1e4>
80007e70:	f2 0a 16 09 	lsr	r10,r9,0x9
80007e74:	58 4a       	cp.w	r10,4
80007e76:	e0 8b 00 07 	brhi	80007e84 <_malloc_r+0x16c>
80007e7a:	f2 0a 16 06 	lsr	r10,r9,0x6
80007e7e:	2c 8a       	sub	r10,-56
80007e80:	c2 08       	rjmp	80007ec0 <_malloc_r+0x1a8>
80007e82:	d7 03       	nop
80007e84:	59 4a       	cp.w	r10,20
80007e86:	e0 8b 00 04 	brhi	80007e8e <_malloc_r+0x176>
80007e8a:	2a 5a       	sub	r10,-91
80007e8c:	c1 a8       	rjmp	80007ec0 <_malloc_r+0x1a8>
80007e8e:	e0 4a 00 54 	cp.w	r10,84
80007e92:	e0 8b 00 06 	brhi	80007e9e <_malloc_r+0x186>
80007e96:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007e9a:	29 2a       	sub	r10,-110
80007e9c:	c1 28       	rjmp	80007ec0 <_malloc_r+0x1a8>
80007e9e:	e0 4a 01 54 	cp.w	r10,340
80007ea2:	e0 8b 00 06 	brhi	80007eae <_malloc_r+0x196>
80007ea6:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007eaa:	28 9a       	sub	r10,-119
80007eac:	c0 a8       	rjmp	80007ec0 <_malloc_r+0x1a8>
80007eae:	e0 4a 05 54 	cp.w	r10,1364
80007eb2:	e0 88 00 04 	brls	80007eba <_malloc_r+0x1a2>
80007eb6:	37 ea       	mov	r10,126
80007eb8:	c0 48       	rjmp	80007ec0 <_malloc_r+0x1a8>
80007eba:	f2 0a 16 12 	lsr	r10,r9,0x12
80007ebe:	28 4a       	sub	r10,-124
80007ec0:	e0 6b 01 00 	mov	r11,256
80007ec4:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007ec8:	68 28       	ld.w	r8,r4[0x8]
80007eca:	08 38       	cp.w	r8,r4
80007ecc:	c0 e1       	brne	80007ee8 <_malloc_r+0x1d0>
80007ece:	76 19       	ld.w	r9,r11[0x4]
80007ed0:	a3 4a       	asr	r10,0x2
80007ed2:	30 1e       	mov	lr,1
80007ed4:	fc 0a 09 4a 	lsl	r10,lr,r10
80007ed8:	f3 ea 10 0a 	or	r10,r9,r10
80007edc:	10 99       	mov	r9,r8
80007ede:	97 1a       	st.w	r11[0x4],r10
80007ee0:	c0 a8       	rjmp	80007ef4 <_malloc_r+0x1dc>
80007ee2:	70 28       	ld.w	r8,r8[0x8]
80007ee4:	08 38       	cp.w	r8,r4
80007ee6:	c0 60       	breq	80007ef2 <_malloc_r+0x1da>
80007ee8:	70 1a       	ld.w	r10,r8[0x4]
80007eea:	e0 1a ff fc 	andl	r10,0xfffc
80007eee:	14 39       	cp.w	r9,r10
80007ef0:	cf 93       	brcs	80007ee2 <_malloc_r+0x1ca>
80007ef2:	70 39       	ld.w	r9,r8[0xc]
80007ef4:	8d 39       	st.w	r6[0xc],r9
80007ef6:	8d 28       	st.w	r6[0x8],r8
80007ef8:	91 36       	st.w	r8[0xc],r6
80007efa:	93 26       	st.w	r9[0x8],r6
80007efc:	e6 08 14 02 	asr	r8,r3,0x2
80007f00:	30 1b       	mov	r11,1
80007f02:	e0 64 01 00 	mov	r4,256
80007f06:	f6 08 09 4b 	lsl	r11,r11,r8
80007f0a:	68 18       	ld.w	r8,r4[0x4]
80007f0c:	10 3b       	cp.w	r11,r8
80007f0e:	e0 8b 00 69 	brhi	80007fe0 <_malloc_r+0x2c8>
80007f12:	f7 e8 00 09 	and	r9,r11,r8
80007f16:	c0 b1       	brne	80007f2c <_malloc_r+0x214>
80007f18:	e0 13 ff fc 	andl	r3,0xfffc
80007f1c:	a1 7b       	lsl	r11,0x1
80007f1e:	2f c3       	sub	r3,-4
80007f20:	c0 38       	rjmp	80007f26 <_malloc_r+0x20e>
80007f22:	2f c3       	sub	r3,-4
80007f24:	a1 7b       	lsl	r11,0x1
80007f26:	f7 e8 00 09 	and	r9,r11,r8
80007f2a:	cf c0       	breq	80007f22 <_malloc_r+0x20a>
80007f2c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007f30:	06 92       	mov	r2,r3
80007f32:	1c 91       	mov	r1,lr
80007f34:	62 36       	ld.w	r6,r1[0xc]
80007f36:	c2 d8       	rjmp	80007f90 <_malloc_r+0x278>
80007f38:	6c 1a       	ld.w	r10,r6[0x4]
80007f3a:	e0 1a ff fc 	andl	r10,0xfffc
80007f3e:	f4 07 01 08 	sub	r8,r10,r7
80007f42:	58 f8       	cp.w	r8,15
80007f44:	e0 8a 00 15 	brle	80007f6e <_malloc_r+0x256>
80007f48:	6c 3a       	ld.w	r10,r6[0xc]
80007f4a:	6c 29       	ld.w	r9,r6[0x8]
80007f4c:	95 29       	st.w	r10[0x8],r9
80007f4e:	93 3a       	st.w	r9[0xc],r10
80007f50:	0e 99       	mov	r9,r7
80007f52:	ec 07 00 07 	add	r7,r6,r7
80007f56:	a1 a9       	sbr	r9,0x0
80007f58:	99 37       	st.w	r12[0xc],r7
80007f5a:	99 27       	st.w	r12[0x8],r7
80007f5c:	8d 19       	st.w	r6[0x4],r9
80007f5e:	ee 08 09 08 	st.w	r7[r8],r8
80007f62:	8f 2c       	st.w	r7[0x8],r12
80007f64:	8f 3c       	st.w	r7[0xc],r12
80007f66:	a1 a8       	sbr	r8,0x0
80007f68:	0a 9c       	mov	r12,r5
80007f6a:	8f 18       	st.w	r7[0x4],r8
80007f6c:	c0 d8       	rjmp	80007f86 <_malloc_r+0x26e>
80007f6e:	6c 39       	ld.w	r9,r6[0xc]
80007f70:	58 08       	cp.w	r8,0
80007f72:	c0 e5       	brlt	80007f8e <_malloc_r+0x276>
80007f74:	ec 0a 00 0a 	add	r10,r6,r10
80007f78:	74 18       	ld.w	r8,r10[0x4]
80007f7a:	a1 a8       	sbr	r8,0x0
80007f7c:	0a 9c       	mov	r12,r5
80007f7e:	95 18       	st.w	r10[0x4],r8
80007f80:	6c 28       	ld.w	r8,r6[0x8]
80007f82:	93 28       	st.w	r9[0x8],r8
80007f84:	91 39       	st.w	r8[0xc],r9
80007f86:	c1 3d       	rcall	800081ac <__malloc_unlock>
80007f88:	ec cc ff f8 	sub	r12,r6,-8
80007f8c:	d8 32       	popm	r0-r7,pc
80007f8e:	12 96       	mov	r6,r9
80007f90:	02 36       	cp.w	r6,r1
80007f92:	cd 31       	brne	80007f38 <_malloc_r+0x220>
80007f94:	2f f2       	sub	r2,-1
80007f96:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007f9a:	c0 30       	breq	80007fa0 <_malloc_r+0x288>
80007f9c:	2f 81       	sub	r1,-8
80007f9e:	cc bb       	rjmp	80007f34 <_malloc_r+0x21c>
80007fa0:	1c 98       	mov	r8,lr
80007fa2:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007fa6:	c0 81       	brne	80007fb6 <_malloc_r+0x29e>
80007fa8:	68 19       	ld.w	r9,r4[0x4]
80007faa:	f6 08 11 ff 	rsub	r8,r11,-1
80007fae:	f3 e8 00 08 	and	r8,r9,r8
80007fb2:	89 18       	st.w	r4[0x4],r8
80007fb4:	c0 78       	rjmp	80007fc2 <_malloc_r+0x2aa>
80007fb6:	f0 c9 00 08 	sub	r9,r8,8
80007fba:	20 13       	sub	r3,1
80007fbc:	70 08       	ld.w	r8,r8[0x0]
80007fbe:	12 38       	cp.w	r8,r9
80007fc0:	cf 10       	breq	80007fa2 <_malloc_r+0x28a>
80007fc2:	a1 7b       	lsl	r11,0x1
80007fc4:	68 18       	ld.w	r8,r4[0x4]
80007fc6:	10 3b       	cp.w	r11,r8
80007fc8:	e0 8b 00 0c 	brhi	80007fe0 <_malloc_r+0x2c8>
80007fcc:	58 0b       	cp.w	r11,0
80007fce:	c0 90       	breq	80007fe0 <_malloc_r+0x2c8>
80007fd0:	04 93       	mov	r3,r2
80007fd2:	c0 38       	rjmp	80007fd8 <_malloc_r+0x2c0>
80007fd4:	2f c3       	sub	r3,-4
80007fd6:	a1 7b       	lsl	r11,0x1
80007fd8:	f7 e8 00 09 	and	r9,r11,r8
80007fdc:	ca 81       	brne	80007f2c <_malloc_r+0x214>
80007fde:	cf bb       	rjmp	80007fd4 <_malloc_r+0x2bc>
80007fe0:	68 23       	ld.w	r3,r4[0x8]
80007fe2:	66 12       	ld.w	r2,r3[0x4]
80007fe4:	e0 12 ff fc 	andl	r2,0xfffc
80007fe8:	0e 32       	cp.w	r2,r7
80007fea:	5f 39       	srlo	r9
80007fec:	e4 07 01 08 	sub	r8,r2,r7
80007ff0:	58 f8       	cp.w	r8,15
80007ff2:	5f aa       	srle	r10
80007ff4:	f5 e9 10 09 	or	r9,r10,r9
80007ff8:	e0 80 00 9a 	breq	8000812c <_malloc_r+0x414>
80007ffc:	e0 68 06 28 	mov	r8,1576
80008000:	70 01       	ld.w	r1,r8[0x0]
80008002:	e0 68 05 0c 	mov	r8,1292
80008006:	2f 01       	sub	r1,-16
80008008:	70 08       	ld.w	r8,r8[0x0]
8000800a:	0e 01       	add	r1,r7
8000800c:	5b f8       	cp.w	r8,-1
8000800e:	c0 40       	breq	80008016 <_malloc_r+0x2fe>
80008010:	28 11       	sub	r1,-127
80008012:	e0 11 ff 80 	andl	r1,0xff80
80008016:	02 9b       	mov	r11,r1
80008018:	0a 9c       	mov	r12,r5
8000801a:	e0 a0 05 39 	rcall	80008a8c <_sbrk_r>
8000801e:	18 96       	mov	r6,r12
80008020:	5b fc       	cp.w	r12,-1
80008022:	c7 50       	breq	8000810c <_malloc_r+0x3f4>
80008024:	e6 02 00 08 	add	r8,r3,r2
80008028:	10 3c       	cp.w	r12,r8
8000802a:	c0 32       	brcc	80008030 <_malloc_r+0x318>
8000802c:	08 33       	cp.w	r3,r4
8000802e:	c6 f1       	brne	8000810c <_malloc_r+0x3f4>
80008030:	e0 6a 06 2c 	mov	r10,1580
80008034:	74 09       	ld.w	r9,r10[0x0]
80008036:	e2 09 00 09 	add	r9,r1,r9
8000803a:	95 09       	st.w	r10[0x0],r9
8000803c:	10 36       	cp.w	r6,r8
8000803e:	c0 a1       	brne	80008052 <_malloc_r+0x33a>
80008040:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80008044:	c0 71       	brne	80008052 <_malloc_r+0x33a>
80008046:	e2 02 00 02 	add	r2,r1,r2
8000804a:	68 28       	ld.w	r8,r4[0x8]
8000804c:	a1 a2       	sbr	r2,0x0
8000804e:	91 12       	st.w	r8[0x4],r2
80008050:	c4 f8       	rjmp	800080ee <_malloc_r+0x3d6>
80008052:	e0 6a 05 0c 	mov	r10,1292
80008056:	74 0b       	ld.w	r11,r10[0x0]
80008058:	5b fb       	cp.w	r11,-1
8000805a:	c0 31       	brne	80008060 <_malloc_r+0x348>
8000805c:	95 06       	st.w	r10[0x0],r6
8000805e:	c0 78       	rjmp	8000806c <_malloc_r+0x354>
80008060:	ec 09 00 09 	add	r9,r6,r9
80008064:	e0 6a 06 2c 	mov	r10,1580
80008068:	10 19       	sub	r9,r8
8000806a:	95 09       	st.w	r10[0x0],r9
8000806c:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80008070:	f0 09 11 08 	rsub	r9,r8,8
80008074:	58 08       	cp.w	r8,0
80008076:	f2 08 17 10 	movne	r8,r9
8000807a:	ed d8 e1 06 	addne	r6,r6,r8
8000807e:	28 08       	sub	r8,-128
80008080:	ec 01 00 01 	add	r1,r6,r1
80008084:	0a 9c       	mov	r12,r5
80008086:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000808a:	f0 01 01 01 	sub	r1,r8,r1
8000808e:	02 9b       	mov	r11,r1
80008090:	e0 a0 04 fe 	rcall	80008a8c <_sbrk_r>
80008094:	e0 68 06 2c 	mov	r8,1580
80008098:	5b fc       	cp.w	r12,-1
8000809a:	ec 0c 17 00 	moveq	r12,r6
8000809e:	f9 b1 00 00 	moveq	r1,0
800080a2:	70 09       	ld.w	r9,r8[0x0]
800080a4:	0c 1c       	sub	r12,r6
800080a6:	89 26       	st.w	r4[0x8],r6
800080a8:	02 0c       	add	r12,r1
800080aa:	12 01       	add	r1,r9
800080ac:	a1 ac       	sbr	r12,0x0
800080ae:	91 01       	st.w	r8[0x0],r1
800080b0:	8d 1c       	st.w	r6[0x4],r12
800080b2:	08 33       	cp.w	r3,r4
800080b4:	c1 d0       	breq	800080ee <_malloc_r+0x3d6>
800080b6:	58 f2       	cp.w	r2,15
800080b8:	e0 8b 00 05 	brhi	800080c2 <_malloc_r+0x3aa>
800080bc:	30 18       	mov	r8,1
800080be:	8d 18       	st.w	r6[0x4],r8
800080c0:	c2 68       	rjmp	8000810c <_malloc_r+0x3f4>
800080c2:	30 59       	mov	r9,5
800080c4:	20 c2       	sub	r2,12
800080c6:	e0 12 ff f8 	andl	r2,0xfff8
800080ca:	e6 02 00 08 	add	r8,r3,r2
800080ce:	91 29       	st.w	r8[0x8],r9
800080d0:	91 19       	st.w	r8[0x4],r9
800080d2:	66 18       	ld.w	r8,r3[0x4]
800080d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800080d8:	e5 e8 10 08 	or	r8,r2,r8
800080dc:	87 18       	st.w	r3[0x4],r8
800080de:	58 f2       	cp.w	r2,15
800080e0:	e0 88 00 07 	brls	800080ee <_malloc_r+0x3d6>
800080e4:	e6 cb ff f8 	sub	r11,r3,-8
800080e8:	0a 9c       	mov	r12,r5
800080ea:	fe b0 fb 71 	rcall	800077cc <_free_r>
800080ee:	e0 69 06 24 	mov	r9,1572
800080f2:	72 0a       	ld.w	r10,r9[0x0]
800080f4:	e0 68 06 2c 	mov	r8,1580
800080f8:	70 08       	ld.w	r8,r8[0x0]
800080fa:	14 38       	cp.w	r8,r10
800080fc:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80008100:	e0 69 06 20 	mov	r9,1568
80008104:	72 0a       	ld.w	r10,r9[0x0]
80008106:	14 38       	cp.w	r8,r10
80008108:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000810c:	68 28       	ld.w	r8,r4[0x8]
8000810e:	70 18       	ld.w	r8,r8[0x4]
80008110:	e0 18 ff fc 	andl	r8,0xfffc
80008114:	0e 38       	cp.w	r8,r7
80008116:	5f 39       	srlo	r9
80008118:	0e 18       	sub	r8,r7
8000811a:	58 f8       	cp.w	r8,15
8000811c:	5f aa       	srle	r10
8000811e:	f5 e9 10 09 	or	r9,r10,r9
80008122:	c0 50       	breq	8000812c <_malloc_r+0x414>
80008124:	0a 9c       	mov	r12,r5
80008126:	c4 3c       	rcall	800081ac <__malloc_unlock>
80008128:	d8 3a       	popm	r0-r7,pc,r12=0
8000812a:	d7 03       	nop
8000812c:	68 26       	ld.w	r6,r4[0x8]
8000812e:	a1 a8       	sbr	r8,0x0
80008130:	0e 99       	mov	r9,r7
80008132:	a1 a9       	sbr	r9,0x0
80008134:	8d 19       	st.w	r6[0x4],r9
80008136:	ec 07 00 07 	add	r7,r6,r7
8000813a:	0a 9c       	mov	r12,r5
8000813c:	89 27       	st.w	r4[0x8],r7
8000813e:	8f 18       	st.w	r7[0x4],r8
80008140:	c3 6c       	rcall	800081ac <__malloc_unlock>
80008142:	ec cc ff f8 	sub	r12,r6,-8
80008146:	d8 32       	popm	r0-r7,pc

80008148 <memchr>:
80008148:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000814c:	c0 68       	rjmp	80008158 <memchr+0x10>
8000814e:	20 1a       	sub	r10,1
80008150:	19 88       	ld.ub	r8,r12[0x0]
80008152:	16 38       	cp.w	r8,r11
80008154:	5e 0c       	reteq	r12
80008156:	2f fc       	sub	r12,-1
80008158:	58 0a       	cp.w	r10,0
8000815a:	cf a1       	brne	8000814e <memchr+0x6>
8000815c:	5e fa       	retal	r10

8000815e <memmove>:
8000815e:	d4 01       	pushm	lr
80008160:	18 3b       	cp.w	r11,r12
80008162:	c1 92       	brcc	80008194 <memmove+0x36>
80008164:	f6 0a 00 09 	add	r9,r11,r10
80008168:	12 3c       	cp.w	r12,r9
8000816a:	c1 52       	brcc	80008194 <memmove+0x36>
8000816c:	f8 0a 00 0b 	add	r11,r12,r10
80008170:	30 08       	mov	r8,0
80008172:	c0 68       	rjmp	8000817e <memmove+0x20>
80008174:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80008178:	20 1a       	sub	r10,1
8000817a:	f6 08 0b 0e 	st.b	r11[r8],lr
8000817e:	20 18       	sub	r8,1
80008180:	58 0a       	cp.w	r10,0
80008182:	cf 91       	brne	80008174 <memmove+0x16>
80008184:	d8 02       	popm	pc
80008186:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000818a:	20 1a       	sub	r10,1
8000818c:	f8 08 0b 09 	st.b	r12[r8],r9
80008190:	2f f8       	sub	r8,-1
80008192:	c0 28       	rjmp	80008196 <memmove+0x38>
80008194:	30 08       	mov	r8,0
80008196:	58 0a       	cp.w	r10,0
80008198:	cf 71       	brne	80008186 <memmove+0x28>
8000819a:	d8 02       	popm	pc

8000819c <memset>:
8000819c:	18 98       	mov	r8,r12
8000819e:	c0 38       	rjmp	800081a4 <memset+0x8>
800081a0:	10 cb       	st.b	r8++,r11
800081a2:	20 1a       	sub	r10,1
800081a4:	58 0a       	cp.w	r10,0
800081a6:	cf d1       	brne	800081a0 <memset+0x4>
800081a8:	5e fc       	retal	r12

800081aa <__malloc_lock>:
800081aa:	5e fc       	retal	r12

800081ac <__malloc_unlock>:
800081ac:	5e fc       	retal	r12

800081ae <__hi0bits>:
800081ae:	18 98       	mov	r8,r12
800081b0:	e0 1c 00 00 	andl	r12,0x0
800081b4:	f0 09 15 10 	lsl	r9,r8,0x10
800081b8:	58 0c       	cp.w	r12,0
800081ba:	f2 08 17 00 	moveq	r8,r9
800081be:	f9 bc 00 10 	moveq	r12,16
800081c2:	f9 bc 01 00 	movne	r12,0
800081c6:	10 9a       	mov	r10,r8
800081c8:	f0 09 15 08 	lsl	r9,r8,0x8
800081cc:	e6 1a ff 00 	andh	r10,0xff00,COH
800081d0:	f7 bc 00 f8 	subeq	r12,-8
800081d4:	f2 08 17 00 	moveq	r8,r9
800081d8:	10 9a       	mov	r10,r8
800081da:	f0 09 15 04 	lsl	r9,r8,0x4
800081de:	e6 1a f0 00 	andh	r10,0xf000,COH
800081e2:	f7 bc 00 fc 	subeq	r12,-4
800081e6:	f2 08 17 00 	moveq	r8,r9
800081ea:	10 9a       	mov	r10,r8
800081ec:	f0 09 15 02 	lsl	r9,r8,0x2
800081f0:	e6 1a c0 00 	andh	r10,0xc000,COH
800081f4:	f7 bc 00 fe 	subeq	r12,-2
800081f8:	f2 08 17 00 	moveq	r8,r9
800081fc:	58 08       	cp.w	r8,0
800081fe:	5e 5c       	retlt	r12
80008200:	ed b8 00 1e 	bld	r8,0x1e
80008204:	f9 bc 01 20 	movne	r12,32
80008208:	f7 bc 00 ff 	subeq	r12,-1
8000820c:	5e fc       	retal	r12

8000820e <__lo0bits>:
8000820e:	18 99       	mov	r9,r12
80008210:	78 08       	ld.w	r8,r12[0x0]
80008212:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80008216:	c1 50       	breq	80008240 <__lo0bits+0x32>
80008218:	ed b8 00 00 	bld	r8,0x0
8000821c:	c0 21       	brne	80008220 <__lo0bits+0x12>
8000821e:	5e fd       	retal	0
80008220:	10 9b       	mov	r11,r8
80008222:	f0 0a 16 01 	lsr	r10,r8,0x1
80008226:	e2 1b 00 02 	andl	r11,0x2,COH
8000822a:	a3 88       	lsr	r8,0x2
8000822c:	58 0b       	cp.w	r11,0
8000822e:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80008232:	f9 bc 01 01 	movne	r12,1
80008236:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000823a:	f9 bc 00 02 	moveq	r12,2
8000823e:	5e fc       	retal	r12
80008240:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80008244:	f0 0b 16 10 	lsr	r11,r8,0x10
80008248:	58 0a       	cp.w	r10,0
8000824a:	f6 08 17 00 	moveq	r8,r11
8000824e:	f9 bc 00 10 	moveq	r12,16
80008252:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80008256:	f0 0a 16 08 	lsr	r10,r8,0x8
8000825a:	58 0b       	cp.w	r11,0
8000825c:	f7 bc 00 f8 	subeq	r12,-8
80008260:	f4 08 17 00 	moveq	r8,r10
80008264:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80008268:	f0 0a 16 04 	lsr	r10,r8,0x4
8000826c:	58 0b       	cp.w	r11,0
8000826e:	f7 bc 00 fc 	subeq	r12,-4
80008272:	f4 08 17 00 	moveq	r8,r10
80008276:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000827a:	f0 0a 16 02 	lsr	r10,r8,0x2
8000827e:	58 0b       	cp.w	r11,0
80008280:	f7 bc 00 fe 	subeq	r12,-2
80008284:	f4 08 17 00 	moveq	r8,r10
80008288:	ed b8 00 00 	bld	r8,0x0
8000828c:	c0 60       	breq	80008298 <__lo0bits+0x8a>
8000828e:	a1 98       	lsr	r8,0x1
80008290:	c0 31       	brne	80008296 <__lo0bits+0x88>
80008292:	32 0c       	mov	r12,32
80008294:	5e fc       	retal	r12
80008296:	2f fc       	sub	r12,-1
80008298:	93 08       	st.w	r9[0x0],r8
8000829a:	5e fc       	retal	r12

8000829c <__mcmp>:
8000829c:	d4 01       	pushm	lr
8000829e:	18 98       	mov	r8,r12
800082a0:	76 49       	ld.w	r9,r11[0x10]
800082a2:	78 4c       	ld.w	r12,r12[0x10]
800082a4:	12 1c       	sub	r12,r9
800082a6:	c1 31       	brne	800082cc <__mcmp+0x30>
800082a8:	2f b9       	sub	r9,-5
800082aa:	a3 69       	lsl	r9,0x2
800082ac:	12 0b       	add	r11,r9
800082ae:	f0 09 00 09 	add	r9,r8,r9
800082b2:	2e c8       	sub	r8,-20
800082b4:	13 4e       	ld.w	lr,--r9
800082b6:	17 4a       	ld.w	r10,--r11
800082b8:	14 3e       	cp.w	lr,r10
800082ba:	c0 60       	breq	800082c6 <__mcmp+0x2a>
800082bc:	f9 bc 03 ff 	movlo	r12,-1
800082c0:	f9 bc 02 01 	movhs	r12,1
800082c4:	d8 02       	popm	pc
800082c6:	10 39       	cp.w	r9,r8
800082c8:	fe 9b ff f6 	brhi	800082b4 <__mcmp+0x18>
800082cc:	d8 02       	popm	pc
800082ce:	d7 03       	nop

800082d0 <_Bfree>:
800082d0:	d4 21       	pushm	r4-r7,lr
800082d2:	18 97       	mov	r7,r12
800082d4:	16 95       	mov	r5,r11
800082d6:	78 96       	ld.w	r6,r12[0x24]
800082d8:	58 06       	cp.w	r6,0
800082da:	c0 91       	brne	800082ec <_Bfree+0x1c>
800082dc:	31 0c       	mov	r12,16
800082de:	fe b0 fd 15 	rcall	80007d08 <malloc>
800082e2:	99 36       	st.w	r12[0xc],r6
800082e4:	8f 9c       	st.w	r7[0x24],r12
800082e6:	99 16       	st.w	r12[0x4],r6
800082e8:	99 26       	st.w	r12[0x8],r6
800082ea:	99 06       	st.w	r12[0x0],r6
800082ec:	58 05       	cp.w	r5,0
800082ee:	c0 90       	breq	80008300 <_Bfree+0x30>
800082f0:	6a 19       	ld.w	r9,r5[0x4]
800082f2:	6e 98       	ld.w	r8,r7[0x24]
800082f4:	70 38       	ld.w	r8,r8[0xc]
800082f6:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
800082fa:	8b 0a       	st.w	r5[0x0],r10
800082fc:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80008300:	d8 22       	popm	r4-r7,pc
80008302:	d7 03       	nop

80008304 <_Balloc>:
80008304:	d4 21       	pushm	r4-r7,lr
80008306:	18 97       	mov	r7,r12
80008308:	16 96       	mov	r6,r11
8000830a:	78 95       	ld.w	r5,r12[0x24]
8000830c:	58 05       	cp.w	r5,0
8000830e:	c0 91       	brne	80008320 <_Balloc+0x1c>
80008310:	31 0c       	mov	r12,16
80008312:	fe b0 fc fb 	rcall	80007d08 <malloc>
80008316:	99 35       	st.w	r12[0xc],r5
80008318:	8f 9c       	st.w	r7[0x24],r12
8000831a:	99 15       	st.w	r12[0x4],r5
8000831c:	99 25       	st.w	r12[0x8],r5
8000831e:	99 05       	st.w	r12[0x0],r5
80008320:	6e 95       	ld.w	r5,r7[0x24]
80008322:	6a 38       	ld.w	r8,r5[0xc]
80008324:	58 08       	cp.w	r8,0
80008326:	c0 b1       	brne	8000833c <_Balloc+0x38>
80008328:	31 0a       	mov	r10,16
8000832a:	30 4b       	mov	r11,4
8000832c:	0e 9c       	mov	r12,r7
8000832e:	e0 a0 04 93 	rcall	80008c54 <_calloc_r>
80008332:	8b 3c       	st.w	r5[0xc],r12
80008334:	6e 98       	ld.w	r8,r7[0x24]
80008336:	70 3c       	ld.w	r12,r8[0xc]
80008338:	58 0c       	cp.w	r12,0
8000833a:	c1 b0       	breq	80008370 <_Balloc+0x6c>
8000833c:	6e 98       	ld.w	r8,r7[0x24]
8000833e:	70 38       	ld.w	r8,r8[0xc]
80008340:	f0 06 00 28 	add	r8,r8,r6<<0x2
80008344:	70 0c       	ld.w	r12,r8[0x0]
80008346:	58 0c       	cp.w	r12,0
80008348:	c0 40       	breq	80008350 <_Balloc+0x4c>
8000834a:	78 09       	ld.w	r9,r12[0x0]
8000834c:	91 09       	st.w	r8[0x0],r9
8000834e:	c0 e8       	rjmp	8000836a <_Balloc+0x66>
80008350:	0e 9c       	mov	r12,r7
80008352:	30 17       	mov	r7,1
80008354:	0e 9b       	mov	r11,r7
80008356:	ee 06 09 47 	lsl	r7,r7,r6
8000835a:	ee ca ff fb 	sub	r10,r7,-5
8000835e:	a3 6a       	lsl	r10,0x2
80008360:	e0 a0 04 7a 	rcall	80008c54 <_calloc_r>
80008364:	c0 60       	breq	80008370 <_Balloc+0x6c>
80008366:	99 16       	st.w	r12[0x4],r6
80008368:	99 27       	st.w	r12[0x8],r7
8000836a:	30 08       	mov	r8,0
8000836c:	99 38       	st.w	r12[0xc],r8
8000836e:	99 48       	st.w	r12[0x10],r8
80008370:	d8 22       	popm	r4-r7,pc
80008372:	d7 03       	nop

80008374 <__d2b>:
80008374:	d4 31       	pushm	r0-r7,lr
80008376:	20 2d       	sub	sp,8
80008378:	16 93       	mov	r3,r11
8000837a:	12 96       	mov	r6,r9
8000837c:	10 95       	mov	r5,r8
8000837e:	14 92       	mov	r2,r10
80008380:	30 1b       	mov	r11,1
80008382:	cc 1f       	rcall	80008304 <_Balloc>
80008384:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80008388:	50 09       	stdsp	sp[0x0],r9
8000838a:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000838e:	b5 a9       	sbr	r9,0x14
80008390:	f0 01 16 14 	lsr	r1,r8,0x14
80008394:	fb f9 1a 00 	st.wne	sp[0x0],r9
80008398:	18 94       	mov	r4,r12
8000839a:	58 02       	cp.w	r2,0
8000839c:	c1 d0       	breq	800083d6 <__d2b+0x62>
8000839e:	fa cc ff f8 	sub	r12,sp,-8
800083a2:	18 d2       	st.w	--r12,r2
800083a4:	c3 5f       	rcall	8000820e <__lo0bits>
800083a6:	40 18       	lddsp	r8,sp[0x4]
800083a8:	c0 d0       	breq	800083c2 <__d2b+0x4e>
800083aa:	40 09       	lddsp	r9,sp[0x0]
800083ac:	f8 0a 11 20 	rsub	r10,r12,32
800083b0:	f2 0a 09 4a 	lsl	r10,r9,r10
800083b4:	f5 e8 10 08 	or	r8,r10,r8
800083b8:	89 58       	st.w	r4[0x14],r8
800083ba:	f2 0c 0a 49 	lsr	r9,r9,r12
800083be:	50 09       	stdsp	sp[0x0],r9
800083c0:	c0 28       	rjmp	800083c4 <__d2b+0x50>
800083c2:	89 58       	st.w	r4[0x14],r8
800083c4:	40 08       	lddsp	r8,sp[0x0]
800083c6:	58 08       	cp.w	r8,0
800083c8:	f9 b3 01 02 	movne	r3,2
800083cc:	f9 b3 00 01 	moveq	r3,1
800083d0:	89 68       	st.w	r4[0x18],r8
800083d2:	89 43       	st.w	r4[0x10],r3
800083d4:	c0 88       	rjmp	800083e4 <__d2b+0x70>
800083d6:	1a 9c       	mov	r12,sp
800083d8:	c1 bf       	rcall	8000820e <__lo0bits>
800083da:	30 13       	mov	r3,1
800083dc:	40 08       	lddsp	r8,sp[0x0]
800083de:	2e 0c       	sub	r12,-32
800083e0:	89 43       	st.w	r4[0x10],r3
800083e2:	89 58       	st.w	r4[0x14],r8
800083e4:	58 01       	cp.w	r1,0
800083e6:	c0 90       	breq	800083f8 <__d2b+0x84>
800083e8:	e2 c1 04 33 	sub	r1,r1,1075
800083ec:	18 01       	add	r1,r12
800083ee:	8d 01       	st.w	r6[0x0],r1
800083f0:	f8 0c 11 35 	rsub	r12,r12,53
800083f4:	8b 0c       	st.w	r5[0x0],r12
800083f6:	c0 c8       	rjmp	8000840e <__d2b+0x9a>
800083f8:	e6 c8 ff fc 	sub	r8,r3,-4
800083fc:	f8 cc 04 32 	sub	r12,r12,1074
80008400:	a5 73       	lsl	r3,0x5
80008402:	8d 0c       	st.w	r6[0x0],r12
80008404:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80008408:	cd 3e       	rcall	800081ae <__hi0bits>
8000840a:	18 13       	sub	r3,r12
8000840c:	8b 03       	st.w	r5[0x0],r3
8000840e:	08 9c       	mov	r12,r4
80008410:	2f ed       	sub	sp,-8
80008412:	d8 32       	popm	r0-r7,pc

80008414 <__mdiff>:
80008414:	d4 31       	pushm	r0-r7,lr
80008416:	74 48       	ld.w	r8,r10[0x10]
80008418:	76 45       	ld.w	r5,r11[0x10]
8000841a:	16 97       	mov	r7,r11
8000841c:	14 96       	mov	r6,r10
8000841e:	10 15       	sub	r5,r8
80008420:	c1 31       	brne	80008446 <__mdiff+0x32>
80008422:	2f b8       	sub	r8,-5
80008424:	ee ce ff ec 	sub	lr,r7,-20
80008428:	a3 68       	lsl	r8,0x2
8000842a:	f4 08 00 0b 	add	r11,r10,r8
8000842e:	ee 08 00 08 	add	r8,r7,r8
80008432:	11 4a       	ld.w	r10,--r8
80008434:	17 49       	ld.w	r9,--r11
80008436:	12 3a       	cp.w	r10,r9
80008438:	c0 30       	breq	8000843e <__mdiff+0x2a>
8000843a:	c0 e2       	brcc	80008456 <__mdiff+0x42>
8000843c:	c0 78       	rjmp	8000844a <__mdiff+0x36>
8000843e:	1c 38       	cp.w	r8,lr
80008440:	fe 9b ff f9 	brhi	80008432 <__mdiff+0x1e>
80008444:	c4 98       	rjmp	800084d6 <__mdiff+0xc2>
80008446:	58 05       	cp.w	r5,0
80008448:	c0 64       	brge	80008454 <__mdiff+0x40>
8000844a:	0e 98       	mov	r8,r7
8000844c:	30 15       	mov	r5,1
8000844e:	0c 97       	mov	r7,r6
80008450:	10 96       	mov	r6,r8
80008452:	c0 28       	rjmp	80008456 <__mdiff+0x42>
80008454:	30 05       	mov	r5,0
80008456:	6e 1b       	ld.w	r11,r7[0x4]
80008458:	c5 6f       	rcall	80008304 <_Balloc>
8000845a:	6e 49       	ld.w	r9,r7[0x10]
8000845c:	6c 44       	ld.w	r4,r6[0x10]
8000845e:	99 35       	st.w	r12[0xc],r5
80008460:	2f b4       	sub	r4,-5
80008462:	f2 c5 ff fb 	sub	r5,r9,-5
80008466:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000846a:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000846e:	2e c6       	sub	r6,-20
80008470:	2e c7       	sub	r7,-20
80008472:	f8 c8 ff ec 	sub	r8,r12,-20
80008476:	30 0a       	mov	r10,0
80008478:	0f 0e       	ld.w	lr,r7++
8000847a:	0d 0b       	ld.w	r11,r6++
8000847c:	fc 02 16 10 	lsr	r2,lr,0x10
80008480:	f6 03 16 10 	lsr	r3,r11,0x10
80008484:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008488:	e4 03 01 03 	sub	r3,r2,r3
8000848c:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008490:	fc 0b 01 0b 	sub	r11,lr,r11
80008494:	f6 0a 00 0a 	add	r10,r11,r10
80008498:	b0 1a       	st.h	r8[0x2],r10
8000849a:	b1 4a       	asr	r10,0x10
8000849c:	e6 0a 00 0a 	add	r10,r3,r10
800084a0:	b0 0a       	st.h	r8[0x0],r10
800084a2:	2f c8       	sub	r8,-4
800084a4:	b1 4a       	asr	r10,0x10
800084a6:	08 36       	cp.w	r6,r4
800084a8:	ce 83       	brcs	80008478 <__mdiff+0x64>
800084aa:	c0 d8       	rjmp	800084c4 <__mdiff+0xb0>
800084ac:	0f 0b       	ld.w	r11,r7++
800084ae:	f6 0e 16 10 	lsr	lr,r11,0x10
800084b2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800084b6:	16 0a       	add	r10,r11
800084b8:	b0 1a       	st.h	r8[0x2],r10
800084ba:	b1 4a       	asr	r10,0x10
800084bc:	1c 0a       	add	r10,lr
800084be:	b0 0a       	st.h	r8[0x0],r10
800084c0:	2f c8       	sub	r8,-4
800084c2:	b1 4a       	asr	r10,0x10
800084c4:	0a 37       	cp.w	r7,r5
800084c6:	cf 33       	brcs	800084ac <__mdiff+0x98>
800084c8:	c0 28       	rjmp	800084cc <__mdiff+0xb8>
800084ca:	20 19       	sub	r9,1
800084cc:	11 4a       	ld.w	r10,--r8
800084ce:	58 0a       	cp.w	r10,0
800084d0:	cf d0       	breq	800084ca <__mdiff+0xb6>
800084d2:	99 49       	st.w	r12[0x10],r9
800084d4:	d8 32       	popm	r0-r7,pc
800084d6:	30 0b       	mov	r11,0
800084d8:	c1 6f       	rcall	80008304 <_Balloc>
800084da:	30 18       	mov	r8,1
800084dc:	99 48       	st.w	r12[0x10],r8
800084de:	30 08       	mov	r8,0
800084e0:	99 58       	st.w	r12[0x14],r8
800084e2:	d8 32       	popm	r0-r7,pc

800084e4 <__lshift>:
800084e4:	d4 31       	pushm	r0-r7,lr
800084e6:	16 97       	mov	r7,r11
800084e8:	76 46       	ld.w	r6,r11[0x10]
800084ea:	f4 02 14 05 	asr	r2,r10,0x5
800084ee:	2f f6       	sub	r6,-1
800084f0:	14 93       	mov	r3,r10
800084f2:	18 94       	mov	r4,r12
800084f4:	04 06       	add	r6,r2
800084f6:	76 1b       	ld.w	r11,r11[0x4]
800084f8:	6e 28       	ld.w	r8,r7[0x8]
800084fa:	c0 38       	rjmp	80008500 <__lshift+0x1c>
800084fc:	2f fb       	sub	r11,-1
800084fe:	a1 78       	lsl	r8,0x1
80008500:	10 36       	cp.w	r6,r8
80008502:	fe 99 ff fd 	brgt	800084fc <__lshift+0x18>
80008506:	08 9c       	mov	r12,r4
80008508:	cf ee       	rcall	80008304 <_Balloc>
8000850a:	30 09       	mov	r9,0
8000850c:	18 95       	mov	r5,r12
8000850e:	f8 c8 ff ec 	sub	r8,r12,-20
80008512:	12 9a       	mov	r10,r9
80008514:	c0 38       	rjmp	8000851a <__lshift+0x36>
80008516:	10 aa       	st.w	r8++,r10
80008518:	2f f9       	sub	r9,-1
8000851a:	04 39       	cp.w	r9,r2
8000851c:	cf d5       	brlt	80008516 <__lshift+0x32>
8000851e:	6e 4b       	ld.w	r11,r7[0x10]
80008520:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80008524:	2f bb       	sub	r11,-5
80008526:	ee c9 ff ec 	sub	r9,r7,-20
8000852a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000852e:	58 03       	cp.w	r3,0
80008530:	c1 30       	breq	80008556 <__lshift+0x72>
80008532:	e6 0c 11 20 	rsub	r12,r3,32
80008536:	30 0a       	mov	r10,0
80008538:	72 02       	ld.w	r2,r9[0x0]
8000853a:	e4 03 09 42 	lsl	r2,r2,r3
8000853e:	04 4a       	or	r10,r2
80008540:	10 aa       	st.w	r8++,r10
80008542:	13 0a       	ld.w	r10,r9++
80008544:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008548:	16 39       	cp.w	r9,r11
8000854a:	cf 73       	brcs	80008538 <__lshift+0x54>
8000854c:	91 0a       	st.w	r8[0x0],r10
8000854e:	58 0a       	cp.w	r10,0
80008550:	c0 70       	breq	8000855e <__lshift+0x7a>
80008552:	2f f6       	sub	r6,-1
80008554:	c0 58       	rjmp	8000855e <__lshift+0x7a>
80008556:	13 0a       	ld.w	r10,r9++
80008558:	10 aa       	st.w	r8++,r10
8000855a:	16 39       	cp.w	r9,r11
8000855c:	cf d3       	brcs	80008556 <__lshift+0x72>
8000855e:	08 9c       	mov	r12,r4
80008560:	20 16       	sub	r6,1
80008562:	0e 9b       	mov	r11,r7
80008564:	8b 46       	st.w	r5[0x10],r6
80008566:	cb 5e       	rcall	800082d0 <_Bfree>
80008568:	0a 9c       	mov	r12,r5
8000856a:	d8 32       	popm	r0-r7,pc

8000856c <__multiply>:
8000856c:	d4 31       	pushm	r0-r7,lr
8000856e:	20 2d       	sub	sp,8
80008570:	76 49       	ld.w	r9,r11[0x10]
80008572:	74 48       	ld.w	r8,r10[0x10]
80008574:	16 96       	mov	r6,r11
80008576:	14 95       	mov	r5,r10
80008578:	10 39       	cp.w	r9,r8
8000857a:	ec 08 17 50 	movlt	r8,r6
8000857e:	ea 06 17 50 	movlt	r6,r5
80008582:	f0 05 17 50 	movlt	r5,r8
80008586:	6c 28       	ld.w	r8,r6[0x8]
80008588:	76 43       	ld.w	r3,r11[0x10]
8000858a:	74 42       	ld.w	r2,r10[0x10]
8000858c:	76 1b       	ld.w	r11,r11[0x4]
8000858e:	e4 03 00 07 	add	r7,r2,r3
80008592:	10 37       	cp.w	r7,r8
80008594:	f7 bb 09 ff 	subgt	r11,-1
80008598:	cb 6e       	rcall	80008304 <_Balloc>
8000859a:	ee c4 ff fb 	sub	r4,r7,-5
8000859e:	f8 c9 ff ec 	sub	r9,r12,-20
800085a2:	f8 04 00 24 	add	r4,r12,r4<<0x2
800085a6:	30 0a       	mov	r10,0
800085a8:	12 98       	mov	r8,r9
800085aa:	c0 28       	rjmp	800085ae <__multiply+0x42>
800085ac:	10 aa       	st.w	r8++,r10
800085ae:	08 38       	cp.w	r8,r4
800085b0:	cf e3       	brcs	800085ac <__multiply+0x40>
800085b2:	2f b3       	sub	r3,-5
800085b4:	2f b2       	sub	r2,-5
800085b6:	ec 03 00 23 	add	r3,r6,r3<<0x2
800085ba:	ea 02 00 22 	add	r2,r5,r2<<0x2
800085be:	ec cb ff ec 	sub	r11,r6,-20
800085c2:	50 12       	stdsp	sp[0x4],r2
800085c4:	ea ca ff ec 	sub	r10,r5,-20
800085c8:	c4 48       	rjmp	80008650 <__multiply+0xe4>
800085ca:	94 95       	ld.uh	r5,r10[0x2]
800085cc:	58 05       	cp.w	r5,0
800085ce:	c2 00       	breq	8000860e <__multiply+0xa2>
800085d0:	12 98       	mov	r8,r9
800085d2:	16 96       	mov	r6,r11
800085d4:	30 0e       	mov	lr,0
800085d6:	50 09       	stdsp	sp[0x0],r9
800085d8:	0d 02       	ld.w	r2,r6++
800085da:	e4 00 16 10 	lsr	r0,r2,0x10
800085de:	70 01       	ld.w	r1,r8[0x0]
800085e0:	70 09       	ld.w	r9,r8[0x0]
800085e2:	b1 81       	lsr	r1,0x10
800085e4:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
800085e8:	e0 05 03 41 	mac	r1,r0,r5
800085ec:	ab 32       	mul	r2,r5
800085ee:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
800085f2:	00 02       	add	r2,r0
800085f4:	e4 0e 00 0e 	add	lr,r2,lr
800085f8:	b0 1e       	st.h	r8[0x2],lr
800085fa:	b1 8e       	lsr	lr,0x10
800085fc:	1c 01       	add	r1,lr
800085fe:	b0 01       	st.h	r8[0x0],r1
80008600:	e2 0e 16 10 	lsr	lr,r1,0x10
80008604:	2f c8       	sub	r8,-4
80008606:	06 36       	cp.w	r6,r3
80008608:	ce 83       	brcs	800085d8 <__multiply+0x6c>
8000860a:	40 09       	lddsp	r9,sp[0x0]
8000860c:	91 0e       	st.w	r8[0x0],lr
8000860e:	94 86       	ld.uh	r6,r10[0x0]
80008610:	58 06       	cp.w	r6,0
80008612:	c1 d0       	breq	8000864c <__multiply+0xe0>
80008614:	72 02       	ld.w	r2,r9[0x0]
80008616:	12 98       	mov	r8,r9
80008618:	16 9e       	mov	lr,r11
8000861a:	30 05       	mov	r5,0
8000861c:	b0 12       	st.h	r8[0x2],r2
8000861e:	1d 01       	ld.w	r1,lr++
80008620:	90 82       	ld.uh	r2,r8[0x0]
80008622:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80008626:	ad 30       	mul	r0,r6
80008628:	e0 02 00 02 	add	r2,r0,r2
8000862c:	e4 05 00 05 	add	r5,r2,r5
80008630:	b0 05       	st.h	r8[0x0],r5
80008632:	b1 85       	lsr	r5,0x10
80008634:	b1 81       	lsr	r1,0x10
80008636:	2f c8       	sub	r8,-4
80008638:	ad 31       	mul	r1,r6
8000863a:	90 92       	ld.uh	r2,r8[0x2]
8000863c:	e2 02 00 02 	add	r2,r1,r2
80008640:	0a 02       	add	r2,r5
80008642:	e4 05 16 10 	lsr	r5,r2,0x10
80008646:	06 3e       	cp.w	lr,r3
80008648:	ce a3       	brcs	8000861c <__multiply+0xb0>
8000864a:	91 02       	st.w	r8[0x0],r2
8000864c:	2f ca       	sub	r10,-4
8000864e:	2f c9       	sub	r9,-4
80008650:	40 18       	lddsp	r8,sp[0x4]
80008652:	10 3a       	cp.w	r10,r8
80008654:	cb b3       	brcs	800085ca <__multiply+0x5e>
80008656:	c0 28       	rjmp	8000865a <__multiply+0xee>
80008658:	20 17       	sub	r7,1
8000865a:	58 07       	cp.w	r7,0
8000865c:	e0 8a 00 05 	brle	80008666 <__multiply+0xfa>
80008660:	09 48       	ld.w	r8,--r4
80008662:	58 08       	cp.w	r8,0
80008664:	cf a0       	breq	80008658 <__multiply+0xec>
80008666:	99 47       	st.w	r12[0x10],r7
80008668:	2f ed       	sub	sp,-8
8000866a:	d8 32       	popm	r0-r7,pc

8000866c <__i2b>:
8000866c:	d4 21       	pushm	r4-r7,lr
8000866e:	16 97       	mov	r7,r11
80008670:	30 1b       	mov	r11,1
80008672:	c4 9e       	rcall	80008304 <_Balloc>
80008674:	30 19       	mov	r9,1
80008676:	99 57       	st.w	r12[0x14],r7
80008678:	99 49       	st.w	r12[0x10],r9
8000867a:	d8 22       	popm	r4-r7,pc

8000867c <__multadd>:
8000867c:	d4 31       	pushm	r0-r7,lr
8000867e:	30 08       	mov	r8,0
80008680:	12 95       	mov	r5,r9
80008682:	16 97       	mov	r7,r11
80008684:	18 96       	mov	r6,r12
80008686:	76 44       	ld.w	r4,r11[0x10]
80008688:	f6 c9 ff ec 	sub	r9,r11,-20
8000868c:	72 0b       	ld.w	r11,r9[0x0]
8000868e:	f6 0c 16 10 	lsr	r12,r11,0x10
80008692:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008696:	f4 0c 02 4c 	mul	r12,r10,r12
8000869a:	f4 0b 03 45 	mac	r5,r10,r11
8000869e:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800086a2:	b1 85       	lsr	r5,0x10
800086a4:	18 05       	add	r5,r12
800086a6:	ea 0c 15 10 	lsl	r12,r5,0x10
800086aa:	f8 0b 00 0b 	add	r11,r12,r11
800086ae:	12 ab       	st.w	r9++,r11
800086b0:	2f f8       	sub	r8,-1
800086b2:	b1 85       	lsr	r5,0x10
800086b4:	08 38       	cp.w	r8,r4
800086b6:	ce b5       	brlt	8000868c <__multadd+0x10>
800086b8:	58 05       	cp.w	r5,0
800086ba:	c1 c0       	breq	800086f2 <__multadd+0x76>
800086bc:	6e 28       	ld.w	r8,r7[0x8]
800086be:	10 34       	cp.w	r4,r8
800086c0:	c1 35       	brlt	800086e6 <__multadd+0x6a>
800086c2:	6e 1b       	ld.w	r11,r7[0x4]
800086c4:	0c 9c       	mov	r12,r6
800086c6:	2f fb       	sub	r11,-1
800086c8:	c1 ee       	rcall	80008304 <_Balloc>
800086ca:	6e 4a       	ld.w	r10,r7[0x10]
800086cc:	ee cb ff f4 	sub	r11,r7,-12
800086d0:	18 93       	mov	r3,r12
800086d2:	2f ea       	sub	r10,-2
800086d4:	2f 4c       	sub	r12,-12
800086d6:	a3 6a       	lsl	r10,0x2
800086d8:	fe b0 de 36 	rcall	80004344 <memcpy>
800086dc:	0e 9b       	mov	r11,r7
800086de:	0c 9c       	mov	r12,r6
800086e0:	fe b0 fd f8 	rcall	800082d0 <_Bfree>
800086e4:	06 97       	mov	r7,r3
800086e6:	e8 c8 ff ff 	sub	r8,r4,-1
800086ea:	2f b4       	sub	r4,-5
800086ec:	8f 48       	st.w	r7[0x10],r8
800086ee:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
800086f2:	0e 9c       	mov	r12,r7
800086f4:	d8 32       	popm	r0-r7,pc
800086f6:	d7 03       	nop

800086f8 <__pow5mult>:
800086f8:	d4 31       	pushm	r0-r7,lr
800086fa:	14 96       	mov	r6,r10
800086fc:	18 97       	mov	r7,r12
800086fe:	16 94       	mov	r4,r11
80008700:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008704:	c0 90       	breq	80008716 <__pow5mult+0x1e>
80008706:	20 18       	sub	r8,1
80008708:	fe c9 e5 2c 	sub	r9,pc,-6868
8000870c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008710:	30 09       	mov	r9,0
80008712:	cb 5f       	rcall	8000867c <__multadd>
80008714:	18 94       	mov	r4,r12
80008716:	a3 46       	asr	r6,0x2
80008718:	c3 40       	breq	80008780 <__pow5mult+0x88>
8000871a:	6e 95       	ld.w	r5,r7[0x24]
8000871c:	58 05       	cp.w	r5,0
8000871e:	c0 91       	brne	80008730 <__pow5mult+0x38>
80008720:	31 0c       	mov	r12,16
80008722:	fe b0 fa f3 	rcall	80007d08 <malloc>
80008726:	99 35       	st.w	r12[0xc],r5
80008728:	8f 9c       	st.w	r7[0x24],r12
8000872a:	99 15       	st.w	r12[0x4],r5
8000872c:	99 25       	st.w	r12[0x8],r5
8000872e:	99 05       	st.w	r12[0x0],r5
80008730:	6e 93       	ld.w	r3,r7[0x24]
80008732:	66 25       	ld.w	r5,r3[0x8]
80008734:	58 05       	cp.w	r5,0
80008736:	c0 c1       	brne	8000874e <__pow5mult+0x56>
80008738:	e0 6b 02 71 	mov	r11,625
8000873c:	0e 9c       	mov	r12,r7
8000873e:	c9 7f       	rcall	8000866c <__i2b>
80008740:	87 2c       	st.w	r3[0x8],r12
80008742:	30 08       	mov	r8,0
80008744:	18 95       	mov	r5,r12
80008746:	99 08       	st.w	r12[0x0],r8
80008748:	c0 38       	rjmp	8000874e <__pow5mult+0x56>
8000874a:	06 9c       	mov	r12,r3
8000874c:	18 95       	mov	r5,r12
8000874e:	ed b6 00 00 	bld	r6,0x0
80008752:	c0 b1       	brne	80008768 <__pow5mult+0x70>
80008754:	08 9b       	mov	r11,r4
80008756:	0a 9a       	mov	r10,r5
80008758:	0e 9c       	mov	r12,r7
8000875a:	c0 9f       	rcall	8000856c <__multiply>
8000875c:	08 9b       	mov	r11,r4
8000875e:	18 93       	mov	r3,r12
80008760:	0e 9c       	mov	r12,r7
80008762:	06 94       	mov	r4,r3
80008764:	fe b0 fd b6 	rcall	800082d0 <_Bfree>
80008768:	a1 56       	asr	r6,0x1
8000876a:	c0 b0       	breq	80008780 <__pow5mult+0x88>
8000876c:	6a 03       	ld.w	r3,r5[0x0]
8000876e:	58 03       	cp.w	r3,0
80008770:	ce d1       	brne	8000874a <__pow5mult+0x52>
80008772:	0a 9a       	mov	r10,r5
80008774:	0a 9b       	mov	r11,r5
80008776:	0e 9c       	mov	r12,r7
80008778:	cf ae       	rcall	8000856c <__multiply>
8000877a:	8b 0c       	st.w	r5[0x0],r12
8000877c:	99 03       	st.w	r12[0x0],r3
8000877e:	ce 7b       	rjmp	8000874c <__pow5mult+0x54>
80008780:	08 9c       	mov	r12,r4
80008782:	d8 32       	popm	r0-r7,pc

80008784 <_realloc_r>:
80008784:	d4 31       	pushm	r0-r7,lr
80008786:	20 1d       	sub	sp,4
80008788:	16 94       	mov	r4,r11
8000878a:	18 92       	mov	r2,r12
8000878c:	14 9b       	mov	r11,r10
8000878e:	58 04       	cp.w	r4,0
80008790:	c0 51       	brne	8000879a <_realloc_r+0x16>
80008792:	fe b0 fa c3 	rcall	80007d18 <_malloc_r>
80008796:	18 95       	mov	r5,r12
80008798:	c5 39       	rjmp	80008a3e <_realloc_r+0x2ba>
8000879a:	50 0a       	stdsp	sp[0x0],r10
8000879c:	fe b0 fd 07 	rcall	800081aa <__malloc_lock>
800087a0:	40 0b       	lddsp	r11,sp[0x0]
800087a2:	f6 c8 ff f5 	sub	r8,r11,-11
800087a6:	e8 c1 00 08 	sub	r1,r4,8
800087aa:	10 96       	mov	r6,r8
800087ac:	62 1c       	ld.w	r12,r1[0x4]
800087ae:	e0 16 ff f8 	andl	r6,0xfff8
800087b2:	59 68       	cp.w	r8,22
800087b4:	f9 b6 08 10 	movls	r6,16
800087b8:	16 36       	cp.w	r6,r11
800087ba:	5f 38       	srlo	r8
800087bc:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
800087c0:	c0 50       	breq	800087ca <_realloc_r+0x46>
800087c2:	30 c8       	mov	r8,12
800087c4:	30 05       	mov	r5,0
800087c6:	85 38       	st.w	r2[0xc],r8
800087c8:	c3 b9       	rjmp	80008a3e <_realloc_r+0x2ba>
800087ca:	18 90       	mov	r0,r12
800087cc:	e0 10 ff fc 	andl	r0,0xfffc
800087d0:	0c 30       	cp.w	r0,r6
800087d2:	e0 84 01 0b 	brge	800089e8 <_realloc_r+0x264>
800087d6:	e0 68 01 00 	mov	r8,256
800087da:	e2 00 00 09 	add	r9,r1,r0
800087de:	70 25       	ld.w	r5,r8[0x8]
800087e0:	0a 39       	cp.w	r9,r5
800087e2:	c0 90       	breq	800087f4 <_realloc_r+0x70>
800087e4:	72 1a       	ld.w	r10,r9[0x4]
800087e6:	a1 ca       	cbr	r10,0x0
800087e8:	f2 0a 00 0a 	add	r10,r9,r10
800087ec:	74 1a       	ld.w	r10,r10[0x4]
800087ee:	ed ba 00 00 	bld	r10,0x0
800087f2:	c2 20       	breq	80008836 <_realloc_r+0xb2>
800087f4:	72 1a       	ld.w	r10,r9[0x4]
800087f6:	e0 1a ff fc 	andl	r10,0xfffc
800087fa:	f4 00 00 03 	add	r3,r10,r0
800087fe:	0a 39       	cp.w	r9,r5
80008800:	c1 31       	brne	80008826 <_realloc_r+0xa2>
80008802:	ec c7 ff f0 	sub	r7,r6,-16
80008806:	0e 33       	cp.w	r3,r7
80008808:	c1 95       	brlt	8000883a <_realloc_r+0xb6>
8000880a:	e2 06 00 09 	add	r9,r1,r6
8000880e:	0c 13       	sub	r3,r6
80008810:	a1 a3       	sbr	r3,0x0
80008812:	93 13       	st.w	r9[0x4],r3
80008814:	91 29       	st.w	r8[0x8],r9
80008816:	04 9c       	mov	r12,r2
80008818:	62 18       	ld.w	r8,r1[0x4]
8000881a:	08 95       	mov	r5,r4
8000881c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008820:	10 46       	or	r6,r8
80008822:	83 16       	st.w	r1[0x4],r6
80008824:	c0 b9       	rjmp	80008a3a <_realloc_r+0x2b6>
80008826:	0c 33       	cp.w	r3,r6
80008828:	c0 95       	brlt	8000883a <_realloc_r+0xb6>
8000882a:	72 28       	ld.w	r8,r9[0x8]
8000882c:	02 97       	mov	r7,r1
8000882e:	72 39       	ld.w	r9,r9[0xc]
80008830:	93 28       	st.w	r9[0x8],r8
80008832:	91 39       	st.w	r8[0xc],r9
80008834:	cd c8       	rjmp	800089ec <_realloc_r+0x268>
80008836:	30 0a       	mov	r10,0
80008838:	14 99       	mov	r9,r10
8000883a:	ed bc 00 00 	bld	r12,0x0
8000883e:	e0 80 00 95 	breq	80008968 <_realloc_r+0x1e4>
80008842:	62 07       	ld.w	r7,r1[0x0]
80008844:	e2 07 01 07 	sub	r7,r1,r7
80008848:	6e 1c       	ld.w	r12,r7[0x4]
8000884a:	e0 1c ff fc 	andl	r12,0xfffc
8000884e:	58 09       	cp.w	r9,0
80008850:	c5 60       	breq	800088fc <_realloc_r+0x178>
80008852:	f8 00 00 03 	add	r3,r12,r0
80008856:	0a 39       	cp.w	r9,r5
80008858:	c4 81       	brne	800088e8 <_realloc_r+0x164>
8000885a:	14 03       	add	r3,r10
8000885c:	ec c9 ff f0 	sub	r9,r6,-16
80008860:	12 33       	cp.w	r3,r9
80008862:	c4 d5       	brlt	800088fc <_realloc_r+0x178>
80008864:	6e 3a       	ld.w	r10,r7[0xc]
80008866:	6e 29       	ld.w	r9,r7[0x8]
80008868:	95 29       	st.w	r10[0x8],r9
8000886a:	93 3a       	st.w	r9[0xc],r10
8000886c:	ee c5 ff f8 	sub	r5,r7,-8
80008870:	e0 ca 00 04 	sub	r10,r0,4
80008874:	e0 4a 00 24 	cp.w	r10,36
80008878:	e0 8b 00 25 	brhi	800088c2 <_realloc_r+0x13e>
8000887c:	0a 99       	mov	r9,r5
8000887e:	59 3a       	cp.w	r10,19
80008880:	e0 88 00 1a 	brls	800088b4 <_realloc_r+0x130>
80008884:	09 09       	ld.w	r9,r4++
80008886:	8b 09       	st.w	r5[0x0],r9
80008888:	09 09       	ld.w	r9,r4++
8000888a:	8f 39       	st.w	r7[0xc],r9
8000888c:	ee c9 ff f0 	sub	r9,r7,-16
80008890:	59 ba       	cp.w	r10,27
80008892:	e0 88 00 11 	brls	800088b4 <_realloc_r+0x130>
80008896:	09 0b       	ld.w	r11,r4++
80008898:	93 0b       	st.w	r9[0x0],r11
8000889a:	09 09       	ld.w	r9,r4++
8000889c:	8f 59       	st.w	r7[0x14],r9
8000889e:	ee c9 ff e8 	sub	r9,r7,-24
800088a2:	e0 4a 00 24 	cp.w	r10,36
800088a6:	c0 71       	brne	800088b4 <_realloc_r+0x130>
800088a8:	09 0a       	ld.w	r10,r4++
800088aa:	93 0a       	st.w	r9[0x0],r10
800088ac:	ee c9 ff e0 	sub	r9,r7,-32
800088b0:	09 0a       	ld.w	r10,r4++
800088b2:	8f 7a       	st.w	r7[0x1c],r10
800088b4:	09 0a       	ld.w	r10,r4++
800088b6:	12 aa       	st.w	r9++,r10
800088b8:	68 0a       	ld.w	r10,r4[0x0]
800088ba:	93 0a       	st.w	r9[0x0],r10
800088bc:	68 1a       	ld.w	r10,r4[0x4]
800088be:	93 1a       	st.w	r9[0x4],r10
800088c0:	c0 78       	rjmp	800088ce <_realloc_r+0x14a>
800088c2:	50 08       	stdsp	sp[0x0],r8
800088c4:	08 9b       	mov	r11,r4
800088c6:	0a 9c       	mov	r12,r5
800088c8:	fe b0 fc 4b 	rcall	8000815e <memmove>
800088cc:	40 08       	lddsp	r8,sp[0x0]
800088ce:	ee 06 00 09 	add	r9,r7,r6
800088d2:	0c 13       	sub	r3,r6
800088d4:	a1 a3       	sbr	r3,0x0
800088d6:	93 13       	st.w	r9[0x4],r3
800088d8:	91 29       	st.w	r8[0x8],r9
800088da:	04 9c       	mov	r12,r2
800088dc:	6e 18       	ld.w	r8,r7[0x4]
800088de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800088e2:	10 46       	or	r6,r8
800088e4:	8f 16       	st.w	r7[0x4],r6
800088e6:	ca a8       	rjmp	80008a3a <_realloc_r+0x2b6>
800088e8:	14 03       	add	r3,r10
800088ea:	0c 33       	cp.w	r3,r6
800088ec:	c0 85       	brlt	800088fc <_realloc_r+0x178>
800088ee:	72 28       	ld.w	r8,r9[0x8]
800088f0:	72 39       	ld.w	r9,r9[0xc]
800088f2:	93 28       	st.w	r9[0x8],r8
800088f4:	91 39       	st.w	r8[0xc],r9
800088f6:	6e 28       	ld.w	r8,r7[0x8]
800088f8:	6e 39       	ld.w	r9,r7[0xc]
800088fa:	c0 78       	rjmp	80008908 <_realloc_r+0x184>
800088fc:	f8 00 00 03 	add	r3,r12,r0
80008900:	0c 33       	cp.w	r3,r6
80008902:	c3 35       	brlt	80008968 <_realloc_r+0x1e4>
80008904:	6e 39       	ld.w	r9,r7[0xc]
80008906:	6e 28       	ld.w	r8,r7[0x8]
80008908:	93 28       	st.w	r9[0x8],r8
8000890a:	91 39       	st.w	r8[0xc],r9
8000890c:	e0 ca 00 04 	sub	r10,r0,4
80008910:	ee cc ff f8 	sub	r12,r7,-8
80008914:	e0 4a 00 24 	cp.w	r10,36
80008918:	e0 8b 00 24 	brhi	80008960 <_realloc_r+0x1dc>
8000891c:	59 3a       	cp.w	r10,19
8000891e:	e0 88 00 1a 	brls	80008952 <_realloc_r+0x1ce>
80008922:	09 08       	ld.w	r8,r4++
80008924:	99 08       	st.w	r12[0x0],r8
80008926:	09 08       	ld.w	r8,r4++
80008928:	8f 38       	st.w	r7[0xc],r8
8000892a:	ee cc ff f0 	sub	r12,r7,-16
8000892e:	59 ba       	cp.w	r10,27
80008930:	e0 88 00 11 	brls	80008952 <_realloc_r+0x1ce>
80008934:	09 08       	ld.w	r8,r4++
80008936:	99 08       	st.w	r12[0x0],r8
80008938:	09 08       	ld.w	r8,r4++
8000893a:	8f 58       	st.w	r7[0x14],r8
8000893c:	ee cc ff e8 	sub	r12,r7,-24
80008940:	e0 4a 00 24 	cp.w	r10,36
80008944:	c0 71       	brne	80008952 <_realloc_r+0x1ce>
80008946:	09 08       	ld.w	r8,r4++
80008948:	99 08       	st.w	r12[0x0],r8
8000894a:	ee cc ff e0 	sub	r12,r7,-32
8000894e:	09 08       	ld.w	r8,r4++
80008950:	8f 78       	st.w	r7[0x1c],r8
80008952:	09 08       	ld.w	r8,r4++
80008954:	18 a8       	st.w	r12++,r8
80008956:	68 08       	ld.w	r8,r4[0x0]
80008958:	99 08       	st.w	r12[0x0],r8
8000895a:	68 18       	ld.w	r8,r4[0x4]
8000895c:	99 18       	st.w	r12[0x4],r8
8000895e:	c4 78       	rjmp	800089ec <_realloc_r+0x268>
80008960:	08 9b       	mov	r11,r4
80008962:	fe b0 fb fe 	rcall	8000815e <memmove>
80008966:	c4 38       	rjmp	800089ec <_realloc_r+0x268>
80008968:	04 9c       	mov	r12,r2
8000896a:	fe b0 f9 d7 	rcall	80007d18 <_malloc_r>
8000896e:	18 95       	mov	r5,r12
80008970:	c3 a0       	breq	800089e4 <_realloc_r+0x260>
80008972:	62 18       	ld.w	r8,r1[0x4]
80008974:	f8 c9 00 08 	sub	r9,r12,8
80008978:	a1 c8       	cbr	r8,0x0
8000897a:	e2 08 00 08 	add	r8,r1,r8
8000897e:	10 39       	cp.w	r9,r8
80008980:	c0 71       	brne	8000898e <_realloc_r+0x20a>
80008982:	72 13       	ld.w	r3,r9[0x4]
80008984:	02 97       	mov	r7,r1
80008986:	e0 13 ff fc 	andl	r3,0xfffc
8000898a:	00 03       	add	r3,r0
8000898c:	c3 08       	rjmp	800089ec <_realloc_r+0x268>
8000898e:	e0 ca 00 04 	sub	r10,r0,4
80008992:	e0 4a 00 24 	cp.w	r10,36
80008996:	e0 8b 00 20 	brhi	800089d6 <_realloc_r+0x252>
8000899a:	08 99       	mov	r9,r4
8000899c:	18 98       	mov	r8,r12
8000899e:	59 3a       	cp.w	r10,19
800089a0:	e0 88 00 14 	brls	800089c8 <_realloc_r+0x244>
800089a4:	13 0b       	ld.w	r11,r9++
800089a6:	10 ab       	st.w	r8++,r11
800089a8:	13 0b       	ld.w	r11,r9++
800089aa:	10 ab       	st.w	r8++,r11
800089ac:	59 ba       	cp.w	r10,27
800089ae:	e0 88 00 0d 	brls	800089c8 <_realloc_r+0x244>
800089b2:	13 0b       	ld.w	r11,r9++
800089b4:	10 ab       	st.w	r8++,r11
800089b6:	13 0b       	ld.w	r11,r9++
800089b8:	10 ab       	st.w	r8++,r11
800089ba:	e0 4a 00 24 	cp.w	r10,36
800089be:	c0 51       	brne	800089c8 <_realloc_r+0x244>
800089c0:	13 0a       	ld.w	r10,r9++
800089c2:	10 aa       	st.w	r8++,r10
800089c4:	13 0a       	ld.w	r10,r9++
800089c6:	10 aa       	st.w	r8++,r10
800089c8:	13 0a       	ld.w	r10,r9++
800089ca:	10 aa       	st.w	r8++,r10
800089cc:	72 0a       	ld.w	r10,r9[0x0]
800089ce:	91 0a       	st.w	r8[0x0],r10
800089d0:	72 19       	ld.w	r9,r9[0x4]
800089d2:	91 19       	st.w	r8[0x4],r9
800089d4:	c0 48       	rjmp	800089dc <_realloc_r+0x258>
800089d6:	08 9b       	mov	r11,r4
800089d8:	fe b0 fb c3 	rcall	8000815e <memmove>
800089dc:	08 9b       	mov	r11,r4
800089de:	04 9c       	mov	r12,r2
800089e0:	fe b0 f6 f6 	rcall	800077cc <_free_r>
800089e4:	04 9c       	mov	r12,r2
800089e6:	c2 a8       	rjmp	80008a3a <_realloc_r+0x2b6>
800089e8:	00 93       	mov	r3,r0
800089ea:	02 97       	mov	r7,r1
800089ec:	e6 06 01 09 	sub	r9,r3,r6
800089f0:	6e 18       	ld.w	r8,r7[0x4]
800089f2:	58 f9       	cp.w	r9,15
800089f4:	e0 88 00 16 	brls	80008a20 <_realloc_r+0x29c>
800089f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800089fc:	ed e8 10 08 	or	r8,r6,r8
80008a00:	8f 18       	st.w	r7[0x4],r8
80008a02:	12 98       	mov	r8,r9
80008a04:	a1 a8       	sbr	r8,0x0
80008a06:	ee 06 00 0b 	add	r11,r7,r6
80008a0a:	f6 09 00 09 	add	r9,r11,r9
80008a0e:	97 18       	st.w	r11[0x4],r8
80008a10:	72 18       	ld.w	r8,r9[0x4]
80008a12:	a1 a8       	sbr	r8,0x0
80008a14:	2f 8b       	sub	r11,-8
80008a16:	93 18       	st.w	r9[0x4],r8
80008a18:	04 9c       	mov	r12,r2
80008a1a:	fe b0 f6 d9 	rcall	800077cc <_free_r>
80008a1e:	c0 b8       	rjmp	80008a34 <_realloc_r+0x2b0>
80008a20:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008a24:	e7 e8 10 08 	or	r8,r3,r8
80008a28:	8f 18       	st.w	r7[0x4],r8
80008a2a:	ee 03 00 03 	add	r3,r7,r3
80008a2e:	66 18       	ld.w	r8,r3[0x4]
80008a30:	a1 a8       	sbr	r8,0x0
80008a32:	87 18       	st.w	r3[0x4],r8
80008a34:	04 9c       	mov	r12,r2
80008a36:	ee c5 ff f8 	sub	r5,r7,-8
80008a3a:	fe b0 fb b9 	rcall	800081ac <__malloc_unlock>
80008a3e:	0a 9c       	mov	r12,r5
80008a40:	2f fd       	sub	sp,-4
80008a42:	d8 32       	popm	r0-r7,pc

80008a44 <__isinfd>:
80008a44:	14 98       	mov	r8,r10
80008a46:	fc 19 7f f0 	movh	r9,0x7ff0
80008a4a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008a4e:	f0 0b 11 00 	rsub	r11,r8,0
80008a52:	f7 e8 10 08 	or	r8,r11,r8
80008a56:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80008a5a:	f2 08 01 08 	sub	r8,r9,r8
80008a5e:	f0 0c 11 00 	rsub	r12,r8,0
80008a62:	f9 e8 10 08 	or	r8,r12,r8
80008a66:	f0 0c 14 1f 	asr	r12,r8,0x1f
80008a6a:	2f fc       	sub	r12,-1
80008a6c:	5e fc       	retal	r12

80008a6e <__isnand>:
80008a6e:	14 98       	mov	r8,r10
80008a70:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008a74:	f0 0c 11 00 	rsub	r12,r8,0
80008a78:	10 4c       	or	r12,r8
80008a7a:	fc 18 7f f0 	movh	r8,0x7ff0
80008a7e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80008a82:	f0 0c 01 0c 	sub	r12,r8,r12
80008a86:	bf 9c       	lsr	r12,0x1f
80008a88:	5e fc       	retal	r12
80008a8a:	d7 03       	nop

80008a8c <_sbrk_r>:
80008a8c:	d4 21       	pushm	r4-r7,lr
80008a8e:	30 08       	mov	r8,0
80008a90:	18 97       	mov	r7,r12
80008a92:	e0 66 06 58 	mov	r6,1624
80008a96:	16 9c       	mov	r12,r11
80008a98:	8d 08       	st.w	r6[0x0],r8
80008a9a:	ca fc       	rcall	80008bf8 <_sbrk>
80008a9c:	5b fc       	cp.w	r12,-1
80008a9e:	c0 51       	brne	80008aa8 <_sbrk_r+0x1c>
80008aa0:	6c 08       	ld.w	r8,r6[0x0]
80008aa2:	58 08       	cp.w	r8,0
80008aa4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008aa8:	d8 22       	popm	r4-r7,pc
80008aaa:	d7 03       	nop

80008aac <__sclose>:
80008aac:	d4 01       	pushm	lr
80008aae:	96 7b       	ld.sh	r11,r11[0xe]
80008ab0:	cf ec       	rcall	80008cac <_close_r>
80008ab2:	d8 02       	popm	pc

80008ab4 <__sseek>:
80008ab4:	d4 21       	pushm	r4-r7,lr
80008ab6:	16 97       	mov	r7,r11
80008ab8:	96 7b       	ld.sh	r11,r11[0xe]
80008aba:	c8 5d       	rcall	80008dc4 <_lseek_r>
80008abc:	8e 68       	ld.sh	r8,r7[0xc]
80008abe:	10 99       	mov	r9,r8
80008ac0:	ad c8       	cbr	r8,0xc
80008ac2:	ad a9       	sbr	r9,0xc
80008ac4:	5b fc       	cp.w	r12,-1
80008ac6:	ef f8 0c 06 	st.heq	r7[0xc],r8
80008aca:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008ace:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008ad2:	d8 22       	popm	r4-r7,pc

80008ad4 <__swrite>:
80008ad4:	d4 21       	pushm	r4-r7,lr
80008ad6:	96 68       	ld.sh	r8,r11[0xc]
80008ad8:	16 97       	mov	r7,r11
80008ada:	14 95       	mov	r5,r10
80008adc:	12 94       	mov	r4,r9
80008ade:	e2 18 01 00 	andl	r8,0x100,COH
80008ae2:	18 96       	mov	r6,r12
80008ae4:	c0 50       	breq	80008aee <__swrite+0x1a>
80008ae6:	30 29       	mov	r9,2
80008ae8:	30 0a       	mov	r10,0
80008aea:	96 7b       	ld.sh	r11,r11[0xe]
80008aec:	c6 cd       	rcall	80008dc4 <_lseek_r>
80008aee:	8e 68       	ld.sh	r8,r7[0xc]
80008af0:	ad c8       	cbr	r8,0xc
80008af2:	08 99       	mov	r9,r4
80008af4:	0a 9a       	mov	r10,r5
80008af6:	8e 7b       	ld.sh	r11,r7[0xe]
80008af8:	0c 9c       	mov	r12,r6
80008afa:	ae 68       	st.h	r7[0xc],r8
80008afc:	c9 ac       	rcall	80008c30 <_write_r>
80008afe:	d8 22       	popm	r4-r7,pc

80008b00 <__sread>:
80008b00:	d4 21       	pushm	r4-r7,lr
80008b02:	16 97       	mov	r7,r11
80008b04:	96 7b       	ld.sh	r11,r11[0xe]
80008b06:	c7 1d       	rcall	80008de8 <_read_r>
80008b08:	c0 65       	brlt	80008b14 <__sread+0x14>
80008b0a:	6f 58       	ld.w	r8,r7[0x54]
80008b0c:	18 08       	add	r8,r12
80008b0e:	ef 48 00 54 	st.w	r7[84],r8
80008b12:	d8 22       	popm	r4-r7,pc
80008b14:	8e 68       	ld.sh	r8,r7[0xc]
80008b16:	ad c8       	cbr	r8,0xc
80008b18:	ae 68       	st.h	r7[0xc],r8
80008b1a:	d8 22       	popm	r4-r7,pc

80008b1c <strlen>:
80008b1c:	30 09       	mov	r9,0
80008b1e:	18 98       	mov	r8,r12
80008b20:	c0 28       	rjmp	80008b24 <strlen+0x8>
80008b22:	2f f8       	sub	r8,-1
80008b24:	11 8a       	ld.ub	r10,r8[0x0]
80008b26:	f2 0a 18 00 	cp.b	r10,r9
80008b2a:	cf c1       	brne	80008b22 <strlen+0x6>
80008b2c:	f0 0c 01 0c 	sub	r12,r8,r12
80008b30:	5e fc       	retal	r12
80008b32:	d7 03       	nop

80008b34 <_close>:
80008b34:	30 28       	mov	r8,2
80008b36:	d6 73       	breakpoint
80008b38:	3f fc       	mov	r12,-1
80008b3a:	35 8b       	mov	r11,88
80008b3c:	58 0c       	cp.w	r12,0
80008b3e:	5e 4c       	retge	r12
80008b40:	e0 6a 06 58 	mov	r10,1624
80008b44:	95 0b       	st.w	r10[0x0],r11
80008b46:	5e fc       	retal	r12

80008b48 <_lseek>:
80008b48:	30 58       	mov	r8,5
80008b4a:	d6 73       	breakpoint
80008b4c:	3f fc       	mov	r12,-1
80008b4e:	35 8b       	mov	r11,88
80008b50:	58 0c       	cp.w	r12,0
80008b52:	5e 4c       	retge	r12
80008b54:	e0 6a 06 58 	mov	r10,1624
80008b58:	95 0b       	st.w	r10[0x0],r11
80008b5a:	5e fc       	retal	r12

80008b5c <_read>:
80008b5c:	30 38       	mov	r8,3
80008b5e:	d6 73       	breakpoint
80008b60:	3f fc       	mov	r12,-1
80008b62:	35 8b       	mov	r11,88
80008b64:	58 0c       	cp.w	r12,0
80008b66:	5e 4c       	retge	r12
80008b68:	e0 6a 06 58 	mov	r10,1624
80008b6c:	95 0b       	st.w	r10[0x0],r11
80008b6e:	5e fc       	retal	r12

80008b70 <_write>:
80008b70:	30 48       	mov	r8,4
80008b72:	d6 73       	breakpoint
80008b74:	3f fc       	mov	r12,-1
80008b76:	35 8b       	mov	r11,88
80008b78:	58 0c       	cp.w	r12,0
80008b7a:	5e 4c       	retge	r12
80008b7c:	e0 6a 06 58 	mov	r10,1624
80008b80:	95 0b       	st.w	r10[0x0],r11
80008b82:	5e fc       	retal	r12

80008b84 <isatty>:
80008b84:	30 b8       	mov	r8,11
80008b86:	d6 73       	breakpoint
80008b88:	3f fc       	mov	r12,-1
80008b8a:	35 8b       	mov	r11,88
80008b8c:	58 0c       	cp.w	r12,0
80008b8e:	5e 4c       	retge	r12
80008b90:	e0 6a 06 58 	mov	r10,1624
80008b94:	95 0b       	st.w	r10[0x0],r11
80008b96:	5e fc       	retal	r12

80008b98 <_fstat_host>:
80008b98:	30 98       	mov	r8,9
80008b9a:	d6 73       	breakpoint
80008b9c:	3f fc       	mov	r12,-1
80008b9e:	35 8b       	mov	r11,88
80008ba0:	58 0c       	cp.w	r12,0
80008ba2:	5e 4c       	retge	r12
80008ba4:	e0 6a 06 58 	mov	r10,1624
80008ba8:	95 0b       	st.w	r10[0x0],r11
80008baa:	5e fc       	retal	r12

80008bac <_fstat>:
80008bac:	d4 21       	pushm	r4-r7,lr
80008bae:	21 0d       	sub	sp,64
80008bb0:	16 97       	mov	r7,r11
80008bb2:	1a 9b       	mov	r11,sp
80008bb4:	cf 2f       	rcall	80008b98 <_fstat_host>
80008bb6:	c0 34       	brge	80008bbc <_fstat+0x10>
80008bb8:	3f fc       	mov	r12,-1
80008bba:	c1 c8       	rjmp	80008bf2 <_fstat+0x46>
80008bbc:	40 08       	lddsp	r8,sp[0x0]
80008bbe:	ae 08       	st.h	r7[0x0],r8
80008bc0:	40 18       	lddsp	r8,sp[0x4]
80008bc2:	ae 18       	st.h	r7[0x2],r8
80008bc4:	40 28       	lddsp	r8,sp[0x8]
80008bc6:	8f 18       	st.w	r7[0x4],r8
80008bc8:	40 38       	lddsp	r8,sp[0xc]
80008bca:	ae 48       	st.h	r7[0x8],r8
80008bcc:	40 48       	lddsp	r8,sp[0x10]
80008bce:	ae 58       	st.h	r7[0xa],r8
80008bd0:	40 58       	lddsp	r8,sp[0x14]
80008bd2:	ae 68       	st.h	r7[0xc],r8
80008bd4:	40 68       	lddsp	r8,sp[0x18]
80008bd6:	ae 78       	st.h	r7[0xe],r8
80008bd8:	40 88       	lddsp	r8,sp[0x20]
80008bda:	8f 48       	st.w	r7[0x10],r8
80008bdc:	40 a8       	lddsp	r8,sp[0x28]
80008bde:	8f b8       	st.w	r7[0x2c],r8
80008be0:	40 c8       	lddsp	r8,sp[0x30]
80008be2:	8f c8       	st.w	r7[0x30],r8
80008be4:	40 d8       	lddsp	r8,sp[0x34]
80008be6:	8f 58       	st.w	r7[0x14],r8
80008be8:	40 e8       	lddsp	r8,sp[0x38]
80008bea:	30 0c       	mov	r12,0
80008bec:	8f 78       	st.w	r7[0x1c],r8
80008bee:	40 f8       	lddsp	r8,sp[0x3c]
80008bf0:	8f 98       	st.w	r7[0x24],r8
80008bf2:	2f 0d       	sub	sp,-64
80008bf4:	d8 22       	popm	r4-r7,pc
80008bf6:	d7 03       	nop

80008bf8 <_sbrk>:
80008bf8:	d4 01       	pushm	lr
80008bfa:	e0 68 06 54 	mov	r8,1620
80008bfe:	70 09       	ld.w	r9,r8[0x0]
80008c00:	58 09       	cp.w	r9,0
80008c02:	c0 41       	brne	80008c0a <_sbrk+0x12>
80008c04:	e0 69 06 60 	mov	r9,1632
80008c08:	91 09       	st.w	r8[0x0],r9
80008c0a:	e0 69 06 54 	mov	r9,1620
80008c0e:	e0 6a f0 00 	mov	r10,61440
80008c12:	72 08       	ld.w	r8,r9[0x0]
80008c14:	f0 0c 00 0c 	add	r12,r8,r12
80008c18:	14 3c       	cp.w	r12,r10
80008c1a:	e0 8b 00 04 	brhi	80008c22 <_sbrk+0x2a>
80008c1e:	93 0c       	st.w	r9[0x0],r12
80008c20:	c0 58       	rjmp	80008c2a <_sbrk+0x32>
80008c22:	c5 5c       	rcall	80008ccc <__errno>
80008c24:	30 c8       	mov	r8,12
80008c26:	99 08       	st.w	r12[0x0],r8
80008c28:	3f f8       	mov	r8,-1
80008c2a:	10 9c       	mov	r12,r8
80008c2c:	d8 02       	popm	pc
80008c2e:	d7 03       	nop

80008c30 <_write_r>:
80008c30:	d4 21       	pushm	r4-r7,lr
80008c32:	16 98       	mov	r8,r11
80008c34:	18 97       	mov	r7,r12
80008c36:	10 9c       	mov	r12,r8
80008c38:	30 08       	mov	r8,0
80008c3a:	14 9b       	mov	r11,r10
80008c3c:	e0 66 06 58 	mov	r6,1624
80008c40:	12 9a       	mov	r10,r9
80008c42:	8d 08       	st.w	r6[0x0],r8
80008c44:	c9 6f       	rcall	80008b70 <_write>
80008c46:	5b fc       	cp.w	r12,-1
80008c48:	c0 51       	brne	80008c52 <_write_r+0x22>
80008c4a:	6c 08       	ld.w	r8,r6[0x0]
80008c4c:	58 08       	cp.w	r8,0
80008c4e:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008c52:	d8 22       	popm	r4-r7,pc

80008c54 <_calloc_r>:
80008c54:	d4 21       	pushm	r4-r7,lr
80008c56:	f4 0b 02 4b 	mul	r11,r10,r11
80008c5a:	fe b0 f8 5f 	rcall	80007d18 <_malloc_r>
80008c5e:	18 97       	mov	r7,r12
80008c60:	c2 30       	breq	80008ca6 <_calloc_r+0x52>
80008c62:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008c66:	e0 1a ff fc 	andl	r10,0xfffc
80008c6a:	20 4a       	sub	r10,4
80008c6c:	e0 4a 00 24 	cp.w	r10,36
80008c70:	e0 8b 00 18 	brhi	80008ca0 <_calloc_r+0x4c>
80008c74:	18 98       	mov	r8,r12
80008c76:	59 3a       	cp.w	r10,19
80008c78:	e0 88 00 0f 	brls	80008c96 <_calloc_r+0x42>
80008c7c:	30 09       	mov	r9,0
80008c7e:	10 a9       	st.w	r8++,r9
80008c80:	10 a9       	st.w	r8++,r9
80008c82:	59 ba       	cp.w	r10,27
80008c84:	e0 88 00 09 	brls	80008c96 <_calloc_r+0x42>
80008c88:	10 a9       	st.w	r8++,r9
80008c8a:	10 a9       	st.w	r8++,r9
80008c8c:	e0 4a 00 24 	cp.w	r10,36
80008c90:	c0 31       	brne	80008c96 <_calloc_r+0x42>
80008c92:	10 a9       	st.w	r8++,r9
80008c94:	10 a9       	st.w	r8++,r9
80008c96:	30 09       	mov	r9,0
80008c98:	10 a9       	st.w	r8++,r9
80008c9a:	91 19       	st.w	r8[0x4],r9
80008c9c:	91 09       	st.w	r8[0x0],r9
80008c9e:	c0 48       	rjmp	80008ca6 <_calloc_r+0x52>
80008ca0:	30 0b       	mov	r11,0
80008ca2:	fe b0 fa 7d 	rcall	8000819c <memset>
80008ca6:	0e 9c       	mov	r12,r7
80008ca8:	d8 22       	popm	r4-r7,pc
80008caa:	d7 03       	nop

80008cac <_close_r>:
80008cac:	d4 21       	pushm	r4-r7,lr
80008cae:	30 08       	mov	r8,0
80008cb0:	18 97       	mov	r7,r12
80008cb2:	e0 66 06 58 	mov	r6,1624
80008cb6:	16 9c       	mov	r12,r11
80008cb8:	8d 08       	st.w	r6[0x0],r8
80008cba:	c3 df       	rcall	80008b34 <_close>
80008cbc:	5b fc       	cp.w	r12,-1
80008cbe:	c0 51       	brne	80008cc8 <_close_r+0x1c>
80008cc0:	6c 08       	ld.w	r8,r6[0x0]
80008cc2:	58 08       	cp.w	r8,0
80008cc4:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008cc8:	d8 22       	popm	r4-r7,pc
80008cca:	d7 03       	nop

80008ccc <__errno>:
80008ccc:	e0 68 00 fc 	mov	r8,252
80008cd0:	70 0c       	ld.w	r12,r8[0x0]
80008cd2:	2f 4c       	sub	r12,-12
80008cd4:	5e fc       	retal	r12
80008cd6:	d7 03       	nop

80008cd8 <_fclose_r>:
80008cd8:	d4 21       	pushm	r4-r7,lr
80008cda:	18 96       	mov	r6,r12
80008cdc:	16 97       	mov	r7,r11
80008cde:	58 0b       	cp.w	r11,0
80008ce0:	c0 31       	brne	80008ce6 <_fclose_r+0xe>
80008ce2:	16 95       	mov	r5,r11
80008ce4:	c5 38       	rjmp	80008d8a <_fclose_r+0xb2>
80008ce6:	fe b0 f4 87 	rcall	800075f4 <__sfp_lock_acquire>
80008cea:	58 06       	cp.w	r6,0
80008cec:	c0 70       	breq	80008cfa <_fclose_r+0x22>
80008cee:	6c 68       	ld.w	r8,r6[0x18]
80008cf0:	58 08       	cp.w	r8,0
80008cf2:	c0 41       	brne	80008cfa <_fclose_r+0x22>
80008cf4:	0c 9c       	mov	r12,r6
80008cf6:	fe b0 f4 d1 	rcall	80007698 <__sinit>
80008cfa:	fe c8 eb be 	sub	r8,pc,-5186
80008cfe:	10 37       	cp.w	r7,r8
80008d00:	c0 31       	brne	80008d06 <_fclose_r+0x2e>
80008d02:	6c 07       	ld.w	r7,r6[0x0]
80008d04:	c0 c8       	rjmp	80008d1c <_fclose_r+0x44>
80008d06:	fe c8 eb aa 	sub	r8,pc,-5206
80008d0a:	10 37       	cp.w	r7,r8
80008d0c:	c0 31       	brne	80008d12 <_fclose_r+0x3a>
80008d0e:	6c 17       	ld.w	r7,r6[0x4]
80008d10:	c0 68       	rjmp	80008d1c <_fclose_r+0x44>
80008d12:	fe c8 eb 96 	sub	r8,pc,-5226
80008d16:	10 37       	cp.w	r7,r8
80008d18:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008d1c:	8e 69       	ld.sh	r9,r7[0xc]
80008d1e:	30 08       	mov	r8,0
80008d20:	f0 09 19 00 	cp.h	r9,r8
80008d24:	c0 51       	brne	80008d2e <_fclose_r+0x56>
80008d26:	fe b0 f4 68 	rcall	800075f6 <__sfp_lock_release>
80008d2a:	30 05       	mov	r5,0
80008d2c:	c2 f8       	rjmp	80008d8a <_fclose_r+0xb2>
80008d2e:	0e 9b       	mov	r11,r7
80008d30:	0c 9c       	mov	r12,r6
80008d32:	fe b0 f3 db 	rcall	800074e8 <_fflush_r>
80008d36:	6e c8       	ld.w	r8,r7[0x30]
80008d38:	18 95       	mov	r5,r12
80008d3a:	58 08       	cp.w	r8,0
80008d3c:	c0 60       	breq	80008d48 <_fclose_r+0x70>
80008d3e:	6e 8b       	ld.w	r11,r7[0x20]
80008d40:	0c 9c       	mov	r12,r6
80008d42:	5d 18       	icall	r8
80008d44:	f9 b5 05 ff 	movlt	r5,-1
80008d48:	8e 68       	ld.sh	r8,r7[0xc]
80008d4a:	ed b8 00 07 	bld	r8,0x7
80008d4e:	c0 51       	brne	80008d58 <_fclose_r+0x80>
80008d50:	6e 4b       	ld.w	r11,r7[0x10]
80008d52:	0c 9c       	mov	r12,r6
80008d54:	fe b0 f5 3c 	rcall	800077cc <_free_r>
80008d58:	6e db       	ld.w	r11,r7[0x34]
80008d5a:	58 0b       	cp.w	r11,0
80008d5c:	c0 a0       	breq	80008d70 <_fclose_r+0x98>
80008d5e:	ee c8 ff bc 	sub	r8,r7,-68
80008d62:	10 3b       	cp.w	r11,r8
80008d64:	c0 40       	breq	80008d6c <_fclose_r+0x94>
80008d66:	0c 9c       	mov	r12,r6
80008d68:	fe b0 f5 32 	rcall	800077cc <_free_r>
80008d6c:	30 08       	mov	r8,0
80008d6e:	8f d8       	st.w	r7[0x34],r8
80008d70:	6f 2b       	ld.w	r11,r7[0x48]
80008d72:	58 0b       	cp.w	r11,0
80008d74:	c0 70       	breq	80008d82 <_fclose_r+0xaa>
80008d76:	0c 9c       	mov	r12,r6
80008d78:	fe b0 f5 2a 	rcall	800077cc <_free_r>
80008d7c:	30 08       	mov	r8,0
80008d7e:	ef 48 00 48 	st.w	r7[72],r8
80008d82:	30 08       	mov	r8,0
80008d84:	ae 68       	st.h	r7[0xc],r8
80008d86:	fe b0 f4 38 	rcall	800075f6 <__sfp_lock_release>
80008d8a:	0a 9c       	mov	r12,r5
80008d8c:	d8 22       	popm	r4-r7,pc
80008d8e:	d7 03       	nop

80008d90 <fclose>:
80008d90:	d4 01       	pushm	lr
80008d92:	e0 68 00 fc 	mov	r8,252
80008d96:	18 9b       	mov	r11,r12
80008d98:	70 0c       	ld.w	r12,r8[0x0]
80008d9a:	c9 ff       	rcall	80008cd8 <_fclose_r>
80008d9c:	d8 02       	popm	pc
80008d9e:	d7 03       	nop

80008da0 <_fstat_r>:
80008da0:	d4 21       	pushm	r4-r7,lr
80008da2:	16 98       	mov	r8,r11
80008da4:	18 97       	mov	r7,r12
80008da6:	10 9c       	mov	r12,r8
80008da8:	30 08       	mov	r8,0
80008daa:	e0 66 06 58 	mov	r6,1624
80008dae:	14 9b       	mov	r11,r10
80008db0:	8d 08       	st.w	r6[0x0],r8
80008db2:	cf de       	rcall	80008bac <_fstat>
80008db4:	5b fc       	cp.w	r12,-1
80008db6:	c0 51       	brne	80008dc0 <_fstat_r+0x20>
80008db8:	6c 08       	ld.w	r8,r6[0x0]
80008dba:	58 08       	cp.w	r8,0
80008dbc:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008dc0:	d8 22       	popm	r4-r7,pc
80008dc2:	d7 03       	nop

80008dc4 <_lseek_r>:
80008dc4:	d4 21       	pushm	r4-r7,lr
80008dc6:	16 98       	mov	r8,r11
80008dc8:	18 97       	mov	r7,r12
80008dca:	10 9c       	mov	r12,r8
80008dcc:	30 08       	mov	r8,0
80008dce:	14 9b       	mov	r11,r10
80008dd0:	e0 66 06 58 	mov	r6,1624
80008dd4:	12 9a       	mov	r10,r9
80008dd6:	8d 08       	st.w	r6[0x0],r8
80008dd8:	cb 8e       	rcall	80008b48 <_lseek>
80008dda:	5b fc       	cp.w	r12,-1
80008ddc:	c0 51       	brne	80008de6 <_lseek_r+0x22>
80008dde:	6c 08       	ld.w	r8,r6[0x0]
80008de0:	58 08       	cp.w	r8,0
80008de2:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008de6:	d8 22       	popm	r4-r7,pc

80008de8 <_read_r>:
80008de8:	d4 21       	pushm	r4-r7,lr
80008dea:	16 98       	mov	r8,r11
80008dec:	18 97       	mov	r7,r12
80008dee:	10 9c       	mov	r12,r8
80008df0:	30 08       	mov	r8,0
80008df2:	14 9b       	mov	r11,r10
80008df4:	e0 66 06 58 	mov	r6,1624
80008df8:	12 9a       	mov	r10,r9
80008dfa:	8d 08       	st.w	r6[0x0],r8
80008dfc:	cb 0e       	rcall	80008b5c <_read>
80008dfe:	5b fc       	cp.w	r12,-1
80008e00:	c0 51       	brne	80008e0a <_read_r+0x22>
80008e02:	6c 08       	ld.w	r8,r6[0x0]
80008e04:	58 08       	cp.w	r8,0
80008e06:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008e0a:	d8 22       	popm	r4-r7,pc

80008e0c <__avr32_f64_mul>:
80008e0c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80008e10:	e0 80 00 dc 	breq	80008fc8 <__avr32_f64_mul_op1_zero>
80008e14:	d4 21       	pushm	r4-r7,lr
80008e16:	f7 e9 20 0e 	eor	lr,r11,r9
80008e1a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008e1e:	30 15       	mov	r5,1
80008e20:	c4 30       	breq	80008ea6 <__avr32_f64_mul_op1_subnormal>
80008e22:	ab 6b       	lsl	r11,0xa
80008e24:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80008e28:	ab 6a       	lsl	r10,0xa
80008e2a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80008e2e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008e32:	c5 c0       	breq	80008eea <__avr32_f64_mul_op2_subnormal>
80008e34:	a1 78       	lsl	r8,0x1
80008e36:	5c f9       	rol	r9
80008e38:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80008e3c:	e0 47 07 ff 	cp.w	r7,2047
80008e40:	c7 70       	breq	80008f2e <__avr32_f64_mul_op_nan_or_inf>
80008e42:	e0 46 07 ff 	cp.w	r6,2047
80008e46:	c7 40       	breq	80008f2e <__avr32_f64_mul_op_nan_or_inf>
80008e48:	ee 06 00 0c 	add	r12,r7,r6
80008e4c:	e0 2c 03 fe 	sub	r12,1022
80008e50:	f6 08 06 44 	mulu.d	r4,r11,r8
80008e54:	f4 09 07 44 	macu.d	r4,r10,r9
80008e58:	f4 08 06 46 	mulu.d	r6,r10,r8
80008e5c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008e60:	08 07       	add	r7,r4
80008e62:	f4 05 00 4a 	adc	r10,r10,r5
80008e66:	5c 0b       	acr	r11
80008e68:	ed bb 00 14 	bld	r11,0x14
80008e6c:	c0 50       	breq	80008e76 <__avr32_f64_mul+0x6a>
80008e6e:	a1 77       	lsl	r7,0x1
80008e70:	5c fa       	rol	r10
80008e72:	5c fb       	rol	r11
80008e74:	20 1c       	sub	r12,1
80008e76:	58 0c       	cp.w	r12,0
80008e78:	e0 8a 00 6f 	brle	80008f56 <__avr32_f64_mul_res_subnormal>
80008e7c:	e0 4c 07 ff 	cp.w	r12,2047
80008e80:	e0 84 00 9c 	brge	80008fb8 <__avr32_f64_mul_res_inf>
80008e84:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80008e88:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80008e8c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008e90:	ee 17 80 00 	eorh	r7,0x8000
80008e94:	f1 b7 04 20 	satu	r7,0x1
80008e98:	0e 0a       	add	r10,r7
80008e9a:	5c 0b       	acr	r11
80008e9c:	ed be 00 1f 	bld	lr,0x1f
80008ea0:	ef bb 00 1f 	bst	r11,0x1f
80008ea4:	d8 22       	popm	r4-r7,pc

80008ea6 <__avr32_f64_mul_op1_subnormal>:
80008ea6:	e4 1b 00 0f 	andh	r11,0xf
80008eaa:	f4 0c 12 00 	clz	r12,r10
80008eae:	f6 06 12 00 	clz	r6,r11
80008eb2:	f7 bc 03 e1 	sublo	r12,-31
80008eb6:	f8 06 17 30 	movlo	r6,r12
80008eba:	f7 b6 02 01 	subhs	r6,1
80008ebe:	e0 46 00 20 	cp.w	r6,32
80008ec2:	c0 d4       	brge	80008edc <__avr32_f64_mul_op1_subnormal+0x36>
80008ec4:	ec 0c 11 20 	rsub	r12,r6,32
80008ec8:	f6 06 09 4b 	lsl	r11,r11,r6
80008ecc:	f4 0c 0a 4c 	lsr	r12,r10,r12
80008ed0:	18 4b       	or	r11,r12
80008ed2:	f4 06 09 4a 	lsl	r10,r10,r6
80008ed6:	20 b6       	sub	r6,11
80008ed8:	0c 17       	sub	r7,r6
80008eda:	ca ab       	rjmp	80008e2e <__avr32_f64_mul+0x22>
80008edc:	f4 06 09 4b 	lsl	r11,r10,r6
80008ee0:	c6 40       	breq	80008fa8 <__avr32_f64_mul_res_zero>
80008ee2:	30 0a       	mov	r10,0
80008ee4:	20 b6       	sub	r6,11
80008ee6:	0c 17       	sub	r7,r6
80008ee8:	ca 3b       	rjmp	80008e2e <__avr32_f64_mul+0x22>

80008eea <__avr32_f64_mul_op2_subnormal>:
80008eea:	e4 19 00 0f 	andh	r9,0xf
80008eee:	f0 0c 12 00 	clz	r12,r8
80008ef2:	f2 05 12 00 	clz	r5,r9
80008ef6:	f7 bc 03 ea 	sublo	r12,-22
80008efa:	f8 05 17 30 	movlo	r5,r12
80008efe:	f7 b5 02 0a 	subhs	r5,10
80008f02:	e0 45 00 20 	cp.w	r5,32
80008f06:	c0 d4       	brge	80008f20 <__avr32_f64_mul_op2_subnormal+0x36>
80008f08:	ea 0c 11 20 	rsub	r12,r5,32
80008f0c:	f2 05 09 49 	lsl	r9,r9,r5
80008f10:	f0 0c 0a 4c 	lsr	r12,r8,r12
80008f14:	18 49       	or	r9,r12
80008f16:	f0 05 09 48 	lsl	r8,r8,r5
80008f1a:	20 25       	sub	r5,2
80008f1c:	0a 16       	sub	r6,r5
80008f1e:	c8 fb       	rjmp	80008e3c <__avr32_f64_mul+0x30>
80008f20:	f0 05 09 49 	lsl	r9,r8,r5
80008f24:	c4 20       	breq	80008fa8 <__avr32_f64_mul_res_zero>
80008f26:	30 08       	mov	r8,0
80008f28:	20 25       	sub	r5,2
80008f2a:	0a 16       	sub	r6,r5
80008f2c:	c8 8b       	rjmp	80008e3c <__avr32_f64_mul+0x30>

80008f2e <__avr32_f64_mul_op_nan_or_inf>:
80008f2e:	e4 19 00 0f 	andh	r9,0xf
80008f32:	e4 1b 00 0f 	andh	r11,0xf
80008f36:	14 4b       	or	r11,r10
80008f38:	10 49       	or	r9,r8
80008f3a:	e0 47 07 ff 	cp.w	r7,2047
80008f3e:	c0 91       	brne	80008f50 <__avr32_f64_mul_op1_not_naninf>
80008f40:	58 0b       	cp.w	r11,0
80008f42:	c3 81       	brne	80008fb2 <__avr32_f64_mul_res_nan>
80008f44:	e0 46 07 ff 	cp.w	r6,2047
80008f48:	c3 81       	brne	80008fb8 <__avr32_f64_mul_res_inf>
80008f4a:	58 09       	cp.w	r9,0
80008f4c:	c3 60       	breq	80008fb8 <__avr32_f64_mul_res_inf>
80008f4e:	c3 28       	rjmp	80008fb2 <__avr32_f64_mul_res_nan>

80008f50 <__avr32_f64_mul_op1_not_naninf>:
80008f50:	58 09       	cp.w	r9,0
80008f52:	c3 30       	breq	80008fb8 <__avr32_f64_mul_res_inf>
80008f54:	c2 f8       	rjmp	80008fb2 <__avr32_f64_mul_res_nan>

80008f56 <__avr32_f64_mul_res_subnormal>:
80008f56:	5c 3c       	neg	r12
80008f58:	2f fc       	sub	r12,-1
80008f5a:	f1 bc 04 c0 	satu	r12,0x6
80008f5e:	e0 4c 00 20 	cp.w	r12,32
80008f62:	c1 14       	brge	80008f84 <__avr32_f64_mul_res_subnormal+0x2e>
80008f64:	f8 08 11 20 	rsub	r8,r12,32
80008f68:	0e 46       	or	r6,r7
80008f6a:	ee 0c 0a 47 	lsr	r7,r7,r12
80008f6e:	f4 08 09 49 	lsl	r9,r10,r8
80008f72:	12 47       	or	r7,r9
80008f74:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008f78:	f6 08 09 49 	lsl	r9,r11,r8
80008f7c:	12 4a       	or	r10,r9
80008f7e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008f82:	c8 3b       	rjmp	80008e88 <__avr32_f64_mul+0x7c>
80008f84:	f8 08 11 20 	rsub	r8,r12,32
80008f88:	f9 b9 00 00 	moveq	r9,0
80008f8c:	c0 30       	breq	80008f92 <__avr32_f64_mul_res_subnormal+0x3c>
80008f8e:	f6 08 09 49 	lsl	r9,r11,r8
80008f92:	0e 46       	or	r6,r7
80008f94:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008f98:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008f9c:	f3 ea 10 07 	or	r7,r9,r10
80008fa0:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008fa4:	30 0b       	mov	r11,0
80008fa6:	c7 1b       	rjmp	80008e88 <__avr32_f64_mul+0x7c>

80008fa8 <__avr32_f64_mul_res_zero>:
80008fa8:	1c 9b       	mov	r11,lr
80008faa:	e6 1b 80 00 	andh	r11,0x8000,COH
80008fae:	30 0a       	mov	r10,0
80008fb0:	d8 22       	popm	r4-r7,pc

80008fb2 <__avr32_f64_mul_res_nan>:
80008fb2:	3f fb       	mov	r11,-1
80008fb4:	3f fa       	mov	r10,-1
80008fb6:	d8 22       	popm	r4-r7,pc

80008fb8 <__avr32_f64_mul_res_inf>:
80008fb8:	f0 6b 00 00 	mov	r11,-1048576
80008fbc:	ed be 00 1f 	bld	lr,0x1f
80008fc0:	ef bb 00 1f 	bst	r11,0x1f
80008fc4:	30 0a       	mov	r10,0
80008fc6:	d8 22       	popm	r4-r7,pc

80008fc8 <__avr32_f64_mul_op1_zero>:
80008fc8:	f7 e9 20 0b 	eor	r11,r11,r9
80008fcc:	e6 1b 80 00 	andh	r11,0x8000,COH
80008fd0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80008fd4:	e0 4c 07 ff 	cp.w	r12,2047
80008fd8:	5e 1c       	retne	r12
80008fda:	3f fa       	mov	r10,-1
80008fdc:	3f fb       	mov	r11,-1
80008fde:	5e fc       	retal	r12

80008fe0 <__avr32_f64_sub_from_add>:
80008fe0:	ee 19 80 00 	eorh	r9,0x8000

80008fe4 <__avr32_f64_sub>:
80008fe4:	f7 e9 20 0c 	eor	r12,r11,r9
80008fe8:	e0 86 00 ca 	brmi	8000917c <__avr32_f64_add_from_sub>
80008fec:	eb cd 40 e0 	pushm	r5-r7,lr
80008ff0:	16 9c       	mov	r12,r11
80008ff2:	e6 1c 80 00 	andh	r12,0x8000,COH
80008ff6:	bf db       	cbr	r11,0x1f
80008ff8:	bf d9       	cbr	r9,0x1f
80008ffa:	10 3a       	cp.w	r10,r8
80008ffc:	f2 0b 13 00 	cpc	r11,r9
80009000:	c0 92       	brcc	80009012 <__avr32_f64_sub+0x2e>
80009002:	16 97       	mov	r7,r11
80009004:	12 9b       	mov	r11,r9
80009006:	0e 99       	mov	r9,r7
80009008:	14 97       	mov	r7,r10
8000900a:	10 9a       	mov	r10,r8
8000900c:	0e 98       	mov	r8,r7
8000900e:	ee 1c 80 00 	eorh	r12,0x8000
80009012:	f6 07 16 14 	lsr	r7,r11,0x14
80009016:	ab 7b       	lsl	r11,0xb
80009018:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000901c:	ab 7a       	lsl	r10,0xb
8000901e:	bf bb       	sbr	r11,0x1f
80009020:	f2 06 16 14 	lsr	r6,r9,0x14
80009024:	c4 40       	breq	800090ac <__avr32_f64_sub_opL_subnormal>
80009026:	ab 79       	lsl	r9,0xb
80009028:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000902c:	ab 78       	lsl	r8,0xb
8000902e:	bf b9       	sbr	r9,0x1f

80009030 <__avr32_f64_sub_opL_subnormal_done>:
80009030:	e0 47 07 ff 	cp.w	r7,2047
80009034:	c4 f0       	breq	800090d2 <__avr32_f64_sub_opH_nan_or_inf>
80009036:	0e 26       	rsub	r6,r7
80009038:	c1 20       	breq	8000905c <__avr32_f64_sub_shift_done>
8000903a:	ec 05 11 20 	rsub	r5,r6,32
8000903e:	e0 46 00 20 	cp.w	r6,32
80009042:	c7 c2       	brcc	8000913a <__avr32_f64_sub_longshift>
80009044:	f0 05 09 4e 	lsl	lr,r8,r5
80009048:	f2 05 09 45 	lsl	r5,r9,r5
8000904c:	f0 06 0a 48 	lsr	r8,r8,r6
80009050:	f2 06 0a 49 	lsr	r9,r9,r6
80009054:	0a 48       	or	r8,r5
80009056:	58 0e       	cp.w	lr,0
80009058:	5f 1e       	srne	lr
8000905a:	1c 48       	or	r8,lr

8000905c <__avr32_f64_sub_shift_done>:
8000905c:	10 1a       	sub	r10,r8
8000905e:	f6 09 01 4b 	sbc	r11,r11,r9
80009062:	f6 06 12 00 	clz	r6,r11
80009066:	c0 e0       	breq	80009082 <__avr32_f64_sub_longnormalize_done>
80009068:	c7 83       	brcs	80009158 <__avr32_f64_sub_longnormalize>
8000906a:	ec 0e 11 20 	rsub	lr,r6,32
8000906e:	f6 06 09 4b 	lsl	r11,r11,r6
80009072:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009076:	1c 4b       	or	r11,lr
80009078:	f4 06 09 4a 	lsl	r10,r10,r6
8000907c:	0c 17       	sub	r7,r6
8000907e:	e0 8a 00 39 	brle	800090f0 <__avr32_f64_sub_subnormal_result>

80009082 <__avr32_f64_sub_longnormalize_done>:
80009082:	f4 09 15 15 	lsl	r9,r10,0x15
80009086:	ab 9a       	lsr	r10,0xb
80009088:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000908c:	ab 9b       	lsr	r11,0xb
8000908e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009092:	18 4b       	or	r11,r12

80009094 <__avr32_f64_sub_round>:
80009094:	fc 17 80 00 	movh	r7,0x8000
80009098:	ed ba 00 00 	bld	r10,0x0
8000909c:	f7 b7 01 ff 	subne	r7,-1
800090a0:	0e 39       	cp.w	r9,r7
800090a2:	5f 29       	srhs	r9
800090a4:	12 0a       	add	r10,r9
800090a6:	5c 0b       	acr	r11
800090a8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800090ac <__avr32_f64_sub_opL_subnormal>:
800090ac:	ab 79       	lsl	r9,0xb
800090ae:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800090b2:	ab 78       	lsl	r8,0xb
800090b4:	f3 e8 10 0e 	or	lr,r9,r8
800090b8:	f9 b6 01 01 	movne	r6,1
800090bc:	ee 0e 11 00 	rsub	lr,r7,0
800090c0:	f9 b7 00 01 	moveq	r7,1
800090c4:	ef bb 00 1f 	bst	r11,0x1f
800090c8:	f7 ea 10 0e 	or	lr,r11,r10
800090cc:	f9 b7 00 00 	moveq	r7,0
800090d0:	cb 0b       	rjmp	80009030 <__avr32_f64_sub_opL_subnormal_done>

800090d2 <__avr32_f64_sub_opH_nan_or_inf>:
800090d2:	bf db       	cbr	r11,0x1f
800090d4:	f7 ea 10 0e 	or	lr,r11,r10
800090d8:	c0 81       	brne	800090e8 <__avr32_f64_sub_return_nan>
800090da:	e0 46 07 ff 	cp.w	r6,2047
800090de:	c0 50       	breq	800090e8 <__avr32_f64_sub_return_nan>
800090e0:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800090e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800090e8 <__avr32_f64_sub_return_nan>:
800090e8:	3f fa       	mov	r10,-1
800090ea:	3f fb       	mov	r11,-1
800090ec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800090f0 <__avr32_f64_sub_subnormal_result>:
800090f0:	5c 37       	neg	r7
800090f2:	2f f7       	sub	r7,-1
800090f4:	f1 b7 04 c0 	satu	r7,0x6
800090f8:	e0 47 00 20 	cp.w	r7,32
800090fc:	c1 14       	brge	8000911e <__avr32_f64_sub_subnormal_result+0x2e>
800090fe:	ee 08 11 20 	rsub	r8,r7,32
80009102:	f4 08 09 49 	lsl	r9,r10,r8
80009106:	5f 16       	srne	r6
80009108:	f4 07 0a 4a 	lsr	r10,r10,r7
8000910c:	0c 4a       	or	r10,r6
8000910e:	f6 08 09 49 	lsl	r9,r11,r8
80009112:	f5 e9 10 0a 	or	r10,r10,r9
80009116:	f4 07 0a 4b 	lsr	r11,r10,r7
8000911a:	30 07       	mov	r7,0
8000911c:	cb 3b       	rjmp	80009082 <__avr32_f64_sub_longnormalize_done>
8000911e:	ee 08 11 40 	rsub	r8,r7,64
80009122:	f6 08 09 49 	lsl	r9,r11,r8
80009126:	14 49       	or	r9,r10
80009128:	5f 16       	srne	r6
8000912a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000912e:	0c 4a       	or	r10,r6
80009130:	30 0b       	mov	r11,0
80009132:	30 07       	mov	r7,0
80009134:	ca 7b       	rjmp	80009082 <__avr32_f64_sub_longnormalize_done>
80009136:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000913a <__avr32_f64_sub_longshift>:
8000913a:	f1 b6 04 c0 	satu	r6,0x6
8000913e:	f0 0e 17 00 	moveq	lr,r8
80009142:	c0 40       	breq	8000914a <__avr32_f64_sub_longshift+0x10>
80009144:	f2 05 09 4e 	lsl	lr,r9,r5
80009148:	10 4e       	or	lr,r8
8000914a:	f2 06 0a 48 	lsr	r8,r9,r6
8000914e:	30 09       	mov	r9,0
80009150:	58 0e       	cp.w	lr,0
80009152:	5f 1e       	srne	lr
80009154:	1c 48       	or	r8,lr
80009156:	c8 3b       	rjmp	8000905c <__avr32_f64_sub_shift_done>

80009158 <__avr32_f64_sub_longnormalize>:
80009158:	f4 06 12 00 	clz	r6,r10
8000915c:	f9 b7 03 00 	movlo	r7,0
80009160:	f9 b6 03 00 	movlo	r6,0
80009164:	f9 bc 03 00 	movlo	r12,0
80009168:	f7 b6 02 e0 	subhs	r6,-32
8000916c:	f4 06 09 4b 	lsl	r11,r10,r6
80009170:	30 0a       	mov	r10,0
80009172:	0c 17       	sub	r7,r6
80009174:	fe 9a ff be 	brle	800090f0 <__avr32_f64_sub_subnormal_result>
80009178:	c8 5b       	rjmp	80009082 <__avr32_f64_sub_longnormalize_done>
8000917a:	d7 03       	nop

8000917c <__avr32_f64_add_from_sub>:
8000917c:	ee 19 80 00 	eorh	r9,0x8000

80009180 <__avr32_f64_add>:
80009180:	f7 e9 20 0c 	eor	r12,r11,r9
80009184:	fe 96 ff 2e 	brmi	80008fe0 <__avr32_f64_sub_from_add>
80009188:	eb cd 40 e0 	pushm	r5-r7,lr
8000918c:	16 9c       	mov	r12,r11
8000918e:	e6 1c 80 00 	andh	r12,0x8000,COH
80009192:	bf db       	cbr	r11,0x1f
80009194:	bf d9       	cbr	r9,0x1f
80009196:	12 3b       	cp.w	r11,r9
80009198:	c0 72       	brcc	800091a6 <__avr32_f64_add+0x26>
8000919a:	16 97       	mov	r7,r11
8000919c:	12 9b       	mov	r11,r9
8000919e:	0e 99       	mov	r9,r7
800091a0:	14 97       	mov	r7,r10
800091a2:	10 9a       	mov	r10,r8
800091a4:	0e 98       	mov	r8,r7
800091a6:	30 0e       	mov	lr,0
800091a8:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800091ac:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800091b0:	b5 ab       	sbr	r11,0x14
800091b2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800091b6:	c6 20       	breq	8000927a <__avr32_f64_add_op2_subnormal>
800091b8:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800091bc:	b5 a9       	sbr	r9,0x14
800091be:	e0 47 07 ff 	cp.w	r7,2047
800091c2:	c2 80       	breq	80009212 <__avr32_f64_add_opH_nan_or_inf>
800091c4:	0e 26       	rsub	r6,r7
800091c6:	c1 20       	breq	800091ea <__avr32_f64_add_shift_done>
800091c8:	e0 46 00 36 	cp.w	r6,54
800091cc:	c1 52       	brcc	800091f6 <__avr32_f64_add_res_of_done>
800091ce:	ec 05 11 20 	rsub	r5,r6,32
800091d2:	e0 46 00 20 	cp.w	r6,32
800091d6:	c3 52       	brcc	80009240 <__avr32_f64_add_longshift>
800091d8:	f0 05 09 4e 	lsl	lr,r8,r5
800091dc:	f2 05 09 45 	lsl	r5,r9,r5
800091e0:	f0 06 0a 48 	lsr	r8,r8,r6
800091e4:	f2 06 0a 49 	lsr	r9,r9,r6
800091e8:	0a 48       	or	r8,r5

800091ea <__avr32_f64_add_shift_done>:
800091ea:	10 0a       	add	r10,r8
800091ec:	f6 09 00 4b 	adc	r11,r11,r9
800091f0:	ed bb 00 15 	bld	r11,0x15
800091f4:	c3 40       	breq	8000925c <__avr32_f64_add_res_of>

800091f6 <__avr32_f64_add_res_of_done>:
800091f6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800091fa:	18 4b       	or	r11,r12

800091fc <__avr32_f64_add_round>:
800091fc:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009200:	18 4e       	or	lr,r12
80009202:	ee 1e 80 00 	eorh	lr,0x8000
80009206:	f1 be 04 20 	satu	lr,0x1
8000920a:	1c 0a       	add	r10,lr
8000920c:	5c 0b       	acr	r11
8000920e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009212 <__avr32_f64_add_opH_nan_or_inf>:
80009212:	b5 cb       	cbr	r11,0x14
80009214:	f7 ea 10 0e 	or	lr,r11,r10
80009218:	c1 01       	brne	80009238 <__avr32_f64_add_return_nan>
8000921a:	e0 46 07 ff 	cp.w	r6,2047
8000921e:	c0 30       	breq	80009224 <__avr32_f64_add_opL_nan_or_inf>
80009220:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009224 <__avr32_f64_add_opL_nan_or_inf>:
80009224:	b5 c9       	cbr	r9,0x14
80009226:	f3 e8 10 0e 	or	lr,r9,r8
8000922a:	c0 71       	brne	80009238 <__avr32_f64_add_return_nan>
8000922c:	30 0a       	mov	r10,0
8000922e:	fc 1b 7f f0 	movh	r11,0x7ff0
80009232:	18 4b       	or	r11,r12
80009234:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009238 <__avr32_f64_add_return_nan>:
80009238:	3f fa       	mov	r10,-1
8000923a:	3f fb       	mov	r11,-1
8000923c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009240 <__avr32_f64_add_longshift>:
80009240:	f1 b6 04 c0 	satu	r6,0x6
80009244:	f0 0e 17 00 	moveq	lr,r8
80009248:	c0 60       	breq	80009254 <__avr32_f64_add_longshift+0x14>
8000924a:	f2 05 09 4e 	lsl	lr,r9,r5
8000924e:	58 08       	cp.w	r8,0
80009250:	5f 18       	srne	r8
80009252:	10 4e       	or	lr,r8
80009254:	f2 06 0a 48 	lsr	r8,r9,r6
80009258:	30 09       	mov	r9,0
8000925a:	cc 8b       	rjmp	800091ea <__avr32_f64_add_shift_done>

8000925c <__avr32_f64_add_res_of>:
8000925c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009260:	a1 9b       	lsr	r11,0x1
80009262:	5d 0a       	ror	r10
80009264:	5d 0e       	ror	lr
80009266:	2f f7       	sub	r7,-1
80009268:	e0 47 07 ff 	cp.w	r7,2047
8000926c:	f9 ba 00 00 	moveq	r10,0
80009270:	f9 bb 00 00 	moveq	r11,0
80009274:	f9 be 00 00 	moveq	lr,0
80009278:	cb fb       	rjmp	800091f6 <__avr32_f64_add_res_of_done>

8000927a <__avr32_f64_add_op2_subnormal>:
8000927a:	30 16       	mov	r6,1
8000927c:	58 07       	cp.w	r7,0
8000927e:	ca 01       	brne	800091be <__avr32_f64_add+0x3e>
80009280:	b5 cb       	cbr	r11,0x14
80009282:	10 0a       	add	r10,r8
80009284:	f6 09 00 4b 	adc	r11,r11,r9
80009288:	18 4b       	or	r11,r12
8000928a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000928e:	d7 03       	nop

80009290 <__avr32_f64_to_u32>:
80009290:	58 0b       	cp.w	r11,0
80009292:	5e 6d       	retmi	0

80009294 <__avr32_f64_to_s32>:
80009294:	f6 0c 15 01 	lsl	r12,r11,0x1
80009298:	b5 9c       	lsr	r12,0x15
8000929a:	e0 2c 03 ff 	sub	r12,1023
8000929e:	5e 3d       	retlo	0
800092a0:	f8 0c 11 1f 	rsub	r12,r12,31
800092a4:	16 99       	mov	r9,r11
800092a6:	ab 7b       	lsl	r11,0xb
800092a8:	bf bb       	sbr	r11,0x1f
800092aa:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800092ae:	f6 0c 0a 4b 	lsr	r11,r11,r12
800092b2:	a1 79       	lsl	r9,0x1
800092b4:	5e 2b       	reths	r11
800092b6:	5c 3b       	neg	r11
800092b8:	5e fb       	retal	r11

800092ba <__avr32_u32_to_f64>:
800092ba:	f8 cb 00 00 	sub	r11,r12,0
800092be:	30 0c       	mov	r12,0
800092c0:	c0 38       	rjmp	800092c6 <__avr32_s32_to_f64+0x4>

800092c2 <__avr32_s32_to_f64>:
800092c2:	18 9b       	mov	r11,r12
800092c4:	5c 4b       	abs	r11
800092c6:	30 0a       	mov	r10,0
800092c8:	5e 0b       	reteq	r11
800092ca:	d4 01       	pushm	lr
800092cc:	e0 69 04 1e 	mov	r9,1054
800092d0:	f6 08 12 00 	clz	r8,r11
800092d4:	c1 70       	breq	80009302 <__avr32_s32_to_f64+0x40>
800092d6:	c0 c3       	brcs	800092ee <__avr32_s32_to_f64+0x2c>
800092d8:	f0 0e 11 20 	rsub	lr,r8,32
800092dc:	f6 08 09 4b 	lsl	r11,r11,r8
800092e0:	f4 0e 0a 4e 	lsr	lr,r10,lr
800092e4:	1c 4b       	or	r11,lr
800092e6:	f4 08 09 4a 	lsl	r10,r10,r8
800092ea:	10 19       	sub	r9,r8
800092ec:	c0 b8       	rjmp	80009302 <__avr32_s32_to_f64+0x40>
800092ee:	f4 08 12 00 	clz	r8,r10
800092f2:	f9 b8 03 00 	movlo	r8,0
800092f6:	f7 b8 02 e0 	subhs	r8,-32
800092fa:	f4 08 09 4b 	lsl	r11,r10,r8
800092fe:	30 0a       	mov	r10,0
80009300:	10 19       	sub	r9,r8
80009302:	58 09       	cp.w	r9,0
80009304:	e0 89 00 30 	brgt	80009364 <__avr32_s32_to_f64+0xa2>
80009308:	5c 39       	neg	r9
8000930a:	2f f9       	sub	r9,-1
8000930c:	e0 49 00 36 	cp.w	r9,54
80009310:	c0 43       	brcs	80009318 <__avr32_s32_to_f64+0x56>
80009312:	30 0b       	mov	r11,0
80009314:	30 0a       	mov	r10,0
80009316:	c2 68       	rjmp	80009362 <__avr32_s32_to_f64+0xa0>
80009318:	2f 69       	sub	r9,-10
8000931a:	f2 08 11 20 	rsub	r8,r9,32
8000931e:	e0 49 00 20 	cp.w	r9,32
80009322:	c0 b2       	brcc	80009338 <__avr32_s32_to_f64+0x76>
80009324:	f4 08 09 4e 	lsl	lr,r10,r8
80009328:	f6 08 09 48 	lsl	r8,r11,r8
8000932c:	f4 09 0a 4a 	lsr	r10,r10,r9
80009330:	f6 09 0a 4b 	lsr	r11,r11,r9
80009334:	10 4b       	or	r11,r8
80009336:	c0 88       	rjmp	80009346 <__avr32_s32_to_f64+0x84>
80009338:	f6 08 09 4e 	lsl	lr,r11,r8
8000933c:	14 4e       	or	lr,r10
8000933e:	16 9a       	mov	r10,r11
80009340:	30 0b       	mov	r11,0
80009342:	f4 09 0a 4a 	lsr	r10,r10,r9
80009346:	ed ba 00 00 	bld	r10,0x0
8000934a:	c0 92       	brcc	8000935c <__avr32_s32_to_f64+0x9a>
8000934c:	1c 7e       	tst	lr,lr
8000934e:	c0 41       	brne	80009356 <__avr32_s32_to_f64+0x94>
80009350:	ed ba 00 01 	bld	r10,0x1
80009354:	c0 42       	brcc	8000935c <__avr32_s32_to_f64+0x9a>
80009356:	2f fa       	sub	r10,-1
80009358:	f7 bb 02 ff 	subhs	r11,-1
8000935c:	5c fc       	rol	r12
8000935e:	5d 0b       	ror	r11
80009360:	5d 0a       	ror	r10
80009362:	d8 02       	popm	pc
80009364:	e0 68 03 ff 	mov	r8,1023
80009368:	ed ba 00 0b 	bld	r10,0xb
8000936c:	f7 b8 00 ff 	subeq	r8,-1
80009370:	10 0a       	add	r10,r8
80009372:	5c 0b       	acr	r11
80009374:	f7 b9 03 fe 	sublo	r9,-2
80009378:	e0 49 07 ff 	cp.w	r9,2047
8000937c:	c0 55       	brlt	80009386 <__avr32_s32_to_f64+0xc4>
8000937e:	30 0a       	mov	r10,0
80009380:	fc 1b ff e0 	movh	r11,0xffe0
80009384:	c0 c8       	rjmp	8000939c <__floatsidf_return_op1>
80009386:	ed bb 00 1f 	bld	r11,0x1f
8000938a:	f7 b9 01 01 	subne	r9,1
8000938e:	ab 9a       	lsr	r10,0xb
80009390:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80009394:	a1 7b       	lsl	r11,0x1
80009396:	ab 9b       	lsr	r11,0xb
80009398:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000939c <__floatsidf_return_op1>:
8000939c:	a1 7c       	lsl	r12,0x1
8000939e:	5d 0b       	ror	r11
800093a0:	d8 02       	popm	pc

800093a2 <__avr32_f64_cmp_eq>:
800093a2:	10 3a       	cp.w	r10,r8
800093a4:	f2 0b 13 00 	cpc	r11,r9
800093a8:	c0 80       	breq	800093b8 <__avr32_f64_cmp_eq+0x16>
800093aa:	a1 7b       	lsl	r11,0x1
800093ac:	a1 79       	lsl	r9,0x1
800093ae:	14 4b       	or	r11,r10
800093b0:	12 4b       	or	r11,r9
800093b2:	10 4b       	or	r11,r8
800093b4:	5e 0f       	reteq	1
800093b6:	5e fd       	retal	0
800093b8:	a1 7b       	lsl	r11,0x1
800093ba:	fc 1c ff e0 	movh	r12,0xffe0
800093be:	58 0a       	cp.w	r10,0
800093c0:	f8 0b 13 00 	cpc	r11,r12
800093c4:	5e 8f       	retls	1
800093c6:	5e fd       	retal	0

800093c8 <__avr32_f64_cmp_ge>:
800093c8:	1a de       	st.w	--sp,lr
800093ca:	1a d7       	st.w	--sp,r7
800093cc:	a1 7b       	lsl	r11,0x1
800093ce:	5f 3c       	srlo	r12
800093d0:	a1 79       	lsl	r9,0x1
800093d2:	5f 37       	srlo	r7
800093d4:	5c fc       	rol	r12
800093d6:	fc 1e ff e0 	movh	lr,0xffe0
800093da:	58 0a       	cp.w	r10,0
800093dc:	fc 0b 13 00 	cpc	r11,lr
800093e0:	e0 8b 00 1d 	brhi	8000941a <__avr32_f64_cmp_ge+0x52>
800093e4:	58 08       	cp.w	r8,0
800093e6:	fc 09 13 00 	cpc	r9,lr
800093ea:	e0 8b 00 18 	brhi	8000941a <__avr32_f64_cmp_ge+0x52>
800093ee:	58 0b       	cp.w	r11,0
800093f0:	f5 ba 00 00 	subfeq	r10,0
800093f4:	c1 50       	breq	8000941e <__avr32_f64_cmp_ge+0x56>
800093f6:	1b 07       	ld.w	r7,sp++
800093f8:	1b 0e       	ld.w	lr,sp++
800093fa:	58 3c       	cp.w	r12,3
800093fc:	c0 a0       	breq	80009410 <__avr32_f64_cmp_ge+0x48>
800093fe:	58 1c       	cp.w	r12,1
80009400:	c0 33       	brcs	80009406 <__avr32_f64_cmp_ge+0x3e>
80009402:	5e 0f       	reteq	1
80009404:	5e 1d       	retne	0
80009406:	10 3a       	cp.w	r10,r8
80009408:	f2 0b 13 00 	cpc	r11,r9
8000940c:	5e 2f       	reths	1
8000940e:	5e 3d       	retlo	0
80009410:	14 38       	cp.w	r8,r10
80009412:	f6 09 13 00 	cpc	r9,r11
80009416:	5e 2f       	reths	1
80009418:	5e 3d       	retlo	0
8000941a:	1b 07       	ld.w	r7,sp++
8000941c:	d8 0a       	popm	pc,r12=0
8000941e:	58 17       	cp.w	r7,1
80009420:	5f 0c       	sreq	r12
80009422:	58 09       	cp.w	r9,0
80009424:	f5 b8 00 00 	subfeq	r8,0
80009428:	1b 07       	ld.w	r7,sp++
8000942a:	1b 0e       	ld.w	lr,sp++
8000942c:	5e 0f       	reteq	1
8000942e:	5e fc       	retal	r12

80009430 <__avr32_f64_cmp_lt>:
80009430:	1a de       	st.w	--sp,lr
80009432:	1a d7       	st.w	--sp,r7
80009434:	a1 7b       	lsl	r11,0x1
80009436:	5f 3c       	srlo	r12
80009438:	a1 79       	lsl	r9,0x1
8000943a:	5f 37       	srlo	r7
8000943c:	5c fc       	rol	r12
8000943e:	fc 1e ff e0 	movh	lr,0xffe0
80009442:	58 0a       	cp.w	r10,0
80009444:	fc 0b 13 00 	cpc	r11,lr
80009448:	e0 8b 00 1d 	brhi	80009482 <__avr32_f64_cmp_lt+0x52>
8000944c:	58 08       	cp.w	r8,0
8000944e:	fc 09 13 00 	cpc	r9,lr
80009452:	e0 8b 00 18 	brhi	80009482 <__avr32_f64_cmp_lt+0x52>
80009456:	58 0b       	cp.w	r11,0
80009458:	f5 ba 00 00 	subfeq	r10,0
8000945c:	c1 50       	breq	80009486 <__avr32_f64_cmp_lt+0x56>
8000945e:	1b 07       	ld.w	r7,sp++
80009460:	1b 0e       	ld.w	lr,sp++
80009462:	58 3c       	cp.w	r12,3
80009464:	c0 a0       	breq	80009478 <__avr32_f64_cmp_lt+0x48>
80009466:	58 1c       	cp.w	r12,1
80009468:	c0 33       	brcs	8000946e <__avr32_f64_cmp_lt+0x3e>
8000946a:	5e 0d       	reteq	0
8000946c:	5e 1f       	retne	1
8000946e:	10 3a       	cp.w	r10,r8
80009470:	f2 0b 13 00 	cpc	r11,r9
80009474:	5e 2d       	reths	0
80009476:	5e 3f       	retlo	1
80009478:	14 38       	cp.w	r8,r10
8000947a:	f6 09 13 00 	cpc	r9,r11
8000947e:	5e 2d       	reths	0
80009480:	5e 3f       	retlo	1
80009482:	1b 07       	ld.w	r7,sp++
80009484:	d8 0a       	popm	pc,r12=0
80009486:	58 17       	cp.w	r7,1
80009488:	5f 1c       	srne	r12
8000948a:	58 09       	cp.w	r9,0
8000948c:	f5 b8 00 00 	subfeq	r8,0
80009490:	1b 07       	ld.w	r7,sp++
80009492:	1b 0e       	ld.w	lr,sp++
80009494:	5e 0d       	reteq	0
80009496:	5e fc       	retal	r12

80009498 <__avr32_f64_div>:
80009498:	eb cd 40 ff 	pushm	r0-r7,lr
8000949c:	f7 e9 20 0e 	eor	lr,r11,r9
800094a0:	f6 07 16 14 	lsr	r7,r11,0x14
800094a4:	a9 7b       	lsl	r11,0x9
800094a6:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800094aa:	a9 7a       	lsl	r10,0x9
800094ac:	bd bb       	sbr	r11,0x1d
800094ae:	e4 1b 3f ff 	andh	r11,0x3fff
800094b2:	ab d7       	cbr	r7,0xb
800094b4:	e0 80 00 cc 	breq	8000964c <__avr32_f64_div_round_subnormal+0x54>
800094b8:	e0 47 07 ff 	cp.w	r7,2047
800094bc:	e0 84 00 b5 	brge	80009626 <__avr32_f64_div_round_subnormal+0x2e>
800094c0:	f2 06 16 14 	lsr	r6,r9,0x14
800094c4:	a9 79       	lsl	r9,0x9
800094c6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800094ca:	a9 78       	lsl	r8,0x9
800094cc:	bd b9       	sbr	r9,0x1d
800094ce:	e4 19 3f ff 	andh	r9,0x3fff
800094d2:	ab d6       	cbr	r6,0xb
800094d4:	e0 80 00 e2 	breq	80009698 <__avr32_f64_div_round_subnormal+0xa0>
800094d8:	e0 46 07 ff 	cp.w	r6,2047
800094dc:	e0 84 00 b2 	brge	80009640 <__avr32_f64_div_round_subnormal+0x48>
800094e0:	0c 17       	sub	r7,r6
800094e2:	fe 37 fc 01 	sub	r7,-1023
800094e6:	fc 1c 80 00 	movh	r12,0x8000
800094ea:	f8 03 16 01 	lsr	r3,r12,0x1
800094ee:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800094f2:	5c d4       	com	r4
800094f4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800094f8:	e6 09 06 44 	mulu.d	r4,r3,r9
800094fc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009500:	e6 05 06 44 	mulu.d	r4,r3,r5
80009504:	ea 03 15 02 	lsl	r3,r5,0x2
80009508:	e6 09 06 44 	mulu.d	r4,r3,r9
8000950c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009510:	e6 05 06 44 	mulu.d	r4,r3,r5
80009514:	ea 03 15 02 	lsl	r3,r5,0x2
80009518:	e6 09 06 44 	mulu.d	r4,r3,r9
8000951c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009520:	e6 05 06 44 	mulu.d	r4,r3,r5
80009524:	ea 03 15 02 	lsl	r3,r5,0x2
80009528:	e6 08 06 40 	mulu.d	r0,r3,r8
8000952c:	e4 09 07 40 	macu.d	r0,r2,r9
80009530:	e6 09 06 44 	mulu.d	r4,r3,r9
80009534:	02 04       	add	r4,r1
80009536:	5c 05       	acr	r5
80009538:	a3 65       	lsl	r5,0x2
8000953a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000953e:	a3 64       	lsl	r4,0x2
80009540:	5c 34       	neg	r4
80009542:	f8 05 01 45 	sbc	r5,r12,r5
80009546:	e6 04 06 40 	mulu.d	r0,r3,r4
8000954a:	e4 05 07 40 	macu.d	r0,r2,r5
8000954e:	e6 05 06 44 	mulu.d	r4,r3,r5
80009552:	02 04       	add	r4,r1
80009554:	5c 05       	acr	r5
80009556:	ea 03 15 02 	lsl	r3,r5,0x2
8000955a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000955e:	e8 02 15 02 	lsl	r2,r4,0x2
80009562:	e6 08 06 40 	mulu.d	r0,r3,r8
80009566:	e4 09 07 40 	macu.d	r0,r2,r9
8000956a:	e6 09 06 44 	mulu.d	r4,r3,r9
8000956e:	02 04       	add	r4,r1
80009570:	5c 05       	acr	r5
80009572:	a3 65       	lsl	r5,0x2
80009574:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009578:	a3 64       	lsl	r4,0x2
8000957a:	5c 34       	neg	r4
8000957c:	f8 05 01 45 	sbc	r5,r12,r5
80009580:	e6 04 06 40 	mulu.d	r0,r3,r4
80009584:	e4 05 07 40 	macu.d	r0,r2,r5
80009588:	e6 05 06 44 	mulu.d	r4,r3,r5
8000958c:	02 04       	add	r4,r1
8000958e:	5c 05       	acr	r5
80009590:	ea 03 15 02 	lsl	r3,r5,0x2
80009594:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009598:	e8 02 15 02 	lsl	r2,r4,0x2
8000959c:	e6 0a 06 40 	mulu.d	r0,r3,r10
800095a0:	e4 0b 07 40 	macu.d	r0,r2,r11
800095a4:	e6 0b 06 42 	mulu.d	r2,r3,r11
800095a8:	02 02       	add	r2,r1
800095aa:	5c 03       	acr	r3
800095ac:	ed b3 00 1c 	bld	r3,0x1c
800095b0:	c0 90       	breq	800095c2 <__avr32_f64_div+0x12a>
800095b2:	a1 72       	lsl	r2,0x1
800095b4:	5c f3       	rol	r3
800095b6:	20 17       	sub	r7,1
800095b8:	a3 9a       	lsr	r10,0x3
800095ba:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800095be:	a3 9b       	lsr	r11,0x3
800095c0:	c0 58       	rjmp	800095ca <__avr32_f64_div+0x132>
800095c2:	a5 8a       	lsr	r10,0x4
800095c4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800095c8:	a5 8b       	lsr	r11,0x4
800095ca:	58 07       	cp.w	r7,0
800095cc:	e0 8a 00 8b 	brle	800096e2 <__avr32_f64_div_res_subnormal>
800095d0:	e0 12 ff 00 	andl	r2,0xff00
800095d4:	e8 12 00 80 	orl	r2,0x80
800095d8:	e6 08 06 40 	mulu.d	r0,r3,r8
800095dc:	e4 09 07 40 	macu.d	r0,r2,r9
800095e0:	e4 08 06 44 	mulu.d	r4,r2,r8
800095e4:	e6 09 06 48 	mulu.d	r8,r3,r9
800095e8:	00 05       	add	r5,r0
800095ea:	f0 01 00 48 	adc	r8,r8,r1
800095ee:	5c 09       	acr	r9
800095f0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800095f4:	58 04       	cp.w	r4,0
800095f6:	5c 25       	cpc	r5

800095f8 <__avr32_f64_div_round_subnormal>:
800095f8:	f4 08 13 00 	cpc	r8,r10
800095fc:	f6 09 13 00 	cpc	r9,r11
80009600:	5f 36       	srlo	r6
80009602:	f8 06 17 00 	moveq	r6,r12
80009606:	e4 0a 16 08 	lsr	r10,r2,0x8
8000960a:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000960e:	e6 0b 16 08 	lsr	r11,r3,0x8
80009612:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80009616:	ed be 00 1f 	bld	lr,0x1f
8000961a:	ef bb 00 1f 	bst	r11,0x1f
8000961e:	0c 0a       	add	r10,r6
80009620:	5c 0b       	acr	r11
80009622:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009626:	e4 1b 00 0f 	andh	r11,0xf
8000962a:	14 4b       	or	r11,r10
8000962c:	e0 81 00 a7 	brne	8000977a <__avr32_f64_div_res_subnormal+0x98>
80009630:	f2 06 16 14 	lsr	r6,r9,0x14
80009634:	ab d6       	cbr	r6,0xb
80009636:	e0 46 07 ff 	cp.w	r6,2047
8000963a:	e0 81 00 a4 	brne	80009782 <__avr32_f64_div_res_subnormal+0xa0>
8000963e:	c9 e8       	rjmp	8000977a <__avr32_f64_div_res_subnormal+0x98>
80009640:	e4 19 00 0f 	andh	r9,0xf
80009644:	10 49       	or	r9,r8
80009646:	e0 81 00 9a 	brne	8000977a <__avr32_f64_div_res_subnormal+0x98>
8000964a:	c9 28       	rjmp	8000976e <__avr32_f64_div_res_subnormal+0x8c>
8000964c:	a3 7b       	lsl	r11,0x3
8000964e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80009652:	a3 7a       	lsl	r10,0x3
80009654:	f5 eb 10 04 	or	r4,r10,r11
80009658:	e0 80 00 a0 	breq	80009798 <__avr32_f64_div_op1_zero>
8000965c:	f6 04 12 00 	clz	r4,r11
80009660:	c1 70       	breq	8000968e <__avr32_f64_div_round_subnormal+0x96>
80009662:	c0 c3       	brcs	8000967a <__avr32_f64_div_round_subnormal+0x82>
80009664:	e8 05 11 20 	rsub	r5,r4,32
80009668:	f6 04 09 4b 	lsl	r11,r11,r4
8000966c:	f4 05 0a 45 	lsr	r5,r10,r5
80009670:	0a 4b       	or	r11,r5
80009672:	f4 04 09 4a 	lsl	r10,r10,r4
80009676:	08 17       	sub	r7,r4
80009678:	c0 b8       	rjmp	8000968e <__avr32_f64_div_round_subnormal+0x96>
8000967a:	f4 04 12 00 	clz	r4,r10
8000967e:	f9 b4 03 00 	movlo	r4,0
80009682:	f7 b4 02 e0 	subhs	r4,-32
80009686:	f4 04 09 4b 	lsl	r11,r10,r4
8000968a:	30 0a       	mov	r10,0
8000968c:	08 17       	sub	r7,r4
8000968e:	a3 8a       	lsr	r10,0x2
80009690:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80009694:	a3 8b       	lsr	r11,0x2
80009696:	c1 1b       	rjmp	800094b8 <__avr32_f64_div+0x20>
80009698:	a3 79       	lsl	r9,0x3
8000969a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000969e:	a3 78       	lsl	r8,0x3
800096a0:	f3 e8 10 04 	or	r4,r9,r8
800096a4:	c6 f0       	breq	80009782 <__avr32_f64_div_res_subnormal+0xa0>
800096a6:	f2 04 12 00 	clz	r4,r9
800096aa:	c1 70       	breq	800096d8 <__avr32_f64_div_round_subnormal+0xe0>
800096ac:	c0 c3       	brcs	800096c4 <__avr32_f64_div_round_subnormal+0xcc>
800096ae:	e8 05 11 20 	rsub	r5,r4,32
800096b2:	f2 04 09 49 	lsl	r9,r9,r4
800096b6:	f0 05 0a 45 	lsr	r5,r8,r5
800096ba:	0a 49       	or	r9,r5
800096bc:	f0 04 09 48 	lsl	r8,r8,r4
800096c0:	08 16       	sub	r6,r4
800096c2:	c0 b8       	rjmp	800096d8 <__avr32_f64_div_round_subnormal+0xe0>
800096c4:	f0 04 12 00 	clz	r4,r8
800096c8:	f9 b4 03 00 	movlo	r4,0
800096cc:	f7 b4 02 e0 	subhs	r4,-32
800096d0:	f0 04 09 49 	lsl	r9,r8,r4
800096d4:	30 08       	mov	r8,0
800096d6:	08 16       	sub	r6,r4
800096d8:	a3 88       	lsr	r8,0x2
800096da:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800096de:	a3 89       	lsr	r9,0x2
800096e0:	cf ca       	rjmp	800094d8 <__avr32_f64_div+0x40>

800096e2 <__avr32_f64_div_res_subnormal>:
800096e2:	5c 37       	neg	r7
800096e4:	2f f7       	sub	r7,-1
800096e6:	f1 b7 04 c0 	satu	r7,0x6
800096ea:	e0 47 00 20 	cp.w	r7,32
800096ee:	c1 54       	brge	80009718 <__avr32_f64_div_res_subnormal+0x36>
800096f0:	ee 06 11 20 	rsub	r6,r7,32
800096f4:	e4 07 0a 42 	lsr	r2,r2,r7
800096f8:	e6 06 09 4c 	lsl	r12,r3,r6
800096fc:	18 42       	or	r2,r12
800096fe:	e6 07 0a 43 	lsr	r3,r3,r7
80009702:	f4 06 09 41 	lsl	r1,r10,r6
80009706:	f4 07 0a 4a 	lsr	r10,r10,r7
8000970a:	f6 06 09 4c 	lsl	r12,r11,r6
8000970e:	18 4a       	or	r10,r12
80009710:	f6 07 0a 4b 	lsr	r11,r11,r7
80009714:	30 00       	mov	r0,0
80009716:	c1 58       	rjmp	80009740 <__avr32_f64_div_res_subnormal+0x5e>
80009718:	ee 06 11 20 	rsub	r6,r7,32
8000971c:	f9 b0 00 00 	moveq	r0,0
80009720:	f9 bc 00 00 	moveq	r12,0
80009724:	c0 50       	breq	8000972e <__avr32_f64_div_res_subnormal+0x4c>
80009726:	f4 06 09 40 	lsl	r0,r10,r6
8000972a:	f6 06 09 4c 	lsl	r12,r11,r6
8000972e:	e6 07 0a 42 	lsr	r2,r3,r7
80009732:	30 03       	mov	r3,0
80009734:	f4 07 0a 41 	lsr	r1,r10,r7
80009738:	18 41       	or	r1,r12
8000973a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000973e:	30 0b       	mov	r11,0
80009740:	e0 12 ff 00 	andl	r2,0xff00
80009744:	e8 12 00 80 	orl	r2,0x80
80009748:	e6 08 06 46 	mulu.d	r6,r3,r8
8000974c:	e4 09 07 46 	macu.d	r6,r2,r9
80009750:	e4 08 06 44 	mulu.d	r4,r2,r8
80009754:	e6 09 06 48 	mulu.d	r8,r3,r9
80009758:	0c 05       	add	r5,r6
8000975a:	f0 07 00 48 	adc	r8,r8,r7
8000975e:	5c 09       	acr	r9
80009760:	30 07       	mov	r7,0
80009762:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009766:	00 34       	cp.w	r4,r0
80009768:	e2 05 13 00 	cpc	r5,r1
8000976c:	c4 6b       	rjmp	800095f8 <__avr32_f64_div_round_subnormal>
8000976e:	1c 9b       	mov	r11,lr
80009770:	e6 1b 80 00 	andh	r11,0x8000,COH
80009774:	30 0a       	mov	r10,0
80009776:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000977a:	3f fb       	mov	r11,-1
8000977c:	30 0a       	mov	r10,0
8000977e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80009782:	f5 eb 10 04 	or	r4,r10,r11
80009786:	c0 90       	breq	80009798 <__avr32_f64_div_op1_zero>
80009788:	1c 9b       	mov	r11,lr
8000978a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000978e:	ea 1b 7f f0 	orh	r11,0x7ff0
80009792:	30 0a       	mov	r10,0
80009794:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80009798 <__avr32_f64_div_op1_zero>:
80009798:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000979c:	ce f0       	breq	8000977a <__avr32_f64_div_res_subnormal+0x98>
8000979e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800097a2:	e0 44 07 ff 	cp.w	r4,2047
800097a6:	ce 41       	brne	8000976e <__avr32_f64_div_res_subnormal+0x8c>
800097a8:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800097ac:	ce 10       	breq	8000976e <__avr32_f64_div_res_subnormal+0x8c>
800097ae:	ce 6b       	rjmp	8000977a <__avr32_f64_div_res_subnormal+0x98>

800097b0 <__avr32_umod64>:
800097b0:	d4 31       	pushm	r0-r7,lr
800097b2:	1a 97       	mov	r7,sp
800097b4:	20 3d       	sub	sp,12
800097b6:	10 9c       	mov	r12,r8
800097b8:	12 95       	mov	r5,r9
800097ba:	14 9e       	mov	lr,r10
800097bc:	16 91       	mov	r1,r11
800097be:	16 96       	mov	r6,r11
800097c0:	58 09       	cp.w	r9,0
800097c2:	e0 81 00 81 	brne	800098c4 <__avr32_umod64+0x114>
800097c6:	16 38       	cp.w	r8,r11
800097c8:	e0 88 00 12 	brls	800097ec <__avr32_umod64+0x3c>
800097cc:	f0 08 12 00 	clz	r8,r8
800097d0:	c4 e0       	breq	8000986c <__avr32_umod64+0xbc>
800097d2:	f6 08 09 46 	lsl	r6,r11,r8
800097d6:	f8 08 09 4c 	lsl	r12,r12,r8
800097da:	f0 0b 11 20 	rsub	r11,r8,32
800097de:	f4 08 09 4e 	lsl	lr,r10,r8
800097e2:	f4 0b 0a 4b 	lsr	r11,r10,r11
800097e6:	f7 e6 10 06 	or	r6,r11,r6
800097ea:	c4 18       	rjmp	8000986c <__avr32_umod64+0xbc>
800097ec:	58 08       	cp.w	r8,0
800097ee:	c0 51       	brne	800097f8 <__avr32_umod64+0x48>
800097f0:	30 19       	mov	r9,1
800097f2:	f2 08 0d 08 	divu	r8,r9,r8
800097f6:	10 9c       	mov	r12,r8
800097f8:	f8 08 12 00 	clz	r8,r12
800097fc:	c0 31       	brne	80009802 <__avr32_umod64+0x52>
800097fe:	18 16       	sub	r6,r12
80009800:	c3 68       	rjmp	8000986c <__avr32_umod64+0xbc>
80009802:	f0 03 11 20 	rsub	r3,r8,32
80009806:	f4 03 0a 4b 	lsr	r11,r10,r3
8000980a:	f8 08 09 4c 	lsl	r12,r12,r8
8000980e:	ec 08 09 49 	lsl	r9,r6,r8
80009812:	ec 03 0a 43 	lsr	r3,r6,r3
80009816:	f7 e9 10 09 	or	r9,r11,r9
8000981a:	f8 05 16 10 	lsr	r5,r12,0x10
8000981e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009822:	e6 05 0d 02 	divu	r2,r3,r5
80009826:	f2 0e 16 10 	lsr	lr,r9,0x10
8000982a:	ec 02 02 4b 	mul	r11,r6,r2
8000982e:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009832:	16 3e       	cp.w	lr,r11
80009834:	c0 72       	brcc	80009842 <__avr32_umod64+0x92>
80009836:	18 0e       	add	lr,r12
80009838:	18 3e       	cp.w	lr,r12
8000983a:	c0 43       	brcs	80009842 <__avr32_umod64+0x92>
8000983c:	16 3e       	cp.w	lr,r11
8000983e:	fd dc e3 0e 	addcs	lr,lr,r12
80009842:	fc 0b 01 03 	sub	r3,lr,r11
80009846:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000984a:	e6 05 0d 02 	divu	r2,r3,r5
8000984e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009852:	a5 36       	mul	r6,r2
80009854:	0c 39       	cp.w	r9,r6
80009856:	c0 72       	brcc	80009864 <__avr32_umod64+0xb4>
80009858:	18 09       	add	r9,r12
8000985a:	18 39       	cp.w	r9,r12
8000985c:	c0 43       	brcs	80009864 <__avr32_umod64+0xb4>
8000985e:	0c 39       	cp.w	r9,r6
80009860:	f3 dc e3 09 	addcs	r9,r9,r12
80009864:	f2 06 01 06 	sub	r6,r9,r6
80009868:	f4 08 09 4e 	lsl	lr,r10,r8
8000986c:	f8 0a 16 10 	lsr	r10,r12,0x10
80009870:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80009874:	ec 0a 0d 02 	divu	r2,r6,r10
80009878:	fc 09 16 10 	lsr	r9,lr,0x10
8000987c:	ea 02 02 4b 	mul	r11,r5,r2
80009880:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009884:	16 39       	cp.w	r9,r11
80009886:	c0 72       	brcc	80009894 <__avr32_umod64+0xe4>
80009888:	18 09       	add	r9,r12
8000988a:	18 39       	cp.w	r9,r12
8000988c:	c0 43       	brcs	80009894 <__avr32_umod64+0xe4>
8000988e:	16 39       	cp.w	r9,r11
80009890:	f3 dc e3 09 	addcs	r9,r9,r12
80009894:	f2 0b 01 0b 	sub	r11,r9,r11
80009898:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000989c:	f6 0a 0d 0a 	divu	r10,r11,r10
800098a0:	fd eb 11 0e 	or	lr,lr,r11<<0x10
800098a4:	ea 0a 02 4a 	mul	r10,r5,r10
800098a8:	14 3e       	cp.w	lr,r10
800098aa:	c0 72       	brcc	800098b8 <__avr32_umod64+0x108>
800098ac:	18 0e       	add	lr,r12
800098ae:	18 3e       	cp.w	lr,r12
800098b0:	c0 43       	brcs	800098b8 <__avr32_umod64+0x108>
800098b2:	14 3e       	cp.w	lr,r10
800098b4:	fd dc e3 0e 	addcs	lr,lr,r12
800098b8:	fc 0a 01 0a 	sub	r10,lr,r10
800098bc:	30 0b       	mov	r11,0
800098be:	f4 08 0a 4a 	lsr	r10,r10,r8
800098c2:	c7 b8       	rjmp	800099b8 <__avr32_umod64+0x208>
800098c4:	16 39       	cp.w	r9,r11
800098c6:	e0 8b 00 79 	brhi	800099b8 <__avr32_umod64+0x208>
800098ca:	f2 09 12 00 	clz	r9,r9
800098ce:	c1 21       	brne	800098f2 <__avr32_umod64+0x142>
800098d0:	10 3a       	cp.w	r10,r8
800098d2:	5f 2b       	srhs	r11
800098d4:	0a 31       	cp.w	r1,r5
800098d6:	5f ba       	srhi	r10
800098d8:	f7 ea 10 0a 	or	r10,r11,r10
800098dc:	f2 0a 18 00 	cp.b	r10,r9
800098e0:	c0 60       	breq	800098ec <__avr32_umod64+0x13c>
800098e2:	fc 08 01 0c 	sub	r12,lr,r8
800098e6:	e2 05 01 46 	sbc	r6,r1,r5
800098ea:	18 9e       	mov	lr,r12
800098ec:	0c 9b       	mov	r11,r6
800098ee:	1c 9a       	mov	r10,lr
800098f0:	c6 48       	rjmp	800099b8 <__avr32_umod64+0x208>
800098f2:	ea 09 09 4c 	lsl	r12,r5,r9
800098f6:	f2 06 11 20 	rsub	r6,r9,32
800098fa:	f6 09 09 4b 	lsl	r11,r11,r9
800098fe:	f0 09 09 42 	lsl	r2,r8,r9
80009902:	ef 46 ff f4 	st.w	r7[-12],r6
80009906:	f0 06 0a 48 	lsr	r8,r8,r6
8000990a:	18 48       	or	r8,r12
8000990c:	e2 06 0a 4c 	lsr	r12,r1,r6
80009910:	f4 09 09 43 	lsl	r3,r10,r9
80009914:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80009918:	f4 06 0a 4a 	lsr	r10,r10,r6
8000991c:	16 4a       	or	r10,r11
8000991e:	f0 0b 16 10 	lsr	r11,r8,0x10
80009922:	f8 0b 0d 04 	divu	r4,r12,r11
80009926:	f4 0c 16 10 	lsr	r12,r10,0x10
8000992a:	08 91       	mov	r1,r4
8000992c:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009930:	e8 0e 02 46 	mul	r6,r4,lr
80009934:	0c 3c       	cp.w	r12,r6
80009936:	c0 a2       	brcc	8000994a <__avr32_umod64+0x19a>
80009938:	20 11       	sub	r1,1
8000993a:	10 0c       	add	r12,r8
8000993c:	10 3c       	cp.w	r12,r8
8000993e:	c0 63       	brcs	8000994a <__avr32_umod64+0x19a>
80009940:	0c 3c       	cp.w	r12,r6
80009942:	f7 b1 03 01 	sublo	r1,1
80009946:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000994a:	0c 1c       	sub	r12,r6
8000994c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009950:	f8 0b 0d 04 	divu	r4,r12,r11
80009954:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80009958:	08 96       	mov	r6,r4
8000995a:	e8 0e 02 4e 	mul	lr,r4,lr
8000995e:	1c 3b       	cp.w	r11,lr
80009960:	c0 a2       	brcc	80009974 <__avr32_umod64+0x1c4>
80009962:	20 16       	sub	r6,1
80009964:	10 0b       	add	r11,r8
80009966:	10 3b       	cp.w	r11,r8
80009968:	c0 63       	brcs	80009974 <__avr32_umod64+0x1c4>
8000996a:	1c 3b       	cp.w	r11,lr
8000996c:	f7 b6 03 01 	sublo	r6,1
80009970:	f7 d8 e3 0b 	addcs	r11,r11,r8
80009974:	ed e1 11 01 	or	r1,r6,r1<<0x10
80009978:	1c 1b       	sub	r11,lr
8000997a:	e2 02 06 40 	mulu.d	r0,r1,r2
8000997e:	00 9e       	mov	lr,r0
80009980:	02 9c       	mov	r12,r1
80009982:	16 3c       	cp.w	r12,r11
80009984:	e0 8b 00 08 	brhi	80009994 <__avr32_umod64+0x1e4>
80009988:	5f 06       	sreq	r6
8000998a:	06 30       	cp.w	r0,r3
8000998c:	5f ba       	srhi	r10
8000998e:	ed ea 00 0a 	and	r10,r6,r10
80009992:	c0 60       	breq	8000999e <__avr32_umod64+0x1ee>
80009994:	fc 02 01 04 	sub	r4,lr,r2
80009998:	f8 08 01 4c 	sbc	r12,r12,r8
8000999c:	08 9e       	mov	lr,r4
8000999e:	e6 0e 01 0a 	sub	r10,r3,lr
800099a2:	f6 0c 01 4c 	sbc	r12,r11,r12
800099a6:	ee f1 ff f4 	ld.w	r1,r7[-12]
800099aa:	f8 09 0a 4b 	lsr	r11,r12,r9
800099ae:	f4 09 0a 4a 	lsr	r10,r10,r9
800099b2:	f8 01 09 4c 	lsl	r12,r12,r1
800099b6:	18 4a       	or	r10,r12
800099b8:	2f dd       	sub	sp,-12
800099ba:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009a00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009a00:	c0 08       	rjmp	80009a00 <_evba>
	...

80009a04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009a04:	c0 08       	rjmp	80009a04 <_handle_TLB_Multiple_Hit>
	...

80009a08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009a08:	c0 08       	rjmp	80009a08 <_handle_Bus_Error_Data_Fetch>
	...

80009a0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80009a0c:	c0 08       	rjmp	80009a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80009a10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009a10:	c0 08       	rjmp	80009a10 <_handle_NMI>
	...

80009a14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009a14:	c0 08       	rjmp	80009a14 <_handle_Instruction_Address>
	...

80009a18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009a18:	c0 08       	rjmp	80009a18 <_handle_ITLB_Protection>
	...

80009a1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80009a1c:	c0 08       	rjmp	80009a1c <_handle_Breakpoint>
	...

80009a20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009a20:	c0 08       	rjmp	80009a20 <_handle_Illegal_Opcode>
	...

80009a24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009a24:	c0 08       	rjmp	80009a24 <_handle_Unimplemented_Instruction>
	...

80009a28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009a28:	c0 08       	rjmp	80009a28 <_handle_Privilege_Violation>
	...

80009a2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80009a2c:	c0 08       	rjmp	80009a2c <_handle_Floating_Point>
	...

80009a30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009a30:	c0 08       	rjmp	80009a30 <_handle_Coprocessor_Absent>
	...

80009a34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009a34:	c0 08       	rjmp	80009a34 <_handle_Data_Address_Read>
	...

80009a38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009a38:	c0 08       	rjmp	80009a38 <_handle_Data_Address_Write>
	...

80009a3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80009a3c:	c0 08       	rjmp	80009a3c <_handle_DTLB_Protection_Read>
	...

80009a40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009a40:	c0 08       	rjmp	80009a40 <_handle_DTLB_Protection_Write>
	...

80009a44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009a44:	c0 08       	rjmp	80009a44 <_handle_DTLB_Modified>
	...

80009a50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009a50:	c0 08       	rjmp	80009a50 <_handle_ITLB_Miss>
	...

80009a60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009a60:	c0 08       	rjmp	80009a60 <_handle_DTLB_Miss_Read>
	...

80009a70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009a70:	c0 08       	rjmp	80009a70 <_handle_DTLB_Miss_Write>
	...

80009b00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009b00:	c0 08       	rjmp	80009b00 <_handle_Supervisor_Call>
80009b02:	d7 03       	nop

80009b04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009b04:	30 0c       	mov	r12,0
80009b06:	fe b0 cc 89 	rcall	80003418 <_get_interrupt_handler>
80009b0a:	58 0c       	cp.w	r12,0
80009b0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009b10:	d6 03       	rete

80009b12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009b12:	30 1c       	mov	r12,1
80009b14:	fe b0 cc 82 	rcall	80003418 <_get_interrupt_handler>
80009b18:	58 0c       	cp.w	r12,0
80009b1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009b1e:	d6 03       	rete

80009b20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009b20:	30 2c       	mov	r12,2
80009b22:	fe b0 cc 7b 	rcall	80003418 <_get_interrupt_handler>
80009b26:	58 0c       	cp.w	r12,0
80009b28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009b2c:	d6 03       	rete

80009b2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009b2e:	30 3c       	mov	r12,3
80009b30:	fe b0 cc 74 	rcall	80003418 <_get_interrupt_handler>
80009b34:	58 0c       	cp.w	r12,0
80009b36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009b3a:	d6 03       	rete
80009b3c:	d7 03       	nop
80009b3e:	d7 03       	nop
80009b40:	d7 03       	nop
80009b42:	d7 03       	nop
80009b44:	d7 03       	nop
80009b46:	d7 03       	nop
80009b48:	d7 03       	nop
80009b4a:	d7 03       	nop
80009b4c:	d7 03       	nop
80009b4e:	d7 03       	nop
80009b50:	d7 03       	nop
80009b52:	d7 03       	nop
80009b54:	d7 03       	nop
80009b56:	d7 03       	nop
80009b58:	d7 03       	nop
80009b5a:	d7 03       	nop
80009b5c:	d7 03       	nop
80009b5e:	d7 03       	nop
80009b60:	d7 03       	nop
80009b62:	d7 03       	nop
80009b64:	d7 03       	nop
80009b66:	d7 03       	nop
80009b68:	d7 03       	nop
80009b6a:	d7 03       	nop
80009b6c:	d7 03       	nop
80009b6e:	d7 03       	nop
80009b70:	d7 03       	nop
80009b72:	d7 03       	nop
80009b74:	d7 03       	nop
80009b76:	d7 03       	nop
80009b78:	d7 03       	nop
80009b7a:	d7 03       	nop
80009b7c:	d7 03       	nop
80009b7e:	d7 03       	nop
80009b80:	d7 03       	nop
80009b82:	d7 03       	nop
80009b84:	d7 03       	nop
80009b86:	d7 03       	nop
80009b88:	d7 03       	nop
80009b8a:	d7 03       	nop
80009b8c:	d7 03       	nop
80009b8e:	d7 03       	nop
80009b90:	d7 03       	nop
80009b92:	d7 03       	nop
80009b94:	d7 03       	nop
80009b96:	d7 03       	nop
80009b98:	d7 03       	nop
80009b9a:	d7 03       	nop
80009b9c:	d7 03       	nop
80009b9e:	d7 03       	nop
80009ba0:	d7 03       	nop
80009ba2:	d7 03       	nop
80009ba4:	d7 03       	nop
80009ba6:	d7 03       	nop
80009ba8:	d7 03       	nop
80009baa:	d7 03       	nop
80009bac:	d7 03       	nop
80009bae:	d7 03       	nop
80009bb0:	d7 03       	nop
80009bb2:	d7 03       	nop
80009bb4:	d7 03       	nop
80009bb6:	d7 03       	nop
80009bb8:	d7 03       	nop
80009bba:	d7 03       	nop
80009bbc:	d7 03       	nop
80009bbe:	d7 03       	nop
80009bc0:	d7 03       	nop
80009bc2:	d7 03       	nop
80009bc4:	d7 03       	nop
80009bc6:	d7 03       	nop
80009bc8:	d7 03       	nop
80009bca:	d7 03       	nop
80009bcc:	d7 03       	nop
80009bce:	d7 03       	nop
80009bd0:	d7 03       	nop
80009bd2:	d7 03       	nop
80009bd4:	d7 03       	nop
80009bd6:	d7 03       	nop
80009bd8:	d7 03       	nop
80009bda:	d7 03       	nop
80009bdc:	d7 03       	nop
80009bde:	d7 03       	nop
80009be0:	d7 03       	nop
80009be2:	d7 03       	nop
80009be4:	d7 03       	nop
80009be6:	d7 03       	nop
80009be8:	d7 03       	nop
80009bea:	d7 03       	nop
80009bec:	d7 03       	nop
80009bee:	d7 03       	nop
80009bf0:	d7 03       	nop
80009bf2:	d7 03       	nop
80009bf4:	d7 03       	nop
80009bf6:	d7 03       	nop
80009bf8:	d7 03       	nop
80009bfa:	d7 03       	nop
80009bfc:	d7 03       	nop
80009bfe:	d7 03       	nop
