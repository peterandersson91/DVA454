
Lab62.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        0000200c  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00009d88  80002028  80002028  00002428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000be00  8000be00  0000c200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000c000  8000c000  0000c400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       000006a0  8000c018  8000c018  0000c418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  8000c6b8  0000cc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  8000c6c0  0000cc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  8000c6c8  0000cc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          00000000  0000001c  8000c6cc  0000cc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000510  0000001c  8000c6cc  0000cc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000002b8  00000548  00000548  00000000  2**2
                  ALLOC
 14 .heap         0000e800  00000800  00000800  00000000  2**0
                  ALLOC
 15 .comment      00000030  00000000  00000000  0000d12c  2**0
                  CONTENTS, READONLY
 16 .debug_aranges 000010b8  00000000  00000000  0000d160  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubnames 00001e45  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   000278c0  00000000  00000000  0001005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00005cc0  00000000  00000000  0003791d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000127a9  00000000  00000000  0003d5dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00002d7c  00000000  00000000  0004fd88  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00005267  00000000  00000000  00052b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000a708  00000000  00000000  00057d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macinfo 010d22ae  00000000  00000000  00062473  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 26 .debug_ranges 00001118  00000000  00000000  01134721  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	d7 03       	nop
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	20 28       	sub	r8,2

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

8000200c <_init>:
8000200c:	eb cd 40 40 	pushm	r6,lr
80002010:	48 26       	lddpc	r6,80002018 <_init+0xc>
80002012:	1e 26       	rsub	r6,pc
80002014:	c0 48       	rjmp	8000201c <_init+0x10>
80002016:	d7 03       	nop
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	1f f6       	ld.ub	r6,pc[0x7]
8000201c:	c5 6c       	rcall	800020c8 <frame_dummy>
8000201e:	e0 a0 4e bf 	rcall	8000bd9c <__do_global_ctors_aux>
80002022:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002028 <_stext>:
80002028:	30 07       	mov	r7,0
8000202a:	e0 7a 00 00 	mov	r10,65536
8000202e:	5b fa       	cp.w	r10,-1
80002030:	f4 0d 17 10 	movne	sp,r10
80002034:	49 4b       	lddpc	r11,80002084 <_stext+0x5c>
80002036:	30 8c       	mov	r12,8
80002038:	18 3b       	cp.w	r11,r12
8000203a:	c0 70       	breq	80002048 <_stext+0x20>
8000203c:	e0 6a 05 30 	mov	r10,1328
80002040:	b7 09       	ld.d	r8,r11++
80002042:	b9 28       	st.d	r12++,r8
80002044:	14 3c       	cp.w	r12,r10
80002046:	cf d5       	brlt	80002040 <_stext+0x18>
80002048:	e0 6a 08 00 	mov	r10,2048
8000204c:	e0 6c 05 30 	mov	r12,1328
80002050:	30 08       	mov	r8,0
80002052:	30 09       	mov	r9,0
80002054:	b9 28       	st.d	r12++,r8
80002056:	14 3c       	cp.w	r12,r10
80002058:	cf e5       	brlt	80002054 <_stext+0x2c>
8000205a:	e0 a0 15 25 	rcall	80004aa4 <_init_startup>
8000205e:	48 bc       	lddpc	r12,80002088 <_stext+0x60>
80002060:	e0 a0 22 76 	rcall	8000654c <atexit>
80002064:	cd 4f       	rcall	8000200c <_init>
80002066:	1a 9c       	mov	r12,sp
80002068:	30 0b       	mov	r11,0
8000206a:	e0 a0 26 e1 	rcall	80006e2c <_init_argv>
8000206e:	5b fc       	cp.w	r12,-1
80002070:	f9 bc 00 00 	moveq	r12,0
80002074:	f9 ba 00 00 	moveq	r10,0
80002078:	14 1d       	sub	sp,r10
8000207a:	e0 a0 0e 73 	rcall	80003d60 <main>
8000207e:	e0 a0 22 6f 	rcall	8000655c <exit>
80002082:	d7 03       	nop
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	c6 b8       	rjmp	8000215c <dip204_init+0x54>
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	c0 00       	breq	8000208a <_stext+0x62>

8000208c <__do_global_dtors_aux>:
8000208c:	d4 21       	pushm	r4-r7,lr
8000208e:	e0 68 05 48 	mov	r8,1352
80002092:	11 89       	ld.ub	r9,r8[0x0]
80002094:	30 08       	mov	r8,0
80002096:	f0 09 18 00 	cp.b	r9,r8
8000209a:	c1 61       	brne	800020c6 <__do_global_dtors_aux+0x3a>
8000209c:	31 08       	mov	r8,16
8000209e:	31 46       	mov	r6,20
800020a0:	10 95       	mov	r5,r8
800020a2:	10 16       	sub	r6,r8
800020a4:	e0 67 05 4c 	mov	r7,1356
800020a8:	a3 46       	asr	r6,0x2
800020aa:	20 16       	sub	r6,1
800020ac:	c0 68       	rjmp	800020b8 <__do_global_dtors_aux+0x2c>
800020ae:	2f f8       	sub	r8,-1
800020b0:	8f 08       	st.w	r7[0x0],r8
800020b2:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020b6:	5d 18       	icall	r8
800020b8:	6e 08       	ld.w	r8,r7[0x0]
800020ba:	0c 38       	cp.w	r8,r6
800020bc:	cf 93       	brcs	800020ae <__do_global_dtors_aux+0x22>
800020be:	30 19       	mov	r9,1
800020c0:	e0 68 05 48 	mov	r8,1352
800020c4:	b0 89       	st.b	r8[0x0],r9
800020c6:	d8 22       	popm	r4-r7,pc

800020c8 <frame_dummy>:
800020c8:	d4 01       	pushm	lr
800020ca:	31 8c       	mov	r12,24
800020cc:	78 08       	ld.w	r8,r12[0x0]
800020ce:	58 08       	cp.w	r8,0
800020d0:	c0 50       	breq	800020da <frame_dummy+0x12>
800020d2:	48 38       	lddpc	r8,800020dc <frame_dummy+0x14>
800020d4:	58 08       	cp.w	r8,0
800020d6:	c0 20       	breq	800020da <frame_dummy+0x12>
800020d8:	5d 18       	icall	r8
800020da:	d8 02       	popm	pc
800020dc:	00 00       	add	r0,r0
	...

800020e0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
800020e4:	1a 97       	mov	r7,sp
	}
#endif

	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RCSYS:
		return OSC_SLOW_NOMINAL_HZ;
800020e6:	e0 78 c2 00 	mov	r8,115200

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800020ea:	10 9c       	mov	r12,r8
800020ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800020f0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
800020f6:	f0 1f 00 04 	mcall	80002104 <sysclk_get_cpu_hz+0x14>
800020fa:	18 98       	mov	r8,r12
}
800020fc:	10 9c       	mov	r12,r8
800020fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002102:	00 00       	add	r0,r0
80002104:	80 00       	ld.sh	r0,r0[0x0]
80002106:	20 e0       	sub	r0,14

80002108 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002108:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000210c:	1a 97       	mov	r7,sp
8000210e:	fa cd 01 ac 	sub	sp,sp,428
80002112:	ef 4c fe b8 	st.w	r7[-328],r12
80002116:	16 98       	mov	r8,r11
80002118:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
8000211c:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002120:	58 18       	cp.w	r8,1
80002122:	c6 41       	brne	800021ea <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002124:	fe f9 0a 84 	ld.w	r9,pc[2692]
80002128:	30 68       	mov	r8,6
8000212a:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000212c:	30 2b       	mov	r11,2
8000212e:	33 2c       	mov	r12,50
80002130:	f0 1f 02 9f 	mcall	80002bac <dip204_init+0xaa4>

    // PWM controller configuration
    pwm_opt.diva=0;
80002134:	30 08       	mov	r8,0
80002136:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
8000213a:	30 08       	mov	r8,0
8000213c:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
80002140:	30 08       	mov	r8,0
80002142:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
80002146:	30 08       	mov	r8,0
80002148:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
8000214c:	ee c8 00 f0 	sub	r8,r7,240
80002150:	10 9c       	mov	r12,r8
80002152:	f0 1f 02 98 	mcall	80002bb0 <dip204_init+0xaa8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002156:	ef 39 fe b4 	ld.ub	r9,r7[-332]
8000215a:	30 08       	mov	r8,0
8000215c:	f0 09 18 00 	cp.b	r9,r8
80002160:	c0 30       	breq	80002166 <dip204_init+0x5e>
80002162:	33 18       	mov	r8,49
80002164:	c0 28       	rjmp	80002168 <dip204_init+0x60>
80002166:	30 18       	mov	r8,1
80002168:	fe f9 0a 4c 	ld.w	r9,pc[2636]
8000216c:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
8000216e:	fe fa 0a 4a 	ld.w	r10,pc[2634]
80002172:	74 08       	ld.w	r8,r10[0x0]
80002174:	30 09       	mov	r9,0
80002176:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
8000217a:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
8000217c:	fe fa 0a 3c 	ld.w	r10,pc[2620]
80002180:	74 08       	ld.w	r8,r10[0x0]
80002182:	30 09       	mov	r9,0
80002184:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
80002188:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
8000218a:	fe fa 0a 2e 	ld.w	r10,pc[2606]
8000218e:	74 08       	ld.w	r8,r10[0x0]
80002190:	30 19       	mov	r9,1
80002192:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
80002196:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002198:	fe fa 0a 20 	ld.w	r10,pc[2592]
8000219c:	74 08       	ld.w	r8,r10[0x0]
8000219e:	30 89       	mov	r9,8
800021a0:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800021a4:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800021a6:	fe f8 0a 0e 	ld.w	r8,pc[2574]
800021aa:	90 08       	ld.sh	r8,r8[0x0]
800021ac:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800021b0:	fe f8 0a 08 	ld.w	r8,pc[2568]
800021b4:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800021b6:	fe f9 0a 02 	ld.w	r9,pc[2562]
800021ba:	33 28       	mov	r8,50
800021bc:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800021be:	fe f9 09 fa 	ld.w	r9,pc[2554]
800021c2:	30 08       	mov	r8,0
800021c4:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800021c6:	fe f8 09 e2 	ld.w	r8,pc[2530]
800021ca:	70 08       	ld.w	r8,r8[0x0]
800021cc:	fe fb 09 ec 	ld.w	r11,pc[2540]
800021d0:	10 9c       	mov	r12,r8
800021d2:	f0 1f 02 7b 	mcall	80002bbc <dip204_init+0xab4>
    // start PWM
    pwm_start_channels(1 << channel_id);
800021d6:	fe f8 09 d2 	ld.w	r8,pc[2514]
800021da:	70 09       	ld.w	r9,r8[0x0]
800021dc:	30 18       	mov	r8,1
800021de:	f0 09 09 48 	lsl	r8,r8,r9
800021e2:	10 9c       	mov	r12,r8
800021e4:	f0 1f 02 77 	mcall	80002bc0 <dip204_init+0xab8>
800021e8:	c0 e8       	rjmp	80002204 <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
800021ea:	ef 39 fe b4 	ld.ub	r9,r7[-332]
800021ee:	30 08       	mov	r8,0
800021f0:	f0 09 18 00 	cp.b	r9,r8
800021f4:	c0 50       	breq	800021fe <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800021f6:	33 2c       	mov	r12,50
800021f8:	f0 1f 02 73 	mcall	80002bc4 <dip204_init+0xabc>
800021fc:	c0 48       	rjmp	80002204 <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
800021fe:	33 2c       	mov	r12,50
80002200:	f0 1f 02 72 	mcall	80002bc8 <dip204_init+0xac0>
    }
  }
  // delay for power on
  delay_ms(20);
80002204:	f0 1f 02 72 	mcall	80002bcc <dip204_init+0xac4>
80002208:	18 99       	mov	r9,r12
8000220a:	31 48       	mov	r8,20
8000220c:	ef 48 ff 24 	st.w	r7[-220],r8
80002210:	ef 49 ff 20 	st.w	r7[-224],r9
80002214:	ee f8 ff 24 	ld.w	r8,r7[-220]
80002218:	ef 48 ff 2c 	st.w	r7[-212],r8
8000221c:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002220:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002224:	ee f0 ff 2c 	ld.w	r0,r7[-212]
80002228:	30 01       	mov	r1,0
8000222a:	ee f2 ff 28 	ld.w	r2,r7[-216]
8000222e:	30 03       	mov	r3,0
80002230:	e2 02 02 49 	mul	r9,r1,r2
80002234:	e6 00 02 48 	mul	r8,r3,r0
80002238:	10 09       	add	r9,r8
8000223a:	e0 02 06 4a 	mulu.d	r10,r0,r2
8000223e:	16 09       	add	r9,r11
80002240:	12 9b       	mov	r11,r9
80002242:	e0 68 03 e7 	mov	r8,999
80002246:	30 09       	mov	r9,0
80002248:	10 0a       	add	r10,r8
8000224a:	f6 09 00 4b 	adc	r11,r11,r9
8000224e:	e0 68 03 e8 	mov	r8,1000
80002252:	30 09       	mov	r9,0
80002254:	f0 1f 02 5f 	mcall	80002bd0 <dip204_init+0xac8>
80002258:	14 98       	mov	r8,r10
8000225a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000225c:	ef 48 ff 34 	st.w	r7[-204],r8
80002260:	ee c8 01 44 	sub	r8,r7,324
80002264:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002268:	e1 b8 00 42 	mfsr	r8,0x108
8000226c:	10 99       	mov	r9,r8
8000226e:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002272:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002274:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002278:	70 09       	ld.w	r9,r8[0x0]
8000227a:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000227e:	10 09       	add	r9,r8
80002280:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002284:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002286:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000228a:	30 08       	mov	r8,0
8000228c:	f3 68 00 08 	st.b	r9[8],r8
80002290:	ee c8 01 44 	sub	r8,r7,324
80002294:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002298:	e1 b8 00 42 	mfsr	r8,0x108
8000229c:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022a0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022a4:	f1 39 00 08 	ld.ub	r9,r8[8]
800022a8:	30 28       	mov	r8,2
800022aa:	f0 09 18 00 	cp.b	r9,r8
800022ae:	c0 31       	brne	800022b4 <dip204_init+0x1ac>
    return false;
800022b0:	30 08       	mov	r8,0
800022b2:	c4 38       	rjmp	80002338 <dip204_init+0x230>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022b4:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022b8:	f1 39 00 08 	ld.ub	r9,r8[8]
800022bc:	30 18       	mov	r8,1
800022be:	f0 09 18 00 	cp.b	r9,r8
800022c2:	c0 31       	brne	800022c8 <dip204_init+0x1c0>
    return true;
800022c4:	30 18       	mov	r8,1
800022c6:	c3 98       	rjmp	80002338 <dip204_init+0x230>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022c8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022cc:	70 09       	ld.w	r9,r8[0x0]
800022ce:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022d2:	70 18       	ld.w	r8,r8[0x4]
800022d4:	10 39       	cp.w	r9,r8
800022d6:	e0 88 00 1a 	brls	8000230a <dip204_init+0x202>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022da:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022de:	70 09       	ld.w	r9,r8[0x0]
800022e0:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800022e4:	12 38       	cp.w	r8,r9
800022e6:	c1 02       	brcc	80002306 <dip204_init+0x1fe>
800022e8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022ec:	70 19       	ld.w	r9,r8[0x4]
800022ee:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800022f2:	12 38       	cp.w	r8,r9
800022f4:	e0 88 00 09 	brls	80002306 <dip204_init+0x1fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800022f8:	ee f9 ff 38 	ld.w	r9,r7[-200]
800022fc:	30 18       	mov	r8,1
800022fe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002302:	30 18       	mov	r8,1
80002304:	c1 a8       	rjmp	80002338 <dip204_init+0x230>
    }
    return false;
80002306:	30 08       	mov	r8,0
80002308:	c1 88       	rjmp	80002338 <dip204_init+0x230>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000230a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000230e:	70 09       	ld.w	r9,r8[0x0]
80002310:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002314:	12 38       	cp.w	r8,r9
80002316:	c0 93       	brcs	80002328 <dip204_init+0x220>
80002318:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000231c:	70 19       	ld.w	r9,r8[0x4]
8000231e:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002322:	12 38       	cp.w	r8,r9
80002324:	e0 88 00 09 	brls	80002336 <dip204_init+0x22e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002328:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000232c:	30 18       	mov	r8,1
8000232e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002332:	30 18       	mov	r8,1
80002334:	c0 28       	rjmp	80002338 <dip204_init+0x230>
    }
    return false;
80002336:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002338:	58 08       	cp.w	r8,0
8000233a:	ca b0       	breq	80002290 <dip204_init+0x188>
  // select the LCD chip
  dip204_select();
8000233c:	f0 1f 02 26 	mcall	80002bd4 <dip204_init+0xacc>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002340:	e0 6c 00 f8 	mov	r12,248
80002344:	f0 1f 02 25 	mcall	80002bd8 <dip204_init+0xad0>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002348:	33 4c       	mov	r12,52
8000234a:	f0 1f 02 24 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
8000234e:	f0 1f 02 20 	mcall	80002bcc <dip204_init+0xac4>
80002352:	18 99       	mov	r9,r12
80002354:	30 18       	mov	r8,1
80002356:	ef 48 ff 44 	st.w	r7[-188],r8
8000235a:	ef 49 ff 40 	st.w	r7[-192],r9
8000235e:	ee f8 ff 44 	ld.w	r8,r7[-188]
80002362:	ef 48 ff 4c 	st.w	r7[-180],r8
80002366:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000236a:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000236e:	ee fc ff 4c 	ld.w	r12,r7[-180]
80002372:	ef 4c fe 60 	st.w	r7[-416],r12
80002376:	30 0b       	mov	r11,0
80002378:	ef 4b fe 5c 	st.w	r7[-420],r11
8000237c:	ee fa ff 48 	ld.w	r10,r7[-184]
80002380:	ef 4a fe 58 	st.w	r7[-424],r10
80002384:	30 09       	mov	r9,0
80002386:	ef 49 fe 54 	st.w	r7[-428],r9
8000238a:	ee f9 fe 5c 	ld.w	r9,r7[-420]
8000238e:	ee f8 fe 58 	ld.w	r8,r7[-424]
80002392:	b1 39       	mul	r9,r8
80002394:	ee f8 fe 54 	ld.w	r8,r7[-428]
80002398:	ee fc fe 60 	ld.w	r12,r7[-416]
8000239c:	b9 38       	mul	r8,r12
8000239e:	10 09       	add	r9,r8
800023a0:	ee f8 fe 60 	ld.w	r8,r7[-416]
800023a4:	ee fc fe 58 	ld.w	r12,r7[-424]
800023a8:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800023ac:	16 09       	add	r9,r11
800023ae:	12 9b       	mov	r11,r9
800023b0:	e0 68 03 e7 	mov	r8,999
800023b4:	30 09       	mov	r9,0
800023b6:	10 0a       	add	r10,r8
800023b8:	f6 09 00 4b 	adc	r11,r11,r9
800023bc:	e0 68 03 e8 	mov	r8,1000
800023c0:	30 09       	mov	r9,0
800023c2:	f0 1f 02 04 	mcall	80002bd0 <dip204_init+0xac8>
800023c6:	14 98       	mov	r8,r10
800023c8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800023ca:	ef 48 ff 54 	st.w	r7[-172],r8
800023ce:	ee c8 01 38 	sub	r8,r7,312
800023d2:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023d6:	e1 b8 00 42 	mfsr	r8,0x108
800023da:	10 99       	mov	r9,r8
800023dc:	ee f8 ff 50 	ld.w	r8,r7[-176]
800023e0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023e2:	ee f8 ff 50 	ld.w	r8,r7[-176]
800023e6:	70 09       	ld.w	r9,r8[0x0]
800023e8:	ee f8 ff 54 	ld.w	r8,r7[-172]
800023ec:	10 09       	add	r9,r8
800023ee:	ee f8 ff 50 	ld.w	r8,r7[-176]
800023f2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800023f4:	ee f9 ff 50 	ld.w	r9,r7[-176]
800023f8:	30 08       	mov	r8,0
800023fa:	f3 68 00 08 	st.b	r9[8],r8
800023fe:	ee c8 01 38 	sub	r8,r7,312
80002402:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002406:	e1 b8 00 42 	mfsr	r8,0x108
8000240a:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000240e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002412:	f1 39 00 08 	ld.ub	r9,r8[8]
80002416:	30 28       	mov	r8,2
80002418:	f0 09 18 00 	cp.b	r9,r8
8000241c:	c0 31       	brne	80002422 <dip204_init+0x31a>
    return false;
8000241e:	30 08       	mov	r8,0
80002420:	c4 38       	rjmp	800024a6 <dip204_init+0x39e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002422:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002426:	f1 39 00 08 	ld.ub	r9,r8[8]
8000242a:	30 18       	mov	r8,1
8000242c:	f0 09 18 00 	cp.b	r9,r8
80002430:	c0 31       	brne	80002436 <dip204_init+0x32e>
    return true;
80002432:	30 18       	mov	r8,1
80002434:	c3 98       	rjmp	800024a6 <dip204_init+0x39e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002436:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000243a:	70 09       	ld.w	r9,r8[0x0]
8000243c:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002440:	70 18       	ld.w	r8,r8[0x4]
80002442:	10 39       	cp.w	r9,r8
80002444:	e0 88 00 1a 	brls	80002478 <dip204_init+0x370>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002448:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000244c:	70 09       	ld.w	r9,r8[0x0]
8000244e:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002452:	12 38       	cp.w	r8,r9
80002454:	c1 02       	brcc	80002474 <dip204_init+0x36c>
80002456:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000245a:	70 19       	ld.w	r9,r8[0x4]
8000245c:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002460:	12 38       	cp.w	r8,r9
80002462:	e0 88 00 09 	brls	80002474 <dip204_init+0x36c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002466:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000246a:	30 18       	mov	r8,1
8000246c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002470:	30 18       	mov	r8,1
80002472:	c1 a8       	rjmp	800024a6 <dip204_init+0x39e>
    }
    return false;
80002474:	30 08       	mov	r8,0
80002476:	c1 88       	rjmp	800024a6 <dip204_init+0x39e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002478:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000247c:	70 09       	ld.w	r9,r8[0x0]
8000247e:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002482:	12 38       	cp.w	r8,r9
80002484:	c0 93       	brcs	80002496 <dip204_init+0x38e>
80002486:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000248a:	70 19       	ld.w	r9,r8[0x4]
8000248c:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002490:	12 38       	cp.w	r8,r9
80002492:	e0 88 00 09 	brls	800024a4 <dip204_init+0x39c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002496:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000249a:	30 18       	mov	r8,1
8000249c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024a0:	30 18       	mov	r8,1
800024a2:	c0 28       	rjmp	800024a6 <dip204_init+0x39e>
    }
    return false;
800024a4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024a6:	58 08       	cp.w	r8,0
800024a8:	ca b0       	breq	800023fe <dip204_init+0x2f6>
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800024aa:	30 9c       	mov	r12,9
800024ac:	f0 1f 01 cb 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800024b0:	f0 1f 01 c7 	mcall	80002bcc <dip204_init+0xac4>
800024b4:	18 99       	mov	r9,r12
800024b6:	30 18       	mov	r8,1
800024b8:	ef 48 ff 64 	st.w	r7[-156],r8
800024bc:	ef 49 ff 60 	st.w	r7[-160],r9
800024c0:	ee f8 ff 64 	ld.w	r8,r7[-156]
800024c4:	ef 48 ff 6c 	st.w	r7[-148],r8
800024c8:	ee f8 ff 60 	ld.w	r8,r7[-160]
800024cc:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800024d0:	ee fb ff 6c 	ld.w	r11,r7[-148]
800024d4:	ef 4b fe 70 	st.w	r7[-400],r11
800024d8:	30 0a       	mov	r10,0
800024da:	ef 4a fe 6c 	st.w	r7[-404],r10
800024de:	ee f9 ff 68 	ld.w	r9,r7[-152]
800024e2:	ef 49 fe 68 	st.w	r7[-408],r9
800024e6:	30 08       	mov	r8,0
800024e8:	ef 48 fe 64 	st.w	r7[-412],r8
800024ec:	ee f9 fe 6c 	ld.w	r9,r7[-404]
800024f0:	ee fc fe 68 	ld.w	r12,r7[-408]
800024f4:	b9 39       	mul	r9,r12
800024f6:	ee f8 fe 64 	ld.w	r8,r7[-412]
800024fa:	ee fb fe 70 	ld.w	r11,r7[-400]
800024fe:	b7 38       	mul	r8,r11
80002500:	10 09       	add	r9,r8
80002502:	ee f8 fe 70 	ld.w	r8,r7[-400]
80002506:	ee fc fe 68 	ld.w	r12,r7[-408]
8000250a:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000250e:	16 09       	add	r9,r11
80002510:	12 9b       	mov	r11,r9
80002512:	e0 68 03 e7 	mov	r8,999
80002516:	30 09       	mov	r9,0
80002518:	10 0a       	add	r10,r8
8000251a:	f6 09 00 4b 	adc	r11,r11,r9
8000251e:	e0 68 03 e8 	mov	r8,1000
80002522:	30 09       	mov	r9,0
80002524:	f0 1f 01 ab 	mcall	80002bd0 <dip204_init+0xac8>
80002528:	14 98       	mov	r8,r10
8000252a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000252c:	ef 48 ff 74 	st.w	r7[-140],r8
80002530:	ee c8 01 2c 	sub	r8,r7,300
80002534:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002538:	e1 b8 00 42 	mfsr	r8,0x108
8000253c:	10 99       	mov	r9,r8
8000253e:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002542:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002544:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002548:	70 09       	ld.w	r9,r8[0x0]
8000254a:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000254e:	10 09       	add	r9,r8
80002550:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002554:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002556:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000255a:	30 08       	mov	r8,0
8000255c:	f3 68 00 08 	st.b	r9[8],r8
80002560:	ee c8 01 2c 	sub	r8,r7,300
80002564:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002568:	e1 b8 00 42 	mfsr	r8,0x108
8000256c:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002570:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002574:	f1 39 00 08 	ld.ub	r9,r8[8]
80002578:	30 28       	mov	r8,2
8000257a:	f0 09 18 00 	cp.b	r9,r8
8000257e:	c0 31       	brne	80002584 <dip204_init+0x47c>
    return false;
80002580:	30 08       	mov	r8,0
80002582:	c4 38       	rjmp	80002608 <dip204_init+0x500>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002584:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002588:	f1 39 00 08 	ld.ub	r9,r8[8]
8000258c:	30 18       	mov	r8,1
8000258e:	f0 09 18 00 	cp.b	r9,r8
80002592:	c0 31       	brne	80002598 <dip204_init+0x490>
    return true;
80002594:	30 18       	mov	r8,1
80002596:	c3 98       	rjmp	80002608 <dip204_init+0x500>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002598:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000259c:	70 09       	ld.w	r9,r8[0x0]
8000259e:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025a2:	70 18       	ld.w	r8,r8[0x4]
800025a4:	10 39       	cp.w	r9,r8
800025a6:	e0 88 00 1a 	brls	800025da <dip204_init+0x4d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025aa:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025ae:	70 09       	ld.w	r9,r8[0x0]
800025b0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800025b4:	12 38       	cp.w	r8,r9
800025b6:	c1 02       	brcc	800025d6 <dip204_init+0x4ce>
800025b8:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025bc:	70 19       	ld.w	r9,r8[0x4]
800025be:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800025c2:	12 38       	cp.w	r8,r9
800025c4:	e0 88 00 09 	brls	800025d6 <dip204_init+0x4ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800025c8:	ee f9 ff 78 	ld.w	r9,r7[-136]
800025cc:	30 18       	mov	r8,1
800025ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800025d2:	30 18       	mov	r8,1
800025d4:	c1 a8       	rjmp	80002608 <dip204_init+0x500>
    }
    return false;
800025d6:	30 08       	mov	r8,0
800025d8:	c1 88       	rjmp	80002608 <dip204_init+0x500>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025da:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025de:	70 09       	ld.w	r9,r8[0x0]
800025e0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800025e4:	12 38       	cp.w	r8,r9
800025e6:	c0 93       	brcs	800025f8 <dip204_init+0x4f0>
800025e8:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025ec:	70 19       	ld.w	r9,r8[0x4]
800025ee:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800025f2:	12 38       	cp.w	r8,r9
800025f4:	e0 88 00 09 	brls	80002606 <dip204_init+0x4fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800025f8:	ee f9 ff 78 	ld.w	r9,r7[-136]
800025fc:	30 18       	mov	r8,1
800025fe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002602:	30 18       	mov	r8,1
80002604:	c0 28       	rjmp	80002608 <dip204_init+0x500>
    }
    return false;
80002606:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002608:	58 08       	cp.w	r8,0
8000260a:	ca b0       	breq	80002560 <dip204_init+0x458>
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
8000260c:	33 0c       	mov	r12,48
8000260e:	f0 1f 01 73 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002612:	f0 1f 01 6f 	mcall	80002bcc <dip204_init+0xac4>
80002616:	18 99       	mov	r9,r12
80002618:	30 18       	mov	r8,1
8000261a:	ef 48 ff 84 	st.w	r7[-124],r8
8000261e:	ef 49 ff 80 	st.w	r7[-128],r9
80002622:	ee f8 ff 84 	ld.w	r8,r7[-124]
80002626:	ef 48 ff 8c 	st.w	r7[-116],r8
8000262a:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000262e:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002632:	ee fb ff 8c 	ld.w	r11,r7[-116]
80002636:	ef 4b fe 80 	st.w	r7[-384],r11
8000263a:	30 0a       	mov	r10,0
8000263c:	ef 4a fe 7c 	st.w	r7[-388],r10
80002640:	ee f9 ff 88 	ld.w	r9,r7[-120]
80002644:	ef 49 fe 78 	st.w	r7[-392],r9
80002648:	30 08       	mov	r8,0
8000264a:	ef 48 fe 74 	st.w	r7[-396],r8
8000264e:	ee f9 fe 7c 	ld.w	r9,r7[-388]
80002652:	ee fc fe 78 	ld.w	r12,r7[-392]
80002656:	b9 39       	mul	r9,r12
80002658:	ee f8 fe 74 	ld.w	r8,r7[-396]
8000265c:	ee fb fe 80 	ld.w	r11,r7[-384]
80002660:	b7 38       	mul	r8,r11
80002662:	10 09       	add	r9,r8
80002664:	ee f8 fe 80 	ld.w	r8,r7[-384]
80002668:	ee fc fe 78 	ld.w	r12,r7[-392]
8000266c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002670:	16 09       	add	r9,r11
80002672:	12 9b       	mov	r11,r9
80002674:	e0 68 03 e7 	mov	r8,999
80002678:	30 09       	mov	r9,0
8000267a:	10 0a       	add	r10,r8
8000267c:	f6 09 00 4b 	adc	r11,r11,r9
80002680:	e0 68 03 e8 	mov	r8,1000
80002684:	30 09       	mov	r9,0
80002686:	f0 1f 01 53 	mcall	80002bd0 <dip204_init+0xac8>
8000268a:	14 98       	mov	r8,r10
8000268c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000268e:	ef 48 ff 94 	st.w	r7[-108],r8
80002692:	ee c8 01 20 	sub	r8,r7,288
80002696:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000269a:	e1 b8 00 42 	mfsr	r8,0x108
8000269e:	10 99       	mov	r9,r8
800026a0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800026a4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026a6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800026aa:	70 09       	ld.w	r9,r8[0x0]
800026ac:	ee f8 ff 94 	ld.w	r8,r7[-108]
800026b0:	10 09       	add	r9,r8
800026b2:	ee f8 ff 90 	ld.w	r8,r7[-112]
800026b6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800026b8:	ee f9 ff 90 	ld.w	r9,r7[-112]
800026bc:	30 08       	mov	r8,0
800026be:	f3 68 00 08 	st.b	r9[8],r8
800026c2:	ee c8 01 20 	sub	r8,r7,288
800026c6:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026ca:	e1 b8 00 42 	mfsr	r8,0x108
800026ce:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800026d2:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026d6:	f1 39 00 08 	ld.ub	r9,r8[8]
800026da:	30 28       	mov	r8,2
800026dc:	f0 09 18 00 	cp.b	r9,r8
800026e0:	c0 31       	brne	800026e6 <dip204_init+0x5de>
    return false;
800026e2:	30 08       	mov	r8,0
800026e4:	c4 38       	rjmp	8000276a <dip204_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800026e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026ea:	f1 39 00 08 	ld.ub	r9,r8[8]
800026ee:	30 18       	mov	r8,1
800026f0:	f0 09 18 00 	cp.b	r9,r8
800026f4:	c0 31       	brne	800026fa <dip204_init+0x5f2>
    return true;
800026f6:	30 18       	mov	r8,1
800026f8:	c3 98       	rjmp	8000276a <dip204_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800026fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026fe:	70 09       	ld.w	r9,r8[0x0]
80002700:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002704:	70 18       	ld.w	r8,r8[0x4]
80002706:	10 39       	cp.w	r9,r8
80002708:	e0 88 00 1a 	brls	8000273c <dip204_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000270c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002710:	70 08       	ld.w	r8,r8[0x0]
80002712:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002716:	10 39       	cp.w	r9,r8
80002718:	c1 02       	brcc	80002738 <dip204_init+0x630>
8000271a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000271e:	70 18       	ld.w	r8,r8[0x4]
80002720:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002724:	10 39       	cp.w	r9,r8
80002726:	e0 88 00 09 	brls	80002738 <dip204_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000272a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000272e:	30 18       	mov	r8,1
80002730:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002734:	30 18       	mov	r8,1
80002736:	c1 a8       	rjmp	8000276a <dip204_init+0x662>
    }
    return false;
80002738:	30 08       	mov	r8,0
8000273a:	c1 88       	rjmp	8000276a <dip204_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000273c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002740:	70 08       	ld.w	r8,r8[0x0]
80002742:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002746:	10 39       	cp.w	r9,r8
80002748:	c0 93       	brcs	8000275a <dip204_init+0x652>
8000274a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000274e:	70 18       	ld.w	r8,r8[0x4]
80002750:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002754:	10 39       	cp.w	r9,r8
80002756:	e0 88 00 09 	brls	80002768 <dip204_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000275a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000275e:	30 18       	mov	r8,1
80002760:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002764:	30 18       	mov	r8,1
80002766:	c0 28       	rjmp	8000276a <dip204_init+0x662>
    }
    return false;
80002768:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000276a:	58 08       	cp.w	r8,0
8000276c:	ca b0       	breq	800026c2 <dip204_init+0x5ba>
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
8000276e:	30 fc       	mov	r12,15
80002770:	f0 1f 01 1a 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002774:	f0 1f 01 16 	mcall	80002bcc <dip204_init+0xac4>
80002778:	18 98       	mov	r8,r12
8000277a:	30 19       	mov	r9,1
8000277c:	ef 49 ff a4 	st.w	r7[-92],r9
80002780:	ef 48 ff a0 	st.w	r7[-96],r8
80002784:	ee f8 ff a4 	ld.w	r8,r7[-92]
80002788:	ef 48 ff ac 	st.w	r7[-84],r8
8000278c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80002790:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002794:	ee fb ff ac 	ld.w	r11,r7[-84]
80002798:	ef 4b fe 90 	st.w	r7[-368],r11
8000279c:	30 0a       	mov	r10,0
8000279e:	ef 4a fe 8c 	st.w	r7[-372],r10
800027a2:	ee f9 ff a8 	ld.w	r9,r7[-88]
800027a6:	ef 49 fe 88 	st.w	r7[-376],r9
800027aa:	30 08       	mov	r8,0
800027ac:	ef 48 fe 84 	st.w	r7[-380],r8
800027b0:	ee fa fe 8c 	ld.w	r10,r7[-372]
800027b4:	ee fc fe 88 	ld.w	r12,r7[-376]
800027b8:	b9 3a       	mul	r10,r12
800027ba:	ee f8 fe 84 	ld.w	r8,r7[-380]
800027be:	ee fb fe 90 	ld.w	r11,r7[-368]
800027c2:	b7 38       	mul	r8,r11
800027c4:	10 0a       	add	r10,r8
800027c6:	ee fc fe 90 	ld.w	r12,r7[-368]
800027ca:	ee fb fe 88 	ld.w	r11,r7[-376]
800027ce:	f8 0b 06 48 	mulu.d	r8,r12,r11
800027d2:	12 0a       	add	r10,r9
800027d4:	14 99       	mov	r9,r10
800027d6:	e0 6a 03 e7 	mov	r10,999
800027da:	30 0b       	mov	r11,0
800027dc:	f0 0a 00 0a 	add	r10,r8,r10
800027e0:	f2 0b 00 4b 	adc	r11,r9,r11
800027e4:	e0 68 03 e8 	mov	r8,1000
800027e8:	30 09       	mov	r9,0
800027ea:	f0 1f 00 fa 	mcall	80002bd0 <dip204_init+0xac8>
800027ee:	14 98       	mov	r8,r10
800027f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800027f2:	ef 48 ff b4 	st.w	r7[-76],r8
800027f6:	ee c8 01 14 	sub	r8,r7,276
800027fa:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800027fe:	e1 b8 00 42 	mfsr	r8,0x108
80002802:	10 99       	mov	r9,r8
80002804:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002808:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000280a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000280e:	70 09       	ld.w	r9,r8[0x0]
80002810:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002814:	10 09       	add	r9,r8
80002816:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000281a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000281c:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002820:	30 08       	mov	r8,0
80002822:	f3 68 00 08 	st.b	r9[8],r8
80002826:	ee c8 01 14 	sub	r8,r7,276
8000282a:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000282e:	e1 b8 00 42 	mfsr	r8,0x108
80002832:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002836:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000283a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000283e:	30 28       	mov	r8,2
80002840:	f0 09 18 00 	cp.b	r9,r8
80002844:	c0 31       	brne	8000284a <dip204_init+0x742>
    return false;
80002846:	30 08       	mov	r8,0
80002848:	c4 38       	rjmp	800028ce <dip204_init+0x7c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000284a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000284e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002852:	30 18       	mov	r8,1
80002854:	f0 09 18 00 	cp.b	r9,r8
80002858:	c0 31       	brne	8000285e <dip204_init+0x756>
    return true;
8000285a:	30 18       	mov	r8,1
8000285c:	c3 98       	rjmp	800028ce <dip204_init+0x7c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000285e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002862:	70 09       	ld.w	r9,r8[0x0]
80002864:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002868:	70 18       	ld.w	r8,r8[0x4]
8000286a:	10 39       	cp.w	r9,r8
8000286c:	e0 88 00 1a 	brls	800028a0 <dip204_init+0x798>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002870:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002874:	70 08       	ld.w	r8,r8[0x0]
80002876:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000287a:	10 39       	cp.w	r9,r8
8000287c:	c1 02       	brcc	8000289c <dip204_init+0x794>
8000287e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002882:	70 18       	ld.w	r8,r8[0x4]
80002884:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002888:	10 39       	cp.w	r9,r8
8000288a:	e0 88 00 09 	brls	8000289c <dip204_init+0x794>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000288e:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002892:	30 18       	mov	r8,1
80002894:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002898:	30 18       	mov	r8,1
8000289a:	c1 a8       	rjmp	800028ce <dip204_init+0x7c6>
    }
    return false;
8000289c:	30 08       	mov	r8,0
8000289e:	c1 88       	rjmp	800028ce <dip204_init+0x7c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800028a0:	ee f8 ff b8 	ld.w	r8,r7[-72]
800028a4:	70 08       	ld.w	r8,r8[0x0]
800028a6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800028aa:	10 39       	cp.w	r9,r8
800028ac:	c0 93       	brcs	800028be <dip204_init+0x7b6>
800028ae:	ee f8 ff b8 	ld.w	r8,r7[-72]
800028b2:	70 18       	ld.w	r8,r8[0x4]
800028b4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800028b8:	10 39       	cp.w	r9,r8
800028ba:	e0 88 00 09 	brls	800028cc <dip204_init+0x7c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800028be:	ee f9 ff b8 	ld.w	r9,r7[-72]
800028c2:	30 18       	mov	r8,1
800028c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800028c8:	30 18       	mov	r8,1
800028ca:	c0 28       	rjmp	800028ce <dip204_init+0x7c6>
    }
    return false;
800028cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800028ce:	58 08       	cp.w	r8,0
800028d0:	ca b0       	breq	80002826 <dip204_init+0x71e>
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800028d2:	30 1c       	mov	r12,1
800028d4:	f0 1f 00 c1 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(5);
800028d8:	f0 1f 00 bd 	mcall	80002bcc <dip204_init+0xac4>
800028dc:	18 98       	mov	r8,r12
800028de:	30 59       	mov	r9,5
800028e0:	ef 49 ff c4 	st.w	r7[-60],r9
800028e4:	ef 48 ff c0 	st.w	r7[-64],r8
800028e8:	ee f8 ff c4 	ld.w	r8,r7[-60]
800028ec:	ef 48 ff cc 	st.w	r7[-52],r8
800028f0:	ee f8 ff c0 	ld.w	r8,r7[-64]
800028f4:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800028f8:	ee fa ff cc 	ld.w	r10,r7[-52]
800028fc:	ef 4a fe a0 	st.w	r7[-352],r10
80002900:	30 09       	mov	r9,0
80002902:	ef 49 fe 9c 	st.w	r7[-356],r9
80002906:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000290a:	ef 48 fe 98 	st.w	r7[-360],r8
8000290e:	30 0c       	mov	r12,0
80002910:	ef 4c fe 94 	st.w	r7[-364],r12
80002914:	ee fa fe 9c 	ld.w	r10,r7[-356]
80002918:	ee fb fe 98 	ld.w	r11,r7[-360]
8000291c:	b7 3a       	mul	r10,r11
8000291e:	ee f8 fe 94 	ld.w	r8,r7[-364]
80002922:	ee f9 fe a0 	ld.w	r9,r7[-352]
80002926:	b3 38       	mul	r8,r9
80002928:	10 0a       	add	r10,r8
8000292a:	ee fc fe a0 	ld.w	r12,r7[-352]
8000292e:	ee fb fe 98 	ld.w	r11,r7[-360]
80002932:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002936:	12 0a       	add	r10,r9
80002938:	14 99       	mov	r9,r10
8000293a:	e0 6a 03 e7 	mov	r10,999
8000293e:	30 0b       	mov	r11,0
80002940:	f0 0a 00 0a 	add	r10,r8,r10
80002944:	f2 0b 00 4b 	adc	r11,r9,r11
80002948:	e0 68 03 e8 	mov	r8,1000
8000294c:	30 09       	mov	r9,0
8000294e:	f0 1f 00 a1 	mcall	80002bd0 <dip204_init+0xac8>
80002952:	14 98       	mov	r8,r10
80002954:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002956:	ef 48 ff d4 	st.w	r7[-44],r8
8000295a:	ee c8 01 08 	sub	r8,r7,264
8000295e:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002962:	e1 b8 00 42 	mfsr	r8,0x108
80002966:	10 99       	mov	r9,r8
80002968:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000296c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000296e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002972:	70 09       	ld.w	r9,r8[0x0]
80002974:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002978:	10 09       	add	r9,r8
8000297a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000297e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002980:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002984:	30 08       	mov	r8,0
80002986:	f3 68 00 08 	st.b	r9[8],r8
8000298a:	ee c8 01 08 	sub	r8,r7,264
8000298e:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002992:	e1 b8 00 42 	mfsr	r8,0x108
80002996:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000299a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000299e:	f1 39 00 08 	ld.ub	r9,r8[8]
800029a2:	30 28       	mov	r8,2
800029a4:	f0 09 18 00 	cp.b	r9,r8
800029a8:	c0 31       	brne	800029ae <dip204_init+0x8a6>
    return false;
800029aa:	30 08       	mov	r8,0
800029ac:	c4 38       	rjmp	80002a32 <dip204_init+0x92a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800029ae:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029b2:	f1 39 00 08 	ld.ub	r9,r8[8]
800029b6:	30 18       	mov	r8,1
800029b8:	f0 09 18 00 	cp.b	r9,r8
800029bc:	c0 31       	brne	800029c2 <dip204_init+0x8ba>
    return true;
800029be:	30 18       	mov	r8,1
800029c0:	c3 98       	rjmp	80002a32 <dip204_init+0x92a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800029c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029c6:	70 09       	ld.w	r9,r8[0x0]
800029c8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029cc:	70 18       	ld.w	r8,r8[0x4]
800029ce:	10 39       	cp.w	r9,r8
800029d0:	e0 88 00 1a 	brls	80002a04 <dip204_init+0x8fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800029d4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029d8:	70 08       	ld.w	r8,r8[0x0]
800029da:	ee f9 ff dc 	ld.w	r9,r7[-36]
800029de:	10 39       	cp.w	r9,r8
800029e0:	c1 02       	brcc	80002a00 <dip204_init+0x8f8>
800029e2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029e6:	70 18       	ld.w	r8,r8[0x4]
800029e8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800029ec:	10 39       	cp.w	r9,r8
800029ee:	e0 88 00 09 	brls	80002a00 <dip204_init+0x8f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800029f2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800029f6:	30 18       	mov	r8,1
800029f8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800029fc:	30 18       	mov	r8,1
800029fe:	c1 a8       	rjmp	80002a32 <dip204_init+0x92a>
    }
    return false;
80002a00:	30 08       	mov	r8,0
80002a02:	c1 88       	rjmp	80002a32 <dip204_init+0x92a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002a08:	70 08       	ld.w	r8,r8[0x0]
80002a0a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002a0e:	10 39       	cp.w	r9,r8
80002a10:	c0 93       	brcs	80002a22 <dip204_init+0x91a>
80002a12:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002a16:	70 18       	ld.w	r8,r8[0x4]
80002a18:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002a1c:	10 39       	cp.w	r9,r8
80002a1e:	e0 88 00 09 	brls	80002a30 <dip204_init+0x928>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a22:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002a26:	30 18       	mov	r8,1
80002a28:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a2c:	30 18       	mov	r8,1
80002a2e:	c0 28       	rjmp	80002a32 <dip204_init+0x92a>
    }
    return false;
80002a30:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002a32:	58 08       	cp.w	r8,0
80002a34:	ca b0       	breq	8000298a <dip204_init+0x882>
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002a36:	30 6c       	mov	r12,6
80002a38:	f0 1f 00 68 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002a3c:	f0 1f 00 64 	mcall	80002bcc <dip204_init+0xac4>
80002a40:	18 98       	mov	r8,r12
80002a42:	30 19       	mov	r9,1
80002a44:	ef 49 ff e4 	st.w	r7[-28],r9
80002a48:	ef 48 ff e0 	st.w	r7[-32],r8
80002a4c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002a50:	ef 48 ff ec 	st.w	r7[-20],r8
80002a54:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002a58:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002a5c:	ee fa ff ec 	ld.w	r10,r7[-20]
80002a60:	ef 4a fe b0 	st.w	r7[-336],r10
80002a64:	30 09       	mov	r9,0
80002a66:	ef 49 fe ac 	st.w	r7[-340],r9
80002a6a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002a6e:	ef 48 fe a8 	st.w	r7[-344],r8
80002a72:	30 0c       	mov	r12,0
80002a74:	ef 4c fe a4 	st.w	r7[-348],r12
80002a78:	ee fa fe ac 	ld.w	r10,r7[-340]
80002a7c:	ee fb fe a8 	ld.w	r11,r7[-344]
80002a80:	b7 3a       	mul	r10,r11
80002a82:	ee f8 fe a4 	ld.w	r8,r7[-348]
80002a86:	ee f9 fe b0 	ld.w	r9,r7[-336]
80002a8a:	b3 38       	mul	r8,r9
80002a8c:	10 0a       	add	r10,r8
80002a8e:	ee fc fe b0 	ld.w	r12,r7[-336]
80002a92:	ee fb fe a8 	ld.w	r11,r7[-344]
80002a96:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a9a:	12 0a       	add	r10,r9
80002a9c:	14 99       	mov	r9,r10
80002a9e:	e0 6a 03 e7 	mov	r10,999
80002aa2:	30 0b       	mov	r11,0
80002aa4:	f0 0a 00 0a 	add	r10,r8,r10
80002aa8:	f2 0b 00 4b 	adc	r11,r9,r11
80002aac:	e0 68 03 e8 	mov	r8,1000
80002ab0:	30 09       	mov	r9,0
80002ab2:	f0 1f 00 48 	mcall	80002bd0 <dip204_init+0xac8>
80002ab6:	14 98       	mov	r8,r10
80002ab8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002aba:	ef 48 ff f4 	st.w	r7[-12],r8
80002abe:	ee c8 00 fc 	sub	r8,r7,252
80002ac2:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ac6:	e1 b8 00 42 	mfsr	r8,0x108
80002aca:	10 99       	mov	r9,r8
80002acc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ad0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ad2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ad6:	70 09       	ld.w	r9,r8[0x0]
80002ad8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002adc:	10 09       	add	r9,r8
80002ade:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ae2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002ae4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002ae8:	30 08       	mov	r8,0
80002aea:	f3 68 00 08 	st.b	r9[8],r8
80002aee:	ee c8 00 fc 	sub	r8,r7,252
80002af2:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002af6:	e1 b8 00 42 	mfsr	r8,0x108
80002afa:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002afe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b02:	f1 39 00 08 	ld.ub	r9,r8[8]
80002b06:	30 28       	mov	r8,2
80002b08:	f0 09 18 00 	cp.b	r9,r8
80002b0c:	c0 31       	brne	80002b12 <dip204_init+0xa0a>
    return false;
80002b0e:	30 08       	mov	r8,0
80002b10:	c4 38       	rjmp	80002b96 <dip204_init+0xa8e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002b12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b16:	f1 39 00 08 	ld.ub	r9,r8[8]
80002b1a:	30 18       	mov	r8,1
80002b1c:	f0 09 18 00 	cp.b	r9,r8
80002b20:	c0 31       	brne	80002b26 <dip204_init+0xa1e>
    return true;
80002b22:	30 18       	mov	r8,1
80002b24:	c3 98       	rjmp	80002b96 <dip204_init+0xa8e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002b26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b2a:	70 09       	ld.w	r9,r8[0x0]
80002b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b30:	70 18       	ld.w	r8,r8[0x4]
80002b32:	10 39       	cp.w	r9,r8
80002b34:	e0 88 00 1a 	brls	80002b68 <dip204_init+0xa60>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002b38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b3c:	70 08       	ld.w	r8,r8[0x0]
80002b3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b42:	10 39       	cp.w	r9,r8
80002b44:	c1 02       	brcc	80002b64 <dip204_init+0xa5c>
80002b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b4a:	70 18       	ld.w	r8,r8[0x4]
80002b4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b50:	10 39       	cp.w	r9,r8
80002b52:	e0 88 00 09 	brls	80002b64 <dip204_init+0xa5c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b5a:	30 18       	mov	r8,1
80002b5c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b60:	30 18       	mov	r8,1
80002b62:	c1 a8       	rjmp	80002b96 <dip204_init+0xa8e>
    }
    return false;
80002b64:	30 08       	mov	r8,0
80002b66:	c1 88       	rjmp	80002b96 <dip204_init+0xa8e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b6c:	70 08       	ld.w	r8,r8[0x0]
80002b6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b72:	10 39       	cp.w	r9,r8
80002b74:	c0 93       	brcs	80002b86 <dip204_init+0xa7e>
80002b76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b7a:	70 18       	ld.w	r8,r8[0x4]
80002b7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b80:	10 39       	cp.w	r9,r8
80002b82:	e0 88 00 09 	brls	80002b94 <dip204_init+0xa8c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b8a:	30 18       	mov	r8,1
80002b8c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b90:	30 18       	mov	r8,1
80002b92:	c0 28       	rjmp	80002b96 <dip204_init+0xa8e>
    }
    return false;
80002b94:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b96:	58 08       	cp.w	r8,0
80002b98:	ca b0       	breq	80002aee <dip204_init+0x9e6>
  dip204_wait_busy();
80002b9a:	f0 1f 00 11 	mcall	80002bdc <dip204_init+0xad4>
  // unselect chip
  dip204_unselect();
80002b9e:	f0 1f 00 11 	mcall	80002be0 <dip204_init+0xad8>
}
80002ba2:	29 5d       	sub	sp,-428
80002ba4:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 1c       	sub	r12,r0
80002bac:	80 00       	ld.sh	r0,r0[0x0]
80002bae:	3e f0       	mov	r0,-17
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	30 c0       	mov	r0,12
80002bb4:	00 00       	add	r0,r0
80002bb6:	05 50       	ld.sh	r0,--r2
80002bb8:	00 00       	add	r0,r0
80002bba:	05 54       	ld.sh	r4,--r2
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	31 54       	mov	r4,21
80002bc0:	80 00       	ld.sh	r0,r0[0x0]
80002bc2:	31 dc       	mov	r12,29
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	40 68       	lddsp	r8,sp[0x18]
80002bc8:	80 00       	ld.sh	r0,r0[0x0]
80002bca:	40 00       	lddsp	r0,sp[0x0]
80002bcc:	80 00       	ld.sh	r0,r0[0x0]
80002bce:	20 f0       	sub	r0,15
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	62 e8       	ld.w	r8,r1[0x38]
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	2f 50       	sub	r0,-11
80002bd8:	80 00       	ld.sh	r0,r0[0x0]
80002bda:	2f 80       	sub	r0,-8
80002bdc:	80 00       	ld.sh	r0,r0[0x0]
80002bde:	30 64       	mov	r4,6
80002be0:	80 00       	ld.sh	r0,r0[0x0]
80002be2:	2f 68       	sub	r8,-10

80002be4 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002be4:	eb cd 40 80 	pushm	r7,lr
80002be8:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002bea:	f0 1f 00 08 	mcall	80002c08 <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002bee:	e0 6c 00 f8 	mov	r12,248
80002bf2:	f0 1f 00 07 	mcall	80002c0c <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002bf6:	30 cc       	mov	r12,12
80002bf8:	f0 1f 00 05 	mcall	80002c0c <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002bfc:	f0 1f 00 05 	mcall	80002c10 <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002c00:	f0 1f 00 05 	mcall	80002c14 <dip204_hide_cursor+0x30>
}
80002c04:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	2f 50       	sub	r0,-11
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2f 80       	sub	r0,-8
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	30 64       	mov	r4,6
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2f 68       	sub	r8,-10

80002c18 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002c18:	eb cd 40 80 	pushm	r7,lr
80002c1c:	1a 97       	mov	r7,sp
80002c1e:	20 3d       	sub	sp,12
80002c20:	18 99       	mov	r9,r12
80002c22:	16 98       	mov	r8,r11
80002c24:	ef 69 ff f8 	st.b	r7[-8],r9
80002c28:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002c2c:	30 08       	mov	r8,0
80002c2e:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002c32:	f0 1f 00 18 	mcall	80002c90 <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002c36:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002c3a:	31 48       	mov	r8,20
80002c3c:	f0 09 18 00 	cp.b	r9,r8
80002c40:	e0 8b 00 17 	brhi	80002c6e <dip204_set_cursor_position+0x56>
80002c44:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002c48:	30 48       	mov	r8,4
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	e0 8b 00 10 	brhi	80002c6e <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002c52:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c56:	20 18       	sub	r8,1
80002c58:	5c 58       	castu.b	r8
80002c5a:	a5 78       	lsl	r8,0x5
80002c5c:	5c 58       	castu.b	r8
80002c5e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002c62:	f2 08 00 08 	add	r8,r9,r8
80002c66:	5c 58       	castu.b	r8
80002c68:	28 18       	sub	r8,-127
80002c6a:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c6e:	e0 6c 00 f8 	mov	r12,248
80002c72:	f0 1f 00 09 	mcall	80002c94 <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002c76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002c7a:	10 9c       	mov	r12,r8
80002c7c:	f0 1f 00 06 	mcall	80002c94 <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002c80:	f0 1f 00 06 	mcall	80002c98 <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002c84:	f0 1f 00 06 	mcall	80002c9c <dip204_set_cursor_position+0x84>
}
80002c88:	2f dd       	sub	sp,-12
80002c8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c8e:	00 00       	add	r0,r0
80002c90:	80 00       	ld.sh	r0,r0[0x0]
80002c92:	2f 50       	sub	r0,-11
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	2f 80       	sub	r0,-8
80002c98:	80 00       	ld.sh	r0,r0[0x0]
80002c9a:	30 64       	mov	r4,6
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	2f 68       	sub	r8,-10

80002ca0 <dip204_clear_display>:


void dip204_clear_display(void)
{
80002ca0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002ca4:	1a 97       	mov	r7,sp
80002ca6:	20 bd       	sub	sp,44
  dip204_select();
80002ca8:	f0 1f 00 57 	mcall	80002e04 <dip204_clear_display+0x164>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002cac:	e0 6c 00 f8 	mov	r12,248
80002cb0:	f0 1f 00 56 	mcall	80002e08 <dip204_clear_display+0x168>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002cb4:	30 1c       	mov	r12,1
80002cb6:	f0 1f 00 55 	mcall	80002e08 <dip204_clear_display+0x168>
  /* Wait for command execution */
  delay_ms(4);
80002cba:	f0 1f 00 55 	mcall	80002e0c <dip204_clear_display+0x16c>
80002cbe:	18 98       	mov	r8,r12
80002cc0:	30 49       	mov	r9,4
80002cc2:	ef 49 ff e4 	st.w	r7[-28],r9
80002cc6:	ef 48 ff e0 	st.w	r7[-32],r8
80002cca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002cce:	ef 48 ff ec 	st.w	r7[-20],r8
80002cd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002cd6:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002cda:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002cde:	30 01       	mov	r1,0
80002ce0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002ce4:	30 03       	mov	r3,0
80002ce6:	e2 02 02 4a 	mul	r10,r1,r2
80002cea:	e6 00 02 48 	mul	r8,r3,r0
80002cee:	10 0a       	add	r10,r8
80002cf0:	e0 02 06 48 	mulu.d	r8,r0,r2
80002cf4:	12 0a       	add	r10,r9
80002cf6:	14 99       	mov	r9,r10
80002cf8:	e0 6a 03 e7 	mov	r10,999
80002cfc:	30 0b       	mov	r11,0
80002cfe:	f0 0a 00 0a 	add	r10,r8,r10
80002d02:	f2 0b 00 4b 	adc	r11,r9,r11
80002d06:	e0 68 03 e8 	mov	r8,1000
80002d0a:	30 09       	mov	r9,0
80002d0c:	f0 1f 00 41 	mcall	80002e10 <dip204_clear_display+0x170>
80002d10:	14 98       	mov	r8,r10
80002d12:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002d14:	ef 48 ff f4 	st.w	r7[-12],r8
80002d18:	ee c8 00 2c 	sub	r8,r7,44
80002d1c:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d20:	e1 b8 00 42 	mfsr	r8,0x108
80002d24:	10 99       	mov	r9,r8
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d30:	70 09       	ld.w	r9,r8[0x0]
80002d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d36:	10 09       	add	r9,r8
80002d38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d3c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d42:	30 08       	mov	r8,0
80002d44:	f3 68 00 08 	st.b	r9[8],r8
80002d48:	ee c8 00 2c 	sub	r8,r7,44
80002d4c:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d50:	e1 b8 00 42 	mfsr	r8,0x108
80002d54:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d60:	30 28       	mov	r8,2
80002d62:	f0 09 18 00 	cp.b	r9,r8
80002d66:	c0 31       	brne	80002d6c <dip204_clear_display+0xcc>
    return false;
80002d68:	30 08       	mov	r8,0
80002d6a:	c4 38       	rjmp	80002df0 <dip204_clear_display+0x150>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d70:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d74:	30 18       	mov	r8,1
80002d76:	f0 09 18 00 	cp.b	r9,r8
80002d7a:	c0 31       	brne	80002d80 <dip204_clear_display+0xe0>
    return true;
80002d7c:	30 18       	mov	r8,1
80002d7e:	c3 98       	rjmp	80002df0 <dip204_clear_display+0x150>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d84:	70 09       	ld.w	r9,r8[0x0]
80002d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d8a:	70 18       	ld.w	r8,r8[0x4]
80002d8c:	10 39       	cp.w	r9,r8
80002d8e:	e0 88 00 1a 	brls	80002dc2 <dip204_clear_display+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d96:	70 08       	ld.w	r8,r8[0x0]
80002d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d9c:	10 39       	cp.w	r9,r8
80002d9e:	c1 02       	brcc	80002dbe <dip204_clear_display+0x11e>
80002da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da4:	70 18       	ld.w	r8,r8[0x4]
80002da6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002daa:	10 39       	cp.w	r9,r8
80002dac:	e0 88 00 09 	brls	80002dbe <dip204_clear_display+0x11e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db4:	30 18       	mov	r8,1
80002db6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dba:	30 18       	mov	r8,1
80002dbc:	c1 a8       	rjmp	80002df0 <dip204_clear_display+0x150>
    }
    return false;
80002dbe:	30 08       	mov	r8,0
80002dc0:	c1 88       	rjmp	80002df0 <dip204_clear_display+0x150>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dc6:	70 08       	ld.w	r8,r8[0x0]
80002dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dcc:	10 39       	cp.w	r9,r8
80002dce:	c0 93       	brcs	80002de0 <dip204_clear_display+0x140>
80002dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd4:	70 18       	ld.w	r8,r8[0x4]
80002dd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dda:	10 39       	cp.w	r9,r8
80002ddc:	e0 88 00 09 	brls	80002dee <dip204_clear_display+0x14e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002de0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002de4:	30 18       	mov	r8,1
80002de6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dea:	30 18       	mov	r8,1
80002dec:	c0 28       	rjmp	80002df0 <dip204_clear_display+0x150>
    }
    return false;
80002dee:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002df0:	58 08       	cp.w	r8,0
80002df2:	ca b0       	breq	80002d48 <dip204_clear_display+0xa8>
  dip204_wait_busy();
80002df4:	f0 1f 00 08 	mcall	80002e14 <dip204_clear_display+0x174>
  dip204_unselect();
80002df8:	f0 1f 00 08 	mcall	80002e18 <dip204_clear_display+0x178>
}
80002dfc:	2f 5d       	sub	sp,-44
80002dfe:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002e02:	00 00       	add	r0,r0
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	2f 50       	sub	r0,-11
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	2f 80       	sub	r0,-8
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	20 f0       	sub	r0,15
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	62 e8       	ld.w	r8,r1[0x38]
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	30 64       	mov	r4,6
80002e18:	80 00       	ld.sh	r0,r0[0x0]
80002e1a:	2f 68       	sub	r8,-10

80002e1c <dip204_write_string>:


void dip204_write_string(const char *string)
{
80002e1c:	eb cd 40 80 	pushm	r7,lr
80002e20:	1a 97       	mov	r7,sp
80002e22:	20 2d       	sub	sp,8
80002e24:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned char i=0;
80002e28:	30 08       	mov	r8,0
80002e2a:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002e2e:	f0 1f 00 14 	mcall	80002e7c <dip204_write_string+0x60>
  /* for all chars in string */
  while(string[i]!=0)
80002e32:	c1 68       	rjmp	80002e5e <dip204_write_string+0x42>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002e34:	e0 6c 00 fa 	mov	r12,250
80002e38:	f0 1f 00 12 	mcall	80002e80 <dip204_write_string+0x64>
    /* Send byte */
    dip204_write_byte(string[i]);
80002e3c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e44:	f2 08 00 08 	add	r8,r9,r8
80002e48:	11 88       	ld.ub	r8,r8[0x0]
80002e4a:	10 9c       	mov	r12,r8
80002e4c:	f0 1f 00 0d 	mcall	80002e80 <dip204_write_string+0x64>
    /* go to next char */
    i++;
80002e50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e54:	2f f8       	sub	r8,-1
80002e56:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002e5a:	f0 1f 00 0b 	mcall	80002e84 <dip204_write_string+0x68>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002e5e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e66:	f2 08 00 08 	add	r8,r9,r8
80002e6a:	11 88       	ld.ub	r8,r8[0x0]
80002e6c:	58 08       	cp.w	r8,0
80002e6e:	ce 31       	brne	80002e34 <dip204_write_string+0x18>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002e70:	f0 1f 00 06 	mcall	80002e88 <dip204_write_string+0x6c>
}
80002e74:	2f ed       	sub	sp,-8
80002e76:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e7a:	00 00       	add	r0,r0
80002e7c:	80 00       	ld.sh	r0,r0[0x0]
80002e7e:	2f 50       	sub	r0,-11
80002e80:	80 00       	ld.sh	r0,r0[0x0]
80002e82:	2f 80       	sub	r0,-8
80002e84:	80 00       	ld.sh	r0,r0[0x0]
80002e86:	30 64       	mov	r4,6
80002e88:	80 00       	ld.sh	r0,r0[0x0]
80002e8a:	2f 68       	sub	r8,-10

80002e8c <dip204_printf_string>:


void dip204_printf_string(const char *format, ...)
{
80002e8c:	eb cd 40 80 	pushm	r7,lr
80002e90:	1a 97       	mov	r7,sp
80002e92:	20 9d       	sub	sp,36
80002e94:	ee c9 ff f8 	sub	r9,r7,-8
80002e98:	ef 4c ff dc 	st.w	r7[-36],r12
  va_list arg;
  char string[21];
  unsigned char i=0;
80002e9c:	30 08       	mov	r8,0
80002e9e:	ef 68 ff ff 	st.b	r7[-1],r8

  va_start(arg, format);
80002ea2:	f2 c8 00 00 	sub	r8,r9,0
80002ea6:	ef 48 ff f8 	st.w	r7[-8],r8
  i = vsprintf(string, format, arg);
80002eaa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002eae:	ee c8 00 20 	sub	r8,r7,32
80002eb2:	12 9a       	mov	r10,r9
80002eb4:	ee fb ff dc 	ld.w	r11,r7[-36]
80002eb8:	10 9c       	mov	r12,r8
80002eba:	f0 1f 00 21 	mcall	80002f3c <dip204_printf_string+0xb0>
80002ebe:	18 98       	mov	r8,r12
80002ec0:	ef 68 ff ff 	st.b	r7[-1],r8
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002ec4:	c0 d8       	rjmp	80002ede <dip204_printf_string+0x52>
80002ec6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002eca:	ee 08 00 09 	add	r9,r7,r8
80002ece:	30 08       	mov	r8,0
80002ed0:	f3 68 ff e0 	st.b	r9[-32],r8
80002ed4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ed8:	2f f8       	sub	r8,-1
80002eda:	ef 68 ff ff 	st.b	r7[-1],r8
80002ede:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002ee2:	31 38       	mov	r8,19
80002ee4:	f0 09 18 00 	cp.b	r9,r8
80002ee8:	fe 98 ff ef 	brls	80002ec6 <dip204_printf_string+0x3a>
  va_end(arg);
  dip204_select();
80002eec:	f0 1f 00 15 	mcall	80002f40 <dip204_printf_string+0xb4>
  /* for all chars in string */
  i = 0;
80002ef0:	30 08       	mov	r8,0
80002ef2:	ef 68 ff ff 	st.b	r7[-1],r8
  while(string[i]!='\0')
80002ef6:	c1 58       	rjmp	80002f20 <dip204_printf_string+0x94>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002ef8:	e0 6c 00 fa 	mov	r12,250
80002efc:	f0 1f 00 12 	mcall	80002f44 <dip204_printf_string+0xb8>
    /* Send byte */
    dip204_write_byte(string[i]);
80002f00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f04:	ee 08 00 08 	add	r8,r7,r8
80002f08:	f1 38 ff e0 	ld.ub	r8,r8[-32]
80002f0c:	10 9c       	mov	r12,r8
80002f0e:	f0 1f 00 0e 	mcall	80002f44 <dip204_printf_string+0xb8>
    /* go to next char */
    i++;
80002f12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f16:	2f f8       	sub	r8,-1
80002f18:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002f1c:	f0 1f 00 0b 	mcall	80002f48 <dip204_printf_string+0xbc>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002f20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002f24:	ee 08 00 08 	add	r8,r7,r8
80002f28:	f1 38 ff e0 	ld.ub	r8,r8[-32]
80002f2c:	58 08       	cp.w	r8,0
80002f2e:	ce 51       	brne	80002ef8 <dip204_printf_string+0x6c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002f30:	f0 1f 00 07 	mcall	80002f4c <dip204_printf_string+0xc0>
}
80002f34:	2f 7d       	sub	sp,-36
80002f36:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f3a:	00 00       	add	r0,r0
80002f3c:	80 00       	ld.sh	r0,r0[0x0]
80002f3e:	6f 44       	ld.w	r4,r7[0x50]
80002f40:	80 00       	ld.sh	r0,r0[0x0]
80002f42:	2f 50       	sub	r0,-11
80002f44:	80 00       	ld.sh	r0,r0[0x0]
80002f46:	2f 80       	sub	r0,-8
80002f48:	80 00       	ld.sh	r0,r0[0x0]
80002f4a:	30 64       	mov	r4,6
80002f4c:	80 00       	ld.sh	r0,r0[0x0]
80002f4e:	2f 68       	sub	r8,-10

80002f50 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002f50:	eb cd 40 80 	pushm	r7,lr
80002f54:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002f56:	30 2b       	mov	r11,2
80002f58:	fe 7c 28 00 	mov	r12,-55296
80002f5c:	f0 1f 00 02 	mcall	80002f64 <dip204_select+0x14>
}
80002f60:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f64:	80 00       	ld.sh	r0,r0[0x0]
80002f66:	33 82       	mov	r2,56

80002f68 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002f68:	eb cd 40 80 	pushm	r7,lr
80002f6c:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002f6e:	30 2b       	mov	r11,2
80002f70:	fe 7c 28 00 	mov	r12,-55296
80002f74:	f0 1f 00 02 	mcall	80002f7c <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002f78:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f7c:	80 00       	ld.sh	r0,r0[0x0]
80002f7e:	34 1a       	mov	r10,65

80002f80 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002f80:	eb cd 40 80 	pushm	r7,lr
80002f84:	1a 97       	mov	r7,sp
80002f86:	20 3d       	sub	sp,12
80002f88:	18 98       	mov	r8,r12
80002f8a:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002f8e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002f92:	f0 c8 00 f8 	sub	r8,r8,248
80002f96:	58 68       	cp.w	r8,6
80002f98:	e0 8b 00 10 	brhi	80002fb8 <dip204_write_byte+0x38>
80002f9c:	30 19       	mov	r9,1
80002f9e:	f2 08 09 48 	lsl	r8,r9,r8
80002fa2:	e2 18 00 55 	andl	r8,0x55,COH
80002fa6:	c0 90       	breq	80002fb8 <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002fa8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002fac:	10 9b       	mov	r11,r8
80002fae:	fe 7c 28 00 	mov	r12,-55296
80002fb2:	f0 1f 00 15 	mcall	80003004 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002fb6:	c2 48       	rjmp	80002ffe <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002fb8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002fbc:	ef 48 ff fc 	st.w	r7[-4],r8
80002fc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fc4:	5c 98       	brev	r8
80002fc6:	ef 48 ff fc 	st.w	r7[-4],r8
80002fca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fce:	b9 88       	lsr	r8,0x18
80002fd0:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002fd4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002fd8:	e2 18 00 f0 	andl	r8,0xf0,COH
80002fdc:	10 9b       	mov	r11,r8
80002fde:	fe 7c 28 00 	mov	r12,-55296
80002fe2:	f0 1f 00 09 	mcall	80003004 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002fe6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002fea:	a5 68       	lsl	r8,0x4
80002fec:	5c 88       	casts.h	r8
80002fee:	5c 78       	castu.h	r8
80002ff0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002ff4:	10 9b       	mov	r11,r8
80002ff6:	fe 7c 28 00 	mov	r12,-55296
80002ffa:	f0 1f 00 03 	mcall	80003004 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002ffe:	2f dd       	sub	sp,-12
80003000:	e3 cd 80 80 	ldm	sp++,r7,pc
80003004:	80 00       	ld.sh	r0,r0[0x0]
80003006:	36 22       	mov	r2,98

80003008 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80003008:	eb cd 40 80 	pushm	r7,lr
8000300c:	1a 97       	mov	r7,sp
8000300e:	20 3d       	sub	sp,12
80003010:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80003014:	30 08       	mov	r8,0
80003016:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
8000301a:	30 0b       	mov	r11,0
8000301c:	fe 7c 28 00 	mov	r12,-55296
80003020:	f0 1f 00 0f 	mcall	8000305c <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80003024:	ee c8 00 06 	sub	r8,r7,6
80003028:	10 9b       	mov	r11,r8
8000302a:	fe 7c 28 00 	mov	r12,-55296
8000302e:	f0 1f 00 0d 	mcall	80003060 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80003032:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80003036:	5c 58       	castu.b	r8
80003038:	ef 48 ff fc 	st.w	r7[-4],r8
8000303c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003040:	5c 98       	brev	r8
80003042:	ef 48 ff fc 	st.w	r7[-4],r8
80003046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000304a:	b9 88       	lsr	r8,0x18
8000304c:	5c 58       	castu.b	r8
8000304e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003052:	b2 88       	st.b	r9[0x0],r8
}
80003054:	2f dd       	sub	sp,-12
80003056:	e3 cd 80 80 	ldm	sp++,r7,pc
8000305a:	00 00       	add	r0,r0
8000305c:	80 00       	ld.sh	r0,r0[0x0]
8000305e:	36 22       	mov	r2,98
80003060:	80 00       	ld.sh	r0,r0[0x0]
80003062:	36 7a       	mov	r10,103

80003064 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80003064:	eb cd 40 80 	pushm	r7,lr
80003068:	1a 97       	mov	r7,sp
8000306a:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
8000306c:	30 08       	mov	r8,0
8000306e:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80003072:	e0 6c 00 fc 	mov	r12,252
80003076:	f0 1f 00 09 	mcall	80003098 <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
8000307a:	ee c8 00 01 	sub	r8,r7,1
8000307e:	10 9c       	mov	r12,r8
80003080:	f0 1f 00 07 	mcall	8000309c <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80003084:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003088:	10 99       	mov	r9,r8
8000308a:	30 08       	mov	r8,0
8000308c:	f0 09 18 00 	cp.b	r9,r8
80003090:	cf 55       	brlt	8000307a <dip204_wait_busy+0x16>
}
80003092:	2f fd       	sub	sp,-4
80003094:	e3 cd 80 80 	ldm	sp++,r7,pc
80003098:	80 00       	ld.sh	r0,r0[0x0]
8000309a:	2f 80       	sub	r0,-8
8000309c:	80 00       	ld.sh	r0,r0[0x0]
8000309e:	30 08       	mov	r8,0

800030a0 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800030a0:	eb cd 40 80 	pushm	r7,lr
800030a4:	1a 97       	mov	r7,sp
800030a6:	20 1d       	sub	sp,4
800030a8:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800030ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030b0:	e6 18 00 01 	andh	r8,0x1,COH
800030b4:	5f 08       	sreq	r8
800030b6:	5c 58       	castu.b	r8
}
800030b8:	10 9c       	mov	r12,r8
800030ba:	2f fd       	sub	sp,-4
800030bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800030c0 <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
800030c0:	eb cd 40 80 	pushm	r7,lr
800030c4:	1a 97       	mov	r7,sp
800030c6:	20 3d       	sub	sp,12
800030c8:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
800030cc:	fe 78 30 00 	mov	r8,-53248
800030d0:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800030d4:	e1 b8 00 00 	mfsr	r8,0x0
800030d8:	10 9c       	mov	r12,r8
800030da:	f0 1f 00 1e 	mcall	80003150 <pwm_init+0x90>
800030de:	18 98       	mov	r8,r12
800030e0:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
800030e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030e8:	58 08       	cp.w	r8,0
800030ea:	c0 31       	brne	800030f0 <pwm_init+0x30>
    return PWM_INVALID_INPUT;
800030ec:	30 18       	mov	r8,1
800030ee:	c2 c8       	rjmp	80003146 <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
800030f0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800030f4:	30 08       	mov	r8,0
800030f6:	f0 09 18 00 	cp.b	r9,r8
800030fa:	c0 20       	breq	800030fe <pwm_init+0x3e>
800030fc:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
800030fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003102:	37 f9       	mov	r9,127
80003104:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003106:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000310a:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
8000310c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003110:	30 08       	mov	r8,0
80003112:	f0 09 18 00 	cp.b	r9,r8
80003116:	c0 20       	breq	8000311a <pwm_init+0x5a>
80003118:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000311a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000311e:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
80003120:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003124:	70 08       	ld.w	r8,r8[0x0]
80003126:	b1 68       	lsl	r8,0x10
80003128:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
8000312a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000312e:	70 38       	ld.w	r8,r8[0xc]
80003130:	a9 68       	lsl	r8,0x8
80003132:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
80003134:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003138:	70 28       	ld.w	r8,r8[0x8]
8000313a:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000313c:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000313e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003142:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
80003144:	30 08       	mov	r8,0
}
80003146:	10 9c       	mov	r12,r8
80003148:	2f dd       	sub	sp,-12
8000314a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000314e:	00 00       	add	r0,r0
80003150:	80 00       	ld.sh	r0,r0[0x0]
80003152:	30 a0       	mov	r0,10

80003154 <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
80003154:	eb cd 40 80 	pushm	r7,lr
80003158:	1a 97       	mov	r7,sp
8000315a:	20 3d       	sub	sp,12
8000315c:	ef 4c ff f8 	st.w	r7[-8],r12
80003160:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003164:	fe 78 30 00 	mov	r8,-53248
80003168:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
8000316c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003170:	58 08       	cp.w	r8,0
80003172:	c0 31       	brne	80003178 <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
80003174:	30 18       	mov	r8,1
80003176:	c2 f8       	rjmp	800031d4 <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003178:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000317c:	58 68       	cp.w	r8,6
8000317e:	e0 88 00 04 	brls	80003186 <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
80003182:	30 18       	mov	r8,1
80003184:	c2 88       	rjmp	800031d4 <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
80003186:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000318a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000318e:	72 09       	ld.w	r9,r9[0x0]
80003190:	ee fa ff fc 	ld.w	r10,r7[-4]
80003194:	2f 08       	sub	r8,-16
80003196:	a5 78       	lsl	r8,0x5
80003198:	f4 08 00 08 	add	r8,r10,r8
8000319c:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
8000319e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031a6:	72 19       	ld.w	r9,r9[0x4]
800031a8:	ee fa ff fc 	ld.w	r10,r7[-4]
800031ac:	a5 78       	lsl	r8,0x5
800031ae:	f4 08 00 08 	add	r8,r10,r8
800031b2:	f0 c8 fd fc 	sub	r8,r8,-516
800031b6:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800031b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031c0:	72 29       	ld.w	r9,r9[0x8]
800031c2:	ee fa ff fc 	ld.w	r10,r7[-4]
800031c6:	a5 78       	lsl	r8,0x5
800031c8:	f4 08 00 08 	add	r8,r10,r8
800031cc:	f0 c8 fd f8 	sub	r8,r8,-520
800031d0:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
800031d2:	30 08       	mov	r8,0
}
800031d4:	10 9c       	mov	r12,r8
800031d6:	2f dd       	sub	sp,-12
800031d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800031dc <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
800031dc:	eb cd 40 80 	pushm	r7,lr
800031e0:	1a 97       	mov	r7,sp
800031e2:	20 1d       	sub	sp,4
800031e4:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
800031e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031ec:	e0 18 ff 80 	andl	r8,0xff80
800031f0:	c0 30       	breq	800031f6 <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
800031f2:	30 18       	mov	r8,1
800031f4:	c0 78       	rjmp	80003202 <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
800031f6:	fe 78 30 00 	mov	r8,-53248
800031fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800031fe:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
80003200:	30 08       	mov	r8,0
}
80003202:	10 9c       	mov	r12,r8
80003204:	2f fd       	sub	sp,-4
80003206:	e3 cd 80 80 	ldm	sp++,r7,pc

8000320a <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
8000320a:	eb cd 40 80 	pushm	r7,lr
8000320e:	1a 97       	mov	r7,sp
80003210:	20 3d       	sub	sp,12
80003212:	ef 4c ff f8 	st.w	r7[-8],r12
80003216:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000321a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000321e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003222:	f2 08 00 08 	add	r8,r9,r8
80003226:	20 18       	sub	r8,1
80003228:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000322c:	f0 09 0d 08 	divu	r8,r8,r9
80003230:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
80003234:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003238:	58 08       	cp.w	r8,0
8000323a:	c0 70       	breq	80003248 <getBaudDiv+0x3e>
8000323c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003240:	e0 48 00 ff 	cp.w	r8,255
80003244:	e0 88 00 04 	brls	8000324c <getBaudDiv+0x42>
		return -1;
80003248:	3f f8       	mov	r8,-1
8000324a:	c0 48       	rjmp	80003252 <getBaudDiv+0x48>
	}

	return baudDiv;
8000324c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003250:	5c 88       	casts.h	r8
}
80003252:	10 9c       	mov	r12,r8
80003254:	2f dd       	sub	sp,-12
80003256:	e3 cd 80 80 	ldm	sp++,r7,pc

8000325a <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
8000325a:	eb cd 40 80 	pushm	r7,lr
8000325e:	1a 97       	mov	r7,sp
80003260:	20 3d       	sub	sp,12
80003262:	ef 4c ff f8 	st.w	r7[-8],r12
80003266:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000326a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000326e:	f1 39 00 0d 	ld.ub	r9,r8[13]
80003272:	30 18       	mov	r8,1
80003274:	f0 09 18 00 	cp.b	r9,r8
80003278:	e0 88 00 04 	brls	80003280 <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
8000327c:	30 28       	mov	r8,2
8000327e:	c3 48       	rjmp	800032e6 <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003280:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003284:	e0 69 00 80 	mov	r9,128
80003288:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
8000328a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000328e:	70 18       	ld.w	r8,r8[0x4]
80003290:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
80003294:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003298:	30 19       	mov	r9,1
8000329a:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8000329e:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800032a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032a6:	f1 38 00 0d 	ld.ub	r8,r8[13]
800032aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800032ae:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800032b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032b6:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800032ba:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
800032be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032c2:	30 09       	mov	r9,0
800032c4:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800032c8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800032cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032d0:	30 f9       	mov	r9,15
800032d2:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800032d6:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
800032da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800032de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032e2:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
800032e4:	30 08       	mov	r8,0
}
800032e6:	10 9c       	mov	r12,r8
800032e8:	2f dd       	sub	sp,-12
800032ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800032ee <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
800032ee:	eb cd 40 80 	pushm	r7,lr
800032f2:	1a 97       	mov	r7,sp
800032f4:	20 5d       	sub	sp,20
800032f6:	ef 4c ff f8 	st.w	r7[-8],r12
800032fa:	12 98       	mov	r8,r9
800032fc:	16 99       	mov	r9,r11
800032fe:	ef 69 ff f4 	st.b	r7[-12],r9
80003302:	14 99       	mov	r9,r10
80003304:	ef 69 ff f0 	st.b	r7[-16],r9
80003308:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
8000330c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003310:	30 18       	mov	r8,1
80003312:	f0 09 18 00 	cp.b	r9,r8
80003316:	e0 8b 00 09 	brhi	80003328 <spi_selectionMode+0x3a>
8000331a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000331e:	30 18       	mov	r8,1
80003320:	f0 09 18 00 	cp.b	r9,r8
80003324:	e0 88 00 04 	brls	8000332c <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
80003328:	30 28       	mov	r8,2
8000332a:	c2 88       	rjmp	8000337a <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
8000332c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003330:	70 18       	ld.w	r8,r8[0x4]
80003332:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
80003336:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000333a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000333e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003342:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003346:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000334a:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8000334e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003352:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003356:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000335a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000335e:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80003362:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
80003366:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000336a:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
8000336e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003372:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003376:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003378:	30 08       	mov	r8,0
}
8000337a:	10 9c       	mov	r12,r8
8000337c:	2f bd       	sub	sp,-20
8000337e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003382 <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003382:	eb cd 40 80 	pushm	r7,lr
80003386:	1a 97       	mov	r7,sp
80003388:	20 2d       	sub	sp,8
8000338a:	ef 4c ff fc 	st.w	r7[-4],r12
8000338e:	16 98       	mov	r8,r11
80003390:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003394:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003398:	70 18       	ld.w	r8,r8[0x4]
8000339a:	10 99       	mov	r9,r8
8000339c:	ea 19 00 0f 	orh	r9,0xf
800033a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033a4:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800033a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033aa:	70 18       	ld.w	r8,r8[0x4]
800033ac:	e2 18 00 04 	andl	r8,0x4,COH
800033b0:	c1 90       	breq	800033e2 <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800033b2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800033b6:	30 e8       	mov	r8,14
800033b8:	f0 09 18 00 	cp.b	r9,r8
800033bc:	e0 88 00 04 	brls	800033c4 <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
800033c0:	30 28       	mov	r8,2
800033c2:	c2 88       	rjmp	80003412 <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800033c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033c8:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
800033ca:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800033ce:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800033d0:	ea 18 ff f0 	orh	r8,0xfff0
800033d4:	e8 18 ff ff 	orl	r8,0xffff
800033d8:	10 69       	and	r9,r8
800033da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033de:	91 19       	st.w	r8[0x4],r9
800033e0:	c1 88       	rjmp	80003410 <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800033e2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800033e6:	30 38       	mov	r8,3
800033e8:	f0 09 18 00 	cp.b	r9,r8
800033ec:	e0 88 00 04 	brls	800033f4 <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
800033f0:	30 28       	mov	r8,2
800033f2:	c1 08       	rjmp	80003412 <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800033f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033f8:	70 19       	ld.w	r9,r8[0x4]
800033fa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800033fe:	2f 08       	sub	r8,-16
80003400:	30 1a       	mov	r10,1
80003402:	f4 08 09 48 	lsl	r8,r10,r8
80003406:	5c d8       	com	r8
80003408:	10 69       	and	r9,r8
8000340a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000340e:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
80003410:	30 08       	mov	r8,0
}
80003412:	10 9c       	mov	r12,r8
80003414:	2f ed       	sub	sp,-8
80003416:	e3 cd 80 80 	ldm	sp++,r7,pc

8000341a <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000341a:	eb cd 40 80 	pushm	r7,lr
8000341e:	1a 97       	mov	r7,sp
80003420:	20 3d       	sub	sp,12
80003422:	ef 4c ff f8 	st.w	r7[-8],r12
80003426:	16 98       	mov	r8,r11
80003428:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
8000342c:	e0 68 3a 98 	mov	r8,15000
80003430:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003434:	c0 f8       	rjmp	80003452 <spi_unselectChip+0x38>
		if (!timeout--) {
80003436:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000343a:	58 08       	cp.w	r8,0
8000343c:	5f 08       	sreq	r8
8000343e:	5c 58       	castu.b	r8
80003440:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003444:	20 19       	sub	r9,1
80003446:	ef 49 ff fc 	st.w	r7[-4],r9
8000344a:	58 08       	cp.w	r8,0
8000344c:	c0 30       	breq	80003452 <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
8000344e:	30 18       	mov	r8,1
80003450:	c1 68       	rjmp	8000347c <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003452:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003456:	70 48       	ld.w	r8,r8[0x10]
80003458:	e2 18 02 00 	andl	r8,0x200,COH
8000345c:	ce d0       	breq	80003436 <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000345e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003462:	70 18       	ld.w	r8,r8[0x4]
80003464:	10 99       	mov	r9,r8
80003466:	ea 19 00 0f 	orh	r9,0xf
8000346a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346e:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003470:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003474:	fc 19 01 00 	movh	r9,0x100
80003478:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
8000347a:	30 08       	mov	r8,0
}
8000347c:	10 9c       	mov	r12,r8
8000347e:	2f dd       	sub	sp,-12
80003480:	e3 cd 80 80 	ldm	sp++,r7,pc

80003484 <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003484:	eb cd 40 80 	pushm	r7,lr
80003488:	1a 97       	mov	r7,sp
8000348a:	20 5d       	sub	sp,20
8000348c:	ef 4c ff f4 	st.w	r7[-12],r12
80003490:	ef 4b ff f0 	st.w	r7[-16],r11
80003494:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003498:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000349c:	f1 39 00 0c 	ld.ub	r9,r8[12]
800034a0:	30 38       	mov	r8,3
800034a2:	f0 09 18 00 	cp.b	r9,r8
800034a6:	e0 8b 00 1d 	brhi	800034e0 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
800034aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034ae:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034b2:	30 18       	mov	r8,1
800034b4:	f0 09 18 00 	cp.b	r9,r8
800034b8:	e0 8b 00 14 	brhi	800034e0 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800034bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034c0:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034c4:	30 78       	mov	r8,7
800034c6:	f0 09 18 00 	cp.b	r9,r8
800034ca:	e0 88 00 0b 	brls	800034e0 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800034ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034d2:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034d6:	31 08       	mov	r8,16
800034d8:	f0 09 18 00 	cp.b	r9,r8
800034dc:	e0 88 00 04 	brls	800034e4 <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
800034e0:	30 28       	mov	r8,2
800034e2:	c8 d8       	rjmp	800035fc <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800034e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034e8:	70 18       	ld.w	r8,r8[0x4]
800034ea:	ee fb ff ec 	ld.w	r11,r7[-20]
800034ee:	10 9c       	mov	r12,r8
800034f0:	f0 1f 00 45 	mcall	80003604 <spi_setupChipReg+0x180>
800034f4:	18 98       	mov	r8,r12
800034f6:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
800034fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034fe:	58 08       	cp.w	r8,0
80003500:	c0 34       	brge	80003506 <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
80003502:	30 28       	mov	r8,2
80003504:	c7 c8       	rjmp	800035fc <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003506:	30 08       	mov	r8,0
80003508:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000350c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003510:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003514:	a1 98       	lsr	r8,0x1
80003516:	5c 58       	castu.b	r8
80003518:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000351c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003520:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003524:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003528:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
8000352c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003530:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003534:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003538:	5f 08       	sreq	r8
8000353a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000353e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003542:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80003546:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000354a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000354e:	f1 38 00 0b 	ld.ub	r8,r8[11]
80003552:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003556:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000355a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000355e:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80003562:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003566:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000356a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000356e:	20 88       	sub	r8,8
80003570:	5c 58       	castu.b	r8
80003572:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003576:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000357a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000357e:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80003582:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000358a:	5c 58       	castu.b	r8
8000358c:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003590:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003594:	f1 38 00 09 	ld.ub	r8,r8[9]
80003598:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
8000359c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035a0:	f1 38 00 0a 	ld.ub	r8,r8[10]
800035a4:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
800035a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035ac:	11 88       	ld.ub	r8,r8[0x0]
800035ae:	58 18       	cp.w	r8,1
800035b0:	c1 10       	breq	800035d2 <spi_setupChipReg+0x14e>
800035b2:	e0 89 00 05 	brgt	800035bc <spi_setupChipReg+0x138>
800035b6:	58 08       	cp.w	r8,0
800035b8:	c0 70       	breq	800035c6 <spi_setupChipReg+0x142>
800035ba:	c1 e8       	rjmp	800035f6 <spi_setupChipReg+0x172>
800035bc:	58 28       	cp.w	r8,2
800035be:	c1 00       	breq	800035de <spi_setupChipReg+0x15a>
800035c0:	58 38       	cp.w	r8,3
800035c2:	c1 40       	breq	800035ea <spi_setupChipReg+0x166>
800035c4:	c1 98       	rjmp	800035f6 <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800035c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800035ce:	91 c9       	st.w	r8[0x30],r9
		break;
800035d0:	c1 58       	rjmp	800035fa <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800035d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800035da:	91 d9       	st.w	r8[0x34],r9
		break;
800035dc:	c0 f8       	rjmp	800035fa <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800035de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800035e6:	91 e9       	st.w	r8[0x38],r9
		break;
800035e8:	c0 98       	rjmp	800035fa <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800035ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800035f2:	91 f9       	st.w	r8[0x3c],r9
		break;
800035f4:	c0 38       	rjmp	800035fa <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
800035f6:	30 28       	mov	r8,2
800035f8:	c0 28       	rjmp	800035fc <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
800035fa:	30 08       	mov	r8,0
}
800035fc:	10 9c       	mov	r12,r8
800035fe:	2f bd       	sub	sp,-20
80003600:	e3 cd 80 80 	ldm	sp++,r7,pc
80003604:	80 00       	ld.sh	r0,r0[0x0]
80003606:	32 0a       	mov	r10,32

80003608 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80003608:	eb cd 40 80 	pushm	r7,lr
8000360c:	1a 97       	mov	r7,sp
8000360e:	20 1d       	sub	sp,4
80003610:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003618:	30 19       	mov	r9,1
8000361a:	91 09       	st.w	r8[0x0],r9
}
8000361c:	2f fd       	sub	sp,-4
8000361e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003622 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003622:	eb cd 40 80 	pushm	r7,lr
80003626:	1a 97       	mov	r7,sp
80003628:	20 3d       	sub	sp,12
8000362a:	ef 4c ff f8 	st.w	r7[-8],r12
8000362e:	16 98       	mov	r8,r11
80003630:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003634:	e0 68 3a 98 	mov	r8,15000
80003638:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000363c:	c0 f8       	rjmp	8000365a <spi_write+0x38>
		if (!timeout--) {
8000363e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003642:	58 08       	cp.w	r8,0
80003644:	5f 08       	sreq	r8
80003646:	5c 58       	castu.b	r8
80003648:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000364c:	20 19       	sub	r9,1
8000364e:	ef 49 ff fc 	st.w	r7[-4],r9
80003652:	58 08       	cp.w	r8,0
80003654:	c0 30       	breq	8000365a <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
80003656:	30 18       	mov	r8,1
80003658:	c0 d8       	rjmp	80003672 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000365a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000365e:	70 48       	ld.w	r8,r8[0x10]
80003660:	e2 18 00 02 	andl	r8,0x2,COH
80003664:	ce d0       	breq	8000363e <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003666:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000366a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000366e:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
80003670:	30 08       	mov	r8,0
}
80003672:	10 9c       	mov	r12,r8
80003674:	2f dd       	sub	sp,-12
80003676:	e3 cd 80 80 	ldm	sp++,r7,pc

8000367a <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
8000367a:	eb cd 40 80 	pushm	r7,lr
8000367e:	1a 97       	mov	r7,sp
80003680:	20 3d       	sub	sp,12
80003682:	ef 4c ff f8 	st.w	r7[-8],r12
80003686:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
8000368a:	e0 68 3a 98 	mov	r8,15000
8000368e:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
80003692:	c0 f8       	rjmp	800036b0 <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003694:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003698:	58 08       	cp.w	r8,0
8000369a:	5f 08       	sreq	r8
8000369c:	5c 58       	castu.b	r8
8000369e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800036a2:	20 19       	sub	r9,1
800036a4:	ef 49 ff fc 	st.w	r7[-4],r9
800036a8:	58 08       	cp.w	r8,0
800036aa:	c0 30       	breq	800036b0 <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
800036ac:	30 18       	mov	r8,1
800036ae:	c1 18       	rjmp	800036d0 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800036b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036b4:	70 48       	ld.w	r8,r8[0x10]
800036b6:	e2 18 02 01 	andl	r8,0x201,COH
800036ba:	e0 48 02 01 	cp.w	r8,513
800036be:	ce b1       	brne	80003694 <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800036c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036c4:	70 28       	ld.w	r8,r8[0x8]
800036c6:	5c 88       	casts.h	r8
800036c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800036cc:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
800036ce:	30 08       	mov	r8,0
}
800036d0:	10 9c       	mov	r12,r8
800036d2:	2f dd       	sub	sp,-12
800036d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800036d8 <buttonIsPressed>:
	button_port->oderc = BUTTON2_PIN;
	
}

int buttonIsPressed(int buttonNr)
{
800036d8:	eb cd 40 80 	pushm	r7,lr
800036dc:	1a 97       	mov	r7,sp
800036de:	20 2d       	sub	sp,8
800036e0:	ef 4c ff f8 	st.w	r7[-8],r12
	int buttonState = AVR32_GPIO.port[BUTTON_PORT].pvr & (buttonNr);
800036e4:	fe 78 10 00 	mov	r8,-61440
800036e8:	f0 f9 02 60 	ld.w	r9,r8[608]
800036ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036f0:	f3 e8 00 08 	and	r8,r9,r8
800036f4:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(buttonState == 0)
800036f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036fc:	58 08       	cp.w	r8,0
800036fe:	c0 31       	brne	80003704 <buttonIsPressed+0x2c>
		return 1;
80003700:	30 18       	mov	r8,1
80003702:	c0 28       	rjmp	80003706 <buttonIsPressed+0x2e>
	else
		return 0;
80003704:	30 08       	mov	r8,0
80003706:	10 9c       	mov	r12,r8
80003708:	2f ed       	sub	sp,-8
8000370a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000370e <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000370e:	eb cd 40 80 	pushm	r7,lr
80003712:	1a 97       	mov	r7,sp
	}
#endif

	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RCSYS:
		return OSC_SLOW_NOMINAL_HZ;
80003714:	e0 78 c2 00 	mov	r8,115200

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80003718:	10 9c       	mov	r12,r8
8000371a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000371e:	d7 03       	nop

80003720 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80003720:	eb cd 40 80 	pushm	r7,lr
80003724:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80003726:	f0 1f 00 04 	mcall	80003734 <sysclk_get_cpu_hz+0x14>
8000372a:	18 98       	mov	r8,r12
}
8000372c:	10 9c       	mov	r12,r8
8000372e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003732:	00 00       	add	r0,r0
80003734:	80 00       	ld.sh	r0,r0[0x0]
80003736:	37 0e       	mov	lr,112

80003738 <display_init>:

// Include Files
#include "display_init.h"

void display_init(void)
{
80003738:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000373c:	1a 97       	mov	r7,sp
8000373e:	21 0d       	sub	sp,64
	volatile avr32_pm_t* pm = &AVR32_PM;
80003740:	fe 78 0c 00 	mov	r8,-62464
80003744:	ef 48 ff dc 	st.w	r7[-36],r8
	   .spck_delay           = 0,
	   .trans_delay  		 = 8,
	   .stay_act             = 1,
	   .spi_mode             = 0,
	   .modfdis              = 1
	};
80003748:	4f 68       	lddpc	r8,80003920 <display_init+0x1e8>
8000374a:	ee ca 00 34 	sub	r10,r7,52
8000374e:	10 9b       	mov	r11,r8
80003750:	f6 e8 00 00 	ld.d	r8,r11[0]
80003754:	f4 e9 00 00 	st.d	r10[0],r8
80003758:	f6 e8 00 08 	ld.d	r8,r11[8]
8000375c:	f4 e9 00 08 	st.d	r10[8],r8

	// Switch clock to external 12 MHz crystal
	// 1) Configure OSC0 in crystal mode, external crystal with a FOSC0 Hz frequency.
	pm_enable_osc0_crystal(pm, FOSC0);
80003760:	e0 6b 1b 00 	mov	r11,6912
80003764:	ea 1b 00 b7 	orh	r11,0xb7
80003768:	ee fc ff dc 	ld.w	r12,r7[-36]
8000376c:	f0 1f 00 6e 	mcall	80003924 <display_init+0x1ec>

	// 2) Enable the OSC0
	pm_enable_clk0(pm, OSC0_STARTUP);
80003770:	30 3b       	mov	r11,3
80003772:	ee fc ff dc 	ld.w	r12,r7[-36]
80003776:	f0 1f 00 6d 	mcall	80003928 <display_init+0x1f0>

	// 3) Set the main clock source as being OSC0.
	pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);
8000377a:	30 1b       	mov	r11,1
8000377c:	ee fc ff dc 	ld.w	r12,r7[-36]
80003780:	f0 1f 00 6b 	mcall	8000392c <display_init+0x1f4>

	// Initialize the delay function
	delay_init(12000000);
	// Delay for a ms, to allow the display to power up properly
	delay_ms(1);
80003784:	f0 1f 00 6b 	mcall	80003930 <display_init+0x1f8>
80003788:	18 98       	mov	r8,r12
8000378a:	30 19       	mov	r9,1
8000378c:	ef 49 ff e4 	st.w	r7[-28],r9
80003790:	ef 48 ff e0 	st.w	r7[-32],r8
80003794:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003798:	ef 48 ff ec 	st.w	r7[-20],r8
8000379c:	ee f8 ff e0 	ld.w	r8,r7[-32]
800037a0:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800037a4:	ee f0 ff ec 	ld.w	r0,r7[-20]
800037a8:	30 01       	mov	r1,0
800037aa:	ee f2 ff e8 	ld.w	r2,r7[-24]
800037ae:	30 03       	mov	r3,0
800037b0:	e2 02 02 4a 	mul	r10,r1,r2
800037b4:	e6 00 02 48 	mul	r8,r3,r0
800037b8:	10 0a       	add	r10,r8
800037ba:	e0 02 06 48 	mulu.d	r8,r0,r2
800037be:	12 0a       	add	r10,r9
800037c0:	14 99       	mov	r9,r10
800037c2:	e0 6a 03 e7 	mov	r10,999
800037c6:	30 0b       	mov	r11,0
800037c8:	f0 0a 00 0a 	add	r10,r8,r10
800037cc:	f2 0b 00 4b 	adc	r11,r9,r11
800037d0:	e0 68 03 e8 	mov	r8,1000
800037d4:	30 09       	mov	r9,0
800037d6:	f0 1f 00 58 	mcall	80003934 <display_init+0x1fc>
800037da:	14 98       	mov	r8,r10
800037dc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800037de:	ef 48 ff f4 	st.w	r7[-12],r8
800037e2:	ee c8 00 40 	sub	r8,r7,64
800037e6:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800037ea:	e1 b8 00 42 	mfsr	r8,0x108
800037ee:	10 99       	mov	r9,r8
800037f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037f4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800037f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800037fa:	70 09       	ld.w	r9,r8[0x0]
800037fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003800:	10 09       	add	r9,r8
80003802:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003806:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80003808:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000380c:	30 08       	mov	r8,0
8000380e:	f3 68 00 08 	st.b	r9[8],r8
80003812:	ee c8 00 40 	sub	r8,r7,64
80003816:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000381a:	e1 b8 00 42 	mfsr	r8,0x108
8000381e:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80003822:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003826:	f1 39 00 08 	ld.ub	r9,r8[8]
8000382a:	30 28       	mov	r8,2
8000382c:	f0 09 18 00 	cp.b	r9,r8
80003830:	c0 31       	brne	80003836 <display_init+0xfe>
    return false;
80003832:	30 08       	mov	r8,0
80003834:	c4 38       	rjmp	800038ba <display_init+0x182>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80003836:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000383a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000383e:	30 18       	mov	r8,1
80003840:	f0 09 18 00 	cp.b	r9,r8
80003844:	c0 31       	brne	8000384a <display_init+0x112>
    return true;
80003846:	30 18       	mov	r8,1
80003848:	c3 98       	rjmp	800038ba <display_init+0x182>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000384a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000384e:	70 09       	ld.w	r9,r8[0x0]
80003850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003854:	70 18       	ld.w	r8,r8[0x4]
80003856:	10 39       	cp.w	r9,r8
80003858:	e0 88 00 1a 	brls	8000388c <display_init+0x154>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000385c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003860:	70 08       	ld.w	r8,r8[0x0]
80003862:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003866:	10 39       	cp.w	r9,r8
80003868:	c1 02       	brcc	80003888 <display_init+0x150>
8000386a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000386e:	70 18       	ld.w	r8,r8[0x4]
80003870:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003874:	10 39       	cp.w	r9,r8
80003876:	e0 88 00 09 	brls	80003888 <display_init+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000387a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000387e:	30 18       	mov	r8,1
80003880:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80003884:	30 18       	mov	r8,1
80003886:	c1 a8       	rjmp	800038ba <display_init+0x182>
    }
    return false;
80003888:	30 08       	mov	r8,0
8000388a:	c1 88       	rjmp	800038ba <display_init+0x182>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000388c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003890:	70 08       	ld.w	r8,r8[0x0]
80003892:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003896:	10 39       	cp.w	r9,r8
80003898:	c0 93       	brcs	800038aa <display_init+0x172>
8000389a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000389e:	70 18       	ld.w	r8,r8[0x4]
800038a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800038a4:	10 39       	cp.w	r9,r8
800038a6:	e0 88 00 09 	brls	800038b8 <display_init+0x180>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800038aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800038ae:	30 18       	mov	r8,1
800038b0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800038b4:	30 18       	mov	r8,1
800038b6:	c0 28       	rjmp	800038ba <display_init+0x182>
    }
    return false;
800038b8:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800038ba:	58 08       	cp.w	r8,0
800038bc:	ca b0       	breq	80003812 <display_init+0xda>

	// Enable the SPI peripheral on GPIO pins
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
800038be:	30 4b       	mov	r11,4
800038c0:	49 ec       	lddpc	r12,80003938 <display_init+0x200>
800038c2:	f0 1f 00 1f 	mcall	8000393c <display_init+0x204>
						sizeof(DIP204_SPI_GPIO_MAP) / 	sizeof(DIP204_SPI_GPIO_MAP[0]));

	// Initialize as SPI master
	spi_initMaster(DIP204_SPI, &spiOptions);
800038c6:	ee c8 00 34 	sub	r8,r7,52
800038ca:	10 9b       	mov	r11,r8
800038cc:	fe 7c 28 00 	mov	r12,-55296
800038d0:	f0 1f 00 1c 	mcall	80003940 <display_init+0x208>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
800038d4:	30 09       	mov	r9,0
800038d6:	30 0a       	mov	r10,0
800038d8:	30 0b       	mov	r11,0
800038da:	fe 7c 28 00 	mov	r12,-55296
800038de:	f0 1f 00 1a 	mcall	80003944 <display_init+0x20c>
	spi_enable(DIP204_SPI);
800038e2:	fe 7c 28 00 	mov	r12,-55296
800038e6:	f0 1f 00 19 	mcall	80003948 <display_init+0x210>
	spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);
800038ea:	ee c8 00 34 	sub	r8,r7,52
800038ee:	e0 6a 1b 00 	mov	r10,6912
800038f2:	ea 1a 00 b7 	orh	r10,0xb7
800038f6:	10 9b       	mov	r11,r8
800038f8:	fe 7c 28 00 	mov	r12,-55296
800038fc:	f0 1f 00 14 	mcall	8000394c <display_init+0x214>

	dip204_init(backlight_IO, ON);
80003900:	30 1b       	mov	r11,1
80003902:	30 0c       	mov	r12,0
80003904:	f0 1f 00 13 	mcall	80003950 <display_init+0x218>
	dip204_clear_display();
80003908:	f0 1f 00 13 	mcall	80003954 <display_init+0x21c>
	dip204_hide_cursor();
8000390c:	f0 1f 00 13 	mcall	80003958 <display_init+0x220>
	dip204_set_cursor_position(1,1);
80003910:	30 1b       	mov	r11,1
80003912:	30 1c       	mov	r12,1
80003914:	f0 1f 00 12 	mcall	8000395c <display_init+0x224>
}
80003918:	2f 0d       	sub	sp,-64
8000391a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000391e:	00 00       	add	r0,r0
80003920:	80 00       	ld.sh	r0,r0[0x0]
80003922:	c0 18       	rjmp	80003924 <display_init+0x1ec>
80003924:	80 00       	ld.sh	r0,r0[0x0]
80003926:	43 14       	lddsp	r4,sp[0xc4]
80003928:	80 00       	ld.sh	r0,r0[0x0]
8000392a:	43 78       	lddsp	r8,sp[0xdc]
8000392c:	80 00       	ld.sh	r0,r0[0x0]
8000392e:	44 24       	lddsp	r4,sp[0x108]
80003930:	80 00       	ld.sh	r0,r0[0x0]
80003932:	37 20       	mov	r0,114
80003934:	80 00       	ld.sh	r0,r0[0x0]
80003936:	62 e8       	ld.w	r8,r1[0x38]
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	c0 28       	rjmp	8000393e <display_init+0x206>
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	3e 80       	mov	r0,-24
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	32 5a       	mov	r10,37
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	32 ee       	mov	lr,46
80003948:	80 00       	ld.sh	r0,r0[0x0]
8000394a:	36 08       	mov	r8,96
8000394c:	80 00       	ld.sh	r0,r0[0x0]
8000394e:	34 84       	mov	r4,72
80003950:	80 00       	ld.sh	r0,r0[0x0]
80003952:	21 08       	sub	r8,16
80003954:	80 00       	ld.sh	r0,r0[0x0]
80003956:	2c a0       	sub	r0,-54
80003958:	80 00       	ld.sh	r0,r0[0x0]
8000395a:	2b e4       	sub	r4,-66
8000395c:	80 00       	ld.sh	r0,r0[0x0]
8000395e:	2c 18       	sub	r8,-63

80003960 <initLED>:
#include "LED.h"

void initLED (void)
{
80003960:	eb cd 40 80 	pushm	r7,lr
80003964:	1a 97       	mov	r7,sp
80003966:	20 1d       	sub	sp,4
	/*
	* First make access to the GPIO port registers
	* shorter to type , just for our convenience
	*/
	volatile avr32_gpio_port_t * led0_port;
	led0_port = &AVR32_GPIO.port[LED0_PORT];
80003968:	fe 78 11 00 	mov	r8,-61184
8000396c:	ef 48 ff fc 	st.w	r7[-4],r8
	/*
	* Choose GPIO peripheral function ,
	* by writing a 1 to gpers , GPIO Enable Register Set
	*/
	led0_port->gpers = LED0_BIT_VALUE;
80003970:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003974:	fc 19 08 00 	movh	r9,0x800
80003978:	91 19       	st.w	r8[0x4],r9
	led0_port->gpers = LED1_BIT_VALUE;
8000397a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000397e:	fc 19 10 00 	movh	r9,0x1000
80003982:	91 19       	st.w	r8[0x4],r9
	led0_port->gpers = LED2_BIT_VALUE;
80003984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003988:	fc 19 20 00 	movh	r9,0x2000
8000398c:	91 19       	st.w	r8[0x4],r9
	/*
	* Set the output value register to 1 in order to
	* turn the LED off (1= off , 0= on in this case ) ,
	* by writing a 1 to ovrs , Output Value Register Set
	*/
	led0_port->ovrs = LED0_BIT_VALUE;
8000398e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003992:	fc 19 08 00 	movh	r9,0x800
80003996:	f1 49 00 54 	st.w	r8[84],r9
	led0_port->ovrs = LED1_BIT_VALUE;
8000399a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000399e:	fc 19 10 00 	movh	r9,0x1000
800039a2:	f1 49 00 54 	st.w	r8[84],r9
	led0_port->ovrs = LED2_BIT_VALUE;
800039a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039aa:	fc 19 20 00 	movh	r9,0x2000
800039ae:	f1 49 00 54 	st.w	r8[84],r9
	/*
	* Set the output enable register ,
	* by writing a 1 to oders , Output Drive Enable
	* Register Set
	*/
	led0_port->oders = LED0_BIT_VALUE;
800039b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039b6:	fc 19 08 00 	movh	r9,0x800
800039ba:	f1 49 00 44 	st.w	r8[68],r9
	led0_port->oders = LED1_BIT_VALUE;
800039be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039c2:	fc 19 10 00 	movh	r9,0x1000
800039c6:	f1 49 00 44 	st.w	r8[68],r9
	led0_port->oders = LED2_BIT_VALUE;
800039ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039ce:	fc 19 20 00 	movh	r9,0x2000
800039d2:	f1 49 00 44 	st.w	r8[68],r9
}
800039d6:	2f fd       	sub	sp,-4
800039d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800039dc <onLED>:
{
	AVR32_GPIO.port[LED0_PORT].ovrt = ledNr;
}

void onLED(int ledNr)
{
800039dc:	eb cd 40 80 	pushm	r7,lr
800039e0:	1a 97       	mov	r7,sp
800039e2:	20 1d       	sub	sp,4
800039e4:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_GPIO.port[LED0_PORT].ovrc = ledNr;
800039e8:	fe 78 10 00 	mov	r8,-61440
800039ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800039f0:	f1 49 01 58 	st.w	r8[344],r9
}
800039f4:	2f fd       	sub	sp,-4
800039f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800039fa <offLED>:

void offLED(int ledNr)
{
800039fa:	eb cd 40 80 	pushm	r7,lr
800039fe:	1a 97       	mov	r7,sp
80003a00:	20 1d       	sub	sp,4
80003a02:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_GPIO.port[LED0_PORT].ovrs = ledNr;
80003a06:	fe 78 10 00 	mov	r8,-61440
80003a0a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003a0e:	f1 49 01 54 	st.w	r8[340],r9
80003a12:	2f fd       	sub	sp,-4
80003a14:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a18:	25 63       	sub	r3,86
80003a1a:	00 00       	add	r0,r0
80003a1c:	25 64       	sub	r4,86
80003a1e:	00 00       	add	r0,r0
80003a20:	20 20       	sub	r0,2
80003a22:	20 20       	sub	r0,2
80003a24:	20 20       	sub	r0,2
80003a26:	20 20       	sub	r0,2
80003a28:	20 20       	sub	r0,2
80003a2a:	20 20       	sub	r0,2
80003a2c:	20 20       	sub	r0,2
80003a2e:	20 20       	sub	r0,2
80003a30:	20 20       	sub	r0,2
80003a32:	20 20       	sub	r0,2
80003a34:	00 00       	add	r0,r0
80003a36:	00 00       	add	r0,r0
80003a38:	76 50       	ld.w	r0,r11[0x14]
80003a3a:	72 6f       	ld.w	pc,r9[0x18]
80003a3c:	64 75       	ld.w	r5,r2[0x1c]
80003a3e:	63 65       	ld.w	r5,r1[0x58]
80003a40:	72 00       	ld.w	r0,r9[0x0]
80003a42:	00 00       	add	r0,r0
80003a44:	76 43       	ld.w	r3,r11[0x10]
80003a46:	6f 6e       	ld.w	lr,r7[0x58]
80003a48:	73 75       	ld.w	r5,r9[0x5c]
80003a4a:	6d 65       	ld.w	r5,r6[0x58]
80003a4c:	72 00       	ld.w	r0,r9[0x0]
80003a4e:	00 00       	add	r0,r0
80003a50:	76 53       	ld.w	r3,r11[0x14]
80003a52:	74 61       	ld.w	r1,r10[0x18]
80003a54:	74 75       	ld.w	r5,r10[0x1c]
80003a56:	73 00       	ld.w	r0,r9[0x40]

80003a58 <init_usart>:
int byteCount = 0;					// How long is the queue
int statusTaskActive = pdFALSE;		// Show status on display?
int statusCount = 0;				// How many characters have been sent

void init_usart ( void )
{
80003a58:	eb cd 40 80 	pushm	r7,lr
80003a5c:	1a 97       	mov	r7,sp
		. charlength = 8,
		. paritytype = USART_NO_PARITY ,
		. stopbits = USART_1_STOPBIT ,
		. channelmode = USART_NORMAL_CHMODE
	};
	pm_switch_to_osc0 (& AVR32_PM , FOSC0 , OSC0_STARTUP );				// Switch to 12 MHz clock
80003a5e:	30 3a       	mov	r10,3
80003a60:	e0 6b 1b 00 	mov	r11,6912
80003a64:	ea 1b 00 b7 	orh	r11,0xb7
80003a68:	fe 7c 0c 00 	mov	r12,-62464
80003a6c:	f0 1f 00 0f 	mcall	80003aa8 <init_usart+0x50>
	gpio_enable_module ( USART_SERIAL_GPIO_MAP , 2);					// Enable usart
80003a70:	30 2b       	mov	r11,2
80003a72:	48 fc       	lddpc	r12,80003aac <init_usart+0x54>
80003a74:	f0 1f 00 0f 	mcall	80003ab0 <init_usart+0x58>
	gpio_enable_module ( USART_DEBUG_GPIO_MAP , 2);
80003a78:	30 2b       	mov	r11,2
80003a7a:	48 fc       	lddpc	r12,80003ab4 <init_usart+0x5c>
80003a7c:	f0 1f 00 0d 	mcall	80003ab0 <init_usart+0x58>
	usart_init_rs232 ( serialPORT_USART , & USART_OPTIONS , FOSC0 );	// Usart options
80003a80:	e0 6a 1b 00 	mov	r10,6912
80003a84:	ea 1a 00 b7 	orh	r10,0xb7
80003a88:	48 cb       	lddpc	r11,80003ab8 <init_usart+0x60>
80003a8a:	fe 7c 18 00 	mov	r12,-59392
80003a8e:	f0 1f 00 0c 	mcall	80003abc <init_usart+0x64>
	usart_init_rs232 ( configDBG_USART , & USART_OPTIONS , FOSC0 );
80003a92:	e0 6a 1b 00 	mov	r10,6912
80003a96:	ea 1a 00 b7 	orh	r10,0xb7
80003a9a:	48 8b       	lddpc	r11,80003ab8 <init_usart+0x60>
80003a9c:	fe 7c 18 00 	mov	r12,-59392
80003aa0:	f0 1f 00 07 	mcall	80003abc <init_usart+0x64>
}
80003aa4:	e3 cd 80 80 	ldm	sp++,r7,pc
80003aa8:	80 00       	ld.sh	r0,r0[0x0]
80003aaa:	44 70       	lddsp	r0,sp[0x11c]
80003aac:	80 00       	ld.sh	r0,r0[0x0]
80003aae:	c0 48       	rjmp	80003ab6 <init_usart+0x5e>
80003ab0:	80 00       	ld.sh	r0,r0[0x0]
80003ab2:	3e 80       	mov	r0,-24
80003ab4:	80 00       	ld.sh	r0,r0[0x0]
80003ab6:	c0 58       	rjmp	80003ac0 <vProducer>
80003ab8:	80 00       	ld.sh	r0,r0[0x0]
80003aba:	c0 68       	rjmp	80003ac6 <vProducer+0x6>
80003abc:	80 00       	ld.sh	r0,r0[0x0]
80003abe:	46 20       	lddsp	r0,sp[0x188]

80003ac0 <vProducer>:

void vProducer(void *pvParameters)
{	
80003ac0:	eb cd 40 80 	pushm	r7,lr
80003ac4:	1a 97       	mov	r7,sp
80003ac6:	20 2d       	sub	sp,8
80003ac8:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile char char_to_send;		// Character to send to Consumer
	
	onLED(LED0_BIT_VALUE);	// On when the producer is active
80003acc:	fc 1c 08 00 	movh	r12,0x800
80003ad0:	f0 1f 00 16 	mcall	80003b28 <vProducer+0x68>
	
	while(1)
	{
		
		offLED(LED0_BIT_VALUE);
80003ad4:	fc 1c 08 00 	movh	r12,0x800
80003ad8:	f0 1f 00 15 	mcall	80003b2c <vProducer+0x6c>
		if(xSemaphoreTake(xEmptyCount, (portTickType)portMAX_DELAY) == pdTRUE)
80003adc:	49 58       	lddpc	r8,80003b30 <vProducer+0x70>
80003ade:	70 08       	ld.w	r8,r8[0x0]
80003ae0:	30 09       	mov	r9,0
80003ae2:	3f fa       	mov	r10,-1
80003ae4:	30 0b       	mov	r11,0
80003ae6:	10 9c       	mov	r12,r8
80003ae8:	f0 1f 00 13 	mcall	80003b34 <vProducer+0x74>
		{
			// Semaphore taken
		}
		onLED(LED0_BIT_VALUE);
80003aec:	fc 1c 08 00 	movh	r12,0x800
80003af0:	f0 1f 00 0e 	mcall	80003b28 <vProducer+0x68>
		
		char_to_send = usart_getchar(serialPORT_USART);
80003af4:	fe 7c 18 00 	mov	r12,-59392
80003af8:	f0 1f 00 10 	mcall	80003b38 <vProducer+0x78>
80003afc:	18 98       	mov	r8,r12
80003afe:	5c 58       	castu.b	r8
80003b00:	ef 68 ff ff 	st.b	r7[-1],r8
		xQueueSendToBack(xQHandle, &char_to_send, (portTickType)10);
80003b04:	48 e8       	lddpc	r8,80003b3c <vProducer+0x7c>
80003b06:	70 08       	ld.w	r8,r8[0x0]
80003b08:	ee cb 00 01 	sub	r11,r7,1
80003b0c:	30 09       	mov	r9,0
80003b0e:	30 aa       	mov	r10,10
80003b10:	10 9c       	mov	r12,r8
80003b12:	f0 1f 00 0c 	mcall	80003b40 <vProducer+0x80>
		
		if(xSemaphoreGive(xFillCount) == pdTRUE)
80003b16:	48 c8       	lddpc	r8,80003b44 <vProducer+0x84>
80003b18:	70 08       	ld.w	r8,r8[0x0]
80003b1a:	30 09       	mov	r9,0
80003b1c:	30 0a       	mov	r10,0
80003b1e:	30 0b       	mov	r11,0
80003b20:	10 9c       	mov	r12,r8
80003b22:	f0 1f 00 08 	mcall	80003b40 <vProducer+0x80>
		{
			// Semaphore given
		}
	}
80003b26:	cd 7b       	rjmp	80003ad4 <vProducer+0x14>
80003b28:	80 00       	ld.sh	r0,r0[0x0]
80003b2a:	39 dc       	mov	r12,-99
80003b2c:	80 00       	ld.sh	r0,r0[0x0]
80003b2e:	39 fa       	mov	r10,-97
80003b30:	00 00       	add	r0,r0
80003b32:	07 f4       	ld.ub	r4,r3[0x7]
80003b34:	80 00       	ld.sh	r0,r0[0x0]
80003b36:	53 30       	stdsp	sp[0xcc],r0
80003b38:	80 00       	ld.sh	r0,r0[0x0]
80003b3a:	48 7c       	lddpc	r12,80003b54 <vConsumer+0xc>
80003b3c:	00 00       	add	r0,r0
80003b3e:	07 e4       	ld.ub	r4,r3[0x6]
80003b40:	80 00       	ld.sh	r0,r0[0x0]
80003b42:	51 c8       	stdsp	sp[0x70],r8
80003b44:	00 00       	add	r0,r0
80003b46:	07 e0       	ld.ub	r0,r3[0x6]

80003b48 <vConsumer>:
}

void vConsumer( void *pvParameters )
{
80003b48:	eb cd 40 80 	pushm	r7,lr
80003b4c:	1a 97       	mov	r7,sp
80003b4e:	20 3d       	sub	sp,12
80003b50:	ef 4c ff f4 	st.w	r7[-12],r12
	volatile char char_received;		// Character received
	volatile int column = 0;			// Where on display to write
80003b54:	30 08       	mov	r8,0
80003b56:	ef 48 ff f8 	st.w	r7[-8],r8
	
	onLED(LED1_BIT_VALUE);	// On when Consumer is active
80003b5a:	fc 1c 10 00 	movh	r12,0x1000
80003b5e:	f0 1f 00 36 	mcall	80003c34 <vConsumer+0xec>
	
	while(1)
	{
		offLED(LED1_BIT_VALUE);
80003b62:	fc 1c 10 00 	movh	r12,0x1000
80003b66:	f0 1f 00 35 	mcall	80003c38 <vConsumer+0xf0>
		if(xSemaphoreTake(xFillCount, (portTickType)portMAX_DELAY) == pdTRUE)
80003b6a:	4b 58       	lddpc	r8,80003c3c <vConsumer+0xf4>
80003b6c:	70 08       	ld.w	r8,r8[0x0]
80003b6e:	30 09       	mov	r9,0
80003b70:	3f fa       	mov	r10,-1
80003b72:	30 0b       	mov	r11,0
80003b74:	10 9c       	mov	r12,r8
80003b76:	f0 1f 00 33 	mcall	80003c40 <vConsumer+0xf8>
		{
			// Semaphore taken
		}
		onLED(LED1_BIT_VALUE);
80003b7a:	fc 1c 10 00 	movh	r12,0x1000
80003b7e:	f0 1f 00 2e 	mcall	80003c34 <vConsumer+0xec>
		
		xQueueReceive(xQHandle, &char_received, (portTickType)10);
80003b82:	4b 18       	lddpc	r8,80003c44 <vConsumer+0xfc>
80003b84:	70 08       	ld.w	r8,r8[0x0]
80003b86:	ee cb 00 01 	sub	r11,r7,1
80003b8a:	30 09       	mov	r9,0
80003b8c:	30 aa       	mov	r10,10
80003b8e:	10 9c       	mov	r12,r8
80003b90:	f0 1f 00 2c 	mcall	80003c40 <vConsumer+0xf8>
		statusCount++;
80003b94:	4a d8       	lddpc	r8,80003c48 <vConsumer+0x100>
80003b96:	70 08       	ld.w	r8,r8[0x0]
80003b98:	f0 c9 ff ff 	sub	r9,r8,-1
80003b9c:	4a b8       	lddpc	r8,80003c48 <vConsumer+0x100>
80003b9e:	91 09       	st.w	r8[0x0],r9
		
		column++;
80003ba0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ba4:	2f f8       	sub	r8,-1
80003ba6:	ef 48 ff f8 	st.w	r7[-8],r8
		if(column > 20)		// If display is full, restart
80003baa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bae:	59 48       	cp.w	r8,20
80003bb0:	e0 8a 00 07 	brle	80003bbe <vConsumer+0x76>
		{
			dip204_clear_display();
80003bb4:	f0 1f 00 26 	mcall	80003c4c <vConsumer+0x104>
			column = 1;
80003bb8:	30 18       	mov	r8,1
80003bba:	ef 48 ff f8 	st.w	r7[-8],r8
		}
		if(xSemaphoreTake(xLCDSemaphore, (portTickType)portMAX_DELAY) == pdTRUE)	// Semaphore - Display
80003bbe:	4a 58       	lddpc	r8,80003c50 <vConsumer+0x108>
80003bc0:	70 08       	ld.w	r8,r8[0x0]
80003bc2:	30 09       	mov	r9,0
80003bc4:	3f fa       	mov	r10,-1
80003bc6:	30 0b       	mov	r11,0
80003bc8:	10 9c       	mov	r12,r8
80003bca:	f0 1f 00 1e 	mcall	80003c40 <vConsumer+0xf8>
80003bce:	18 98       	mov	r8,r12
80003bd0:	58 18       	cp.w	r8,1
80003bd2:	c2 71       	brne	80003c20 <vConsumer+0xd8>
		{
			dip204_set_cursor_position(column, 1);
80003bd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bd8:	5c 58       	castu.b	r8
80003bda:	30 1b       	mov	r11,1
80003bdc:	10 9c       	mov	r12,r8
80003bde:	f0 1f 00 1e 	mcall	80003c54 <vConsumer+0x10c>
			dip204_printf_string("%c", char_received); //print value
80003be2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003be6:	5c 58       	castu.b	r8
80003be8:	1a d8       	st.w	--sp,r8
80003bea:	49 cc       	lddpc	r12,80003c58 <vConsumer+0x110>
80003bec:	f0 1f 00 1c 	mcall	80003c5c <vConsumer+0x114>
80003bf0:	2f fd       	sub	sp,-4
			
			if(statusTaskActive == pdTRUE)		// Show status on display?
80003bf2:	49 c8       	lddpc	r8,80003c60 <vConsumer+0x118>
80003bf4:	70 08       	ld.w	r8,r8[0x0]
80003bf6:	58 18       	cp.w	r8,1
80003bf8:	c0 c1       	brne	80003c10 <vConsumer+0xc8>
			{
				dip204_set_cursor_position(1, 2);
80003bfa:	30 2b       	mov	r11,2
80003bfc:	30 1c       	mov	r12,1
80003bfe:	f0 1f 00 16 	mcall	80003c54 <vConsumer+0x10c>
				dip204_printf_string("%d", statusCount); //print value
80003c02:	49 28       	lddpc	r8,80003c48 <vConsumer+0x100>
80003c04:	70 08       	ld.w	r8,r8[0x0]
80003c06:	1a d8       	st.w	--sp,r8
80003c08:	49 7c       	lddpc	r12,80003c64 <vConsumer+0x11c>
80003c0a:	f0 1f 00 15 	mcall	80003c5c <vConsumer+0x114>
80003c0e:	2f fd       	sub	sp,-4
			}
			if(xSemaphoreGive(xLCDSemaphore) == pdTRUE)
80003c10:	49 08       	lddpc	r8,80003c50 <vConsumer+0x108>
80003c12:	70 08       	ld.w	r8,r8[0x0]
80003c14:	30 09       	mov	r9,0
80003c16:	30 0a       	mov	r10,0
80003c18:	30 0b       	mov	r11,0
80003c1a:	10 9c       	mov	r12,r8
80003c1c:	f0 1f 00 13 	mcall	80003c68 <vConsumer+0x120>
			{
				//Successfully given back
			}
		}
		
		if(xSemaphoreGive(xEmptyCount) == pdTRUE)
80003c20:	49 38       	lddpc	r8,80003c6c <vConsumer+0x124>
80003c22:	70 08       	ld.w	r8,r8[0x0]
80003c24:	30 09       	mov	r9,0
80003c26:	30 0a       	mov	r10,0
80003c28:	30 0b       	mov	r11,0
80003c2a:	10 9c       	mov	r12,r8
80003c2c:	f0 1f 00 0f 	mcall	80003c68 <vConsumer+0x120>
		{
			// Semaphore given
		}
	}
80003c30:	c9 9b       	rjmp	80003b62 <vConsumer+0x1a>
80003c32:	00 00       	add	r0,r0
80003c34:	80 00       	ld.sh	r0,r0[0x0]
80003c36:	39 dc       	mov	r12,-99
80003c38:	80 00       	ld.sh	r0,r0[0x0]
80003c3a:	39 fa       	mov	r10,-97
80003c3c:	00 00       	add	r0,r0
80003c3e:	07 e0       	ld.ub	r0,r3[0x6]
80003c40:	80 00       	ld.sh	r0,r0[0x0]
80003c42:	53 30       	stdsp	sp[0xcc],r0
80003c44:	00 00       	add	r0,r0
80003c46:	07 e4       	ld.ub	r4,r3[0x6]
80003c48:	00 00       	add	r0,r0
80003c4a:	05 78       	ld.ub	r8,--r2
80003c4c:	80 00       	ld.sh	r0,r0[0x0]
80003c4e:	2c a0       	sub	r0,-54
80003c50:	00 00       	add	r0,r0
80003c52:	07 dc       	ld.ub	r12,r3[0x5]
80003c54:	80 00       	ld.sh	r0,r0[0x0]
80003c56:	2c 18       	sub	r8,-63
80003c58:	80 00       	ld.sh	r0,r0[0x0]
80003c5a:	3a 18       	mov	r8,-95
80003c5c:	80 00       	ld.sh	r0,r0[0x0]
80003c5e:	2e 8c       	sub	r12,-24
80003c60:	00 00       	add	r0,r0
80003c62:	05 74       	ld.ub	r4,--r2
80003c64:	80 00       	ld.sh	r0,r0[0x0]
80003c66:	3a 1c       	mov	r12,-95
80003c68:	80 00       	ld.sh	r0,r0[0x0]
80003c6a:	51 c8       	stdsp	sp[0x70],r8
80003c6c:	00 00       	add	r0,r0
80003c6e:	07 f4       	ld.ub	r4,r3[0x7]

80003c70 <vStatus>:
}

// Shows total amount of characters sent
void vStatus( void *pvParameters )
{
80003c70:	eb cd 40 80 	pushm	r7,lr
80003c74:	1a 97       	mov	r7,sp
80003c76:	20 1d       	sub	sp,4
80003c78:	ef 4c ff fc 	st.w	r7[-4],r12
80003c7c:	c0 48       	rjmp	80003c84 <vStatus+0x14>
				{
					//Successfully given back
				}
			}
		}
	}
80003c7e:	d7 03       	nop
80003c80:	c0 28       	rjmp	80003c84 <vStatus+0x14>
80003c82:	d7 03       	nop
// Shows total amount of characters sent
void vStatus( void *pvParameters )
{
	while (1)
	{
		if(buttonIsPressed(BUTTON0_PIN))
80003c84:	fc 1c 01 00 	movh	r12,0x100
80003c88:	f0 1f 00 28 	mcall	80003d28 <vStatus+0xb8>
80003c8c:	18 98       	mov	r8,r12
80003c8e:	58 08       	cp.w	r8,0
80003c90:	cf 70       	breq	80003c7e <vStatus+0xe>
		{
			statusTaskActive = pdTRUE;	// Show status on display
80003c92:	4a 78       	lddpc	r8,80003d2c <vStatus+0xbc>
80003c94:	30 19       	mov	r9,1
80003c96:	91 09       	st.w	r8[0x0],r9
			onLED(LED2_BIT_VALUE);		// On when status is active
80003c98:	fc 1c 20 00 	movh	r12,0x2000
80003c9c:	f0 1f 00 25 	mcall	80003d30 <vStatus+0xc0>
			if(xSemaphoreTake(xLCDSemaphore, (portTickType)portMAX_DELAY) == pdTRUE)	// Semaphore - Display
80003ca0:	4a 58       	lddpc	r8,80003d34 <vStatus+0xc4>
80003ca2:	70 08       	ld.w	r8,r8[0x0]
80003ca4:	30 09       	mov	r9,0
80003ca6:	3f fa       	mov	r10,-1
80003ca8:	30 0b       	mov	r11,0
80003caa:	10 9c       	mov	r12,r8
80003cac:	f0 1f 00 23 	mcall	80003d38 <vStatus+0xc8>
80003cb0:	18 98       	mov	r8,r12
80003cb2:	58 18       	cp.w	r8,1
80003cb4:	c1 41       	brne	80003cdc <vStatus+0x6c>
			{
				dip204_set_cursor_position(1, 2);	
80003cb6:	30 2b       	mov	r11,2
80003cb8:	30 1c       	mov	r12,1
80003cba:	f0 1f 00 21 	mcall	80003d3c <vStatus+0xcc>
				dip204_printf_string("%d", statusCount); //print value
80003cbe:	4a 18       	lddpc	r8,80003d40 <vStatus+0xd0>
80003cc0:	70 08       	ld.w	r8,r8[0x0]
80003cc2:	1a d8       	st.w	--sp,r8
80003cc4:	4a 0c       	lddpc	r12,80003d44 <vStatus+0xd4>
80003cc6:	f0 1f 00 21 	mcall	80003d48 <vStatus+0xd8>
80003cca:	2f fd       	sub	sp,-4
				if(xSemaphoreGive(xLCDSemaphore) == pdTRUE)
80003ccc:	49 a8       	lddpc	r8,80003d34 <vStatus+0xc4>
80003cce:	70 08       	ld.w	r8,r8[0x0]
80003cd0:	30 09       	mov	r9,0
80003cd2:	30 0a       	mov	r10,0
80003cd4:	30 0b       	mov	r11,0
80003cd6:	10 9c       	mov	r12,r8
80003cd8:	f0 1f 00 1d 	mcall	80003d4c <vStatus+0xdc>
				{
					//Successfully given back
				}
			}
			vTaskDelay(TASK_DELAY_MS(10000));	// Sleep for 10 sec
80003cdc:	e0 6c 27 10 	mov	r12,10000
80003ce0:	f0 1f 00 1c 	mcall	80003d50 <vStatus+0xe0>
			offLED(LED2_BIT_VALUE);				// Off when status is sleeping
80003ce4:	fc 1c 20 00 	movh	r12,0x2000
80003ce8:	f0 1f 00 1b 	mcall	80003d54 <vStatus+0xe4>
			statusTaskActive = pdFALSE;			// Do not show status on display
80003cec:	49 08       	lddpc	r8,80003d2c <vStatus+0xbc>
80003cee:	30 09       	mov	r9,0
80003cf0:	91 09       	st.w	r8[0x0],r9
			if(xSemaphoreTake(xLCDSemaphore, (portTickType)portMAX_DELAY) == pdTRUE)
80003cf2:	49 18       	lddpc	r8,80003d34 <vStatus+0xc4>
80003cf4:	70 08       	ld.w	r8,r8[0x0]
80003cf6:	30 09       	mov	r9,0
80003cf8:	3f fa       	mov	r10,-1
80003cfa:	30 0b       	mov	r11,0
80003cfc:	10 9c       	mov	r12,r8
80003cfe:	f0 1f 00 0f 	mcall	80003d38 <vStatus+0xc8>
80003d02:	18 98       	mov	r8,r12
80003d04:	58 18       	cp.w	r8,1
80003d06:	cb e1       	brne	80003c82 <vStatus+0x12>
			{
				dip204_set_cursor_position(1, 2);	
80003d08:	30 2b       	mov	r11,2
80003d0a:	30 1c       	mov	r12,1
80003d0c:	f0 1f 00 0c 	mcall	80003d3c <vStatus+0xcc>
				dip204_write_string("                    ");	// Clear the status count row
80003d10:	49 2c       	lddpc	r12,80003d58 <vStatus+0xe8>
80003d12:	f0 1f 00 13 	mcall	80003d5c <vStatus+0xec>
				if(xSemaphoreGive(xLCDSemaphore) == pdTRUE)
80003d16:	48 88       	lddpc	r8,80003d34 <vStatus+0xc4>
80003d18:	70 08       	ld.w	r8,r8[0x0]
80003d1a:	30 09       	mov	r9,0
80003d1c:	30 0a       	mov	r10,0
80003d1e:	30 0b       	mov	r11,0
80003d20:	10 9c       	mov	r12,r8
80003d22:	f0 1f 00 0b 	mcall	80003d4c <vStatus+0xdc>
				{
					//Successfully given back
				}
			}
		}
	}
80003d26:	ca fb       	rjmp	80003c84 <vStatus+0x14>
80003d28:	80 00       	ld.sh	r0,r0[0x0]
80003d2a:	36 d8       	mov	r8,109
80003d2c:	00 00       	add	r0,r0
80003d2e:	05 74       	ld.ub	r4,--r2
80003d30:	80 00       	ld.sh	r0,r0[0x0]
80003d32:	39 dc       	mov	r12,-99
80003d34:	00 00       	add	r0,r0
80003d36:	07 dc       	ld.ub	r12,r3[0x5]
80003d38:	80 00       	ld.sh	r0,r0[0x0]
80003d3a:	53 30       	stdsp	sp[0xcc],r0
80003d3c:	80 00       	ld.sh	r0,r0[0x0]
80003d3e:	2c 18       	sub	r8,-63
80003d40:	00 00       	add	r0,r0
80003d42:	05 78       	ld.ub	r8,--r2
80003d44:	80 00       	ld.sh	r0,r0[0x0]
80003d46:	3a 1c       	mov	r12,-95
80003d48:	80 00       	ld.sh	r0,r0[0x0]
80003d4a:	2e 8c       	sub	r12,-24
80003d4c:	80 00       	ld.sh	r0,r0[0x0]
80003d4e:	51 c8       	stdsp	sp[0x70],r8
80003d50:	80 00       	ld.sh	r0,r0[0x0]
80003d52:	59 3c       	cp.w	r12,19
80003d54:	80 00       	ld.sh	r0,r0[0x0]
80003d56:	39 fa       	mov	r10,-97
80003d58:	80 00       	ld.sh	r0,r0[0x0]
80003d5a:	3a 20       	mov	r0,-94
80003d5c:	80 00       	ld.sh	r0,r0[0x0]
80003d5e:	2e 1c       	sub	r12,-31

80003d60 <main>:
}

int main(void)
{
80003d60:	eb cd 40 80 	pushm	r7,lr
80003d64:	1a 97       	mov	r7,sp
	initLED();
80003d66:	f0 1f 00 31 	mcall	80003e28 <main+0xc8>
	init_usart();
80003d6a:	f0 1f 00 31 	mcall	80003e2c <main+0xcc>
	display_init();
80003d6e:	f0 1f 00 31 	mcall	80003e30 <main+0xd0>
	dip204_clear_display();
80003d72:	f0 1f 00 31 	mcall	80003e34 <main+0xd4>
	
	//vSemaphoreCreateBinary(xSemaphore);		// Semaphore - Queue
	vSemaphoreCreateBinary(xLCDSemaphore);	// Semaphore - Display
80003d76:	30 0b       	mov	r11,0
80003d78:	30 1c       	mov	r12,1
80003d7a:	f0 1f 00 30 	mcall	80003e38 <main+0xd8>
80003d7e:	18 99       	mov	r9,r12
80003d80:	4a f8       	lddpc	r8,80003e3c <main+0xdc>
80003d82:	91 09       	st.w	r8[0x0],r9
80003d84:	4a e8       	lddpc	r8,80003e3c <main+0xdc>
80003d86:	70 08       	ld.w	r8,r8[0x0]
80003d88:	58 08       	cp.w	r8,0
80003d8a:	c0 90       	breq	80003d9c <main+0x3c>
80003d8c:	4a c8       	lddpc	r8,80003e3c <main+0xdc>
80003d8e:	70 08       	ld.w	r8,r8[0x0]
80003d90:	30 09       	mov	r9,0
80003d92:	30 0a       	mov	r10,0
80003d94:	30 0b       	mov	r11,0
80003d96:	10 9c       	mov	r12,r8
80003d98:	f0 1f 00 2a 	mcall	80003e40 <main+0xe0>
	xFillCount = xSemaphoreCreateCounting(BUFFER_SIZE, 0);
80003d9c:	30 0b       	mov	r11,0
80003d9e:	30 ac       	mov	r12,10
80003da0:	f0 1f 00 29 	mcall	80003e44 <main+0xe4>
80003da4:	18 99       	mov	r9,r12
80003da6:	4a 98       	lddpc	r8,80003e48 <main+0xe8>
80003da8:	91 09       	st.w	r8[0x0],r9
	xEmptyCount = xSemaphoreCreateCounting(BUFFER_SIZE, BUFFER_SIZE);
80003daa:	30 ab       	mov	r11,10
80003dac:	30 ac       	mov	r12,10
80003dae:	f0 1f 00 26 	mcall	80003e44 <main+0xe4>
80003db2:	18 99       	mov	r9,r12
80003db4:	4a 68       	lddpc	r8,80003e4c <main+0xec>
80003db6:	91 09       	st.w	r8[0x0],r9
	
	xQHandle = xQueueCreate(10, sizeof(char*));		// Queue - 10 spots of char-pointer size
80003db8:	30 4b       	mov	r11,4
80003dba:	30 ac       	mov	r12,10
80003dbc:	f0 1f 00 1f 	mcall	80003e38 <main+0xd8>
80003dc0:	18 99       	mov	r9,r12
80003dc2:	4a 48       	lddpc	r8,80003e50 <main+0xf0>
80003dc4:	91 09       	st.w	r8[0x0],r9
		//ERROR!
	}
	
	
	// Create the task , store the handle .
	xTaskCreate(	vProducer,
80003dc6:	4a 4b       	lddpc	r11,80003e54 <main+0xf4>
80003dc8:	30 08       	mov	r8,0
80003dca:	1a d8       	st.w	--sp,r8
80003dcc:	30 08       	mov	r8,0
80003dce:	1a d8       	st.w	--sp,r8
80003dd0:	4a 28       	lddpc	r8,80003e58 <main+0xf8>
80003dd2:	1a d8       	st.w	--sp,r8
80003dd4:	30 18       	mov	r8,1
80003dd6:	30 09       	mov	r9,0
80003dd8:	e0 6a 01 00 	mov	r10,256
80003ddc:	4a 0c       	lddpc	r12,80003e5c <main+0xfc>
80003dde:	f0 1f 00 21 	mcall	80003e60 <main+0x100>
80003de2:	2f dd       	sub	sp,-12
					"vProducer",
					configMINIMAL_STACK_SIZE,
					NULL,
					1,
					&xHandleProducer);
	xTaskCreate(	vConsumer, "vConsumer", configMINIMAL_STACK_SIZE, NULL, 1, &xHandleConsumer);
80003de4:	4a 0b       	lddpc	r11,80003e64 <main+0x104>
80003de6:	30 08       	mov	r8,0
80003de8:	1a d8       	st.w	--sp,r8
80003dea:	30 08       	mov	r8,0
80003dec:	1a d8       	st.w	--sp,r8
80003dee:	49 f8       	lddpc	r8,80003e68 <main+0x108>
80003df0:	1a d8       	st.w	--sp,r8
80003df2:	30 18       	mov	r8,1
80003df4:	30 09       	mov	r9,0
80003df6:	e0 6a 01 00 	mov	r10,256
80003dfa:	49 dc       	lddpc	r12,80003e6c <main+0x10c>
80003dfc:	f0 1f 00 19 	mcall	80003e60 <main+0x100>
80003e00:	2f dd       	sub	sp,-12
	
	xTaskCreate(	vStatus, "vStatus", configMINIMAL_STACK_SIZE, NULL, 1, &xHandleStatus);
80003e02:	49 cb       	lddpc	r11,80003e70 <main+0x110>
80003e04:	30 08       	mov	r8,0
80003e06:	1a d8       	st.w	--sp,r8
80003e08:	30 08       	mov	r8,0
80003e0a:	1a d8       	st.w	--sp,r8
80003e0c:	49 a8       	lddpc	r8,80003e74 <main+0x114>
80003e0e:	1a d8       	st.w	--sp,r8
80003e10:	30 18       	mov	r8,1
80003e12:	30 09       	mov	r9,0
80003e14:	e0 6a 01 00 	mov	r10,256
80003e18:	49 8c       	lddpc	r12,80003e78 <main+0x118>
80003e1a:	f0 1f 00 12 	mcall	80003e60 <main+0x100>
80003e1e:	2f dd       	sub	sp,-12
	
	vTaskStartScheduler();		// Starts the schedueling
80003e20:	f0 1f 00 17 	mcall	80003e7c <main+0x11c>

	
	for( ;; )
	{
		
	}
80003e24:	c0 08       	rjmp	80003e24 <main+0xc4>
80003e26:	00 00       	add	r0,r0
80003e28:	80 00       	ld.sh	r0,r0[0x0]
80003e2a:	39 60       	mov	r0,-106
80003e2c:	80 00       	ld.sh	r0,r0[0x0]
80003e2e:	3a 58       	mov	r8,-91
80003e30:	80 00       	ld.sh	r0,r0[0x0]
80003e32:	37 38       	mov	r8,115
80003e34:	80 00       	ld.sh	r0,r0[0x0]
80003e36:	2c a0       	sub	r0,-54
80003e38:	80 00       	ld.sh	r0,r0[0x0]
80003e3a:	50 6c       	stdsp	sp[0x18],r12
80003e3c:	00 00       	add	r0,r0
80003e3e:	07 dc       	ld.ub	r12,r3[0x5]
80003e40:	80 00       	ld.sh	r0,r0[0x0]
80003e42:	51 c8       	stdsp	sp[0x70],r8
80003e44:	80 00       	ld.sh	r0,r0[0x0]
80003e46:	51 84       	stdsp	sp[0x60],r4
80003e48:	00 00       	add	r0,r0
80003e4a:	07 e0       	ld.ub	r0,r3[0x6]
80003e4c:	00 00       	add	r0,r0
80003e4e:	07 f4       	ld.ub	r4,r3[0x7]
80003e50:	00 00       	add	r0,r0
80003e52:	07 e4       	ld.ub	r4,r3[0x6]
80003e54:	80 00       	ld.sh	r0,r0[0x0]
80003e56:	3a 38       	mov	r8,-93
80003e58:	00 00       	add	r0,r0
80003e5a:	07 ec       	ld.ub	r12,r3[0x6]
80003e5c:	80 00       	ld.sh	r0,r0[0x0]
80003e5e:	3a c0       	mov	r0,-84
80003e60:	80 00       	ld.sh	r0,r0[0x0]
80003e62:	57 74       	stdsp	sp[0x1dc],r4
80003e64:	80 00       	ld.sh	r0,r0[0x0]
80003e66:	3a 44       	mov	r4,-92
80003e68:	00 00       	add	r0,r0
80003e6a:	07 e8       	ld.ub	r8,r3[0x6]
80003e6c:	80 00       	ld.sh	r0,r0[0x0]
80003e6e:	3b 48       	mov	r8,-76
80003e70:	80 00       	ld.sh	r0,r0[0x0]
80003e72:	3a 50       	mov	r0,-91
80003e74:	00 00       	add	r0,r0
80003e76:	07 f0       	ld.ub	r0,r3[0x7]
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	3c 70       	mov	r0,-57
80003e7c:	80 00       	ld.sh	r0,r0[0x0]
80003e7e:	59 b0       	cp.w	r0,27

80003e80 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80003e80:	eb cd 40 80 	pushm	r7,lr
80003e84:	1a 97       	mov	r7,sp
80003e86:	20 4d       	sub	sp,16
80003e88:	ef 4c ff f4 	st.w	r7[-12],r12
80003e8c:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
80003e90:	30 08       	mov	r8,0
80003e92:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80003e96:	30 08       	mov	r8,0
80003e98:	ef 48 ff fc 	st.w	r7[-4],r8
80003e9c:	c1 c8       	rjmp	80003ed4 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003e9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ea2:	70 19       	ld.w	r9,r8[0x4]
80003ea4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ea8:	70 08       	ld.w	r8,r8[0x0]
80003eaa:	12 9b       	mov	r11,r9
80003eac:	10 9c       	mov	r12,r8
80003eae:	f0 1f 00 10 	mcall	80003eec <gpio_enable_module+0x6c>
80003eb2:	18 98       	mov	r8,r12
80003eb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003eb8:	f3 e8 10 08 	or	r8,r9,r8
80003ebc:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80003ec0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ec4:	2f 88       	sub	r8,-8
80003ec6:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80003eca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ece:	2f f8       	sub	r8,-1
80003ed0:	ef 48 ff fc 	st.w	r7[-4],r8
80003ed4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ed8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003edc:	10 39       	cp.w	r9,r8
80003ede:	ce 03       	brcs	80003e9e <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80003ee0:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003ee4:	10 9c       	mov	r12,r8
80003ee6:	2f cd       	sub	sp,-16
80003ee8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003eec:	80 00       	ld.sh	r0,r0[0x0]
80003eee:	3e f0       	mov	r0,-17

80003ef0 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80003ef0:	eb cd 40 80 	pushm	r7,lr
80003ef4:	1a 97       	mov	r7,sp
80003ef6:	20 3d       	sub	sp,12
80003ef8:	ef 4c ff f8 	st.w	r7[-8],r12
80003efc:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003f00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f04:	a5 98       	lsr	r8,0x5
80003f06:	a9 68       	lsl	r8,0x8
80003f08:	e0 28 f0 00 	sub	r8,61440
80003f0c:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80003f10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003f14:	58 18       	cp.w	r8,1
80003f16:	c1 e0       	breq	80003f52 <gpio_enable_module_pin+0x62>
80003f18:	c0 63       	brcs	80003f24 <gpio_enable_module_pin+0x34>
80003f1a:	58 28       	cp.w	r8,2
80003f1c:	c3 20       	breq	80003f80 <gpio_enable_module_pin+0x90>
80003f1e:	58 38       	cp.w	r8,3
80003f20:	c4 70       	breq	80003fae <gpio_enable_module_pin+0xbe>
80003f22:	c5 d8       	rjmp	80003fdc <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003f24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f28:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f2c:	30 19       	mov	r9,1
80003f2e:	f2 08 09 48 	lsl	r8,r9,r8
80003f32:	10 99       	mov	r9,r8
80003f34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f38:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003f3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f3e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f42:	30 19       	mov	r9,1
80003f44:	f2 08 09 48 	lsl	r8,r9,r8
80003f48:	10 99       	mov	r9,r8
80003f4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f4e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003f50:	c4 88       	rjmp	80003fe0 <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003f52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f5a:	30 19       	mov	r9,1
80003f5c:	f2 08 09 48 	lsl	r8,r9,r8
80003f60:	10 99       	mov	r9,r8
80003f62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f66:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80003f68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f6c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f70:	30 19       	mov	r9,1
80003f72:	f2 08 09 48 	lsl	r8,r9,r8
80003f76:	10 99       	mov	r9,r8
80003f78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f7c:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003f7e:	c3 18       	rjmp	80003fe0 <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003f80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f84:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f88:	30 19       	mov	r9,1
80003f8a:	f2 08 09 48 	lsl	r8,r9,r8
80003f8e:	10 99       	mov	r9,r8
80003f90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f94:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003f96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f9e:	30 19       	mov	r9,1
80003fa0:	f2 08 09 48 	lsl	r8,r9,r8
80003fa4:	10 99       	mov	r9,r8
80003fa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003faa:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003fac:	c1 a8       	rjmp	80003fe0 <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003fae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fb2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003fb6:	30 19       	mov	r9,1
80003fb8:	f2 08 09 48 	lsl	r8,r9,r8
80003fbc:	10 99       	mov	r9,r8
80003fbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fc2:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003fc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fc8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003fcc:	30 19       	mov	r9,1
80003fce:	f2 08 09 48 	lsl	r8,r9,r8
80003fd2:	10 99       	mov	r9,r8
80003fd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fd8:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003fda:	c0 38       	rjmp	80003fe0 <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80003fdc:	30 18       	mov	r8,1
80003fde:	c0 d8       	rjmp	80003ff8 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003fe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fe4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003fe8:	30 19       	mov	r9,1
80003fea:	f2 08 09 48 	lsl	r8,r9,r8
80003fee:	10 99       	mov	r9,r8
80003ff0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ff4:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80003ff6:	30 08       	mov	r8,0
}
80003ff8:	10 9c       	mov	r12,r8
80003ffa:	2f dd       	sub	sp,-12
80003ffc:	e3 cd 80 80 	ldm	sp++,r7,pc

80004000 <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
80004000:	eb cd 40 80 	pushm	r7,lr
80004004:	1a 97       	mov	r7,sp
80004006:	20 2d       	sub	sp,8
80004008:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000400c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004010:	a5 98       	lsr	r8,0x5
80004012:	a9 68       	lsl	r8,0x8
80004014:	e0 28 f0 00 	sub	r8,61440
80004018:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
8000401c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004020:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004024:	30 19       	mov	r9,1
80004026:	f2 08 09 48 	lsl	r8,r9,r8
8000402a:	10 99       	mov	r9,r8
8000402c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004030:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80004034:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004038:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000403c:	30 19       	mov	r9,1
8000403e:	f2 08 09 48 	lsl	r8,r9,r8
80004042:	10 99       	mov	r9,r8
80004044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004048:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000404c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004050:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004054:	30 19       	mov	r9,1
80004056:	f2 08 09 48 	lsl	r8,r9,r8
8000405a:	10 99       	mov	r9,r8
8000405c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004060:	91 19       	st.w	r8[0x4],r9
}
80004062:	2f ed       	sub	sp,-8
80004064:	e3 cd 80 80 	ldm	sp++,r7,pc

80004068 <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
80004068:	eb cd 40 80 	pushm	r7,lr
8000406c:	1a 97       	mov	r7,sp
8000406e:	20 2d       	sub	sp,8
80004070:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004078:	a5 98       	lsr	r8,0x5
8000407a:	a9 68       	lsl	r8,0x8
8000407c:	e0 28 f0 00 	sub	r8,61440
80004080:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004088:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000408c:	30 19       	mov	r9,1
8000408e:	f2 08 09 48 	lsl	r8,r9,r8
80004092:	10 99       	mov	r9,r8
80004094:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004098:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000409c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800040a4:	30 19       	mov	r9,1
800040a6:	f2 08 09 48 	lsl	r8,r9,r8
800040aa:	10 99       	mov	r9,r8
800040ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040b0:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800040b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040b8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800040bc:	30 19       	mov	r9,1
800040be:	f2 08 09 48 	lsl	r8,r9,r8
800040c2:	10 99       	mov	r9,r8
800040c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800040c8:	91 19       	st.w	r8[0x4],r9
}
800040ca:	2f ed       	sub	sp,-8
800040cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800040d0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800040d0:	eb cd 40 80 	pushm	r7,lr
800040d4:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
800040d6:	c0 08       	rjmp	800040d6 <_unhandled_interrupt+0x6>

800040d8 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
800040d8:	eb cd 40 80 	pushm	r7,lr
800040dc:	1a 97       	mov	r7,sp
800040de:	20 3d       	sub	sp,12
800040e0:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800040e4:	fe 78 08 00 	mov	r8,-63488
800040e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800040ec:	f2 09 11 03 	rsub	r9,r9,3
800040f0:	28 09       	sub	r9,-128
800040f2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800040f6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800040fa:	fe 78 08 00 	mov	r8,-63488
800040fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004102:	2c 09       	sub	r9,-64
80004104:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004108:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000410c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004110:	58 08       	cp.w	r8,0
80004112:	c1 30       	breq	80004138 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004114:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004118:	48 b8       	lddpc	r8,80004144 <_get_interrupt_handler+0x6c>
8000411a:	a1 79       	lsl	r9,0x1
8000411c:	2f f9       	sub	r9,-1
8000411e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004122:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004126:	f0 08 12 00 	clz	r8,r8
8000412a:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
8000412e:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004130:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004134:	70 08       	ld.w	r8,r8[0x0]
80004136:	c0 28       	rjmp	8000413a <_get_interrupt_handler+0x62>
80004138:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000413a:	10 9c       	mov	r12,r8
8000413c:	2f dd       	sub	sp,-12
8000413e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004142:	00 00       	add	r0,r0
80004144:	80 00       	ld.sh	r0,r0[0x0]
80004146:	c0 74       	brge	80004154 <INTC_init_evba+0xc>

80004148 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80004148:	eb cd 40 80 	pushm	r7,lr
8000414c:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000414e:	48 38       	lddpc	r8,80004158 <INTC_init_evba+0x10>
80004150:	e3 b8 00 01 	mtsr	0x4,r8
}
80004154:	e3 cd 80 80 	ldm	sp++,r7,pc
80004158:	80 00       	ld.sh	r0,r0[0x0]
8000415a:	be 00       	st.h	pc[0x0],r0

8000415c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000415c:	eb cd 40 80 	pushm	r7,lr
80004160:	1a 97       	mov	r7,sp
80004162:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80004164:	f0 1f 00 1f 	mcall	800041e0 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004168:	30 08       	mov	r8,0
8000416a:	ef 48 ff f8 	st.w	r7[-8],r8
8000416e:	c3 18       	rjmp	800041d0 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004170:	30 08       	mov	r8,0
80004172:	ef 48 ff fc 	st.w	r7[-4],r8
80004176:	c1 48       	rjmp	8000419e <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004178:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000417c:	49 a8       	lddpc	r8,800041e4 <INTC_init_interrupts+0x88>
8000417e:	a1 79       	lsl	r9,0x1
80004180:	2f f9       	sub	r9,-1
80004182:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000418a:	a3 68       	lsl	r8,0x2
8000418c:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004190:	49 69       	lddpc	r9,800041e8 <INTC_init_interrupts+0x8c>
80004192:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004194:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004198:	2f f8       	sub	r8,-1
8000419a:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000419e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800041a2:	49 18       	lddpc	r8,800041e4 <INTC_init_interrupts+0x88>
800041a4:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800041a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041ac:	10 39       	cp.w	r9,r8
800041ae:	fe 9b ff e5 	brhi	80004178 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800041b2:	fe 78 08 00 	mov	r8,-63488
800041b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800041ba:	48 db       	lddpc	r11,800041ec <INTC_init_interrupts+0x90>
800041bc:	48 da       	lddpc	r10,800041f0 <INTC_init_interrupts+0x94>
800041be:	f6 0a 01 0a 	sub	r10,r11,r10
800041c2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800041c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041ca:	2f f8       	sub	r8,-1
800041cc:	ef 48 ff f8 	st.w	r7[-8],r8
800041d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041d4:	59 38       	cp.w	r8,19
800041d6:	fe 98 ff cd 	brls	80004170 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
800041da:	2f ed       	sub	sp,-8
800041dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800041e0:	80 00       	ld.sh	r0,r0[0x0]
800041e2:	41 48       	lddsp	r8,sp[0x50]
800041e4:	80 00       	ld.sh	r0,r0[0x0]
800041e6:	c0 74       	brge	800041f4 <INTC_register_interrupt>
800041e8:	80 00       	ld.sh	r0,r0[0x0]
800041ea:	40 d0       	lddsp	r0,sp[0x34]
800041ec:	80 00       	ld.sh	r0,r0[0x0]
800041ee:	bf 04       	ld.d	r4,pc
800041f0:	80 00       	ld.sh	r0,r0[0x0]
800041f2:	be 00       	st.h	pc[0x0],r0

800041f4 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800041f4:	eb cd 40 80 	pushm	r7,lr
800041f8:	1a 97       	mov	r7,sp
800041fa:	20 4d       	sub	sp,16
800041fc:	ef 4c ff f8 	st.w	r7[-8],r12
80004200:	ef 4b ff f4 	st.w	r7[-12],r11
80004204:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004208:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000420c:	a5 98       	lsr	r8,0x5
8000420e:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004212:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004216:	4a 78       	lddpc	r8,800042b0 <INTC_register_interrupt+0xbc>
80004218:	a1 79       	lsl	r9,0x1
8000421a:	2f f9       	sub	r9,-1
8000421c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004220:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004224:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004228:	a3 68       	lsl	r8,0x2
8000422a:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000422e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004232:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004234:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004238:	58 08       	cp.w	r8,0
8000423a:	c0 c1       	brne	80004252 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000423c:	fe 78 08 00 	mov	r8,-63488
80004240:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004244:	49 cb       	lddpc	r11,800042b4 <INTC_register_interrupt+0xc0>
80004246:	49 da       	lddpc	r10,800042b8 <INTC_register_interrupt+0xc4>
80004248:	f6 0a 01 0a 	sub	r10,r11,r10
8000424c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004250:	c2 d8       	rjmp	800042aa <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80004252:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004256:	58 18       	cp.w	r8,1
80004258:	c0 d1       	brne	80004272 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
8000425a:	fe 78 08 00 	mov	r8,-63488
8000425e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004262:	49 7b       	lddpc	r11,800042bc <INTC_register_interrupt+0xc8>
80004264:	49 5a       	lddpc	r10,800042b8 <INTC_register_interrupt+0xc4>
80004266:	f6 0a 01 0a 	sub	r10,r11,r10
8000426a:	bf aa       	sbr	r10,0x1e
8000426c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004270:	c1 d8       	rjmp	800042aa <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80004272:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004276:	58 28       	cp.w	r8,2
80004278:	c0 d1       	brne	80004292 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000427a:	fe 78 08 00 	mov	r8,-63488
8000427e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004282:	49 0b       	lddpc	r11,800042c0 <INTC_register_interrupt+0xcc>
80004284:	48 da       	lddpc	r10,800042b8 <INTC_register_interrupt+0xc4>
80004286:	f6 0a 01 0a 	sub	r10,r11,r10
8000428a:	bf ba       	sbr	r10,0x1f
8000428c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80004290:	c0 d8       	rjmp	800042aa <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004292:	fe 78 08 00 	mov	r8,-63488
80004296:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000429a:	48 bb       	lddpc	r11,800042c4 <INTC_register_interrupt+0xd0>
8000429c:	48 7a       	lddpc	r10,800042b8 <INTC_register_interrupt+0xc4>
8000429e:	f6 0a 01 0a 	sub	r10,r11,r10
800042a2:	ea 1a c0 00 	orh	r10,0xc000
800042a6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
800042aa:	2f cd       	sub	sp,-16
800042ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800042b0:	80 00       	ld.sh	r0,r0[0x0]
800042b2:	c0 74       	brge	800042c0 <INTC_register_interrupt+0xcc>
800042b4:	80 00       	ld.sh	r0,r0[0x0]
800042b6:	bf 04       	ld.d	r4,pc
800042b8:	80 00       	ld.sh	r0,r0[0x0]
800042ba:	be 00       	st.h	pc[0x0],r0
800042bc:	80 00       	ld.sh	r0,r0[0x0]
800042be:	bf 12       	ld.d	r2,--pc
800042c0:	80 00       	ld.sh	r0,r0[0x0]
800042c2:	bf 20       	st.d	pc++,r0
800042c4:	80 00       	ld.sh	r0,r0[0x0]
800042c6:	bf 2e       	st.d	pc++,lr

800042c8 <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
800042c8:	eb cd 40 80 	pushm	r7,lr
800042cc:	1a 97       	mov	r7,sp
800042ce:	20 3d       	sub	sp,12
800042d0:	ef 4c ff f8 	st.w	r7[-8],r12
800042d4:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800042d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042dc:	70 a8       	ld.w	r8,r8[0x28]
800042de:	30 09       	mov	r9,0
800042e0:	ef 49 ff fc 	st.w	r7[-4],r9
800042e4:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
800042e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042ec:	5c 58       	castu.b	r8
800042ee:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800042f2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800042f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042fa:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800042fe:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80004302:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004306:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000430a:	91 a9       	st.w	r8[0x28],r9
}
8000430c:	2f dd       	sub	sp,-12
8000430e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004312:	d7 03       	nop

80004314 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80004314:	eb cd 40 80 	pushm	r7,lr
80004318:	1a 97       	mov	r7,sp
8000431a:	20 2d       	sub	sp,8
8000431c:	ef 4c ff fc 	st.w	r7[-4],r12
80004320:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80004324:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004328:	ec 58 bb 9f 	cp.w	r8,899999
8000432c:	e0 88 00 1a 	brls	80004360 <pm_enable_osc0_crystal+0x4c>
80004330:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004334:	e0 69 c6 bf 	mov	r9,50879
80004338:	ea 19 00 2d 	orh	r9,0x2d
8000433c:	12 38       	cp.w	r8,r9
8000433e:	e0 88 00 0f 	brls	8000435c <pm_enable_osc0_crystal+0x48>
80004342:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004346:	e0 69 11 ff 	mov	r9,4607
8000434a:	ea 19 00 7a 	orh	r9,0x7a
8000434e:	12 38       	cp.w	r8,r9
80004350:	e0 8b 00 04 	brhi	80004358 <pm_enable_osc0_crystal+0x44>
80004354:	30 68       	mov	r8,6
80004356:	c0 28       	rjmp	8000435a <pm_enable_osc0_crystal+0x46>
80004358:	30 78       	mov	r8,7
8000435a:	c0 28       	rjmp	8000435e <pm_enable_osc0_crystal+0x4a>
8000435c:	30 58       	mov	r8,5
8000435e:	c0 28       	rjmp	80004362 <pm_enable_osc0_crystal+0x4e>
80004360:	30 48       	mov	r8,4
80004362:	10 9b       	mov	r11,r8
80004364:	ee fc ff fc 	ld.w	r12,r7[-4]
80004368:	f0 1f 00 03 	mcall	80004374 <pm_enable_osc0_crystal+0x60>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
8000436c:	2f ed       	sub	sp,-8
8000436e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004372:	00 00       	add	r0,r0
80004374:	80 00       	ld.sh	r0,r0[0x0]
80004376:	42 c8       	lddsp	r8,sp[0xb0]

80004378 <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80004378:	eb cd 40 80 	pushm	r7,lr
8000437c:	1a 97       	mov	r7,sp
8000437e:	20 2d       	sub	sp,8
80004380:	ef 4c ff fc 	st.w	r7[-4],r12
80004384:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
80004388:	ee fb ff f8 	ld.w	r11,r7[-8]
8000438c:	ee fc ff fc 	ld.w	r12,r7[-4]
80004390:	f0 1f 00 05 	mcall	800043a4 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
80004394:	ee fc ff fc 	ld.w	r12,r7[-4]
80004398:	f0 1f 00 04 	mcall	800043a8 <pm_enable_clk0+0x30>
}
8000439c:	2f ed       	sub	sp,-8
8000439e:	e3 cd 80 80 	ldm	sp++,r7,pc
800043a2:	00 00       	add	r0,r0
800043a4:	80 00       	ld.sh	r0,r0[0x0]
800043a6:	43 ac       	lddsp	r12,sp[0xe8]
800043a8:	80 00       	ld.sh	r0,r0[0x0]
800043aa:	44 06       	lddsp	r6,sp[0x100]

800043ac <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
800043ac:	eb cd 40 80 	pushm	r7,lr
800043b0:	1a 97       	mov	r7,sp
800043b2:	20 3d       	sub	sp,12
800043b4:	ef 4c ff f8 	st.w	r7[-8],r12
800043b8:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
800043bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043c0:	70 a8       	ld.w	r8,r8[0x28]
800043c2:	30 09       	mov	r9,0
800043c4:	ef 49 ff fc 	st.w	r7[-4],r9
800043c8:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
800043cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800043d0:	5c 58       	castu.b	r8
800043d2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800043d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800043da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043de:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
800043e2:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
800043e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800043ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043ee:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
800043f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043f4:	70 08       	ld.w	r8,r8[0x0]
800043f6:	10 99       	mov	r9,r8
800043f8:	a3 a9       	sbr	r9,0x2
800043fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043fe:	91 09       	st.w	r8[0x0],r9
}
80004400:	2f dd       	sub	sp,-12
80004402:	e3 cd 80 80 	ldm	sp++,r7,pc

80004406 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
80004406:	eb cd 40 80 	pushm	r7,lr
8000440a:	1a 97       	mov	r7,sp
8000440c:	20 1d       	sub	sp,4
8000440e:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80004412:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004416:	71 58       	ld.w	r8,r8[0x54]
80004418:	e2 18 00 80 	andl	r8,0x80,COH
8000441c:	cf b0       	breq	80004412 <pm_wait_for_clk0_ready+0xc>
}
8000441e:	2f fd       	sub	sp,-4
80004420:	e3 cd 80 80 	ldm	sp++,r7,pc

80004424 <pm_switch_to_clock>:
  return u_avr32_pm_mcctrl.MCCTRL.mcsel;
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
80004424:	eb cd 40 80 	pushm	r7,lr
80004428:	1a 97       	mov	r7,sp
8000442a:	20 3d       	sub	sp,12
8000442c:	ef 4c ff f8 	st.w	r7[-8],r12
80004430:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80004434:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004438:	70 08       	ld.w	r8,r8[0x0]
8000443a:	30 09       	mov	r9,0
8000443c:	ef 49 ff fc 	st.w	r7[-4],r9
80004440:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80004444:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004448:	5c 58       	castu.b	r8
8000444a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000444e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004456:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
8000445a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000445e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004462:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004466:	91 09       	st.w	r8[0x0],r9
}
80004468:	2f dd       	sub	sp,-12
8000446a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000446e:	d7 03       	nop

80004470 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80004470:	eb cd 40 80 	pushm	r7,lr
80004474:	1a 97       	mov	r7,sp
80004476:	20 3d       	sub	sp,12
80004478:	ef 4c ff fc 	st.w	r7[-4],r12
8000447c:	ef 4b ff f8 	st.w	r7[-8],r11
80004480:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80004484:	ee fb ff f8 	ld.w	r11,r7[-8]
80004488:	ee fc ff fc 	ld.w	r12,r7[-4]
8000448c:	f0 1f 00 08 	mcall	800044ac <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80004490:	ee fb ff f4 	ld.w	r11,r7[-12]
80004494:	ee fc ff fc 	ld.w	r12,r7[-4]
80004498:	f0 1f 00 06 	mcall	800044b0 <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
8000449c:	30 1b       	mov	r11,1
8000449e:	ee fc ff fc 	ld.w	r12,r7[-4]
800044a2:	f0 1f 00 05 	mcall	800044b4 <pm_switch_to_osc0+0x44>
}
800044a6:	2f dd       	sub	sp,-12
800044a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800044ac:	80 00       	ld.sh	r0,r0[0x0]
800044ae:	43 14       	lddsp	r4,sp[0xc4]
800044b0:	80 00       	ld.sh	r0,r0[0x0]
800044b2:	43 78       	lddsp	r8,sp[0xdc]
800044b4:	80 00       	ld.sh	r0,r0[0x0]
800044b6:	44 24       	lddsp	r4,sp[0x108]

800044b8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800044b8:	eb cd 40 80 	pushm	r7,lr
800044bc:	1a 97       	mov	r7,sp
800044be:	20 1d       	sub	sp,4
800044c0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800044c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044c8:	e6 18 00 01 	andh	r8,0x1,COH
800044cc:	5f 08       	sreq	r8
800044ce:	5c 58       	castu.b	r8
}
800044d0:	10 9c       	mov	r12,r8
800044d2:	2f fd       	sub	sp,-4
800044d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800044d8 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800044d8:	eb cd 40 80 	pushm	r7,lr
800044dc:	1a 97       	mov	r7,sp
800044de:	20 7d       	sub	sp,28
800044e0:	ef 4c ff ec 	st.w	r7[-20],r12
800044e4:	ef 4b ff e8 	st.w	r7[-24],r11
800044e8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800044ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800044f0:	f0 09 15 04 	lsl	r9,r8,0x4
800044f4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800044f8:	10 39       	cp.w	r9,r8
800044fa:	e0 8b 00 04 	brhi	80004502 <usart_set_async_baudrate+0x2a>
800044fe:	31 08       	mov	r8,16
80004500:	c0 28       	rjmp	80004504 <usart_set_async_baudrate+0x2c>
80004502:	30 88       	mov	r8,8
80004504:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80004508:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000450c:	f0 09 15 03 	lsl	r9,r8,0x3
80004510:	ee fa ff f0 	ld.w	r10,r7[-16]
80004514:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004518:	f4 08 02 48 	mul	r8,r10,r8
8000451c:	a1 98       	lsr	r8,0x1
8000451e:	f2 08 00 08 	add	r8,r9,r8
80004522:	ee fa ff f0 	ld.w	r10,r7[-16]
80004526:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000452a:	f4 09 02 49 	mul	r9,r10,r9
8000452e:	f0 09 0d 08 	divu	r8,r8,r9
80004532:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80004536:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000453a:	a3 98       	lsr	r8,0x3
8000453c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80004540:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004544:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004548:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000454c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004550:	58 08       	cp.w	r8,0
80004552:	c0 70       	breq	80004560 <usart_set_async_baudrate+0x88>
80004554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004558:	e0 48 ff ff 	cp.w	r8,65535
8000455c:	e0 88 00 04 	brls	80004564 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80004560:	30 18       	mov	r8,1
80004562:	c2 08       	rjmp	800045a2 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80004564:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004568:	70 18       	ld.w	r8,r8[0x4]
8000456a:	10 99       	mov	r9,r8
8000456c:	e4 19 ff f7 	andh	r9,0xfff7
80004570:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80004574:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004578:	59 08       	cp.w	r8,16
8000457a:	c0 40       	breq	80004582 <usart_set_async_baudrate+0xaa>
8000457c:	e8 68 00 00 	mov	r8,524288
80004580:	c0 28       	rjmp	80004584 <usart_set_async_baudrate+0xac>
80004582:	30 08       	mov	r8,0
80004584:	10 49       	or	r9,r8
80004586:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000458a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8000458c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004590:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80004594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004598:	10 49       	or	r9,r8
8000459a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000459e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800045a0:	30 08       	mov	r8,0
}
800045a2:	10 9c       	mov	r12,r8
800045a4:	2f 9d       	sub	sp,-28
800045a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800045aa:	d7 03       	nop

800045ac <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800045ac:	eb cd 40 80 	pushm	r7,lr
800045b0:	1a 97       	mov	r7,sp
800045b2:	20 2d       	sub	sp,8
800045b4:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800045b8:	e1 b8 00 00 	mfsr	r8,0x0
800045bc:	10 9c       	mov	r12,r8
800045be:	f0 1f 00 18 	mcall	8000461c <usart_reset+0x70>
800045c2:	18 98       	mov	r8,r12
800045c4:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800045c8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800045cc:	30 08       	mov	r8,0
800045ce:	f0 09 18 00 	cp.b	r9,r8
800045d2:	c0 20       	breq	800045d6 <usart_reset+0x2a>
800045d4:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800045d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045da:	3f f9       	mov	r9,-1
800045dc:	91 39       	st.w	r8[0xc],r9
  usart->csr;
800045de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045e2:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800045e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800045e8:	30 08       	mov	r8,0
800045ea:	f0 09 18 00 	cp.b	r9,r8
800045ee:	c0 20       	breq	800045f2 <usart_reset+0x46>
800045f0:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800045f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045f6:	30 09       	mov	r9,0
800045f8:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
800045fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045fe:	30 09       	mov	r9,0
80004600:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80004602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004606:	30 09       	mov	r9,0
80004608:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8000460a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000460e:	ea 69 61 0c 	mov	r9,680204
80004612:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80004614:	2f ed       	sub	sp,-8
80004616:	e3 cd 80 80 	ldm	sp++,r7,pc
8000461a:	00 00       	add	r0,r0
8000461c:	80 00       	ld.sh	r0,r0[0x0]
8000461e:	44 b8       	lddsp	r8,sp[0x12c]

80004620 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80004620:	eb cd 40 80 	pushm	r7,lr
80004624:	1a 97       	mov	r7,sp
80004626:	20 3d       	sub	sp,12
80004628:	ef 4c ff fc 	st.w	r7[-4],r12
8000462c:	ef 4b ff f8 	st.w	r7[-8],r11
80004630:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80004634:	ee fc ff fc 	ld.w	r12,r7[-4]
80004638:	f0 1f 00 54 	mcall	80004788 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
8000463c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004640:	58 08       	cp.w	r8,0
80004642:	c3 90       	breq	800046b4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80004644:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004648:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000464a:	30 48       	mov	r8,4
8000464c:	f0 09 18 00 	cp.b	r9,r8
80004650:	e0 88 00 32 	brls	800046b4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80004654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004658:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000465a:	30 98       	mov	r8,9
8000465c:	f0 09 18 00 	cp.b	r9,r8
80004660:	e0 8b 00 2a 	brhi	800046b4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80004664:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004668:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000466a:	30 78       	mov	r8,7
8000466c:	f0 09 18 00 	cp.b	r9,r8
80004670:	e0 8b 00 22 	brhi	800046b4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80004674:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004678:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000467a:	e0 68 01 01 	mov	r8,257
8000467e:	f0 09 19 00 	cp.h	r9,r8
80004682:	e0 8b 00 19 	brhi	800046b4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80004686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000468a:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000468e:	30 38       	mov	r8,3
80004690:	f0 09 18 00 	cp.b	r9,r8
80004694:	e0 8b 00 10 	brhi	800046b4 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80004698:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000469c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046a0:	70 08       	ld.w	r8,r8[0x0]
800046a2:	12 9a       	mov	r10,r9
800046a4:	10 9b       	mov	r11,r8
800046a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800046aa:	f0 1f 00 39 	mcall	8000478c <usart_init_rs232+0x16c>
800046ae:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800046b0:	58 18       	cp.w	r8,1
800046b2:	c0 31       	brne	800046b8 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
800046b4:	30 18       	mov	r8,1
800046b6:	c6 48       	rjmp	8000477e <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
800046b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046bc:	11 c9       	ld.ub	r9,r8[0x4]
800046be:	30 98       	mov	r8,9
800046c0:	f0 09 18 00 	cp.b	r9,r8
800046c4:	c0 a1       	brne	800046d8 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800046c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ca:	70 18       	ld.w	r8,r8[0x4]
800046cc:	10 99       	mov	r9,r8
800046ce:	b1 b9       	sbr	r9,0x11
800046d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d4:	91 19       	st.w	r8[0x4],r9
800046d6:	c0 d8       	rjmp	800046f0 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800046d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046dc:	70 19       	ld.w	r9,r8[0x4]
800046de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046e2:	11 c8       	ld.ub	r8,r8[0x4]
800046e4:	20 58       	sub	r8,5
800046e6:	a7 68       	lsl	r8,0x6
800046e8:	10 49       	or	r9,r8
800046ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046ee:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800046f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046f4:	70 19       	ld.w	r9,r8[0x4]
800046f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046fa:	11 d8       	ld.ub	r8,r8[0x5]
800046fc:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80004700:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004704:	f1 38 00 08 	ld.ub	r8,r8[8]
80004708:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000470a:	f5 e8 10 08 	or	r8,r10,r8
8000470e:	10 49       	or	r9,r8
80004710:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004714:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80004716:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000471a:	90 39       	ld.sh	r9,r8[0x6]
8000471c:	30 28       	mov	r8,2
8000471e:	f0 09 19 00 	cp.h	r9,r8
80004722:	e0 88 00 14 	brls	8000474a <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80004726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000472a:	70 18       	ld.w	r8,r8[0x4]
8000472c:	10 99       	mov	r9,r8
8000472e:	ad b9       	sbr	r9,0xd
80004730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004734:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80004736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000473a:	90 38       	ld.sh	r8,r8[0x6]
8000473c:	5c 78       	castu.h	r8
8000473e:	20 28       	sub	r8,2
80004740:	10 99       	mov	r9,r8
80004742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004746:	91 a9       	st.w	r8[0x28],r9
80004748:	c0 d8       	rjmp	80004762 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000474a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000474e:	70 19       	ld.w	r9,r8[0x4]
80004750:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004754:	90 38       	ld.sh	r8,r8[0x6]
80004756:	5c 78       	castu.h	r8
80004758:	ad 68       	lsl	r8,0xc
8000475a:	10 49       	or	r9,r8
8000475c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004760:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80004762:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004766:	70 18       	ld.w	r8,r8[0x4]
80004768:	10 99       	mov	r9,r8
8000476a:	e0 19 ff f0 	andl	r9,0xfff0
8000476e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004772:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80004774:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004778:	35 09       	mov	r9,80
8000477a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8000477c:	30 08       	mov	r8,0
}
8000477e:	10 9c       	mov	r12,r8
80004780:	2f dd       	sub	sp,-12
80004782:	e3 cd 80 80 	ldm	sp++,r7,pc
80004786:	00 00       	add	r0,r0
80004788:	80 00       	ld.sh	r0,r0[0x0]
8000478a:	45 ac       	lddsp	r12,sp[0x168]
8000478c:	80 00       	ld.sh	r0,r0[0x0]
8000478e:	44 d8       	lddsp	r8,sp[0x134]

80004790 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80004790:	eb cd 40 80 	pushm	r7,lr
80004794:	1a 97       	mov	r7,sp
80004796:	20 3d       	sub	sp,12
80004798:	ef 4c ff f8 	st.w	r7[-8],r12
8000479c:	ef 4b ff f4 	st.w	r7[-12],r11
800047a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047a4:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800047a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047ac:	70 58       	ld.w	r8,r8[0x14]
800047ae:	e2 18 00 02 	andl	r8,0x2,COH
800047b2:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
800047b4:	58 08       	cp.w	r8,0
800047b6:	c0 a0       	breq	800047ca <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800047b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800047bc:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800047c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047c4:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
800047c6:	30 08       	mov	r8,0
800047c8:	c0 28       	rjmp	800047cc <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
800047ca:	30 28       	mov	r8,2
}
800047cc:	10 9c       	mov	r12,r8
800047ce:	2f dd       	sub	sp,-12
800047d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800047d4 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800047d4:	eb cd 40 80 	pushm	r7,lr
800047d8:	1a 97       	mov	r7,sp
800047da:	20 3d       	sub	sp,12
800047dc:	ef 4c ff f8 	st.w	r7[-8],r12
800047e0:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
800047e4:	e0 68 27 10 	mov	r8,10000
800047e8:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
800047ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800047f0:	58 08       	cp.w	r8,0
800047f2:	5f 08       	sreq	r8
800047f4:	5c 58       	castu.b	r8
800047f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800047fa:	20 19       	sub	r9,1
800047fc:	ef 49 ff fc 	st.w	r7[-4],r9
80004800:	58 08       	cp.w	r8,0
80004802:	c0 30       	breq	80004808 <usart_putchar+0x34>
80004804:	3f f8       	mov	r8,-1
80004806:	c0 b8       	rjmp	8000481c <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80004808:	ee fb ff f4 	ld.w	r11,r7[-12]
8000480c:	ee fc ff f8 	ld.w	r12,r7[-8]
80004810:	f0 1f 00 05 	mcall	80004824 <usart_putchar+0x50>
80004814:	18 98       	mov	r8,r12
80004816:	58 08       	cp.w	r8,0
80004818:	ce a1       	brne	800047ec <usart_putchar+0x18>

  return USART_SUCCESS;
8000481a:	30 08       	mov	r8,0
}
8000481c:	10 9c       	mov	r12,r8
8000481e:	2f dd       	sub	sp,-12
80004820:	e3 cd 80 80 	ldm	sp++,r7,pc
80004824:	80 00       	ld.sh	r0,r0[0x0]
80004826:	47 90       	lddsp	r0,sp[0x1e4]

80004828 <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
80004828:	eb cd 40 80 	pushm	r7,lr
8000482c:	1a 97       	mov	r7,sp
8000482e:	20 3d       	sub	sp,12
80004830:	ef 4c ff f8 	st.w	r7[-8],r12
80004834:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80004838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000483c:	70 58       	ld.w	r8,r8[0x14]
8000483e:	e2 18 00 e0 	andl	r8,0xe0,COH
80004842:	c0 30       	breq	80004848 <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
80004844:	30 48       	mov	r8,4
80004846:	c1 68       	rjmp	80004872 <usart_read_char+0x4a>
80004848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000484c:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80004850:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004854:	70 58       	ld.w	r8,r8[0x14]
80004856:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8000485a:	c0 b0       	breq	80004870 <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8000485c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004860:	70 68       	ld.w	r8,r8[0x18]
80004862:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80004866:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000486a:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8000486c:	30 08       	mov	r8,0
8000486e:	c0 28       	rjmp	80004872 <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
80004870:	30 38       	mov	r8,3
}
80004872:	10 9c       	mov	r12,r8
80004874:	2f dd       	sub	sp,-12
80004876:	e3 cd 80 80 	ldm	sp++,r7,pc
8000487a:	d7 03       	nop

8000487c <usart_getchar>:


int usart_getchar(volatile avr32_usart_t *usart)
{
8000487c:	eb cd 40 80 	pushm	r7,lr
80004880:	1a 97       	mov	r7,sp
80004882:	20 3d       	sub	sp,12
80004884:	ef 4c ff f4 	st.w	r7[-12],r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
80004888:	ee c8 00 08 	sub	r8,r7,8
8000488c:	10 9b       	mov	r11,r8
8000488e:	ee fc ff f4 	ld.w	r12,r7[-12]
80004892:	f0 1f 00 0b 	mcall	800048bc <usart_getchar+0x40>
80004896:	18 98       	mov	r8,r12
80004898:	ef 48 ff fc 	st.w	r7[-4],r8
8000489c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048a0:	58 38       	cp.w	r8,3
800048a2:	cf 30       	breq	80004888 <usart_getchar+0xc>

  if (ret == USART_RX_ERROR)
800048a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048a8:	58 48       	cp.w	r8,4
800048aa:	c0 31       	brne	800048b0 <usart_getchar+0x34>
    return USART_FAILURE;
800048ac:	3f f8       	mov	r8,-1
800048ae:	c0 38       	rjmp	800048b4 <usart_getchar+0x38>

  return c;
800048b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800048b4:	10 9c       	mov	r12,r8
800048b6:	2f dd       	sub	sp,-12
800048b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800048bc:	80 00       	ld.sh	r0,r0[0x0]
800048be:	48 28       	lddpc	r8,800048c4 <vListInitialise+0x4>

800048c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
800048c0:	eb cd 40 80 	pushm	r7,lr
800048c4:	1a 97       	mov	r7,sp
800048c6:	20 1d       	sub	sp,4
800048c8:	ef 4c ff fc 	st.w	r7[-4],r12
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
800048cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048d0:	2f 88       	sub	r8,-8
800048d2:	10 99       	mov	r9,r8
800048d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048d8:	91 19       	st.w	r8[0x4],r9

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
800048da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048de:	3f f9       	mov	r9,-1
800048e0:	91 29       	st.w	r8[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
800048e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048e6:	2f 88       	sub	r8,-8
800048e8:	10 99       	mov	r9,r8
800048ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048ee:	91 39       	st.w	r8[0xc],r9
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
800048f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048f4:	2f 88       	sub	r8,-8
800048f6:	10 99       	mov	r9,r8
800048f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800048fc:	91 49       	st.w	r8[0x10],r9

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
800048fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004902:	30 09       	mov	r9,0
80004904:	91 09       	st.w	r8[0x0],r9
}
80004906:	2f fd       	sub	sp,-4
80004908:	e3 cd 80 80 	ldm	sp++,r7,pc

8000490c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
8000490c:	eb cd 40 80 	pushm	r7,lr
80004910:	1a 97       	mov	r7,sp
80004912:	20 1d       	sub	sp,4
80004914:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000491c:	30 09       	mov	r9,0
8000491e:	91 49       	st.w	r8[0x10],r9
}
80004920:	2f fd       	sub	sp,-4
80004922:	e3 cd 80 80 	ldm	sp++,r7,pc

80004926 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
80004926:	eb cd 40 80 	pushm	r7,lr
8000492a:	1a 97       	mov	r7,sp
8000492c:	20 3d       	sub	sp,12
8000492e:	ef 4c ff f8 	st.w	r7[-8],r12
80004932:	ef 4b ff f4 	st.w	r7[-12],r11

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
80004936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000493a:	70 18       	ld.w	r8,r8[0x4]
8000493c:	ef 48 ff fc 	st.w	r7[-4],r8

	pxNewListItem->pxNext = pxIndex->pxNext;
80004940:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004944:	70 19       	ld.w	r9,r8[0x4]
80004946:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000494a:	91 19       	st.w	r8[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
8000494c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004950:	70 19       	ld.w	r9,r8[0x4]
80004952:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004956:	91 29       	st.w	r8[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004958:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000495c:	70 18       	ld.w	r8,r8[0x4]
8000495e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004962:	91 29       	st.w	r8[0x8],r9
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
80004964:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004968:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000496c:	91 19       	st.w	r8[0x4],r9
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
8000496e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004972:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004976:	91 19       	st.w	r8[0x4],r9

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004978:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000497c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004980:	91 49       	st.w	r8[0x10],r9

	( pxList->uxNumberOfItems )++;
80004982:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004986:	70 08       	ld.w	r8,r8[0x0]
80004988:	f0 c9 ff ff 	sub	r9,r8,-1
8000498c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004990:	91 09       	st.w	r8[0x0],r9
}
80004992:	2f dd       	sub	sp,-12
80004994:	e3 cd 80 80 	ldm	sp++,r7,pc

80004998 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
80004998:	eb cd 40 80 	pushm	r7,lr
8000499c:	1a 97       	mov	r7,sp
8000499e:	20 4d       	sub	sp,16
800049a0:	ef 4c ff f4 	st.w	r7[-12],r12
800049a4:	ef 4b ff f0 	st.w	r7[-16],r11
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
800049a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049ac:	70 08       	ld.w	r8,r8[0x0]
800049ae:	ef 48 ff fc 	st.w	r7[-4],r8
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
800049b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049b6:	5b f8       	cp.w	r8,-1
800049b8:	c0 71       	brne	800049c6 <vListInsert+0x2e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
800049ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049be:	70 48       	ld.w	r8,r8[0x10]
800049c0:	ef 48 ff f8 	st.w	r7[-8],r8
800049c4:	c1 58       	rjmp	800049ee <vListInsert+0x56>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
800049c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049ca:	2f 88       	sub	r8,-8
800049cc:	ef 48 ff f8 	st.w	r7[-8],r8
800049d0:	c0 68       	rjmp	800049dc <vListInsert+0x44>
800049d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049d6:	70 18       	ld.w	r8,r8[0x4]
800049d8:	ef 48 ff f8 	st.w	r7[-8],r8
800049dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049e0:	70 18       	ld.w	r8,r8[0x4]
800049e2:	70 09       	ld.w	r9,r8[0x0]
800049e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049e8:	10 39       	cp.w	r9,r8
800049ea:	fe 98 ff f4 	brls	800049d2 <vListInsert+0x3a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
800049ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049f2:	70 19       	ld.w	r9,r8[0x4]
800049f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049f8:	91 19       	st.w	r8[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
800049fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049fe:	70 18       	ld.w	r8,r8[0x4]
80004a00:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004a04:	91 29       	st.w	r8[0x8],r9
	pxNewListItem->pxPrevious = pxIterator;
80004a06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004a0e:	91 29       	st.w	r8[0x8],r9
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
80004a10:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004a14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a18:	91 19       	st.w	r8[0x4],r9

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004a1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004a22:	91 49       	st.w	r8[0x10],r9

	( pxList->uxNumberOfItems )++;
80004a24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a28:	70 08       	ld.w	r8,r8[0x0]
80004a2a:	f0 c9 ff ff 	sub	r9,r8,-1
80004a2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a32:	91 09       	st.w	r8[0x0],r9
}
80004a34:	2f cd       	sub	sp,-16
80004a36:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a3a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
80004a3a:	eb cd 40 80 	pushm	r7,lr
80004a3e:	1a 97       	mov	r7,sp
80004a40:	20 2d       	sub	sp,8
80004a42:	ef 4c ff f8 	st.w	r7[-8],r12
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80004a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a4a:	70 18       	ld.w	r8,r8[0x4]
80004a4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004a50:	72 29       	ld.w	r9,r9[0x8]
80004a52:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80004a54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a58:	70 28       	ld.w	r8,r8[0x8]
80004a5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004a5e:	72 19       	ld.w	r9,r9[0x4]
80004a60:	91 19       	st.w	r8[0x4],r9

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
80004a62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a66:	70 48       	ld.w	r8,r8[0x10]
80004a68:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80004a6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a70:	70 19       	ld.w	r9,r8[0x4]
80004a72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a76:	10 39       	cp.w	r9,r8
80004a78:	c0 71       	brne	80004a86 <vListRemove+0x4c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80004a7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a7e:	70 29       	ld.w	r9,r8[0x8]
80004a80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a84:	91 19       	st.w	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
80004a86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a8a:	30 09       	mov	r9,0
80004a8c:	91 49       	st.w	r8[0x10],r9
	( pxList->uxNumberOfItems )--;
80004a8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a92:	70 08       	ld.w	r8,r8[0x0]
80004a94:	f0 c9 00 01 	sub	r9,r8,1
80004a98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a9c:	91 09       	st.w	r8[0x0],r9
}
80004a9e:	2f ed       	sub	sp,-8
80004aa0:	e3 cd 80 80 	ldm	sp++,r7,pc

80004aa4 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
80004aa4:	eb cd 40 80 	pushm	r7,lr
80004aa8:	1a 97       	mov	r7,sp
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
80004aaa:	48 e8       	lddpc	r8,80004ae0 <_init_startup+0x3c>
80004aac:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
80004ab0:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
80004ab2:	f0 1f 00 0d 	mcall	80004ae4 <_init_startup+0x40>
			.channelmode = USART_NORMAL_CHMODE
		};

		/* Initialize the USART used for the debug trace with the configured parameters. */
		extern volatile avr32_usart_t *volatile stdio_usart_base;
		stdio_usart_base = configDBG_USART;
80004ab6:	48 d8       	lddpc	r8,80004ae8 <_init_startup+0x44>
80004ab8:	fe 79 18 00 	mov	r9,-59392
80004abc:	91 09       	st.w	r8[0x0],r9
		gpio_enable_module( DBG_USART_GPIO_MAP,
80004abe:	30 2b       	mov	r11,2
80004ac0:	48 bc       	lddpc	r12,80004aec <_init_startup+0x48>
80004ac2:	f0 1f 00 0c 	mcall	80004af0 <_init_startup+0x4c>
		                    sizeof( DBG_USART_GPIO_MAP ) / sizeof( DBG_USART_GPIO_MAP[0] ) );
		usart_init_rs232(configDBG_USART, &DBG_USART_OPTIONS, configPBA_CLOCK_HZ);
80004ac6:	e0 6a 1b 00 	mov	r10,6912
80004aca:	ea 1a 00 b7 	orh	r10,0xb7
80004ace:	48 ab       	lddpc	r11,80004af4 <_init_startup+0x50>
80004ad0:	fe 7c 18 00 	mov	r12,-59392
80004ad4:	f0 1f 00 09 	mcall	80004af8 <_init_startup+0x54>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
80004ad8:	30 18       	mov	r8,1
}
80004ada:	10 9c       	mov	r12,r8
80004adc:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ae0:	80 00       	ld.sh	r0,r0[0x0]
80004ae2:	be 00       	st.h	pc[0x0],r0
80004ae4:	80 00       	ld.sh	r0,r0[0x0]
80004ae6:	41 5c       	lddsp	r12,sp[0x54]
80004ae8:	00 00       	add	r0,r0
80004aea:	07 f8       	ld.ub	r8,r3[0x7]
80004aec:	80 00       	ld.sh	r0,r0[0x0]
80004aee:	c1 14       	brge	80004b10 <__malloc_lock+0x14>
80004af0:	80 00       	ld.sh	r0,r0[0x0]
80004af2:	3e 80       	mov	r0,-24
80004af4:	80 00       	ld.sh	r0,r0[0x0]
80004af6:	c1 24       	brge	80004b1a <__malloc_unlock+0x2>
80004af8:	80 00       	ld.sh	r0,r0[0x0]
80004afa:	46 20       	lddsp	r0,sp[0x188]

80004afc <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
80004afc:	eb cd 40 80 	pushm	r7,lr
80004b00:	1a 97       	mov	r7,sp
80004b02:	20 1d       	sub	sp,4
80004b04:	ef 4c ff fc 	st.w	r7[-4],r12
	vTaskSuspendAll();
80004b08:	f0 1f 00 03 	mcall	80004b14 <__malloc_lock+0x18>
}
80004b0c:	2f fd       	sub	sp,-4
80004b0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b12:	00 00       	add	r0,r0
80004b14:	80 00       	ld.sh	r0,r0[0x0]
80004b16:	5a 14       	cp.w	r4,-31

80004b18 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
80004b18:	eb cd 40 80 	pushm	r7,lr
80004b1c:	1a 97       	mov	r7,sp
80004b1e:	20 1d       	sub	sp,4
80004b20:	ef 4c ff fc 	st.w	r7[-4],r12
	xTaskResumeAll();
80004b24:	f0 1f 00 03 	mcall	80004b30 <__malloc_unlock+0x18>
}
80004b28:	2f fd       	sub	sp,-4
80004b2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b2e:	00 00       	add	r0,r0
80004b30:	80 00       	ld.sh	r0,r0[0x0]
80004b32:	5a 30       	cp.w	r0,-29

80004b34 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
80004b34:	eb cd 00 ff 	pushm	r0-r7
80004b38:	e0 68 00 20 	mov	r8,32
80004b3c:	ea 18 00 00 	orh	r8,0x0
80004b40:	70 00       	ld.w	r0,r8[0x0]
80004b42:	1a d0       	st.w	--sp,r0
80004b44:	7a 90       	ld.w	r0,sp[0x24]
80004b46:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004b4a:	58 10       	cp.w	r0,1
80004b4c:	e0 8b 00 08 	brhi	80004b5c <LABEL_INT_SKIP_SAVE_CONTEXT_234>
80004b50:	e0 68 06 68 	mov	r8,1640
80004b54:	ea 18 00 00 	orh	r8,0x0
80004b58:	70 00       	ld.w	r0,r8[0x0]
80004b5a:	81 0d       	st.w	r0[0x0],sp

80004b5c <LABEL_INT_SKIP_SAVE_CONTEXT_234>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
80004b5c:	f0 1f 00 12 	mcall	80004ba4 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
80004b60:	f0 1f 00 12 	mcall	80004ba8 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x18>
		vTaskIncrementTick();
80004b64:	f0 1f 00 12 	mcall	80004bac <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x1c>
	portEXIT_CRITICAL();
80004b68:	f0 1f 00 12 	mcall	80004bb0 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
80004b6c:	7a 90       	ld.w	r0,sp[0x24]
80004b6e:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004b72:	58 10       	cp.w	r0,1
80004b74:	e0 8b 00 0e 	brhi	80004b90 <LABEL_INT_SKIP_RESTORE_CONTEXT_251>
80004b78:	f0 1f 00 0c 	mcall	80004ba8 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x18>
80004b7c:	f0 1f 00 0e 	mcall	80004bb4 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x24>
80004b80:	f0 1f 00 0c 	mcall	80004bb0 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x20>
80004b84:	e0 68 06 68 	mov	r8,1640
80004b88:	ea 18 00 00 	orh	r8,0x0
80004b8c:	70 00       	ld.w	r0,r8[0x0]
80004b8e:	60 0d       	ld.w	sp,r0[0x0]

80004b90 <LABEL_INT_SKIP_RESTORE_CONTEXT_251>:
80004b90:	1b 00       	ld.w	r0,sp++
80004b92:	e0 68 00 20 	mov	r8,32
80004b96:	ea 18 00 00 	orh	r8,0x0
80004b9a:	91 00       	st.w	r8[0x0],r0
80004b9c:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004ba0:	d6 03       	rete
80004ba2:	00 00       	add	r0,r0
80004ba4:	80 00       	ld.sh	r0,r0[0x0]
80004ba6:	4e a0       	lddpc	r0,80004d4c <pxPortInitialiseStack+0xb4>
80004ba8:	80 00       	ld.sh	r0,r0[0x0]
80004baa:	4c 50       	lddpc	r0,80004cbc <pxPortInitialiseStack+0x24>
80004bac:	80 00       	ld.sh	r0,r0[0x0]
80004bae:	5b 58       	cp.w	r8,-11
80004bb0:	80 00       	ld.sh	r0,r0[0x0]
80004bb2:	4c 6c       	lddpc	r12,80004cc8 <pxPortInitialiseStack+0x30>
80004bb4:	80 00       	ld.sh	r0,r0[0x0]
80004bb6:	5c b8       	swap.b	r8

80004bb8 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
80004bb8:	20 6d       	sub	sp,24
80004bba:	eb cd 00 ff 	pushm	r0-r7
80004bbe:	fa c7 ff c0 	sub	r7,sp,-64
80004bc2:	ee f0 ff f8 	ld.w	r0,r7[-8]
80004bc6:	ef 40 ff e0 	st.w	r7[-32],r0
80004bca:	ee f0 ff fc 	ld.w	r0,r7[-4]
80004bce:	ef 40 ff e4 	st.w	r7[-28],r0
80004bd2:	eb c7 5f 00 	stm	--r7,r8-r12,lr
80004bd6:	e0 68 00 20 	mov	r8,32
80004bda:	ea 18 00 00 	orh	r8,0x0
80004bde:	70 00       	ld.w	r0,r8[0x0]
80004be0:	1a d0       	st.w	--sp,r0
80004be2:	f0 1f 00 1a 	mcall	80004c48 <LABEL_RET_SCALL_260+0x14>
80004be6:	e0 68 06 68 	mov	r8,1640
80004bea:	ea 18 00 00 	orh	r8,0x0
80004bee:	70 00       	ld.w	r0,r8[0x0]
80004bf0:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
80004bf2:	f0 1f 00 17 	mcall	80004c4c <LABEL_RET_SCALL_260+0x18>
	portRESTORE_CONTEXT_SCALL();
80004bf6:	e0 68 06 68 	mov	r8,1640
80004bfa:	ea 18 00 00 	orh	r8,0x0
80004bfe:	70 00       	ld.w	r0,r8[0x0]
80004c00:	60 0d       	ld.w	sp,r0[0x0]
80004c02:	1b 00       	ld.w	r0,sp++
80004c04:	e0 68 00 20 	mov	r8,32
80004c08:	ea 18 00 00 	orh	r8,0x0
80004c0c:	91 00       	st.w	r8[0x0],r0
80004c0e:	fa c7 ff d8 	sub	r7,sp,-40
80004c12:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
80004c16:	ee f0 ff e0 	ld.w	r0,r7[-32]
80004c1a:	e0 61 00 20 	mov	r1,32
80004c1e:	ea 11 00 00 	orh	r1,0x0
80004c22:	62 02       	ld.w	r2,r1[0x0]
80004c24:	58 02       	cp.w	r2,0
80004c26:	c0 70       	breq	80004c34 <LABEL_RET_SCALL_260>
80004c28:	e4 c2 00 01 	sub	r2,r2,1
80004c2c:	83 02       	st.w	r1[0x0],r2
80004c2e:	58 02       	cp.w	r2,0
80004c30:	c0 21       	brne	80004c34 <LABEL_RET_SCALL_260>
80004c32:	b1 c0       	cbr	r0,0x10

80004c34 <LABEL_RET_SCALL_260>:
80004c34:	ef 40 ff f8 	st.w	r7[-8],r0
80004c38:	ee f0 ff e4 	ld.w	r0,r7[-28]
80004c3c:	ef 40 ff fc 	st.w	r7[-4],r0
80004c40:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004c44:	2f ad       	sub	sp,-24
80004c46:	d6 13       	rets
80004c48:	80 00       	ld.sh	r0,r0[0x0]
80004c4a:	4c 50       	lddpc	r0,80004d5c <pxPortInitialiseStack+0xc4>
80004c4c:	80 00       	ld.sh	r0,r0[0x0]
80004c4e:	5c b8       	swap.b	r8

80004c50 <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
80004c50:	eb cd 40 80 	pushm	r7,lr
80004c54:	1a 97       	mov	r7,sp
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004c56:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
80004c58:	48 48       	lddpc	r8,80004c68 <vPortEnterCritical+0x18>
80004c5a:	70 08       	ld.w	r8,r8[0x0]
80004c5c:	f0 c9 ff ff 	sub	r9,r8,-1
80004c60:	48 28       	lddpc	r8,80004c68 <vPortEnterCritical+0x18>
80004c62:	91 09       	st.w	r8[0x0],r9
}
80004c64:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c68:	00 00       	add	r0,r0
80004c6a:	00 20       	rsub	r0,r0

80004c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
80004c6c:	eb cd 40 80 	pushm	r7,lr
80004c70:	1a 97       	mov	r7,sp
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
80004c72:	48 98       	lddpc	r8,80004c94 <vPortExitCritical+0x28>
80004c74:	70 08       	ld.w	r8,r8[0x0]
80004c76:	58 08       	cp.w	r8,0
80004c78:	c0 c0       	breq	80004c90 <vPortExitCritical+0x24>
	{
		ulCriticalNesting--;
80004c7a:	48 78       	lddpc	r8,80004c94 <vPortExitCritical+0x28>
80004c7c:	70 08       	ld.w	r8,r8[0x0]
80004c7e:	f0 c9 00 01 	sub	r9,r8,1
80004c82:	48 58       	lddpc	r8,80004c94 <vPortExitCritical+0x28>
80004c84:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
80004c86:	48 48       	lddpc	r8,80004c94 <vPortExitCritical+0x28>
80004c88:	70 08       	ld.w	r8,r8[0x0]
80004c8a:	58 08       	cp.w	r8,0
80004c8c:	c0 21       	brne	80004c90 <vPortExitCritical+0x24>
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
80004c8e:	d5 03       	csrf	0x10
		}
	}
}
80004c90:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c94:	00 00       	add	r0,r0
80004c96:	00 20       	rsub	r0,r0

80004c98 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
80004c98:	eb cd 40 80 	pushm	r7,lr
80004c9c:	1a 97       	mov	r7,sp
80004c9e:	20 3d       	sub	sp,12
80004ca0:	ef 4c ff fc 	st.w	r7[-4],r12
80004ca4:	ef 4b ff f8 	st.w	r7[-8],r11
80004ca8:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
80004cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cb0:	20 48       	sub	r8,4
80004cb2:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
80004cb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cba:	e0 69 08 08 	mov	r9,2056
80004cbe:	ea 19 08 08 	orh	r9,0x808
80004cc2:	91 09       	st.w	r8[0x0],r9
80004cc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cc8:	20 48       	sub	r8,4
80004cca:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
80004cce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cd2:	e0 69 09 09 	mov	r9,2313
80004cd6:	ea 19 09 09 	orh	r9,0x909
80004cda:	91 09       	st.w	r8[0x0],r9
80004cdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ce0:	20 48       	sub	r8,4
80004ce2:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
80004ce6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cea:	e0 69 0a 0a 	mov	r9,2570
80004cee:	ea 19 0a 0a 	orh	r9,0xa0a
80004cf2:	91 09       	st.w	r8[0x0],r9
80004cf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cf8:	20 48       	sub	r8,4
80004cfa:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
80004cfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d02:	e0 69 0b 0b 	mov	r9,2827
80004d06:	ea 19 0b 0b 	orh	r9,0xb0b
80004d0a:	91 09       	st.w	r8[0x0],r9
80004d0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d10:	20 48       	sub	r8,4
80004d12:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
80004d16:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004d1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d1e:	91 09       	st.w	r8[0x0],r9
80004d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d24:	20 48       	sub	r8,4
80004d26:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
80004d2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d2e:	e0 69 be ef 	mov	r9,48879
80004d32:	ea 19 de ad 	orh	r9,0xdead
80004d36:	91 09       	st.w	r8[0x0],r9
80004d38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d3c:	20 48       	sub	r8,4
80004d3e:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
80004d42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004d46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d4a:	91 09       	st.w	r8[0x0],r9
80004d4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d50:	20 48       	sub	r8,4
80004d52:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
80004d56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d5a:	fc 19 00 40 	movh	r9,0x40
80004d5e:	91 09       	st.w	r8[0x0],r9
80004d60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d64:	20 48       	sub	r8,4
80004d66:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
80004d6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d6e:	e0 69 00 ff 	mov	r9,255
80004d72:	ea 19 ff 00 	orh	r9,0xff00
80004d76:	91 09       	st.w	r8[0x0],r9
80004d78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d7c:	20 48       	sub	r8,4
80004d7e:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
80004d82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d86:	e0 69 01 01 	mov	r9,257
80004d8a:	ea 19 01 01 	orh	r9,0x101
80004d8e:	91 09       	st.w	r8[0x0],r9
80004d90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d94:	20 48       	sub	r8,4
80004d96:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
80004d9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d9e:	e0 69 02 02 	mov	r9,514
80004da2:	ea 19 02 02 	orh	r9,0x202
80004da6:	91 09       	st.w	r8[0x0],r9
80004da8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dac:	20 48       	sub	r8,4
80004dae:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
80004db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004db6:	e0 69 03 03 	mov	r9,771
80004dba:	ea 19 03 03 	orh	r9,0x303
80004dbe:	91 09       	st.w	r8[0x0],r9
80004dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dc4:	20 48       	sub	r8,4
80004dc6:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
80004dca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dce:	e0 69 04 04 	mov	r9,1028
80004dd2:	ea 19 04 04 	orh	r9,0x404
80004dd6:	91 09       	st.w	r8[0x0],r9
80004dd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ddc:	20 48       	sub	r8,4
80004dde:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
80004de2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004de6:	e0 69 05 05 	mov	r9,1285
80004dea:	ea 19 05 05 	orh	r9,0x505
80004dee:	91 09       	st.w	r8[0x0],r9
80004df0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004df4:	20 48       	sub	r8,4
80004df6:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
80004dfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dfe:	e0 69 06 06 	mov	r9,1542
80004e02:	ea 19 06 06 	orh	r9,0x606
80004e06:	91 09       	st.w	r8[0x0],r9
80004e08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e0c:	20 48       	sub	r8,4
80004e0e:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
80004e12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e16:	e0 69 07 07 	mov	r9,1799
80004e1a:	ea 19 07 07 	orh	r9,0x707
80004e1e:	91 09       	st.w	r8[0x0],r9
80004e20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e24:	20 48       	sub	r8,4
80004e26:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
80004e2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e2e:	30 09       	mov	r9,0
80004e30:	91 09       	st.w	r8[0x0],r9

	return pxTopOfStack;
80004e32:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004e36:	10 9c       	mov	r12,r8
80004e38:	2f dd       	sub	sp,-12
80004e3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e3e:	d7 03       	nop

80004e40 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
80004e40:	eb cd 40 80 	pushm	r7,lr
80004e44:	1a 97       	mov	r7,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
80004e46:	f0 1f 00 10 	mcall	80004e84 <xPortStartScheduler+0x44>

	/* Start the first task. */
	portRESTORE_CONTEXT();
80004e4a:	e0 68 06 68 	mov	r8,1640
80004e4e:	ea 18 00 00 	orh	r8,0x0
80004e52:	70 00       	ld.w	r0,r8[0x0]
80004e54:	60 0d       	ld.w	sp,r0[0x0]
80004e56:	1b 00       	ld.w	r0,sp++
80004e58:	e0 68 00 20 	mov	r8,32
80004e5c:	ea 18 00 00 	orh	r8,0x0
80004e60:	91 00       	st.w	r8[0x0],r0
80004e62:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004e66:	2f ed       	sub	sp,-8
80004e68:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
80004e6c:	fa f0 ff e0 	ld.w	r0,sp[-32]
80004e70:	e3 b0 00 00 	mtsr	0x0,r0
80004e74:	fa f0 ff dc 	ld.w	r0,sp[-36]
80004e78:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
80004e7c:	30 08       	mov	r8,0
}
80004e7e:	10 9c       	mov	r12,r8
80004e80:	e3 cd 80 80 	ldm	sp++,r7,pc
80004e84:	80 00       	ld.sh	r0,r0[0x0]
80004e86:	4e b4       	lddpc	r4,80005030 <pvPortMalloc+0x38>

80004e88 <prvScheduleFirstTick>:

/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
80004e88:	eb cd 40 80 	pushm	r7,lr
80004e8c:	1a 97       	mov	r7,sp
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
80004e8e:	e0 68 2e e0 	mov	r8,12000
80004e92:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
80004e96:	30 08       	mov	r8,0
80004e98:	e3 b8 00 42 	mtsr	0x108,r8
	}
80004e9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ea0 <prvClearCcInt>:

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
80004ea0:	eb cd 40 80 	pushm	r7,lr
80004ea4:	1a 97       	mov	r7,sp
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80004ea6:	e1 b8 00 43 	mfsr	r8,0x10c
80004eaa:	e3 b8 00 43 	mtsr	0x10c,r8
	}
80004eae:	e3 cd 80 80 	ldm	sp++,r7,pc
80004eb2:	d7 03       	nop

80004eb4 <prvSetupTimerInterrupt>:
#endif
/*-----------------------------------------------------------*/

/* Setup the timer to generate the tick interrupts. */
static void prvSetupTimerInterrupt(void)
{
80004eb4:	eb cd 40 80 	pushm	r7,lr
80004eb8:	1a 97       	mov	r7,sp
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
80004eba:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
80004ebc:	30 0a       	mov	r10,0
80004ebe:	30 0b       	mov	r11,0
80004ec0:	48 4c       	lddpc	r12,80004ed0 <prvSetupTimerInterrupt+0x1c>
80004ec2:	f0 1f 00 05 	mcall	80004ed4 <prvSetupTimerInterrupt+0x20>
		prvScheduleFirstTick();
80004ec6:	f0 1f 00 05 	mcall	80004ed8 <prvSetupTimerInterrupt+0x24>
	}
	#endif
}
80004eca:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ece:	00 00       	add	r0,r0
80004ed0:	80 00       	ld.sh	r0,r0[0x0]
80004ed2:	4b 34       	lddpc	r4,80004f9c <_write+0x34>
80004ed4:	80 00       	ld.sh	r0,r0[0x0]
80004ed6:	41 f4       	lddsp	r4,sp[0x7c]
80004ed8:	80 00       	ld.sh	r0,r0[0x0]
80004eda:	4e 88       	lddpc	r8,80005078 <xQueueCreate+0xc>

80004edc <_read>:
/**
 * Low-level read command.
 */
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
80004edc:	eb cd 40 80 	pushm	r7,lr
80004ee0:	1a 97       	mov	r7,sp
80004ee2:	20 5d       	sub	sp,20
80004ee4:	ef 4c ff f4 	st.w	r7[-12],r12
80004ee8:	ef 4b ff f0 	st.w	r7[-16],r11
80004eec:	ef 4a ff ec 	st.w	r7[-20],r10
  int nChars = 0;
80004ef0:	30 08       	mov	r8,0
80004ef2:	ef 48 ff f8 	st.w	r7[-8],r8

  if (file != 0)
80004ef6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004efa:	58 08       	cp.w	r8,0
80004efc:	c2 40       	breq	80004f44 <_read+0x68>
    return -1;
80004efe:	3f f8       	mov	r8,-1
80004f00:	c2 b8       	rjmp	80004f56 <_read+0x7a>

  for (; len > 0; --len)
  {
    int c = usart_getchar(stdio_usart_base);
80004f02:	49 88       	lddpc	r8,80004f60 <_read+0x84>
80004f04:	70 08       	ld.w	r8,r8[0x0]
80004f06:	10 9c       	mov	r12,r8
80004f08:	f0 1f 00 17 	mcall	80004f64 <_read+0x88>
80004f0c:	18 98       	mov	r8,r12
80004f0e:	ef 48 ff fc 	st.w	r7[-4],r8
    if (c < 0)
80004f12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f16:	58 08       	cp.w	r8,0
80004f18:	c1 c5       	brlt	80004f50 <_read+0x74>
      break;

    *ptr++ = c;
80004f1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f1e:	5c 58       	castu.b	r8
80004f20:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004f24:	b2 88       	st.b	r9[0x0],r8
80004f26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004f2a:	2f f8       	sub	r8,-1
80004f2c:	ef 48 ff f0 	st.w	r7[-16],r8
    ++nChars;
80004f30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f34:	2f f8       	sub	r8,-1
80004f36:	ef 48 ff f8 	st.w	r7[-8],r8
  int nChars = 0;

  if (file != 0)
    return -1;

  for (; len > 0; --len)
80004f3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f3e:	20 18       	sub	r8,1
80004f40:	ef 48 ff ec 	st.w	r7[-20],r8
80004f44:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004f48:	58 08       	cp.w	r8,0
80004f4a:	fe 99 ff dc 	brgt	80004f02 <_read+0x26>
80004f4e:	c0 28       	rjmp	80004f52 <_read+0x76>
  {
    int c = usart_getchar(stdio_usart_base);
    if (c < 0)
      break;
80004f50:	d7 03       	nop

    *ptr++ = c;
    ++nChars;
  }

  return nChars;
80004f52:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80004f56:	10 9c       	mov	r12,r8
80004f58:	2f bd       	sub	sp,-20
80004f5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f5e:	00 00       	add	r0,r0
80004f60:	00 00       	add	r0,r0
80004f62:	07 f8       	ld.ub	r8,r3[0x7]
80004f64:	80 00       	ld.sh	r0,r0[0x0]
80004f66:	48 7c       	lddpc	r12,80004f80 <_write+0x18>

80004f68 <_write>:
 * 1 and 2 is stdout and stderr which goes to usart
 * 3 is framebuffer
 */
int __attribute__((weak))
_write (int file, char * ptr, int len)
{
80004f68:	eb cd 40 80 	pushm	r7,lr
80004f6c:	1a 97       	mov	r7,sp
80004f6e:	20 4d       	sub	sp,16
80004f70:	ef 4c ff f8 	st.w	r7[-8],r12
80004f74:	ef 4b ff f4 	st.w	r7[-12],r11
80004f78:	ef 4a ff f0 	st.w	r7[-16],r10
  int nChars = 0;
80004f7c:	30 08       	mov	r8,0
80004f7e:	ef 48 ff fc 	st.w	r7[-4],r8

  if ( (file != 1)
80004f82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f86:	58 18       	cp.w	r8,1
80004f88:	c2 90       	breq	80004fda <_write+0x72>
80004f8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f8e:	58 28       	cp.w	r8,2
80004f90:	c2 50       	breq	80004fda <_write+0x72>
80004f92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f96:	58 38       	cp.w	r8,3
80004f98:	c2 10       	breq	80004fda <_write+0x72>
       && (file != 2) && (file!=3))
    return -1;
80004f9a:	3f f8       	mov	r8,-1
80004f9c:	c2 58       	rjmp	80004fe6 <_write+0x7e>

  for (; len != 0; --len)
  {
    if (usart_putchar(stdio_usart_base, *ptr++) < 0)
80004f9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004fa2:	11 88       	ld.ub	r8,r8[0x0]
80004fa4:	10 99       	mov	r9,r8
80004fa6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004faa:	2f f8       	sub	r8,-1
80004fac:	ef 48 ff f4 	st.w	r7[-12],r8
80004fb0:	49 08       	lddpc	r8,80004ff0 <_write+0x88>
80004fb2:	70 08       	ld.w	r8,r8[0x0]
80004fb4:	12 9b       	mov	r11,r9
80004fb6:	10 9c       	mov	r12,r8
80004fb8:	f0 1f 00 0f 	mcall	80004ff4 <_write+0x8c>
80004fbc:	18 98       	mov	r8,r12
80004fbe:	58 08       	cp.w	r8,0
80004fc0:	c0 34       	brge	80004fc6 <_write+0x5e>
    {
      return -1;
80004fc2:	3f f8       	mov	r8,-1
80004fc4:	c1 18       	rjmp	80004fe6 <_write+0x7e>
    }

    ++nChars;
80004fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fca:	2f f8       	sub	r8,-1
80004fcc:	ef 48 ff fc 	st.w	r7[-4],r8

  if ( (file != 1)
       && (file != 2) && (file!=3))
    return -1;

  for (; len != 0; --len)
80004fd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004fd4:	20 18       	sub	r8,1
80004fd6:	ef 48 ff f0 	st.w	r7[-16],r8
80004fda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004fde:	58 08       	cp.w	r8,0
80004fe0:	cd f1       	brne	80004f9e <_write+0x36>
    }

    ++nChars;
  }

  return nChars;
80004fe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80004fe6:	10 9c       	mov	r12,r8
80004fe8:	2f cd       	sub	sp,-16
80004fea:	e3 cd 80 80 	ldm	sp++,r7,pc
80004fee:	00 00       	add	r0,r0
80004ff0:	00 00       	add	r0,r0
80004ff2:	07 f8       	ld.ub	r8,r3[0x7]
80004ff4:	80 00       	ld.sh	r0,r0[0x0]
80004ff6:	47 d4       	lddsp	r4,sp[0x1f4]

80004ff8 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80004ff8:	eb cd 40 80 	pushm	r7,lr
80004ffc:	1a 97       	mov	r7,sp
80004ffe:	20 2d       	sub	sp,8
80005000:	ef 4c ff f8 	st.w	r7[-8],r12
void *pvReturn;

	vTaskSuspendAll();
80005004:	f0 1f 00 09 	mcall	80005028 <pvPortMalloc+0x30>
	{
		pvReturn = malloc( xWantedSize );
80005008:	ee fc ff f8 	ld.w	r12,r7[-8]
8000500c:	f0 1f 00 08 	mcall	8000502c <pvPortMalloc+0x34>
80005010:	18 98       	mov	r8,r12
80005012:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	xTaskResumeAll();
80005016:	f0 1f 00 07 	mcall	80005030 <pvPortMalloc+0x38>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
8000501a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000501e:	10 9c       	mov	r12,r8
80005020:	2f ed       	sub	sp,-8
80005022:	e3 cd 80 80 	ldm	sp++,r7,pc
80005026:	00 00       	add	r0,r0
80005028:	80 00       	ld.sh	r0,r0[0x0]
8000502a:	5a 14       	cp.w	r4,-31
8000502c:	80 00       	ld.sh	r0,r0[0x0]
8000502e:	65 8c       	ld.w	r12,r2[0x60]
80005030:	80 00       	ld.sh	r0,r0[0x0]
80005032:	5a 30       	cp.w	r0,-29

80005034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80005034:	eb cd 40 80 	pushm	r7,lr
80005038:	1a 97       	mov	r7,sp
8000503a:	20 1d       	sub	sp,4
8000503c:	ef 4c ff fc 	st.w	r7[-4],r12
	if( pv )
80005040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005044:	58 08       	cp.w	r8,0
80005046:	c0 90       	breq	80005058 <vPortFree+0x24>
	{
		vTaskSuspendAll();
80005048:	f0 1f 00 06 	mcall	80005060 <vPortFree+0x2c>
		{
			free( pv );
8000504c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005050:	f0 1f 00 05 	mcall	80005064 <vPortFree+0x30>
		}
		xTaskResumeAll();
80005054:	f0 1f 00 05 	mcall	80005068 <vPortFree+0x34>
	}
}
80005058:	2f fd       	sub	sp,-4
8000505a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000505e:	00 00       	add	r0,r0
80005060:	80 00       	ld.sh	r0,r0[0x0]
80005062:	5a 14       	cp.w	r4,-31
80005064:	80 00       	ld.sh	r0,r0[0x0]
80005066:	65 7c       	ld.w	r12,r2[0x5c]
80005068:	80 00       	ld.sh	r0,r0[0x0]
8000506a:	5a 30       	cp.w	r0,-29

8000506c <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
8000506c:	eb cd 40 80 	pushm	r7,lr
80005070:	1a 97       	mov	r7,sp
80005072:	20 5d       	sub	sp,20
80005074:	ef 4c ff f0 	st.w	r7[-16],r12
80005078:	ef 4b ff ec 	st.w	r7[-20],r11
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
8000507c:	30 08       	mov	r8,0
8000507e:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
80005082:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005086:	58 08       	cp.w	r8,0
80005088:	c7 20       	breq	8000516c <xQueueCreate+0x100>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
8000508a:	34 cc       	mov	r12,76
8000508c:	f0 1f 00 3b 	mcall	80005178 <xQueueCreate+0x10c>
80005090:	18 98       	mov	r8,r12
80005092:	ef 48 ff f4 	st.w	r7[-12],r8
		if( pxNewQueue != NULL )
80005096:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000509a:	58 08       	cp.w	r8,0
8000509c:	c6 80       	breq	8000516c <xQueueCreate+0x100>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
8000509e:	ee f9 ff f0 	ld.w	r9,r7[-16]
800050a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800050a6:	f2 08 02 48 	mul	r8,r9,r8
800050aa:	2f f8       	sub	r8,-1
800050ac:	ef 48 ff f8 	st.w	r7[-8],r8

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
800050b0:	ee fc ff f8 	ld.w	r12,r7[-8]
800050b4:	f0 1f 00 31 	mcall	80005178 <xQueueCreate+0x10c>
800050b8:	18 98       	mov	r8,r12
800050ba:	10 99       	mov	r9,r8
800050bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050c0:	91 09       	st.w	r8[0x0],r9
			if( pxNewQueue->pcHead != NULL )
800050c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050c6:	70 08       	ld.w	r8,r8[0x0]
800050c8:	58 08       	cp.w	r8,0
800050ca:	c4 d0       	breq	80005164 <xQueueCreate+0xf8>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
800050cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050d0:	70 09       	ld.w	r9,r8[0x0]
800050d2:	ee fa ff f0 	ld.w	r10,r7[-16]
800050d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800050da:	f4 08 02 48 	mul	r8,r10,r8
800050de:	10 09       	add	r9,r8
800050e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050e4:	91 19       	st.w	r8[0x4],r9
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
800050e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050ea:	30 09       	mov	r9,0
800050ec:	91 e9       	st.w	r8[0x38],r9
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
800050ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050f2:	70 09       	ld.w	r9,r8[0x0]
800050f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050f8:	91 29       	st.w	r8[0x8],r9
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
800050fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050fe:	70 09       	ld.w	r9,r8[0x0]
80005100:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005104:	f0 ca 00 01 	sub	r10,r8,1
80005108:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000510c:	f4 08 02 48 	mul	r8,r10,r8
80005110:	10 09       	add	r9,r8
80005112:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005116:	91 39       	st.w	r8[0xc],r9
				pxNewQueue->uxLength = uxQueueLength;
80005118:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000511c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005120:	91 f9       	st.w	r8[0x3c],r9
				pxNewQueue->uxItemSize = uxItemSize;
80005122:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005126:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000512a:	f1 49 00 40 	st.w	r8[64],r9
				pxNewQueue->xRxLock = queueUNLOCKED;
8000512e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005132:	3f f9       	mov	r9,-1
80005134:	f1 49 00 44 	st.w	r8[68],r9
				pxNewQueue->xTxLock = queueUNLOCKED;
80005138:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000513c:	3f f9       	mov	r9,-1
8000513e:	f1 49 00 48 	st.w	r8[72],r9

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
80005142:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005146:	2f 08       	sub	r8,-16
80005148:	10 9c       	mov	r12,r8
8000514a:	f0 1f 00 0d 	mcall	8000517c <xQueueCreate+0x110>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
8000514e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005152:	2d c8       	sub	r8,-36
80005154:	10 9c       	mov	r12,r8
80005156:	f0 1f 00 0a 	mcall	8000517c <xQueueCreate+0x110>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
8000515a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000515e:	ef 48 ff fc 	st.w	r7[-4],r8
80005162:	c0 58       	rjmp	8000516c <xQueueCreate+0x100>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
80005164:	ee fc ff f4 	ld.w	r12,r7[-12]
80005168:	f0 1f 00 06 	mcall	80005180 <xQueueCreate+0x114>
		}
	}

	configASSERT( xReturn );

	return xReturn;
8000516c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005170:	10 9c       	mov	r12,r8
80005172:	2f bd       	sub	sp,-20
80005174:	e3 cd 80 80 	ldm	sp++,r7,pc
80005178:	80 00       	ld.sh	r0,r0[0x0]
8000517a:	4f f8       	lddpc	r8,80005374 <xQueueGenericReceive+0x44>
8000517c:	80 00       	ld.sh	r0,r0[0x0]
8000517e:	48 c0       	lddpc	r0,800051ac <xQueueCreateCountingSemaphore+0x28>
80005180:	80 00       	ld.sh	r0,r0[0x0]
80005182:	50 34       	stdsp	sp[0xc],r4

80005184 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
80005184:	eb cd 40 80 	pushm	r7,lr
80005188:	1a 97       	mov	r7,sp
8000518a:	20 3d       	sub	sp,12
8000518c:	ef 4c ff f8 	st.w	r7[-8],r12
80005190:	ef 4b ff f4 	st.w	r7[-12],r11
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
80005194:	30 0b       	mov	r11,0
80005196:	ee fc ff f8 	ld.w	r12,r7[-8]
8000519a:	f0 1f 00 0b 	mcall	800051c4 <xQueueCreateCountingSemaphore+0x40>
8000519e:	18 98       	mov	r8,r12
800051a0:	ef 48 ff fc 	st.w	r7[-4],r8

		if( pxHandle != NULL )
800051a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051a8:	58 08       	cp.w	r8,0
800051aa:	c0 60       	breq	800051b6 <xQueueCreateCountingSemaphore+0x32>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
800051ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800051b4:	91 e9       	st.w	r8[0x38],r9
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
800051b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
800051ba:	10 9c       	mov	r12,r8
800051bc:	2f dd       	sub	sp,-12
800051be:	e3 cd 80 80 	ldm	sp++,r7,pc
800051c2:	00 00       	add	r0,r0
800051c4:	80 00       	ld.sh	r0,r0[0x0]
800051c6:	50 6c       	stdsp	sp[0x18],r12

800051c8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
800051c8:	eb cd 40 80 	pushm	r7,lr
800051cc:	1a 97       	mov	r7,sp
800051ce:	20 7d       	sub	sp,28
800051d0:	ef 4c ff f0 	st.w	r7[-16],r12
800051d4:	ef 4b ff ec 	st.w	r7[-20],r11
800051d8:	ef 4a ff e8 	st.w	r7[-24],r10
800051dc:	ef 49 ff e4 	st.w	r7[-28],r9
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
800051e0:	30 08       	mov	r8,0
800051e2:	ef 48 ff fc 	st.w	r7[-4],r8
800051e6:	c0 28       	rjmp	800051ea <xQueueGenericSend+0x22>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
800051e8:	d7 03       	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
800051ea:	f0 1f 00 47 	mcall	80005304 <xQueueGenericSend+0x13c>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
800051ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051f2:	70 e9       	ld.w	r9,r8[0x38]
800051f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051f8:	70 f8       	ld.w	r8,r8[0x3c]
800051fa:	10 39       	cp.w	r9,r8
800051fc:	c1 c2       	brcc	80005234 <xQueueGenericSend+0x6c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
800051fe:	ee fa ff e4 	ld.w	r10,r7[-28]
80005202:	ee fb ff ec 	ld.w	r11,r7[-20]
80005206:	ee fc ff f0 	ld.w	r12,r7[-16]
8000520a:	f0 1f 00 40 	mcall	80005308 <xQueueGenericSend+0x140>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
8000520e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005212:	70 98       	ld.w	r8,r8[0x24]
80005214:	58 08       	cp.w	r8,0
80005216:	c0 b0       	breq	8000522c <xQueueGenericSend+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
80005218:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000521c:	2d c8       	sub	r8,-36
8000521e:	10 9c       	mov	r12,r8
80005220:	f0 1f 00 3b 	mcall	8000530c <xQueueGenericSend+0x144>
80005224:	18 98       	mov	r8,r12
80005226:	58 18       	cp.w	r8,1
80005228:	c0 21       	brne	8000522c <xQueueGenericSend+0x64>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
8000522a:	d7 33       	scall
					}
				}

				taskEXIT_CRITICAL();
8000522c:	f0 1f 00 39 	mcall	80005310 <xQueueGenericSend+0x148>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
80005230:	30 18       	mov	r8,1
80005232:	c6 58       	rjmp	800052fc <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
80005234:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005238:	58 08       	cp.w	r8,0
8000523a:	c0 51       	brne	80005244 <xQueueGenericSend+0x7c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
8000523c:	f0 1f 00 35 	mcall	80005310 <xQueueGenericSend+0x148>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
80005240:	30 08       	mov	r8,0
80005242:	c5 d8       	rjmp	800052fc <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
80005244:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005248:	58 08       	cp.w	r8,0
8000524a:	c0 91       	brne	8000525c <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
8000524c:	ee c8 00 0c 	sub	r8,r7,12
80005250:	10 9c       	mov	r12,r8
80005252:	f0 1f 00 31 	mcall	80005314 <xQueueGenericSend+0x14c>
					xEntryTimeSet = pdTRUE;
80005256:	30 18       	mov	r8,1
80005258:	ef 48 ff fc 	st.w	r7[-4],r8
				}
			}
		}
		taskEXIT_CRITICAL();
8000525c:	f0 1f 00 2d 	mcall	80005310 <xQueueGenericSend+0x148>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80005260:	f0 1f 00 2e 	mcall	80005318 <xQueueGenericSend+0x150>
		prvLockQueue( pxQueue );
80005264:	f0 1f 00 28 	mcall	80005304 <xQueueGenericSend+0x13c>
80005268:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000526c:	71 18       	ld.w	r8,r8[0x44]
8000526e:	5b f8       	cp.w	r8,-1
80005270:	c0 61       	brne	8000527c <xQueueGenericSend+0xb4>
80005272:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005276:	30 09       	mov	r9,0
80005278:	f1 49 00 44 	st.w	r8[68],r9
8000527c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005280:	71 28       	ld.w	r8,r8[0x48]
80005282:	5b f8       	cp.w	r8,-1
80005284:	c0 61       	brne	80005290 <xQueueGenericSend+0xc8>
80005286:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000528a:	30 09       	mov	r9,0
8000528c:	f1 49 00 48 	st.w	r8[72],r9
80005290:	f0 1f 00 20 	mcall	80005310 <xQueueGenericSend+0x148>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80005294:	ee c9 00 18 	sub	r9,r7,24
80005298:	ee c8 00 0c 	sub	r8,r7,12
8000529c:	12 9b       	mov	r11,r9
8000529e:	10 9c       	mov	r12,r8
800052a0:	f0 1f 00 1f 	mcall	8000531c <xQueueGenericSend+0x154>
800052a4:	18 98       	mov	r8,r12
800052a6:	58 08       	cp.w	r8,0
800052a8:	c2 31       	brne	800052ee <xQueueGenericSend+0x126>
		{
			if( prvIsQueueFull( pxQueue ) )
800052aa:	ee fc ff f0 	ld.w	r12,r7[-16]
800052ae:	f0 1f 00 1d 	mcall	80005320 <xQueueGenericSend+0x158>
800052b2:	18 98       	mov	r8,r12
800052b4:	58 08       	cp.w	r8,0
800052b6:	c1 50       	breq	800052e0 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
800052b8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800052bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800052c0:	2f 08       	sub	r8,-16
800052c2:	12 9b       	mov	r11,r9
800052c4:	10 9c       	mov	r12,r8
800052c6:	f0 1f 00 18 	mcall	80005324 <xQueueGenericSend+0x15c>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
800052ca:	ee fc ff f0 	ld.w	r12,r7[-16]
800052ce:	f0 1f 00 17 	mcall	80005328 <xQueueGenericSend+0x160>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
800052d2:	f0 1f 00 17 	mcall	8000532c <xQueueGenericSend+0x164>
800052d6:	18 98       	mov	r8,r12
800052d8:	58 08       	cp.w	r8,0
800052da:	c8 71       	brne	800051e8 <xQueueGenericSend+0x20>
				{
					portYIELD_WITHIN_API();
800052dc:	d7 33       	scall
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
800052de:	c8 6b       	rjmp	800051ea <xQueueGenericSend+0x22>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
800052e0:	ee fc ff f0 	ld.w	r12,r7[-16]
800052e4:	f0 1f 00 11 	mcall	80005328 <xQueueGenericSend+0x160>
				( void ) xTaskResumeAll();
800052e8:	f0 1f 00 11 	mcall	8000532c <xQueueGenericSend+0x164>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
800052ec:	c7 fb       	rjmp	800051ea <xQueueGenericSend+0x22>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
800052ee:	ee fc ff f0 	ld.w	r12,r7[-16]
800052f2:	f0 1f 00 0e 	mcall	80005328 <xQueueGenericSend+0x160>
			( void ) xTaskResumeAll();
800052f6:	f0 1f 00 0e 	mcall	8000532c <xQueueGenericSend+0x164>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
800052fa:	30 08       	mov	r8,0
		}
	}
}
800052fc:	10 9c       	mov	r12,r8
800052fe:	2f 9d       	sub	sp,-28
80005300:	e3 cd 80 80 	ldm	sp++,r7,pc
80005304:	80 00       	ld.sh	r0,r0[0x0]
80005306:	4c 50       	lddpc	r0,80005418 <xQueueGenericReceive+0xe8>
80005308:	80 00       	ld.sh	r0,r0[0x0]
8000530a:	54 dc       	stdsp	sp[0x134],r12
8000530c:	80 00       	ld.sh	r0,r0[0x0]
8000530e:	5d e8       	*unknown*
80005310:	80 00       	ld.sh	r0,r0[0x0]
80005312:	4c 6c       	lddpc	r12,80005428 <xQueueGenericReceive+0xf8>
80005314:	80 00       	ld.sh	r0,r0[0x0]
80005316:	5e b8       	rethi	r8
80005318:	80 00       	ld.sh	r0,r0[0x0]
8000531a:	5a 14       	cp.w	r4,-31
8000531c:	80 00       	ld.sh	r0,r0[0x0]
8000531e:	5e e8       	retqs	r8
80005320:	80 00       	ld.sh	r0,r0[0x0]
80005322:	57 30       	stdsp	sp[0x1cc],r0
80005324:	80 00       	ld.sh	r0,r0[0x0]
80005326:	5d 68       	*unknown*
80005328:	80 00       	ld.sh	r0,r0[0x0]
8000532a:	56 28       	stdsp	sp[0x188],r8
8000532c:	80 00       	ld.sh	r0,r0[0x0]
8000532e:	5a 30       	cp.w	r0,-29

80005330 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
80005330:	eb cd 40 80 	pushm	r7,lr
80005334:	1a 97       	mov	r7,sp
80005336:	20 8d       	sub	sp,32
80005338:	ef 4c ff ec 	st.w	r7[-20],r12
8000533c:	ef 4b ff e8 	st.w	r7[-24],r11
80005340:	ef 4a ff e4 	st.w	r7[-28],r10
80005344:	ef 49 ff e0 	st.w	r7[-32],r9
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
80005348:	30 08       	mov	r8,0
8000534a:	ef 48 ff f8 	st.w	r7[-8],r8
8000534e:	c0 28       	rjmp	80005352 <xQueueGenericReceive+0x22>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
80005350:	d7 03       	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
80005352:	f0 1f 00 58 	mcall	800054b0 <xQueueGenericReceive+0x180>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
80005356:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000535a:	70 e8       	ld.w	r8,r8[0x38]
8000535c:	58 08       	cp.w	r8,0
8000535e:	c4 00       	breq	800053de <xQueueGenericReceive+0xae>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
80005360:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005364:	70 38       	ld.w	r8,r8[0xc]
80005366:	ef 48 ff fc 	st.w	r7[-4],r8

				prvCopyDataFromQueue( pxQueue, pvBuffer );
8000536a:	ee fb ff e8 	ld.w	r11,r7[-24]
8000536e:	ee fc ff ec 	ld.w	r12,r7[-20]
80005372:	f0 1f 00 51 	mcall	800054b4 <xQueueGenericReceive+0x184>

				if( xJustPeeking == pdFALSE )
80005376:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000537a:	58 08       	cp.w	r8,0
8000537c:	c1 91       	brne	800053ae <xQueueGenericReceive+0x7e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
8000537e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005382:	70 e8       	ld.w	r8,r8[0x38]
80005384:	f0 c9 00 01 	sub	r9,r8,1
80005388:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000538c:	91 e9       	st.w	r8[0x38],r9
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
8000538e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005392:	70 48       	ld.w	r8,r8[0x10]
80005394:	58 08       	cp.w	r8,0
80005396:	c2 00       	breq	800053d6 <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
80005398:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000539c:	2f 08       	sub	r8,-16
8000539e:	10 9c       	mov	r12,r8
800053a0:	f0 1f 00 46 	mcall	800054b8 <xQueueGenericReceive+0x188>
800053a4:	18 98       	mov	r8,r12
800053a6:	58 18       	cp.w	r8,1
800053a8:	c1 71       	brne	800053d6 <xQueueGenericReceive+0xa6>
						{
							portYIELD_WITHIN_API();
800053aa:	d7 33       	scall
800053ac:	c1 58       	rjmp	800053d6 <xQueueGenericReceive+0xa6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
800053ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800053b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800053b6:	91 39       	st.w	r8[0xc],r9

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
800053b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800053bc:	70 98       	ld.w	r8,r8[0x24]
800053be:	58 08       	cp.w	r8,0
800053c0:	c0 b0       	breq	800053d6 <xQueueGenericReceive+0xa6>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
800053c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800053c6:	2d c8       	sub	r8,-36
800053c8:	10 9c       	mov	r12,r8
800053ca:	f0 1f 00 3c 	mcall	800054b8 <xQueueGenericReceive+0x188>
800053ce:	18 98       	mov	r8,r12
800053d0:	58 08       	cp.w	r8,0
800053d2:	c0 20       	breq	800053d6 <xQueueGenericReceive+0xa6>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
800053d4:	d7 33       	scall
						}
					}

				}

				taskEXIT_CRITICAL();
800053d6:	f0 1f 00 3a 	mcall	800054bc <xQueueGenericReceive+0x18c>
				return pdPASS;
800053da:	30 18       	mov	r8,1
800053dc:	c6 68       	rjmp	800054a8 <xQueueGenericReceive+0x178>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
800053de:	ee f8 ff e4 	ld.w	r8,r7[-28]
800053e2:	58 08       	cp.w	r8,0
800053e4:	c0 51       	brne	800053ee <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
800053e6:	f0 1f 00 36 	mcall	800054bc <xQueueGenericReceive+0x18c>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
800053ea:	30 08       	mov	r8,0
800053ec:	c5 e8       	rjmp	800054a8 <xQueueGenericReceive+0x178>
				}
				else if( xEntryTimeSet == pdFALSE )
800053ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053f2:	58 08       	cp.w	r8,0
800053f4:	c0 91       	brne	80005406 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
800053f6:	ee c8 00 10 	sub	r8,r7,16
800053fa:	10 9c       	mov	r12,r8
800053fc:	f0 1f 00 31 	mcall	800054c0 <xQueueGenericReceive+0x190>
					xEntryTimeSet = pdTRUE;
80005400:	30 18       	mov	r8,1
80005402:	ef 48 ff f8 	st.w	r7[-8],r8
				}
			}
		}
		taskEXIT_CRITICAL();
80005406:	f0 1f 00 2e 	mcall	800054bc <xQueueGenericReceive+0x18c>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
8000540a:	f0 1f 00 2f 	mcall	800054c4 <xQueueGenericReceive+0x194>
		prvLockQueue( pxQueue );
8000540e:	f0 1f 00 29 	mcall	800054b0 <xQueueGenericReceive+0x180>
80005412:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005416:	71 18       	ld.w	r8,r8[0x44]
80005418:	5b f8       	cp.w	r8,-1
8000541a:	c0 61       	brne	80005426 <xQueueGenericReceive+0xf6>
8000541c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005420:	30 09       	mov	r9,0
80005422:	f1 49 00 44 	st.w	r8[68],r9
80005426:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000542a:	71 28       	ld.w	r8,r8[0x48]
8000542c:	5b f8       	cp.w	r8,-1
8000542e:	c0 61       	brne	8000543a <xQueueGenericReceive+0x10a>
80005430:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005434:	30 09       	mov	r9,0
80005436:	f1 49 00 48 	st.w	r8[72],r9
8000543a:	f0 1f 00 21 	mcall	800054bc <xQueueGenericReceive+0x18c>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
8000543e:	ee c9 00 1c 	sub	r9,r7,28
80005442:	ee c8 00 10 	sub	r8,r7,16
80005446:	12 9b       	mov	r11,r9
80005448:	10 9c       	mov	r12,r8
8000544a:	f0 1f 00 20 	mcall	800054c8 <xQueueGenericReceive+0x198>
8000544e:	18 98       	mov	r8,r12
80005450:	58 08       	cp.w	r8,0
80005452:	c2 41       	brne	8000549a <xQueueGenericReceive+0x16a>
		{
			if( prvIsQueueEmpty( pxQueue ) )
80005454:	ee fc ff ec 	ld.w	r12,r7[-20]
80005458:	f0 1f 00 1d 	mcall	800054cc <xQueueGenericReceive+0x19c>
8000545c:	18 98       	mov	r8,r12
8000545e:	58 08       	cp.w	r8,0
80005460:	c1 60       	breq	8000548c <xQueueGenericReceive+0x15c>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
80005462:	ee f9 ff e4 	ld.w	r9,r7[-28]
80005466:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000546a:	2d c8       	sub	r8,-36
8000546c:	12 9b       	mov	r11,r9
8000546e:	10 9c       	mov	r12,r8
80005470:	f0 1f 00 18 	mcall	800054d0 <xQueueGenericReceive+0x1a0>
				prvUnlockQueue( pxQueue );
80005474:	ee fc ff ec 	ld.w	r12,r7[-20]
80005478:	f0 1f 00 17 	mcall	800054d4 <xQueueGenericReceive+0x1a4>
				if( !xTaskResumeAll() )
8000547c:	f0 1f 00 17 	mcall	800054d8 <xQueueGenericReceive+0x1a8>
80005480:	18 98       	mov	r8,r12
80005482:	58 08       	cp.w	r8,0
80005484:	fe 91 ff 66 	brne	80005350 <xQueueGenericReceive+0x20>
				{
					portYIELD_WITHIN_API();
80005488:	d7 33       	scall
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
8000548a:	c6 4b       	rjmp	80005352 <xQueueGenericReceive+0x22>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
8000548c:	ee fc ff ec 	ld.w	r12,r7[-20]
80005490:	f0 1f 00 11 	mcall	800054d4 <xQueueGenericReceive+0x1a4>
				( void ) xTaskResumeAll();
80005494:	f0 1f 00 11 	mcall	800054d8 <xQueueGenericReceive+0x1a8>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
80005498:	c5 db       	rjmp	80005352 <xQueueGenericReceive+0x22>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
8000549a:	ee fc ff ec 	ld.w	r12,r7[-20]
8000549e:	f0 1f 00 0e 	mcall	800054d4 <xQueueGenericReceive+0x1a4>
			( void ) xTaskResumeAll();
800054a2:	f0 1f 00 0e 	mcall	800054d8 <xQueueGenericReceive+0x1a8>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
800054a6:	30 08       	mov	r8,0
		}
	}
}
800054a8:	10 9c       	mov	r12,r8
800054aa:	2f 8d       	sub	sp,-32
800054ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800054b0:	80 00       	ld.sh	r0,r0[0x0]
800054b2:	4c 50       	lddpc	r0,800055c4 <prvCopyDataFromQueue+0x8>
800054b4:	80 00       	ld.sh	r0,r0[0x0]
800054b6:	55 bc       	stdsp	sp[0x16c],r12
800054b8:	80 00       	ld.sh	r0,r0[0x0]
800054ba:	5d e8       	*unknown*
800054bc:	80 00       	ld.sh	r0,r0[0x0]
800054be:	4c 6c       	lddpc	r12,800055d4 <prvCopyDataFromQueue+0x18>
800054c0:	80 00       	ld.sh	r0,r0[0x0]
800054c2:	5e b8       	rethi	r8
800054c4:	80 00       	ld.sh	r0,r0[0x0]
800054c6:	5a 14       	cp.w	r4,-31
800054c8:	80 00       	ld.sh	r0,r0[0x0]
800054ca:	5e e8       	retqs	r8
800054cc:	80 00       	ld.sh	r0,r0[0x0]
800054ce:	56 f8       	stdsp	sp[0x1bc],r8
800054d0:	80 00       	ld.sh	r0,r0[0x0]
800054d2:	5d 68       	*unknown*
800054d4:	80 00       	ld.sh	r0,r0[0x0]
800054d6:	56 28       	stdsp	sp[0x188],r8
800054d8:	80 00       	ld.sh	r0,r0[0x0]
800054da:	5a 30       	cp.w	r0,-29

800054dc <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
800054dc:	eb cd 40 80 	pushm	r7,lr
800054e0:	1a 97       	mov	r7,sp
800054e2:	20 3d       	sub	sp,12
800054e4:	ef 4c ff fc 	st.w	r7[-4],r12
800054e8:	ef 4b ff f8 	st.w	r7[-8],r11
800054ec:	ef 4a ff f4 	st.w	r7[-12],r10
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
800054f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054f4:	71 08       	ld.w	r8,r8[0x40]
800054f6:	58 08       	cp.w	r8,0
800054f8:	c5 40       	breq	800055a0 <prvCopyDataToQueue+0xc4>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
800054fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800054fe:	58 08       	cp.w	r8,0
80005500:	c2 61       	brne	8000554c <prvCopyDataToQueue+0x70>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
80005502:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005506:	71 09       	ld.w	r9,r8[0x40]
80005508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000550c:	70 28       	ld.w	r8,r8[0x8]
8000550e:	12 9a       	mov	r10,r9
80005510:	ee fb ff f8 	ld.w	r11,r7[-8]
80005514:	10 9c       	mov	r12,r8
80005516:	f0 1f 00 29 	mcall	800055b8 <prvCopyDataToQueue+0xdc>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
8000551a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000551e:	70 29       	ld.w	r9,r8[0x8]
80005520:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005524:	71 08       	ld.w	r8,r8[0x40]
80005526:	10 09       	add	r9,r8
80005528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000552c:	91 29       	st.w	r8[0x8],r9
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
8000552e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005532:	70 29       	ld.w	r9,r8[0x8]
80005534:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005538:	70 18       	ld.w	r8,r8[0x4]
8000553a:	10 39       	cp.w	r9,r8
8000553c:	c3 23       	brcs	800055a0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
8000553e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005542:	70 09       	ld.w	r9,r8[0x0]
80005544:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005548:	91 29       	st.w	r8[0x8],r9
8000554a:	c2 b8       	rjmp	800055a0 <prvCopyDataToQueue+0xc4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
8000554c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005550:	71 09       	ld.w	r9,r8[0x40]
80005552:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005556:	70 38       	ld.w	r8,r8[0xc]
80005558:	12 9a       	mov	r10,r9
8000555a:	ee fb ff f8 	ld.w	r11,r7[-8]
8000555e:	10 9c       	mov	r12,r8
80005560:	f0 1f 00 16 	mcall	800055b8 <prvCopyDataToQueue+0xdc>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
80005564:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005568:	70 39       	ld.w	r9,r8[0xc]
8000556a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000556e:	71 08       	ld.w	r8,r8[0x40]
80005570:	5c 38       	neg	r8
80005572:	10 09       	add	r9,r8
80005574:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005578:	91 39       	st.w	r8[0xc],r9
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
8000557a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000557e:	70 39       	ld.w	r9,r8[0xc]
80005580:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005584:	70 08       	ld.w	r8,r8[0x0]
80005586:	10 39       	cp.w	r9,r8
80005588:	c0 c2       	brcc	800055a0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
8000558a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000558e:	70 19       	ld.w	r9,r8[0x4]
80005590:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005594:	71 08       	ld.w	r8,r8[0x40]
80005596:	5c 38       	neg	r8
80005598:	10 09       	add	r9,r8
8000559a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000559e:	91 39       	st.w	r8[0xc],r9
		}
	}

	++( pxQueue->uxMessagesWaiting );
800055a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055a4:	70 e8       	ld.w	r8,r8[0x38]
800055a6:	f0 c9 ff ff 	sub	r9,r8,-1
800055aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ae:	91 e9       	st.w	r8[0x38],r9
}
800055b0:	2f dd       	sub	sp,-12
800055b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800055b6:	00 00       	add	r0,r0
800055b8:	80 00       	ld.sh	r0,r0[0x0]
800055ba:	69 d4       	ld.w	r4,r4[0x74]

800055bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
800055bc:	eb cd 40 80 	pushm	r7,lr
800055c0:	1a 97       	mov	r7,sp
800055c2:	20 2d       	sub	sp,8
800055c4:	ef 4c ff fc 	st.w	r7[-4],r12
800055c8:	ef 4b ff f8 	st.w	r7[-8],r11
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
800055cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055d0:	70 08       	ld.w	r8,r8[0x0]
800055d2:	58 08       	cp.w	r8,0
800055d4:	c2 50       	breq	8000561e <prvCopyDataFromQueue+0x62>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
800055d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055da:	70 39       	ld.w	r9,r8[0xc]
800055dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055e0:	71 08       	ld.w	r8,r8[0x40]
800055e2:	10 09       	add	r9,r8
800055e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055e8:	91 39       	st.w	r8[0xc],r9
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
800055ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ee:	70 39       	ld.w	r9,r8[0xc]
800055f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f4:	70 18       	ld.w	r8,r8[0x4]
800055f6:	10 39       	cp.w	r9,r8
800055f8:	c0 73       	brcs	80005606 <prvCopyDataFromQueue+0x4a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
800055fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055fe:	70 09       	ld.w	r9,r8[0x0]
80005600:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005604:	91 39       	st.w	r8[0xc],r9
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
80005606:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000560a:	71 09       	ld.w	r9,r8[0x40]
8000560c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005610:	70 38       	ld.w	r8,r8[0xc]
80005612:	12 9a       	mov	r10,r9
80005614:	10 9b       	mov	r11,r8
80005616:	ee fc ff f8 	ld.w	r12,r7[-8]
8000561a:	f0 1f 00 03 	mcall	80005624 <prvCopyDataFromQueue+0x68>
	}
}
8000561e:	2f ed       	sub	sp,-8
80005620:	e3 cd 80 80 	ldm	sp++,r7,pc
80005624:	80 00       	ld.sh	r0,r0[0x0]
80005626:	69 d4       	ld.w	r4,r4[0x74]

80005628 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
80005628:	eb cd 40 80 	pushm	r7,lr
8000562c:	1a 97       	mov	r7,sp
8000562e:	20 1d       	sub	sp,4
80005630:	ef 4c ff fc 	st.w	r7[-4],r12

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
80005634:	f0 1f 00 2d 	mcall	800056e8 <prvUnlockQueue+0xc0>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
80005638:	c1 a8       	rjmp	8000566c <prvUnlockQueue+0x44>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
8000563a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000563e:	70 98       	ld.w	r8,r8[0x24]
80005640:	58 08       	cp.w	r8,0
80005642:	c1 c0       	breq	8000567a <prvUnlockQueue+0x52>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80005644:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005648:	2d c8       	sub	r8,-36
8000564a:	10 9c       	mov	r12,r8
8000564c:	f0 1f 00 28 	mcall	800056ec <prvUnlockQueue+0xc4>
80005650:	18 98       	mov	r8,r12
80005652:	58 08       	cp.w	r8,0
80005654:	c0 30       	breq	8000565a <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
80005656:	f0 1f 00 27 	mcall	800056f0 <prvUnlockQueue+0xc8>
				}

				--( pxQueue->xTxLock );
8000565a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000565e:	71 28       	ld.w	r8,r8[0x48]
80005660:	f0 c9 00 01 	sub	r9,r8,1
80005664:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005668:	f1 49 00 48 	st.w	r8[72],r9
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
8000566c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005670:	71 28       	ld.w	r8,r8[0x48]
80005672:	58 08       	cp.w	r8,0
80005674:	fe 99 ff e3 	brgt	8000563a <prvUnlockQueue+0x12>
80005678:	c0 28       	rjmp	8000567c <prvUnlockQueue+0x54>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
8000567a:	d7 03       	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
8000567c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005680:	3f f9       	mov	r9,-1
80005682:	f1 49 00 48 	st.w	r8[72],r9
	}
	taskEXIT_CRITICAL();
80005686:	f0 1f 00 1c 	mcall	800056f4 <prvUnlockQueue+0xcc>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
8000568a:	f0 1f 00 18 	mcall	800056e8 <prvUnlockQueue+0xc0>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
8000568e:	c1 a8       	rjmp	800056c2 <prvUnlockQueue+0x9a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80005690:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005694:	70 48       	ld.w	r8,r8[0x10]
80005696:	58 08       	cp.w	r8,0
80005698:	c1 c0       	breq	800056d0 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
8000569a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000569e:	2f 08       	sub	r8,-16
800056a0:	10 9c       	mov	r12,r8
800056a2:	f0 1f 00 13 	mcall	800056ec <prvUnlockQueue+0xc4>
800056a6:	18 98       	mov	r8,r12
800056a8:	58 08       	cp.w	r8,0
800056aa:	c0 30       	breq	800056b0 <prvUnlockQueue+0x88>
				{
					vTaskMissedYield();
800056ac:	f0 1f 00 11 	mcall	800056f0 <prvUnlockQueue+0xc8>
				}

				--( pxQueue->xRxLock );
800056b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056b4:	71 18       	ld.w	r8,r8[0x44]
800056b6:	f0 c9 00 01 	sub	r9,r8,1
800056ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056be:	f1 49 00 44 	st.w	r8[68],r9
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
800056c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056c6:	71 18       	ld.w	r8,r8[0x44]
800056c8:	58 08       	cp.w	r8,0
800056ca:	fe 99 ff e3 	brgt	80005690 <prvUnlockQueue+0x68>
800056ce:	c0 28       	rjmp	800056d2 <prvUnlockQueue+0xaa>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
800056d0:	d7 03       	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
800056d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056d6:	3f f9       	mov	r9,-1
800056d8:	f1 49 00 44 	st.w	r8[68],r9
	}
	taskEXIT_CRITICAL();
800056dc:	f0 1f 00 06 	mcall	800056f4 <prvUnlockQueue+0xcc>
}
800056e0:	2f fd       	sub	sp,-4
800056e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800056e6:	00 00       	add	r0,r0
800056e8:	80 00       	ld.sh	r0,r0[0x0]
800056ea:	4c 50       	lddpc	r0,800057fc <xTaskGenericCreate+0x88>
800056ec:	80 00       	ld.sh	r0,r0[0x0]
800056ee:	5d e8       	*unknown*
800056f0:	80 00       	ld.sh	r0,r0[0x0]
800056f2:	5f a0       	srle	r0
800056f4:	80 00       	ld.sh	r0,r0[0x0]
800056f6:	4c 6c       	lddpc	r12,8000580c <xTaskGenericCreate+0x98>

800056f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
800056f8:	eb cd 40 80 	pushm	r7,lr
800056fc:	1a 97       	mov	r7,sp
800056fe:	20 2d       	sub	sp,8
80005700:	ef 4c ff f8 	st.w	r7[-8],r12
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
80005704:	f0 1f 00 09 	mcall	80005728 <prvIsQueueEmpty+0x30>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
80005708:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000570c:	70 e8       	ld.w	r8,r8[0x38]
8000570e:	58 08       	cp.w	r8,0
80005710:	5f 08       	sreq	r8
80005712:	ef 48 ff fc 	st.w	r7[-4],r8
	taskEXIT_CRITICAL();
80005716:	f0 1f 00 06 	mcall	8000572c <prvIsQueueEmpty+0x34>

	return xReturn;
8000571a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000571e:	10 9c       	mov	r12,r8
80005720:	2f ed       	sub	sp,-8
80005722:	e3 cd 80 80 	ldm	sp++,r7,pc
80005726:	00 00       	add	r0,r0
80005728:	80 00       	ld.sh	r0,r0[0x0]
8000572a:	4c 50       	lddpc	r0,8000583c <xTaskGenericCreate+0xc8>
8000572c:	80 00       	ld.sh	r0,r0[0x0]
8000572e:	4c 6c       	lddpc	r12,80005844 <xTaskGenericCreate+0xd0>

80005730 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
80005730:	eb cd 40 80 	pushm	r7,lr
80005734:	1a 97       	mov	r7,sp
80005736:	20 2d       	sub	sp,8
80005738:	ef 4c ff f8 	st.w	r7[-8],r12
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
8000573c:	f0 1f 00 0a 	mcall	80005764 <prvIsQueueFull+0x34>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
80005740:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005744:	70 e9       	ld.w	r9,r8[0x38]
80005746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000574a:	70 f8       	ld.w	r8,r8[0x3c]
8000574c:	10 39       	cp.w	r9,r8
8000574e:	5f 08       	sreq	r8
80005750:	ef 48 ff fc 	st.w	r7[-4],r8
	taskEXIT_CRITICAL();
80005754:	f0 1f 00 05 	mcall	80005768 <prvIsQueueFull+0x38>

	return xReturn;
80005758:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000575c:	10 9c       	mov	r12,r8
8000575e:	2f ed       	sub	sp,-8
80005760:	e3 cd 80 80 	ldm	sp++,r7,pc
80005764:	80 00       	ld.sh	r0,r0[0x0]
80005766:	4c 50       	lddpc	r0,80005878 <xTaskGenericCreate+0x104>
80005768:	80 00       	ld.sh	r0,r0[0x0]
8000576a:	4c 6c       	lddpc	r12,80005880 <xTaskGenericCreate+0x10c>
8000576c:	49 44       	lddpc	r4,800057bc <xTaskGenericCreate+0x48>
8000576e:	4c 45       	lddpc	r5,8000587c <xTaskGenericCreate+0x108>
80005770:	00 00       	add	r0,r0
	...

80005774 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80005774:	eb cd 40 c0 	pushm	r6-r7,lr
80005778:	1a 97       	mov	r7,sp
8000577a:	20 8d       	sub	sp,32
8000577c:	ee c6 ff f4 	sub	r6,r7,-12
80005780:	ef 4c ff f0 	st.w	r7[-16],r12
80005784:	ef 4b ff ec 	st.w	r7[-20],r11
80005788:	ef 49 ff e4 	st.w	r7[-28],r9
8000578c:	ef 48 ff e0 	st.w	r7[-32],r8
80005790:	14 98       	mov	r8,r10
80005792:	ef 58 ff e8 	st.h	r7[-24],r8
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80005796:	ef 18 ff e8 	ld.uh	r8,r7[-24]
8000579a:	6c 1b       	ld.w	r11,r6[0x4]
8000579c:	10 9c       	mov	r12,r8
8000579e:	f0 1f 00 5a 	mcall	80005904 <xTaskGenericCreate+0x190>
800057a2:	18 98       	mov	r8,r12
800057a4:	ef 48 ff f8 	st.w	r7[-8],r8

	if( pxNewTCB != NULL )
800057a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057ac:	58 08       	cp.w	r8,0
800057ae:	e0 80 00 92 	breq	800058d2 <xTaskGenericCreate+0x15e>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
800057b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057b6:	70 c9       	ld.w	r9,r8[0x30]
800057b8:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800057bc:	20 18       	sub	r8,1
800057be:	a3 68       	lsl	r8,0x2
800057c0:	f2 08 00 08 	add	r8,r9,r8
800057c4:	ef 48 ff fc 	st.w	r7[-4],r8
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
800057c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057cc:	e0 18 ff fc 	andl	r8,0xfffc
800057d0:	ef 48 ff fc 	st.w	r7[-4],r8
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
800057d4:	ef 18 ff e8 	ld.uh	r8,r7[-24]
800057d8:	6c 29       	ld.w	r9,r6[0x8]
800057da:	ee fa ff e0 	ld.w	r10,r7[-32]
800057de:	ee fb ff ec 	ld.w	r11,r7[-20]
800057e2:	ee fc ff f8 	ld.w	r12,r7[-8]
800057e6:	f0 1f 00 49 	mcall	80005908 <xTaskGenericCreate+0x194>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
800057ea:	ee fa ff e4 	ld.w	r10,r7[-28]
800057ee:	ee fb ff f0 	ld.w	r11,r7[-16]
800057f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800057f6:	f0 1f 00 46 	mcall	8000590c <xTaskGenericCreate+0x198>
800057fa:	18 98       	mov	r8,r12
800057fc:	10 99       	mov	r9,r8
800057fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005802:	91 09       	st.w	r8[0x0],r9
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
80005804:	6c 08       	ld.w	r8,r6[0x0]
80005806:	58 08       	cp.w	r8,0
80005808:	c0 50       	breq	80005812 <xTaskGenericCreate+0x9e>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
8000580a:	6c 08       	ld.w	r8,r6[0x0]
8000580c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005810:	91 09       	st.w	r8[0x0],r9
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
80005812:	f0 1f 00 40 	mcall	80005910 <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
80005816:	4c 08       	lddpc	r8,80005914 <xTaskGenericCreate+0x1a0>
80005818:	70 08       	ld.w	r8,r8[0x0]
8000581a:	f0 c9 ff ff 	sub	r9,r8,-1
8000581e:	4b e8       	lddpc	r8,80005914 <xTaskGenericCreate+0x1a0>
80005820:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
80005822:	4b e8       	lddpc	r8,80005918 <xTaskGenericCreate+0x1a4>
80005824:	70 08       	ld.w	r8,r8[0x0]
80005826:	58 08       	cp.w	r8,0
80005828:	c0 c1       	brne	80005840 <xTaskGenericCreate+0xcc>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
8000582a:	4b c8       	lddpc	r8,80005918 <xTaskGenericCreate+0x1a4>
8000582c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005830:	91 09       	st.w	r8[0x0],r9

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
80005832:	4b 98       	lddpc	r8,80005914 <xTaskGenericCreate+0x1a0>
80005834:	70 08       	ld.w	r8,r8[0x0]
80005836:	58 18       	cp.w	r8,1
80005838:	c1 41       	brne	80005860 <xTaskGenericCreate+0xec>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
8000583a:	f0 1f 00 39 	mcall	8000591c <xTaskGenericCreate+0x1a8>
8000583e:	c1 18       	rjmp	80005860 <xTaskGenericCreate+0xec>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80005840:	4b 88       	lddpc	r8,80005920 <xTaskGenericCreate+0x1ac>
80005842:	70 08       	ld.w	r8,r8[0x0]
80005844:	58 08       	cp.w	r8,0
80005846:	c0 d1       	brne	80005860 <xTaskGenericCreate+0xec>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80005848:	4b 48       	lddpc	r8,80005918 <xTaskGenericCreate+0x1a4>
8000584a:	70 08       	ld.w	r8,r8[0x0]
8000584c:	70 b9       	ld.w	r9,r8[0x2c]
8000584e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005852:	10 39       	cp.w	r9,r8
80005854:	e0 8b 00 06 	brhi	80005860 <xTaskGenericCreate+0xec>
					{
						pxCurrentTCB = pxNewTCB;
80005858:	4b 08       	lddpc	r8,80005918 <xTaskGenericCreate+0x1a4>
8000585a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000585e:	91 09       	st.w	r8[0x0],r9
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
80005860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005864:	70 b9       	ld.w	r9,r8[0x2c]
80005866:	4b 08       	lddpc	r8,80005924 <xTaskGenericCreate+0x1b0>
80005868:	70 08       	ld.w	r8,r8[0x0]
8000586a:	10 39       	cp.w	r9,r8
8000586c:	e0 88 00 07 	brls	8000587a <xTaskGenericCreate+0x106>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
80005870:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005874:	70 b9       	ld.w	r9,r8[0x2c]
80005876:	4a c8       	lddpc	r8,80005924 <xTaskGenericCreate+0x1b0>
80005878:	91 09       	st.w	r8[0x0],r9
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
8000587a:	4a c8       	lddpc	r8,80005928 <xTaskGenericCreate+0x1b4>
8000587c:	70 08       	ld.w	r8,r8[0x0]
8000587e:	f0 c9 ff ff 	sub	r9,r8,-1
80005882:	4a a8       	lddpc	r8,80005928 <xTaskGenericCreate+0x1b4>
80005884:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
80005886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000588a:	70 b9       	ld.w	r9,r8[0x2c]
8000588c:	4a 88       	lddpc	r8,8000592c <xTaskGenericCreate+0x1b8>
8000588e:	70 08       	ld.w	r8,r8[0x0]
80005890:	10 39       	cp.w	r9,r8
80005892:	e0 88 00 07 	brls	800058a0 <xTaskGenericCreate+0x12c>
80005896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000589a:	70 b9       	ld.w	r9,r8[0x2c]
8000589c:	4a 48       	lddpc	r8,8000592c <xTaskGenericCreate+0x1b8>
8000589e:	91 09       	st.w	r8[0x0],r9
800058a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058a4:	f0 ca ff fc 	sub	r10,r8,-4
800058a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058ac:	70 b9       	ld.w	r9,r8[0x2c]
800058ae:	12 98       	mov	r8,r9
800058b0:	a3 68       	lsl	r8,0x2
800058b2:	12 08       	add	r8,r9
800058b4:	a3 68       	lsl	r8,0x2
800058b6:	10 99       	mov	r9,r8
800058b8:	49 e8       	lddpc	r8,80005930 <xTaskGenericCreate+0x1bc>
800058ba:	f2 08 00 08 	add	r8,r9,r8
800058be:	14 9b       	mov	r11,r10
800058c0:	10 9c       	mov	r12,r8
800058c2:	f0 1f 00 1d 	mcall	80005934 <xTaskGenericCreate+0x1c0>

			xReturn = pdPASS;
800058c6:	30 18       	mov	r8,1
800058c8:	ef 48 ff f4 	st.w	r7[-12],r8
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800058cc:	f0 1f 00 1b 	mcall	80005938 <xTaskGenericCreate+0x1c4>
800058d0:	c0 48       	rjmp	800058d8 <xTaskGenericCreate+0x164>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800058d2:	3f f8       	mov	r8,-1
800058d4:	ef 48 ff f4 	st.w	r7[-12],r8
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800058d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058dc:	58 18       	cp.w	r8,1
800058de:	c0 d1       	brne	800058f8 <xTaskGenericCreate+0x184>
	{
		if( xSchedulerRunning != pdFALSE )
800058e0:	49 08       	lddpc	r8,80005920 <xTaskGenericCreate+0x1ac>
800058e2:	70 08       	ld.w	r8,r8[0x0]
800058e4:	58 08       	cp.w	r8,0
800058e6:	c0 90       	breq	800058f8 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
800058e8:	48 c8       	lddpc	r8,80005918 <xTaskGenericCreate+0x1a4>
800058ea:	70 08       	ld.w	r8,r8[0x0]
800058ec:	70 b9       	ld.w	r9,r8[0x2c]
800058ee:	ee f8 ff e0 	ld.w	r8,r7[-32]
800058f2:	10 39       	cp.w	r9,r8
800058f4:	c0 22       	brcc	800058f8 <xTaskGenericCreate+0x184>
			{
				portYIELD_WITHIN_API();
800058f6:	d7 33       	scall
			}
		}
	}

	return xReturn;
800058f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
800058fc:	10 9c       	mov	r12,r8
800058fe:	2f 8d       	sub	sp,-32
80005900:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005904:	80 00       	ld.sh	r0,r0[0x0]
80005906:	62 28       	ld.w	r8,r1[0x8]
80005908:	80 00       	ld.sh	r0,r0[0x0]
8000590a:	5f e0       	srqs	r0
8000590c:	80 00       	ld.sh	r0,r0[0x0]
8000590e:	4c 98       	lddpc	r8,80005a30 <xTaskResumeAll>
80005910:	80 00       	ld.sh	r0,r0[0x0]
80005912:	4c 50       	lddpc	r0,80005a24 <vTaskSuspendAll+0x10>
80005914:	00 00       	add	r0,r0
80005916:	07 7c       	ld.ub	r12,--r3
80005918:	00 00       	add	r0,r0
8000591a:	06 68       	and	r8,r3
8000591c:	80 00       	ld.sh	r0,r0[0x0]
8000591e:	60 7c       	ld.w	r12,r0[0x1c]
80005920:	00 00       	add	r0,r0
80005922:	07 8c       	ld.ub	r12,r3[0x0]
80005924:	00 00       	add	r0,r0
80005926:	07 84       	ld.ub	r4,r3[0x0]
80005928:	00 00       	add	r0,r0
8000592a:	07 a0       	ld.ub	r0,r3[0x2]
8000592c:	00 00       	add	r0,r0
8000592e:	07 88       	ld.ub	r8,r3[0x0]
80005930:	00 00       	add	r0,r0
80005932:	06 6c       	and	r12,r3
80005934:	80 00       	ld.sh	r0,r0[0x0]
80005936:	49 26       	lddpc	r6,8000597c <vTaskDelay+0x40>
80005938:	80 00       	ld.sh	r0,r0[0x0]
8000593a:	4c 6c       	lddpc	r12,80005a50 <xTaskResumeAll+0x20>

8000593c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
8000593c:	eb cd 40 80 	pushm	r7,lr
80005940:	1a 97       	mov	r7,sp
80005942:	20 3d       	sub	sp,12
80005944:	ef 4c ff f4 	st.w	r7[-12],r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
80005948:	30 08       	mov	r8,0
8000594a:	ef 48 ff fc 	st.w	r7[-4],r8

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
8000594e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005952:	58 08       	cp.w	r8,0
80005954:	c1 a0       	breq	80005988 <vTaskDelay+0x4c>
		{
			vTaskSuspendAll();
80005956:	f0 1f 00 11 	mcall	80005998 <vTaskDelay+0x5c>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
8000595a:	49 18       	lddpc	r8,8000599c <vTaskDelay+0x60>
8000595c:	70 09       	ld.w	r9,r8[0x0]
8000595e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005962:	f2 08 00 08 	add	r8,r9,r8
80005966:	ef 48 ff f8 	st.w	r7[-8],r8

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000596a:	48 e8       	lddpc	r8,800059a0 <vTaskDelay+0x64>
8000596c:	70 08       	ld.w	r8,r8[0x0]
8000596e:	2f c8       	sub	r8,-4
80005970:	10 9c       	mov	r12,r8
80005972:	f0 1f 00 0d 	mcall	800059a4 <vTaskDelay+0x68>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80005976:	ee fc ff f8 	ld.w	r12,r7[-8]
8000597a:	f0 1f 00 0c 	mcall	800059a8 <vTaskDelay+0x6c>
			}
			xAlreadyYielded = xTaskResumeAll();
8000597e:	f0 1f 00 0c 	mcall	800059ac <vTaskDelay+0x70>
80005982:	18 98       	mov	r8,r12
80005984:	ef 48 ff fc 	st.w	r7[-4],r8
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
80005988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000598c:	58 08       	cp.w	r8,0
8000598e:	c0 21       	brne	80005992 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
80005990:	d7 33       	scall
		}
	}
80005992:	2f dd       	sub	sp,-12
80005994:	e3 cd 80 80 	ldm	sp++,r7,pc
80005998:	80 00       	ld.sh	r0,r0[0x0]
8000599a:	5a 14       	cp.w	r4,-31
8000599c:	00 00       	add	r0,r0
8000599e:	07 80       	ld.ub	r0,r3[0x0]
800059a0:	00 00       	add	r0,r0
800059a2:	06 68       	and	r8,r3
800059a4:	80 00       	ld.sh	r0,r0[0x0]
800059a6:	4a 3a       	lddpc	r10,80005a30 <xTaskResumeAll>
800059a8:	80 00       	ld.sh	r0,r0[0x0]
800059aa:	61 a8       	ld.w	r8,r0[0x68]
800059ac:	80 00       	ld.sh	r0,r0[0x0]
800059ae:	5a 30       	cp.w	r0,-29

800059b0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
800059b0:	eb cd 40 80 	pushm	r7,lr
800059b4:	1a 97       	mov	r7,sp
800059b6:	20 1d       	sub	sp,4
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
800059b8:	49 1b       	lddpc	r11,800059fc <vTaskStartScheduler+0x4c>
800059ba:	30 08       	mov	r8,0
800059bc:	1a d8       	st.w	--sp,r8
800059be:	30 08       	mov	r8,0
800059c0:	1a d8       	st.w	--sp,r8
800059c2:	30 08       	mov	r8,0
800059c4:	1a d8       	st.w	--sp,r8
800059c6:	30 08       	mov	r8,0
800059c8:	30 09       	mov	r9,0
800059ca:	e0 6a 01 00 	mov	r10,256
800059ce:	48 dc       	lddpc	r12,80005a00 <vTaskStartScheduler+0x50>
800059d0:	f0 1f 00 0d 	mcall	80005a04 <vTaskStartScheduler+0x54>
800059d4:	2f dd       	sub	sp,-12
800059d6:	18 98       	mov	r8,r12
800059d8:	ef 48 ff fc 	st.w	r7[-4],r8
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
800059dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059e0:	58 18       	cp.w	r8,1
800059e2:	c0 a1       	brne	800059f6 <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
800059e4:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
800059e6:	48 98       	lddpc	r8,80005a08 <vTaskStartScheduler+0x58>
800059e8:	30 19       	mov	r9,1
800059ea:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
800059ec:	48 88       	lddpc	r8,80005a0c <vTaskStartScheduler+0x5c>
800059ee:	30 09       	mov	r9,0
800059f0:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
800059f2:	f0 1f 00 08 	mcall	80005a10 <vTaskStartScheduler+0x60>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
800059f6:	2f fd       	sub	sp,-4
800059f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800059fc:	80 00       	ld.sh	r0,r0[0x0]
800059fe:	57 6c       	stdsp	sp[0x1d8],r12
80005a00:	80 00       	ld.sh	r0,r0[0x0]
80005a02:	5f b4       	srhi	r4
80005a04:	80 00       	ld.sh	r0,r0[0x0]
80005a06:	57 74       	stdsp	sp[0x1dc],r4
80005a08:	00 00       	add	r0,r0
80005a0a:	07 8c       	ld.ub	r12,r3[0x0]
80005a0c:	00 00       	add	r0,r0
80005a0e:	07 80       	ld.ub	r0,r3[0x0]
80005a10:	80 00       	ld.sh	r0,r0[0x0]
80005a12:	4e 40       	lddpc	r0,80005ba0 <vTaskIncrementTick+0x48>

80005a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80005a14:	eb cd 40 80 	pushm	r7,lr
80005a18:	1a 97       	mov	r7,sp
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80005a1a:	48 58       	lddpc	r8,80005a2c <vTaskSuspendAll+0x18>
80005a1c:	70 08       	ld.w	r8,r8[0x0]
80005a1e:	f0 c9 ff ff 	sub	r9,r8,-1
80005a22:	48 38       	lddpc	r8,80005a2c <vTaskSuspendAll+0x18>
80005a24:	91 09       	st.w	r8[0x0],r9
}
80005a26:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a2a:	00 00       	add	r0,r0
80005a2c:	00 00       	add	r0,r0
80005a2e:	07 90       	ld.ub	r0,r3[0x1]

80005a30 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
80005a30:	eb cd 40 c0 	pushm	r6-r7,lr
80005a34:	1a 97       	mov	r7,sp
80005a36:	20 2d       	sub	sp,8
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
80005a38:	30 08       	mov	r8,0
80005a3a:	ef 48 ff f8 	st.w	r7[-8],r8
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80005a3e:	f0 1f 00 3a 	mcall	80005b24 <xTaskResumeAll+0xf4>
	{
		--uxSchedulerSuspended;
80005a42:	4b a8       	lddpc	r8,80005b28 <xTaskResumeAll+0xf8>
80005a44:	70 08       	ld.w	r8,r8[0x0]
80005a46:	f0 c9 00 01 	sub	r9,r8,1
80005a4a:	4b 88       	lddpc	r8,80005b28 <xTaskResumeAll+0xf8>
80005a4c:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80005a4e:	4b 78       	lddpc	r8,80005b28 <xTaskResumeAll+0xf8>
80005a50:	70 08       	ld.w	r8,r8[0x0]
80005a52:	58 08       	cp.w	r8,0
80005a54:	c5 f1       	brne	80005b12 <xTaskResumeAll+0xe2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80005a56:	4b 68       	lddpc	r8,80005b2c <xTaskResumeAll+0xfc>
80005a58:	70 08       	ld.w	r8,r8[0x0]
80005a5a:	58 08       	cp.w	r8,0
80005a5c:	c5 b0       	breq	80005b12 <xTaskResumeAll+0xe2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
80005a5e:	30 08       	mov	r8,0
80005a60:	ef 48 ff fc 	st.w	r7[-4],r8

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80005a64:	c3 08       	rjmp	80005ac4 <xTaskResumeAll+0x94>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
80005a66:	4b 38       	lddpc	r8,80005b30 <xTaskResumeAll+0x100>
80005a68:	70 38       	ld.w	r8,r8[0xc]
80005a6a:	70 38       	ld.w	r8,r8[0xc]
80005a6c:	10 96       	mov	r6,r8
					vListRemove( &( pxTCB->xEventListItem ) );
80005a6e:	ec c8 ff e8 	sub	r8,r6,-24
80005a72:	10 9c       	mov	r12,r8
80005a74:	f0 1f 00 30 	mcall	80005b34 <xTaskResumeAll+0x104>
					vListRemove( &( pxTCB->xGenericListItem ) );
80005a78:	ec c8 ff fc 	sub	r8,r6,-4
80005a7c:	10 9c       	mov	r12,r8
80005a7e:	f0 1f 00 2e 	mcall	80005b34 <xTaskResumeAll+0x104>
					prvAddTaskToReadyQueue( pxTCB );
80005a82:	6c b9       	ld.w	r9,r6[0x2c]
80005a84:	4a d8       	lddpc	r8,80005b38 <xTaskResumeAll+0x108>
80005a86:	70 08       	ld.w	r8,r8[0x0]
80005a88:	10 39       	cp.w	r9,r8
80005a8a:	e0 88 00 05 	brls	80005a94 <xTaskResumeAll+0x64>
80005a8e:	6c b9       	ld.w	r9,r6[0x2c]
80005a90:	4a a8       	lddpc	r8,80005b38 <xTaskResumeAll+0x108>
80005a92:	91 09       	st.w	r8[0x0],r9
80005a94:	ec ca ff fc 	sub	r10,r6,-4
80005a98:	6c b9       	ld.w	r9,r6[0x2c]
80005a9a:	12 98       	mov	r8,r9
80005a9c:	a3 68       	lsl	r8,0x2
80005a9e:	12 08       	add	r8,r9
80005aa0:	a3 68       	lsl	r8,0x2
80005aa2:	10 99       	mov	r9,r8
80005aa4:	4a 68       	lddpc	r8,80005b3c <xTaskResumeAll+0x10c>
80005aa6:	f2 08 00 08 	add	r8,r9,r8
80005aaa:	14 9b       	mov	r11,r10
80005aac:	10 9c       	mov	r12,r8
80005aae:	f0 1f 00 25 	mcall	80005b40 <xTaskResumeAll+0x110>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80005ab2:	6c b9       	ld.w	r9,r6[0x2c]
80005ab4:	4a 48       	lddpc	r8,80005b44 <xTaskResumeAll+0x114>
80005ab6:	70 08       	ld.w	r8,r8[0x0]
80005ab8:	70 b8       	ld.w	r8,r8[0x2c]
80005aba:	10 39       	cp.w	r9,r8
80005abc:	c0 43       	brcs	80005ac4 <xTaskResumeAll+0x94>
					{
						xYieldRequired = pdTRUE;
80005abe:	30 18       	mov	r8,1
80005ac0:	ef 48 ff fc 	st.w	r7[-4],r8
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80005ac4:	49 b8       	lddpc	r8,80005b30 <xTaskResumeAll+0x100>
80005ac6:	70 08       	ld.w	r8,r8[0x0]
80005ac8:	58 08       	cp.w	r8,0
80005aca:	cc e1       	brne	80005a66 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80005acc:	49 f8       	lddpc	r8,80005b48 <xTaskResumeAll+0x118>
80005ace:	70 08       	ld.w	r8,r8[0x0]
80005ad0:	58 08       	cp.w	r8,0
80005ad2:	c1 10       	breq	80005af4 <xTaskResumeAll+0xc4>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80005ad4:	c0 98       	rjmp	80005ae6 <xTaskResumeAll+0xb6>
					{
						vTaskIncrementTick();
80005ad6:	f0 1f 00 1e 	mcall	80005b4c <xTaskResumeAll+0x11c>
						--uxMissedTicks;
80005ada:	49 c8       	lddpc	r8,80005b48 <xTaskResumeAll+0x118>
80005adc:	70 08       	ld.w	r8,r8[0x0]
80005ade:	f0 c9 00 01 	sub	r9,r8,1
80005ae2:	49 a8       	lddpc	r8,80005b48 <xTaskResumeAll+0x118>
80005ae4:	91 09       	st.w	r8[0x0],r9
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80005ae6:	49 98       	lddpc	r8,80005b48 <xTaskResumeAll+0x118>
80005ae8:	70 08       	ld.w	r8,r8[0x0]
80005aea:	58 08       	cp.w	r8,0
80005aec:	cf 51       	brne	80005ad6 <xTaskResumeAll+0xa6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
80005aee:	30 18       	mov	r8,1
80005af0:	ef 48 ff fc 	st.w	r7[-4],r8
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
80005af4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005af8:	58 18       	cp.w	r8,1
80005afa:	c0 50       	breq	80005b04 <xTaskResumeAll+0xd4>
80005afc:	49 58       	lddpc	r8,80005b50 <xTaskResumeAll+0x120>
80005afe:	70 08       	ld.w	r8,r8[0x0]
80005b00:	58 18       	cp.w	r8,1
80005b02:	c0 81       	brne	80005b12 <xTaskResumeAll+0xe2>
				{
					xAlreadyYielded = pdTRUE;
80005b04:	30 18       	mov	r8,1
80005b06:	ef 48 ff f8 	st.w	r7[-8],r8
					xMissedYield = pdFALSE;
80005b0a:	49 28       	lddpc	r8,80005b50 <xTaskResumeAll+0x120>
80005b0c:	30 09       	mov	r9,0
80005b0e:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
80005b10:	d7 33       	scall
				}
			}
		}
	}
	taskEXIT_CRITICAL();
80005b12:	f0 1f 00 11 	mcall	80005b54 <xTaskResumeAll+0x124>

	return xAlreadyYielded;
80005b16:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80005b1a:	10 9c       	mov	r12,r8
80005b1c:	2f ed       	sub	sp,-8
80005b1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005b22:	00 00       	add	r0,r0
80005b24:	80 00       	ld.sh	r0,r0[0x0]
80005b26:	4c 50       	lddpc	r0,80005c38 <vTaskIncrementTick+0xe0>
80005b28:	00 00       	add	r0,r0
80005b2a:	07 90       	ld.ub	r0,r3[0x1]
80005b2c:	00 00       	add	r0,r0
80005b2e:	07 7c       	ld.ub	r12,--r3
80005b30:	00 00       	add	r0,r0
80005b32:	07 3c       	ld.ub	r12,r3++
80005b34:	80 00       	ld.sh	r0,r0[0x0]
80005b36:	4a 3a       	lddpc	r10,80005bc0 <vTaskIncrementTick+0x68>
80005b38:	00 00       	add	r0,r0
80005b3a:	07 88       	ld.ub	r8,r3[0x0]
80005b3c:	00 00       	add	r0,r0
80005b3e:	06 6c       	and	r12,r3
80005b40:	80 00       	ld.sh	r0,r0[0x0]
80005b42:	49 26       	lddpc	r6,80005b88 <vTaskIncrementTick+0x30>
80005b44:	00 00       	add	r0,r0
80005b46:	06 68       	and	r8,r3
80005b48:	00 00       	add	r0,r0
80005b4a:	07 94       	ld.ub	r4,r3[0x1]
80005b4c:	80 00       	ld.sh	r0,r0[0x0]
80005b4e:	5b 58       	cp.w	r8,-11
80005b50:	00 00       	add	r0,r0
80005b52:	07 98       	ld.ub	r8,r3[0x1]
80005b54:	80 00       	ld.sh	r0,r0[0x0]
80005b56:	4c 6c       	lddpc	r12,80005c6c <vTaskIncrementTick+0x114>

80005b58 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
80005b58:	eb cd 40 80 	pushm	r7,lr
80005b5c:	1a 97       	mov	r7,sp
80005b5e:	20 3d       	sub	sp,12
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80005b60:	4c b8       	lddpc	r8,80005c8c <vTaskIncrementTick+0x134>
80005b62:	70 08       	ld.w	r8,r8[0x0]
80005b64:	58 08       	cp.w	r8,0
80005b66:	e0 81 00 89 	brne	80005c78 <vTaskIncrementTick+0x120>
	{
		++xTickCount;
80005b6a:	4c a8       	lddpc	r8,80005c90 <vTaskIncrementTick+0x138>
80005b6c:	70 08       	ld.w	r8,r8[0x0]
80005b6e:	f0 c9 ff ff 	sub	r9,r8,-1
80005b72:	4c 88       	lddpc	r8,80005c90 <vTaskIncrementTick+0x138>
80005b74:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
80005b76:	4c 78       	lddpc	r8,80005c90 <vTaskIncrementTick+0x138>
80005b78:	70 08       	ld.w	r8,r8[0x0]
80005b7a:	58 08       	cp.w	r8,0
80005b7c:	c2 71       	brne	80005bca <vTaskIncrementTick+0x72>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
80005b7e:	4c 68       	lddpc	r8,80005c94 <vTaskIncrementTick+0x13c>
80005b80:	70 08       	ld.w	r8,r8[0x0]
80005b82:	ef 48 ff f8 	st.w	r7[-8],r8
			pxDelayedTaskList = pxOverflowDelayedTaskList;
80005b86:	4c 58       	lddpc	r8,80005c98 <vTaskIncrementTick+0x140>
80005b88:	70 09       	ld.w	r9,r8[0x0]
80005b8a:	4c 38       	lddpc	r8,80005c94 <vTaskIncrementTick+0x13c>
80005b8c:	91 09       	st.w	r8[0x0],r9
			pxOverflowDelayedTaskList = pxTemp;
80005b8e:	4c 38       	lddpc	r8,80005c98 <vTaskIncrementTick+0x140>
80005b90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b94:	91 09       	st.w	r8[0x0],r9
			xNumOfOverflows++;
80005b96:	4c 28       	lddpc	r8,80005c9c <vTaskIncrementTick+0x144>
80005b98:	70 08       	ld.w	r8,r8[0x0]
80005b9a:	f0 c9 ff ff 	sub	r9,r8,-1
80005b9e:	4c 08       	lddpc	r8,80005c9c <vTaskIncrementTick+0x144>
80005ba0:	91 09       	st.w	r8[0x0],r9

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80005ba2:	4b d8       	lddpc	r8,80005c94 <vTaskIncrementTick+0x13c>
80005ba4:	70 08       	ld.w	r8,r8[0x0]
80005ba6:	70 08       	ld.w	r8,r8[0x0]
80005ba8:	58 08       	cp.w	r8,0
80005baa:	c0 51       	brne	80005bb4 <vTaskIncrementTick+0x5c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
80005bac:	4b d8       	lddpc	r8,80005ca0 <vTaskIncrementTick+0x148>
80005bae:	3f f9       	mov	r9,-1
80005bb0:	91 09       	st.w	r8[0x0],r9
80005bb2:	c0 c8       	rjmp	80005bca <vTaskIncrementTick+0x72>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80005bb4:	4b 88       	lddpc	r8,80005c94 <vTaskIncrementTick+0x13c>
80005bb6:	70 08       	ld.w	r8,r8[0x0]
80005bb8:	70 38       	ld.w	r8,r8[0xc]
80005bba:	70 38       	ld.w	r8,r8[0xc]
80005bbc:	ef 48 ff f4 	st.w	r7[-12],r8
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80005bc0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005bc4:	70 19       	ld.w	r9,r8[0x4]
80005bc6:	4b 78       	lddpc	r8,80005ca0 <vTaskIncrementTick+0x148>
80005bc8:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80005bca:	4b 28       	lddpc	r8,80005c90 <vTaskIncrementTick+0x138>
80005bcc:	70 09       	ld.w	r9,r8[0x0]
80005bce:	4b 58       	lddpc	r8,80005ca0 <vTaskIncrementTick+0x148>
80005bd0:	70 08       	ld.w	r8,r8[0x0]
80005bd2:	10 39       	cp.w	r9,r8
80005bd4:	c5 83       	brcs	80005c84 <vTaskIncrementTick+0x12c>
80005bd6:	4b 08       	lddpc	r8,80005c94 <vTaskIncrementTick+0x13c>
80005bd8:	70 08       	ld.w	r8,r8[0x0]
80005bda:	70 08       	ld.w	r8,r8[0x0]
80005bdc:	58 08       	cp.w	r8,0
80005bde:	c0 51       	brne	80005be8 <vTaskIncrementTick+0x90>
80005be0:	4b 08       	lddpc	r8,80005ca0 <vTaskIncrementTick+0x148>
80005be2:	3f f9       	mov	r9,-1
80005be4:	91 09       	st.w	r8[0x0],r9
80005be6:	c4 f8       	rjmp	80005c84 <vTaskIncrementTick+0x12c>
80005be8:	4a b8       	lddpc	r8,80005c94 <vTaskIncrementTick+0x13c>
80005bea:	70 08       	ld.w	r8,r8[0x0]
80005bec:	70 38       	ld.w	r8,r8[0xc]
80005bee:	70 38       	ld.w	r8,r8[0xc]
80005bf0:	ef 48 ff f4 	st.w	r7[-12],r8
80005bf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005bf8:	70 18       	ld.w	r8,r8[0x4]
80005bfa:	ef 48 ff fc 	st.w	r7[-4],r8
80005bfe:	4a 58       	lddpc	r8,80005c90 <vTaskIncrementTick+0x138>
80005c00:	70 09       	ld.w	r9,r8[0x0]
80005c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005c06:	10 39       	cp.w	r9,r8
80005c08:	c0 62       	brcc	80005c14 <vTaskIncrementTick+0xbc>
80005c0a:	4a 68       	lddpc	r8,80005ca0 <vTaskIncrementTick+0x148>
80005c0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c10:	91 09       	st.w	r8[0x0],r9
80005c12:	c3 98       	rjmp	80005c84 <vTaskIncrementTick+0x12c>
80005c14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c18:	2f c8       	sub	r8,-4
80005c1a:	10 9c       	mov	r12,r8
80005c1c:	f0 1f 00 22 	mcall	80005ca4 <vTaskIncrementTick+0x14c>
80005c20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c24:	70 a8       	ld.w	r8,r8[0x28]
80005c26:	58 08       	cp.w	r8,0
80005c28:	c0 70       	breq	80005c36 <vTaskIncrementTick+0xde>
80005c2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c2e:	2e 88       	sub	r8,-24
80005c30:	10 9c       	mov	r12,r8
80005c32:	f0 1f 00 1d 	mcall	80005ca4 <vTaskIncrementTick+0x14c>
80005c36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c3a:	70 b9       	ld.w	r9,r8[0x2c]
80005c3c:	49 b8       	lddpc	r8,80005ca8 <vTaskIncrementTick+0x150>
80005c3e:	70 08       	ld.w	r8,r8[0x0]
80005c40:	10 39       	cp.w	r9,r8
80005c42:	e0 88 00 07 	brls	80005c50 <vTaskIncrementTick+0xf8>
80005c46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c4a:	70 b9       	ld.w	r9,r8[0x2c]
80005c4c:	49 78       	lddpc	r8,80005ca8 <vTaskIncrementTick+0x150>
80005c4e:	91 09       	st.w	r8[0x0],r9
80005c50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c54:	f0 ca ff fc 	sub	r10,r8,-4
80005c58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c5c:	70 b9       	ld.w	r9,r8[0x2c]
80005c5e:	12 98       	mov	r8,r9
80005c60:	a3 68       	lsl	r8,0x2
80005c62:	12 08       	add	r8,r9
80005c64:	a3 68       	lsl	r8,0x2
80005c66:	10 99       	mov	r9,r8
80005c68:	49 18       	lddpc	r8,80005cac <vTaskIncrementTick+0x154>
80005c6a:	f2 08 00 08 	add	r8,r9,r8
80005c6e:	14 9b       	mov	r11,r10
80005c70:	10 9c       	mov	r12,r8
80005c72:	f0 1f 00 10 	mcall	80005cb0 <vTaskIncrementTick+0x158>
80005c76:	cb 0b       	rjmp	80005bd6 <vTaskIncrementTick+0x7e>
	}
	else
	{
		++uxMissedTicks;
80005c78:	48 f8       	lddpc	r8,80005cb4 <vTaskIncrementTick+0x15c>
80005c7a:	70 08       	ld.w	r8,r8[0x0]
80005c7c:	f0 c9 ff ff 	sub	r9,r8,-1
80005c80:	48 d8       	lddpc	r8,80005cb4 <vTaskIncrementTick+0x15c>
80005c82:	91 09       	st.w	r8[0x0],r9
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
80005c84:	2f dd       	sub	sp,-12
80005c86:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c8a:	00 00       	add	r0,r0
80005c8c:	00 00       	add	r0,r0
80005c8e:	07 90       	ld.ub	r0,r3[0x1]
80005c90:	00 00       	add	r0,r0
80005c92:	07 80       	ld.ub	r0,r3[0x0]
80005c94:	00 00       	add	r0,r0
80005c96:	07 34       	ld.ub	r4,r3++
80005c98:	00 00       	add	r0,r0
80005c9a:	07 38       	ld.ub	r8,r3++
80005c9c:	00 00       	add	r0,r0
80005c9e:	07 9c       	ld.ub	r12,r3[0x1]
80005ca0:	00 00       	add	r0,r0
80005ca2:	00 24       	rsub	r4,r0
80005ca4:	80 00       	ld.sh	r0,r0[0x0]
80005ca6:	4a 3a       	lddpc	r10,80005d30 <vTaskSwitchContext+0x78>
80005ca8:	00 00       	add	r0,r0
80005caa:	07 88       	ld.ub	r8,r3[0x0]
80005cac:	00 00       	add	r0,r0
80005cae:	06 6c       	and	r12,r3
80005cb0:	80 00       	ld.sh	r0,r0[0x0]
80005cb2:	49 26       	lddpc	r6,80005cf8 <vTaskSwitchContext+0x40>
80005cb4:	00 00       	add	r0,r0
80005cb6:	07 94       	ld.ub	r4,r3[0x1]

80005cb8 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80005cb8:	eb cd 40 80 	pushm	r7,lr
80005cbc:	1a 97       	mov	r7,sp
80005cbe:	20 1d       	sub	sp,4
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80005cc0:	4a 58       	lddpc	r8,80005d54 <vTaskSwitchContext+0x9c>
80005cc2:	70 08       	ld.w	r8,r8[0x0]
80005cc4:	58 08       	cp.w	r8,0
80005cc6:	c0 c0       	breq	80005cde <vTaskSwitchContext+0x26>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
80005cc8:	4a 48       	lddpc	r8,80005d58 <vTaskSwitchContext+0xa0>
80005cca:	30 19       	mov	r9,1
80005ccc:	91 09       	st.w	r8[0x0],r9
80005cce:	c3 f8       	rjmp	80005d4c <vTaskSwitchContext+0x94>

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80005cd0:	4a 38       	lddpc	r8,80005d5c <vTaskSwitchContext+0xa4>
80005cd2:	70 08       	ld.w	r8,r8[0x0]
80005cd4:	f0 c9 00 01 	sub	r9,r8,1
80005cd8:	4a 18       	lddpc	r8,80005d5c <vTaskSwitchContext+0xa4>
80005cda:	91 09       	st.w	r8[0x0],r9
80005cdc:	c0 28       	rjmp	80005ce0 <vTaskSwitchContext+0x28>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80005cde:	d7 03       	nop
80005ce0:	49 f8       	lddpc	r8,80005d5c <vTaskSwitchContext+0xa4>
80005ce2:	70 09       	ld.w	r9,r8[0x0]
80005ce4:	12 98       	mov	r8,r9
80005ce6:	a3 68       	lsl	r8,0x2
80005ce8:	12 08       	add	r8,r9
80005cea:	a3 68       	lsl	r8,0x2
80005cec:	10 99       	mov	r9,r8
80005cee:	49 d8       	lddpc	r8,80005d60 <vTaskSwitchContext+0xa8>
80005cf0:	f2 08 00 08 	add	r8,r9,r8
80005cf4:	70 08       	ld.w	r8,r8[0x0]
80005cf6:	58 08       	cp.w	r8,0
80005cf8:	ce c0       	breq	80005cd0 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
80005cfa:	49 98       	lddpc	r8,80005d5c <vTaskSwitchContext+0xa4>
80005cfc:	70 09       	ld.w	r9,r8[0x0]
80005cfe:	12 98       	mov	r8,r9
80005d00:	a3 68       	lsl	r8,0x2
80005d02:	12 08       	add	r8,r9
80005d04:	a3 68       	lsl	r8,0x2
80005d06:	10 99       	mov	r9,r8
80005d08:	49 68       	lddpc	r8,80005d60 <vTaskSwitchContext+0xa8>
80005d0a:	f2 08 00 08 	add	r8,r9,r8
80005d0e:	ef 48 ff fc 	st.w	r7[-4],r8
80005d12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d16:	70 18       	ld.w	r8,r8[0x4]
80005d18:	70 19       	ld.w	r9,r8[0x4]
80005d1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d1e:	91 19       	st.w	r8[0x4],r9
80005d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d24:	70 19       	ld.w	r9,r8[0x4]
80005d26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d2a:	2f 88       	sub	r8,-8
80005d2c:	10 39       	cp.w	r9,r8
80005d2e:	c0 81       	brne	80005d3e <vTaskSwitchContext+0x86>
80005d30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d34:	70 18       	ld.w	r8,r8[0x4]
80005d36:	70 19       	ld.w	r9,r8[0x4]
80005d38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d3c:	91 19       	st.w	r8[0x4],r9
80005d3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d42:	70 18       	ld.w	r8,r8[0x4]
80005d44:	70 38       	ld.w	r8,r8[0xc]
80005d46:	10 99       	mov	r9,r8
80005d48:	48 78       	lddpc	r8,80005d64 <vTaskSwitchContext+0xac>
80005d4a:	91 09       	st.w	r8[0x0],r9

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
80005d4c:	2f fd       	sub	sp,-4
80005d4e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d52:	00 00       	add	r0,r0
80005d54:	00 00       	add	r0,r0
80005d56:	07 90       	ld.ub	r0,r3[0x1]
80005d58:	00 00       	add	r0,r0
80005d5a:	07 98       	ld.ub	r8,r3[0x1]
80005d5c:	00 00       	add	r0,r0
80005d5e:	07 88       	ld.ub	r8,r3[0x0]
80005d60:	00 00       	add	r0,r0
80005d62:	06 6c       	and	r12,r3
80005d64:	00 00       	add	r0,r0
80005d66:	06 68       	and	r8,r3

80005d68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
80005d68:	eb cd 40 80 	pushm	r7,lr
80005d6c:	1a 97       	mov	r7,sp
80005d6e:	20 3d       	sub	sp,12
80005d70:	ef 4c ff f8 	st.w	r7[-8],r12
80005d74:	ef 4b ff f4 	st.w	r7[-12],r11
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
80005d78:	49 58       	lddpc	r8,80005dcc <vTaskPlaceOnEventList+0x64>
80005d7a:	70 08       	ld.w	r8,r8[0x0]
80005d7c:	2e 88       	sub	r8,-24
80005d7e:	10 9b       	mov	r11,r8
80005d80:	ee fc ff f8 	ld.w	r12,r7[-8]
80005d84:	f0 1f 00 13 	mcall	80005dd0 <vTaskPlaceOnEventList+0x68>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80005d88:	49 18       	lddpc	r8,80005dcc <vTaskPlaceOnEventList+0x64>
80005d8a:	70 08       	ld.w	r8,r8[0x0]
80005d8c:	2f c8       	sub	r8,-4
80005d8e:	10 9c       	mov	r12,r8
80005d90:	f0 1f 00 11 	mcall	80005dd4 <vTaskPlaceOnEventList+0x6c>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
80005d94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005d98:	5b f8       	cp.w	r8,-1
80005d9a:	c0 91       	brne	80005dac <vTaskPlaceOnEventList+0x44>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80005d9c:	48 c8       	lddpc	r8,80005dcc <vTaskPlaceOnEventList+0x64>
80005d9e:	70 08       	ld.w	r8,r8[0x0]
80005da0:	2f c8       	sub	r8,-4
80005da2:	10 9b       	mov	r11,r8
80005da4:	48 dc       	lddpc	r12,80005dd8 <vTaskPlaceOnEventList+0x70>
80005da6:	f0 1f 00 0e 	mcall	80005ddc <vTaskPlaceOnEventList+0x74>
80005daa:	c0 d8       	rjmp	80005dc4 <vTaskPlaceOnEventList+0x5c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
80005dac:	48 d8       	lddpc	r8,80005de0 <vTaskPlaceOnEventList+0x78>
80005dae:	70 09       	ld.w	r9,r8[0x0]
80005db0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005db4:	f2 08 00 08 	add	r8,r9,r8
80005db8:	ef 48 ff fc 	st.w	r7[-4],r8
			prvAddCurrentTaskToDelayedList( xTimeToWake );
80005dbc:	ee fc ff fc 	ld.w	r12,r7[-4]
80005dc0:	f0 1f 00 09 	mcall	80005de4 <vTaskPlaceOnEventList+0x7c>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
80005dc4:	2f dd       	sub	sp,-12
80005dc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80005dca:	00 00       	add	r0,r0
80005dcc:	00 00       	add	r0,r0
80005dce:	06 68       	and	r8,r3
80005dd0:	80 00       	ld.sh	r0,r0[0x0]
80005dd2:	49 98       	lddpc	r8,80005e34 <xTaskRemoveFromEventList+0x4c>
80005dd4:	80 00       	ld.sh	r0,r0[0x0]
80005dd6:	4a 3a       	lddpc	r10,80005e60 <xTaskRemoveFromEventList+0x78>
80005dd8:	00 00       	add	r0,r0
80005dda:	07 68       	ld.uh	r8,--r3
80005ddc:	80 00       	ld.sh	r0,r0[0x0]
80005dde:	49 26       	lddpc	r6,80005e24 <xTaskRemoveFromEventList+0x3c>
80005de0:	00 00       	add	r0,r0
80005de2:	07 80       	ld.ub	r0,r3[0x0]
80005de4:	80 00       	ld.sh	r0,r0[0x0]
80005de6:	61 a8       	ld.w	r8,r0[0x68]

80005de8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
80005de8:	eb cd 40 80 	pushm	r7,lr
80005dec:	1a 97       	mov	r7,sp
80005dee:	20 3d       	sub	sp,12
80005df0:	ef 4c ff f4 	st.w	r7[-12],r12
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
80005df4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005df8:	70 38       	ld.w	r8,r8[0xc]
80005dfa:	70 38       	ld.w	r8,r8[0xc]
80005dfc:	ef 48 ff f8 	st.w	r7[-8],r8
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
80005e00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e04:	2e 88       	sub	r8,-24
80005e06:	10 9c       	mov	r12,r8
80005e08:	f0 1f 00 25 	mcall	80005e9c <xTaskRemoveFromEventList+0xb4>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80005e0c:	4a 58       	lddpc	r8,80005ea0 <xTaskRemoveFromEventList+0xb8>
80005e0e:	70 08       	ld.w	r8,r8[0x0]
80005e10:	58 08       	cp.w	r8,0
80005e12:	c2 81       	brne	80005e62 <xTaskRemoveFromEventList+0x7a>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
80005e14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e18:	2f c8       	sub	r8,-4
80005e1a:	10 9c       	mov	r12,r8
80005e1c:	f0 1f 00 20 	mcall	80005e9c <xTaskRemoveFromEventList+0xb4>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
80005e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e24:	70 b9       	ld.w	r9,r8[0x2c]
80005e26:	4a 08       	lddpc	r8,80005ea4 <xTaskRemoveFromEventList+0xbc>
80005e28:	70 08       	ld.w	r8,r8[0x0]
80005e2a:	10 39       	cp.w	r9,r8
80005e2c:	e0 88 00 07 	brls	80005e3a <xTaskRemoveFromEventList+0x52>
80005e30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e34:	70 b9       	ld.w	r9,r8[0x2c]
80005e36:	49 c8       	lddpc	r8,80005ea4 <xTaskRemoveFromEventList+0xbc>
80005e38:	91 09       	st.w	r8[0x0],r9
80005e3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e3e:	f0 ca ff fc 	sub	r10,r8,-4
80005e42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e46:	70 b9       	ld.w	r9,r8[0x2c]
80005e48:	12 98       	mov	r8,r9
80005e4a:	a3 68       	lsl	r8,0x2
80005e4c:	12 08       	add	r8,r9
80005e4e:	a3 68       	lsl	r8,0x2
80005e50:	10 99       	mov	r9,r8
80005e52:	49 68       	lddpc	r8,80005ea8 <xTaskRemoveFromEventList+0xc0>
80005e54:	f2 08 00 08 	add	r8,r9,r8
80005e58:	14 9b       	mov	r11,r10
80005e5a:	10 9c       	mov	r12,r8
80005e5c:	f0 1f 00 14 	mcall	80005eac <xTaskRemoveFromEventList+0xc4>
80005e60:	c0 88       	rjmp	80005e70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
80005e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e66:	2e 88       	sub	r8,-24
80005e68:	10 9b       	mov	r11,r8
80005e6a:	49 2c       	lddpc	r12,80005eb0 <xTaskRemoveFromEventList+0xc8>
80005e6c:	f0 1f 00 10 	mcall	80005eac <xTaskRemoveFromEventList+0xc4>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
80005e70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e74:	70 b9       	ld.w	r9,r8[0x2c]
80005e76:	49 08       	lddpc	r8,80005eb4 <xTaskRemoveFromEventList+0xcc>
80005e78:	70 08       	ld.w	r8,r8[0x0]
80005e7a:	70 b8       	ld.w	r8,r8[0x2c]
80005e7c:	10 39       	cp.w	r9,r8
80005e7e:	c0 53       	brcs	80005e88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
80005e80:	30 18       	mov	r8,1
80005e82:	ef 48 ff fc 	st.w	r7[-4],r8
80005e86:	c0 48       	rjmp	80005e8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
80005e88:	30 08       	mov	r8,0
80005e8a:	ef 48 ff fc 	st.w	r7[-4],r8
	}

	return xReturn;
80005e8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005e92:	10 9c       	mov	r12,r8
80005e94:	2f dd       	sub	sp,-12
80005e96:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e9a:	00 00       	add	r0,r0
80005e9c:	80 00       	ld.sh	r0,r0[0x0]
80005e9e:	4a 3a       	lddpc	r10,80005f28 <xTaskCheckForTimeOut+0x40>
80005ea0:	00 00       	add	r0,r0
80005ea2:	07 90       	ld.ub	r0,r3[0x1]
80005ea4:	00 00       	add	r0,r0
80005ea6:	07 88       	ld.ub	r8,r3[0x0]
80005ea8:	00 00       	add	r0,r0
80005eaa:	06 6c       	and	r12,r3
80005eac:	80 00       	ld.sh	r0,r0[0x0]
80005eae:	49 26       	lddpc	r6,80005ef4 <xTaskCheckForTimeOut+0xc>
80005eb0:	00 00       	add	r0,r0
80005eb2:	07 3c       	ld.ub	r12,r3++
80005eb4:	00 00       	add	r0,r0
80005eb6:	06 68       	and	r8,r3

80005eb8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
80005eb8:	eb cd 40 80 	pushm	r7,lr
80005ebc:	1a 97       	mov	r7,sp
80005ebe:	20 1d       	sub	sp,4
80005ec0:	ef 4c ff fc 	st.w	r7[-4],r12
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
80005ec4:	48 78       	lddpc	r8,80005ee0 <vTaskSetTimeOutState+0x28>
80005ec6:	70 09       	ld.w	r9,r8[0x0]
80005ec8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ecc:	91 09       	st.w	r8[0x0],r9
	pxTimeOut->xTimeOnEntering = xTickCount;
80005ece:	48 68       	lddpc	r8,80005ee4 <vTaskSetTimeOutState+0x2c>
80005ed0:	70 09       	ld.w	r9,r8[0x0]
80005ed2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ed6:	91 19       	st.w	r8[0x4],r9
}
80005ed8:	2f fd       	sub	sp,-4
80005eda:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ede:	00 00       	add	r0,r0
80005ee0:	00 00       	add	r0,r0
80005ee2:	07 9c       	ld.ub	r12,r3[0x1]
80005ee4:	00 00       	add	r0,r0
80005ee6:	07 80       	ld.ub	r0,r3[0x0]

80005ee8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
80005ee8:	eb cd 40 80 	pushm	r7,lr
80005eec:	1a 97       	mov	r7,sp
80005eee:	20 3d       	sub	sp,12
80005ef0:	ef 4c ff f8 	st.w	r7[-8],r12
80005ef4:	ef 4b ff f4 	st.w	r7[-12],r11
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
80005ef8:	f0 1f 00 25 	mcall	80005f8c <xTaskCheckForTimeOut+0xa4>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
80005efc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f00:	70 08       	ld.w	r8,r8[0x0]
80005f02:	5b f8       	cp.w	r8,-1
80005f04:	c0 51       	brne	80005f0e <xTaskCheckForTimeOut+0x26>
			{
				xReturn = pdFALSE;
80005f06:	30 08       	mov	r8,0
80005f08:	ef 48 ff fc 	st.w	r7[-4],r8
80005f0c:	c3 88       	rjmp	80005f7c <xTaskCheckForTimeOut+0x94>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
80005f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f12:	70 09       	ld.w	r9,r8[0x0]
80005f14:	49 f8       	lddpc	r8,80005f90 <xTaskCheckForTimeOut+0xa8>
80005f16:	70 08       	ld.w	r8,r8[0x0]
80005f18:	10 39       	cp.w	r9,r8
80005f1a:	c0 d0       	breq	80005f34 <xTaskCheckForTimeOut+0x4c>
80005f1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f20:	70 19       	ld.w	r9,r8[0x4]
80005f22:	49 d8       	lddpc	r8,80005f94 <xTaskCheckForTimeOut+0xac>
80005f24:	70 08       	ld.w	r8,r8[0x0]
80005f26:	10 39       	cp.w	r9,r8
80005f28:	e0 8b 00 06 	brhi	80005f34 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
80005f2c:	30 18       	mov	r8,1
80005f2e:	ef 48 ff fc 	st.w	r7[-4],r8
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
80005f32:	c2 58       	rjmp	80005f7c <xTaskCheckForTimeOut+0x94>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
80005f34:	49 88       	lddpc	r8,80005f94 <xTaskCheckForTimeOut+0xac>
80005f36:	70 09       	ld.w	r9,r8[0x0]
80005f38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f3c:	70 18       	ld.w	r8,r8[0x4]
80005f3e:	10 19       	sub	r9,r8
80005f40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f44:	70 08       	ld.w	r8,r8[0x0]
80005f46:	10 39       	cp.w	r9,r8
80005f48:	c1 72       	brcc	80005f76 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
80005f4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f4e:	70 09       	ld.w	r9,r8[0x0]
80005f50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005f54:	70 1a       	ld.w	r10,r8[0x4]
80005f56:	49 08       	lddpc	r8,80005f94 <xTaskCheckForTimeOut+0xac>
80005f58:	70 08       	ld.w	r8,r8[0x0]
80005f5a:	f4 08 01 08 	sub	r8,r10,r8
80005f5e:	10 09       	add	r9,r8
80005f60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f64:	91 09       	st.w	r8[0x0],r9
			vTaskSetTimeOutState( pxTimeOut );
80005f66:	ee fc ff f8 	ld.w	r12,r7[-8]
80005f6a:	f0 1f 00 0c 	mcall	80005f98 <xTaskCheckForTimeOut+0xb0>
			xReturn = pdFALSE;
80005f6e:	30 08       	mov	r8,0
80005f70:	ef 48 ff fc 	st.w	r7[-4],r8
80005f74:	c0 48       	rjmp	80005f7c <xTaskCheckForTimeOut+0x94>
		}
		else
		{
			xReturn = pdTRUE;
80005f76:	30 18       	mov	r8,1
80005f78:	ef 48 ff fc 	st.w	r7[-4],r8
		}
	}
	taskEXIT_CRITICAL();
80005f7c:	f0 1f 00 08 	mcall	80005f9c <xTaskCheckForTimeOut+0xb4>

	return xReturn;
80005f80:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005f84:	10 9c       	mov	r12,r8
80005f86:	2f dd       	sub	sp,-12
80005f88:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f8c:	80 00       	ld.sh	r0,r0[0x0]
80005f8e:	4c 50       	lddpc	r0,800060a0 <prvInitialiseTaskLists+0x24>
80005f90:	00 00       	add	r0,r0
80005f92:	07 9c       	ld.ub	r12,r3[0x1]
80005f94:	00 00       	add	r0,r0
80005f96:	07 80       	ld.ub	r0,r3[0x0]
80005f98:	80 00       	ld.sh	r0,r0[0x0]
80005f9a:	5e b8       	rethi	r8
80005f9c:	80 00       	ld.sh	r0,r0[0x0]
80005f9e:	4c 6c       	lddpc	r12,800060b4 <prvInitialiseTaskLists+0x38>

80005fa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
80005fa0:	eb cd 40 80 	pushm	r7,lr
80005fa4:	1a 97       	mov	r7,sp
	xMissedYield = pdTRUE;
80005fa6:	48 38       	lddpc	r8,80005fb0 <vTaskMissedYield+0x10>
80005fa8:	30 19       	mov	r9,1
80005faa:	91 09       	st.w	r8[0x0],r9
}
80005fac:	e3 cd 80 80 	ldm	sp++,r7,pc
80005fb0:	00 00       	add	r0,r0
80005fb2:	07 98       	ld.ub	r8,r3[0x1]

80005fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80005fb4:	eb cd 40 80 	pushm	r7,lr
80005fb8:	1a 97       	mov	r7,sp
80005fba:	20 1d       	sub	sp,4
80005fbc:	ef 4c ff fc 	st.w	r7[-4],r12
80005fc0:	c0 28       	rjmp	80005fc4 <prvIdleTask+0x10>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
80005fc2:	d7 03       	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80005fc4:	f0 1f 00 05 	mcall	80005fd8 <prvIdleTask+0x24>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
80005fc8:	48 58       	lddpc	r8,80005fdc <prvIdleTask+0x28>
80005fca:	70 08       	ld.w	r8,r8[0x0]
80005fcc:	58 18       	cp.w	r8,1
80005fce:	fe 98 ff fa 	brls	80005fc2 <prvIdleTask+0xe>
			{
				taskYIELD();
80005fd2:	d7 33       	scall
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
80005fd4:	cf 8b       	rjmp	80005fc4 <prvIdleTask+0x10>
80005fd6:	00 00       	add	r0,r0
80005fd8:	80 00       	ld.sh	r0,r0[0x0]
80005fda:	61 10       	ld.w	r0,r0[0x44]
80005fdc:	00 00       	add	r0,r0
80005fde:	06 6c       	and	r12,r3

80005fe0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
80005fe0:	eb cd 40 80 	pushm	r7,lr
80005fe4:	1a 97       	mov	r7,sp
80005fe6:	20 5d       	sub	sp,20
80005fe8:	ef 4c ff fc 	st.w	r7[-4],r12
80005fec:	ef 4b ff f8 	st.w	r7[-8],r11
80005ff0:	ef 4a ff f4 	st.w	r7[-12],r10
80005ff4:	ef 49 ff f0 	st.w	r7[-16],r9
80005ff8:	ef 58 ff ec 	st.h	r7[-20],r8
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
80005ffc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006000:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006004:	2c c8       	sub	r8,-52
80006006:	31 0a       	mov	r10,16
80006008:	12 9b       	mov	r11,r9
8000600a:	10 9c       	mov	r12,r8
8000600c:	f0 1f 00 1a 	mcall	80006074 <prvInitialiseTCBVariables+0x94>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
80006010:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006014:	30 08       	mov	r8,0
80006016:	f3 68 00 43 	st.b	r9[67],r8

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
8000601a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000601e:	58 78       	cp.w	r8,7
80006020:	e0 88 00 05 	brls	8000602a <prvInitialiseTCBVariables+0x4a>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
80006024:	30 78       	mov	r8,7
80006026:	ef 48 ff f4 	st.w	r7[-12],r8
	}

	pxTCB->uxPriority = uxPriority;
8000602a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000602e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006032:	91 b9       	st.w	r8[0x2c],r9
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80006034:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006038:	2f c8       	sub	r8,-4
8000603a:	10 9c       	mov	r12,r8
8000603c:	f0 1f 00 0f 	mcall	80006078 <prvInitialiseTCBVariables+0x98>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80006040:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006044:	2e 88       	sub	r8,-24
80006046:	10 9c       	mov	r12,r8
80006048:	f0 1f 00 0c 	mcall	80006078 <prvInitialiseTCBVariables+0x98>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
8000604c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006050:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006054:	91 49       	st.w	r8[0x10],r9

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
80006056:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000605a:	f0 09 11 08 	rsub	r9,r8,8
8000605e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006062:	91 69       	st.w	r8[0x18],r9
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80006064:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006068:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000606c:	91 99       	st.w	r8[0x24],r9
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
8000606e:	2f bd       	sub	sp,-20
80006070:	e3 cd 80 80 	ldm	sp++,r7,pc
80006074:	80 00       	ld.sh	r0,r0[0x0]
80006076:	6e 0c       	ld.w	r12,r7[0x0]
80006078:	80 00       	ld.sh	r0,r0[0x0]
8000607a:	49 0c       	lddpc	r12,800060b8 <prvInitialiseTaskLists+0x3c>

8000607c <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
8000607c:	eb cd 40 80 	pushm	r7,lr
80006080:	1a 97       	mov	r7,sp
80006082:	20 1d       	sub	sp,4
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
80006084:	30 08       	mov	r8,0
80006086:	ef 48 ff fc 	st.w	r7[-4],r8
8000608a:	c1 38       	rjmp	800060b0 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
8000608c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006090:	12 98       	mov	r8,r9
80006092:	a3 68       	lsl	r8,0x2
80006094:	12 08       	add	r8,r9
80006096:	a3 68       	lsl	r8,0x2
80006098:	10 99       	mov	r9,r8
8000609a:	49 58       	lddpc	r8,800060ec <prvInitialiseTaskLists+0x70>
8000609c:	f2 08 00 08 	add	r8,r9,r8
800060a0:	10 9c       	mov	r12,r8
800060a2:	f0 1f 00 14 	mcall	800060f0 <prvInitialiseTaskLists+0x74>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
800060a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060aa:	2f f8       	sub	r8,-1
800060ac:	ef 48 ff fc 	st.w	r7[-4],r8
800060b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060b4:	58 78       	cp.w	r8,7
800060b6:	fe 98 ff eb 	brls	8000608c <prvInitialiseTaskLists+0x10>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
800060ba:	48 fc       	lddpc	r12,800060f4 <prvInitialiseTaskLists+0x78>
800060bc:	f0 1f 00 0d 	mcall	800060f0 <prvInitialiseTaskLists+0x74>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
800060c0:	48 ec       	lddpc	r12,800060f8 <prvInitialiseTaskLists+0x7c>
800060c2:	f0 1f 00 0c 	mcall	800060f0 <prvInitialiseTaskLists+0x74>
	vListInitialise( ( xList * ) &xPendingReadyList );
800060c6:	48 ec       	lddpc	r12,800060fc <prvInitialiseTaskLists+0x80>
800060c8:	f0 1f 00 0a 	mcall	800060f0 <prvInitialiseTaskLists+0x74>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
800060cc:	48 dc       	lddpc	r12,80006100 <prvInitialiseTaskLists+0x84>
800060ce:	f0 1f 00 09 	mcall	800060f0 <prvInitialiseTaskLists+0x74>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
800060d2:	48 dc       	lddpc	r12,80006104 <prvInitialiseTaskLists+0x88>
800060d4:	f0 1f 00 07 	mcall	800060f0 <prvInitialiseTaskLists+0x74>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
800060d8:	48 c8       	lddpc	r8,80006108 <prvInitialiseTaskLists+0x8c>
800060da:	48 79       	lddpc	r9,800060f4 <prvInitialiseTaskLists+0x78>
800060dc:	91 09       	st.w	r8[0x0],r9
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
800060de:	48 c8       	lddpc	r8,8000610c <prvInitialiseTaskLists+0x90>
800060e0:	48 69       	lddpc	r9,800060f8 <prvInitialiseTaskLists+0x7c>
800060e2:	91 09       	st.w	r8[0x0],r9
}
800060e4:	2f fd       	sub	sp,-4
800060e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800060ea:	00 00       	add	r0,r0
800060ec:	00 00       	add	r0,r0
800060ee:	06 6c       	and	r12,r3
800060f0:	80 00       	ld.sh	r0,r0[0x0]
800060f2:	48 c0       	lddpc	r0,80006120 <prvCheckTasksWaitingTermination+0x10>
800060f4:	00 00       	add	r0,r0
800060f6:	07 0c       	ld.w	r12,r3++
800060f8:	00 00       	add	r0,r0
800060fa:	07 20       	ld.uh	r0,r3++
800060fc:	00 00       	add	r0,r0
800060fe:	07 3c       	ld.ub	r12,r3++
80006100:	00 00       	add	r0,r0
80006102:	07 50       	ld.sh	r0,--r3
80006104:	00 00       	add	r0,r0
80006106:	07 68       	ld.uh	r8,--r3
80006108:	00 00       	add	r0,r0
8000610a:	07 34       	ld.ub	r4,r3++
8000610c:	00 00       	add	r0,r0
8000610e:	07 38       	ld.ub	r8,r3++

80006110 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80006110:	eb cd 40 80 	pushm	r7,lr
80006114:	1a 97       	mov	r7,sp
80006116:	20 2d       	sub	sp,8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
80006118:	49 b8       	lddpc	r8,80006184 <prvCheckTasksWaitingTermination+0x74>
8000611a:	70 08       	ld.w	r8,r8[0x0]
8000611c:	58 08       	cp.w	r8,0
8000611e:	c2 f0       	breq	8000617c <prvCheckTasksWaitingTermination+0x6c>
		{
			vTaskSuspendAll();
80006120:	f0 1f 00 1a 	mcall	80006188 <prvCheckTasksWaitingTermination+0x78>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80006124:	49 a8       	lddpc	r8,8000618c <prvCheckTasksWaitingTermination+0x7c>
80006126:	70 08       	ld.w	r8,r8[0x0]
80006128:	58 08       	cp.w	r8,0
8000612a:	5f 08       	sreq	r8
8000612c:	ef 48 ff f8 	st.w	r7[-8],r8
			xTaskResumeAll();
80006130:	f0 1f 00 18 	mcall	80006190 <prvCheckTasksWaitingTermination+0x80>

			if( xListIsEmpty == pdFALSE )
80006134:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006138:	58 08       	cp.w	r8,0
8000613a:	c2 11       	brne	8000617c <prvCheckTasksWaitingTermination+0x6c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
8000613c:	f0 1f 00 16 	mcall	80006194 <prvCheckTasksWaitingTermination+0x84>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
80006140:	49 38       	lddpc	r8,8000618c <prvCheckTasksWaitingTermination+0x7c>
80006142:	2f 88       	sub	r8,-8
80006144:	70 18       	ld.w	r8,r8[0x4]
80006146:	70 38       	ld.w	r8,r8[0xc]
80006148:	ef 48 ff fc 	st.w	r7[-4],r8
					vListRemove( &( pxTCB->xGenericListItem ) );
8000614c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006150:	2f c8       	sub	r8,-4
80006152:	10 9c       	mov	r12,r8
80006154:	f0 1f 00 11 	mcall	80006198 <prvCheckTasksWaitingTermination+0x88>
					--uxCurrentNumberOfTasks;
80006158:	49 18       	lddpc	r8,8000619c <prvCheckTasksWaitingTermination+0x8c>
8000615a:	70 08       	ld.w	r8,r8[0x0]
8000615c:	f0 c9 00 01 	sub	r9,r8,1
80006160:	48 f8       	lddpc	r8,8000619c <prvCheckTasksWaitingTermination+0x8c>
80006162:	91 09       	st.w	r8[0x0],r9
					--uxTasksDeleted;
80006164:	48 88       	lddpc	r8,80006184 <prvCheckTasksWaitingTermination+0x74>
80006166:	70 08       	ld.w	r8,r8[0x0]
80006168:	f0 c9 00 01 	sub	r9,r8,1
8000616c:	48 68       	lddpc	r8,80006184 <prvCheckTasksWaitingTermination+0x74>
8000616e:	91 09       	st.w	r8[0x0],r9
				}
				taskEXIT_CRITICAL();
80006170:	f0 1f 00 0c 	mcall	800061a0 <prvCheckTasksWaitingTermination+0x90>

				prvDeleteTCB( pxTCB );
80006174:	ee fc ff fc 	ld.w	r12,r7[-4]
80006178:	f0 1f 00 0b 	mcall	800061a4 <prvCheckTasksWaitingTermination+0x94>
			}
		}
	}
	#endif
}
8000617c:	2f ed       	sub	sp,-8
8000617e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006182:	00 00       	add	r0,r0
80006184:	00 00       	add	r0,r0
80006186:	07 64       	ld.uh	r4,--r3
80006188:	80 00       	ld.sh	r0,r0[0x0]
8000618a:	5a 14       	cp.w	r4,-31
8000618c:	00 00       	add	r0,r0
8000618e:	07 50       	ld.sh	r0,--r3
80006190:	80 00       	ld.sh	r0,r0[0x0]
80006192:	5a 30       	cp.w	r0,-29
80006194:	80 00       	ld.sh	r0,r0[0x0]
80006196:	4c 50       	lddpc	r0,800062a8 <prvAllocateTCBAndStack+0x80>
80006198:	80 00       	ld.sh	r0,r0[0x0]
8000619a:	4a 3a       	lddpc	r10,80006224 <prvAddCurrentTaskToDelayedList+0x7c>
8000619c:	00 00       	add	r0,r0
8000619e:	07 7c       	ld.ub	r12,--r3
800061a0:	80 00       	ld.sh	r0,r0[0x0]
800061a2:	4c 6c       	lddpc	r12,800062b8 <prvAllocateTCBAndStack+0x90>
800061a4:	80 00       	ld.sh	r0,r0[0x0]
800061a6:	62 bc       	ld.w	r12,r1[0x2c]

800061a8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
800061a8:	eb cd 40 80 	pushm	r7,lr
800061ac:	1a 97       	mov	r7,sp
800061ae:	20 1d       	sub	sp,4
800061b0:	ef 4c ff fc 	st.w	r7[-4],r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800061b4:	49 78       	lddpc	r8,80006210 <prvAddCurrentTaskToDelayedList+0x68>
800061b6:	70 08       	ld.w	r8,r8[0x0]
800061b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800061bc:	91 19       	st.w	r8[0x4],r9

	if( xTimeToWake < xTickCount )
800061be:	49 68       	lddpc	r8,80006214 <prvAddCurrentTaskToDelayedList+0x6c>
800061c0:	70 08       	ld.w	r8,r8[0x0]
800061c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800061c6:	10 39       	cp.w	r9,r8
800061c8:	c0 c2       	brcc	800061e0 <prvAddCurrentTaskToDelayedList+0x38>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
800061ca:	49 28       	lddpc	r8,80006210 <prvAddCurrentTaskToDelayedList+0x68>
800061cc:	70 08       	ld.w	r8,r8[0x0]
800061ce:	f0 c9 ff fc 	sub	r9,r8,-4
800061d2:	49 28       	lddpc	r8,80006218 <prvAddCurrentTaskToDelayedList+0x70>
800061d4:	70 08       	ld.w	r8,r8[0x0]
800061d6:	12 9b       	mov	r11,r9
800061d8:	10 9c       	mov	r12,r8
800061da:	f0 1f 00 11 	mcall	8000621c <prvAddCurrentTaskToDelayedList+0x74>
800061de:	c1 58       	rjmp	80006208 <prvAddCurrentTaskToDelayedList+0x60>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
800061e0:	48 c8       	lddpc	r8,80006210 <prvAddCurrentTaskToDelayedList+0x68>
800061e2:	70 08       	ld.w	r8,r8[0x0]
800061e4:	f0 c9 ff fc 	sub	r9,r8,-4
800061e8:	48 e8       	lddpc	r8,80006220 <prvAddCurrentTaskToDelayedList+0x78>
800061ea:	70 08       	ld.w	r8,r8[0x0]
800061ec:	12 9b       	mov	r11,r9
800061ee:	10 9c       	mov	r12,r8
800061f0:	f0 1f 00 0b 	mcall	8000621c <prvAddCurrentTaskToDelayedList+0x74>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
800061f4:	48 c8       	lddpc	r8,80006224 <prvAddCurrentTaskToDelayedList+0x7c>
800061f6:	70 08       	ld.w	r8,r8[0x0]
800061f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800061fc:	10 39       	cp.w	r9,r8
800061fe:	c0 52       	brcc	80006208 <prvAddCurrentTaskToDelayedList+0x60>
		{
			xNextTaskUnblockTime = xTimeToWake;
80006200:	48 98       	lddpc	r8,80006224 <prvAddCurrentTaskToDelayedList+0x7c>
80006202:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006206:	91 09       	st.w	r8[0x0],r9
		}
	}
}
80006208:	2f fd       	sub	sp,-4
8000620a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000620e:	00 00       	add	r0,r0
80006210:	00 00       	add	r0,r0
80006212:	06 68       	and	r8,r3
80006214:	00 00       	add	r0,r0
80006216:	07 80       	ld.ub	r0,r3[0x0]
80006218:	00 00       	add	r0,r0
8000621a:	07 38       	ld.ub	r8,r3++
8000621c:	80 00       	ld.sh	r0,r0[0x0]
8000621e:	49 98       	lddpc	r8,80006280 <prvAllocateTCBAndStack+0x58>
80006220:	00 00       	add	r0,r0
80006222:	07 34       	ld.ub	r4,r3++
80006224:	00 00       	add	r0,r0
80006226:	00 24       	rsub	r4,r0

80006228 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
80006228:	eb cd 40 80 	pushm	r7,lr
8000622c:	1a 97       	mov	r7,sp
8000622e:	20 3d       	sub	sp,12
80006230:	18 98       	mov	r8,r12
80006232:	ef 4b ff f4 	st.w	r7[-12],r11
80006236:	ef 58 ff f8 	st.h	r7[-8],r8
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
8000623a:	34 4c       	mov	r12,68
8000623c:	f0 1f 00 1d 	mcall	800062b0 <prvAllocateTCBAndStack+0x88>
80006240:	18 98       	mov	r8,r12
80006242:	ef 48 ff fc 	st.w	r7[-4],r8

	if( pxNewTCB != NULL )
80006246:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000624a:	58 08       	cp.w	r8,0
8000624c:	c2 c0       	breq	800062a4 <prvAllocateTCBAndStack+0x7c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
8000624e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006252:	58 08       	cp.w	r8,0
80006254:	c0 91       	brne	80006266 <prvAllocateTCBAndStack+0x3e>
80006256:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000625a:	a3 68       	lsl	r8,0x2
8000625c:	10 9c       	mov	r12,r8
8000625e:	f0 1f 00 15 	mcall	800062b0 <prvAllocateTCBAndStack+0x88>
80006262:	18 98       	mov	r8,r12
80006264:	c0 38       	rjmp	8000626a <prvAllocateTCBAndStack+0x42>
80006266:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000626a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000626e:	93 c8       	st.w	r9[0x30],r8

		if( pxNewTCB->pxStack == NULL )
80006270:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006274:	70 c8       	ld.w	r8,r8[0x30]
80006276:	58 08       	cp.w	r8,0
80006278:	c0 91       	brne	8000628a <prvAllocateTCBAndStack+0x62>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
8000627a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000627e:	f0 1f 00 0e 	mcall	800062b4 <prvAllocateTCBAndStack+0x8c>
			pxNewTCB = NULL;
80006282:	30 08       	mov	r8,0
80006284:	ef 48 ff fc 	st.w	r7[-4],r8
80006288:	c0 e8       	rjmp	800062a4 <prvAllocateTCBAndStack+0x7c>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
8000628a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000628e:	f0 09 15 02 	lsl	r9,r8,0x2
80006292:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006296:	70 c8       	ld.w	r8,r8[0x30]
80006298:	12 9a       	mov	r10,r9
8000629a:	e0 6b 00 a5 	mov	r11,165
8000629e:	10 9c       	mov	r12,r8
800062a0:	f0 1f 00 06 	mcall	800062b8 <prvAllocateTCBAndStack+0x90>
		}
	}

	return pxNewTCB;
800062a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800062a8:	10 9c       	mov	r12,r8
800062aa:	2f dd       	sub	sp,-12
800062ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800062b0:	80 00       	ld.sh	r0,r0[0x0]
800062b2:	4f f8       	lddpc	r8,800064ac <__avr32_udiv64+0x1c4>
800062b4:	80 00       	ld.sh	r0,r0[0x0]
800062b6:	50 34       	stdsp	sp[0xc],r4
800062b8:	80 00       	ld.sh	r0,r0[0x0]
800062ba:	6b 1c       	ld.w	r12,r5[0x44]

800062bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
800062bc:	eb cd 40 80 	pushm	r7,lr
800062c0:	1a 97       	mov	r7,sp
800062c2:	20 1d       	sub	sp,4
800062c4:	ef 4c ff fc 	st.w	r7[-4],r12
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
800062c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800062cc:	70 c8       	ld.w	r8,r8[0x30]
800062ce:	10 9c       	mov	r12,r8
800062d0:	f0 1f 00 05 	mcall	800062e4 <prvDeleteTCB+0x28>
		vPortFree( pxTCB );
800062d4:	ee fc ff fc 	ld.w	r12,r7[-4]
800062d8:	f0 1f 00 03 	mcall	800062e4 <prvDeleteTCB+0x28>
	}
800062dc:	2f fd       	sub	sp,-4
800062de:	e3 cd 80 80 	ldm	sp++,r7,pc
800062e2:	00 00       	add	r0,r0
800062e4:	80 00       	ld.sh	r0,r0[0x0]
800062e6:	50 34       	stdsp	sp[0xc],r4

800062e8 <__avr32_udiv64>:
800062e8:	d4 31       	pushm	r0-r7,lr
800062ea:	1a 97       	mov	r7,sp
800062ec:	20 3d       	sub	sp,12
800062ee:	10 9c       	mov	r12,r8
800062f0:	12 9e       	mov	lr,r9
800062f2:	14 93       	mov	r3,r10
800062f4:	58 09       	cp.w	r9,0
800062f6:	e0 81 00 bd 	brne	80006470 <__avr32_udiv64+0x188>
800062fa:	16 38       	cp.w	r8,r11
800062fc:	e0 88 00 40 	brls	8000637c <__avr32_udiv64+0x94>
80006300:	f0 08 12 00 	clz	r8,r8
80006304:	c0 d0       	breq	8000631e <__avr32_udiv64+0x36>
80006306:	f6 08 09 4b 	lsl	r11,r11,r8
8000630a:	f0 09 11 20 	rsub	r9,r8,32
8000630e:	f8 08 09 4c 	lsl	r12,r12,r8
80006312:	f4 09 0a 49 	lsr	r9,r10,r9
80006316:	f4 08 09 43 	lsl	r3,r10,r8
8000631a:	f3 eb 10 0b 	or	r11,r9,r11
8000631e:	f8 0e 16 10 	lsr	lr,r12,0x10
80006322:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80006326:	f6 0e 0d 00 	divu	r0,r11,lr
8000632a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000632e:	00 99       	mov	r9,r0
80006330:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80006334:	e0 0a 02 48 	mul	r8,r0,r10
80006338:	10 3b       	cp.w	r11,r8
8000633a:	c0 a2       	brcc	8000634e <__avr32_udiv64+0x66>
8000633c:	20 19       	sub	r9,1
8000633e:	18 0b       	add	r11,r12
80006340:	18 3b       	cp.w	r11,r12
80006342:	c0 63       	brcs	8000634e <__avr32_udiv64+0x66>
80006344:	10 3b       	cp.w	r11,r8
80006346:	f7 b9 03 01 	sublo	r9,1
8000634a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000634e:	f6 08 01 01 	sub	r1,r11,r8
80006352:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80006356:	e2 0e 0d 00 	divu	r0,r1,lr
8000635a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000635e:	00 98       	mov	r8,r0
80006360:	e0 0a 02 4a 	mul	r10,r0,r10
80006364:	14 33       	cp.w	r3,r10
80006366:	c0 82       	brcc	80006376 <__avr32_udiv64+0x8e>
80006368:	20 18       	sub	r8,1
8000636a:	18 03       	add	r3,r12
8000636c:	18 33       	cp.w	r3,r12
8000636e:	c0 43       	brcs	80006376 <__avr32_udiv64+0x8e>
80006370:	14 33       	cp.w	r3,r10
80006372:	f7 b8 03 01 	sublo	r8,1
80006376:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000637a:	cd f8       	rjmp	80006538 <__avr32_udiv64+0x250>
8000637c:	58 08       	cp.w	r8,0
8000637e:	c0 51       	brne	80006388 <__avr32_udiv64+0xa0>
80006380:	30 19       	mov	r9,1
80006382:	f2 08 0d 08 	divu	r8,r9,r8
80006386:	10 9c       	mov	r12,r8
80006388:	f8 06 12 00 	clz	r6,r12
8000638c:	c0 41       	brne	80006394 <__avr32_udiv64+0xac>
8000638e:	18 1b       	sub	r11,r12
80006390:	30 19       	mov	r9,1
80006392:	c4 08       	rjmp	80006412 <__avr32_udiv64+0x12a>
80006394:	ec 01 11 20 	rsub	r1,r6,32
80006398:	f4 01 0a 49 	lsr	r9,r10,r1
8000639c:	f8 06 09 4c 	lsl	r12,r12,r6
800063a0:	f6 06 09 48 	lsl	r8,r11,r6
800063a4:	f6 01 0a 41 	lsr	r1,r11,r1
800063a8:	f3 e8 10 08 	or	r8,r9,r8
800063ac:	f8 03 16 10 	lsr	r3,r12,0x10
800063b0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800063b4:	e2 03 0d 00 	divu	r0,r1,r3
800063b8:	f0 0b 16 10 	lsr	r11,r8,0x10
800063bc:	00 9e       	mov	lr,r0
800063be:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800063c2:	e0 05 02 49 	mul	r9,r0,r5
800063c6:	12 3b       	cp.w	r11,r9
800063c8:	c0 a2       	brcc	800063dc <__avr32_udiv64+0xf4>
800063ca:	20 1e       	sub	lr,1
800063cc:	18 0b       	add	r11,r12
800063ce:	18 3b       	cp.w	r11,r12
800063d0:	c0 63       	brcs	800063dc <__avr32_udiv64+0xf4>
800063d2:	12 3b       	cp.w	r11,r9
800063d4:	f7 be 03 01 	sublo	lr,1
800063d8:	f7 dc e3 0b 	addcs	r11,r11,r12
800063dc:	12 1b       	sub	r11,r9
800063de:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800063e2:	f6 03 0d 02 	divu	r2,r11,r3
800063e6:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800063ea:	04 99       	mov	r9,r2
800063ec:	e4 05 02 4b 	mul	r11,r2,r5
800063f0:	16 38       	cp.w	r8,r11
800063f2:	c0 a2       	brcc	80006406 <__avr32_udiv64+0x11e>
800063f4:	20 19       	sub	r9,1
800063f6:	18 08       	add	r8,r12
800063f8:	18 38       	cp.w	r8,r12
800063fa:	c0 63       	brcs	80006406 <__avr32_udiv64+0x11e>
800063fc:	16 38       	cp.w	r8,r11
800063fe:	f7 b9 03 01 	sublo	r9,1
80006402:	f1 dc e3 08 	addcs	r8,r8,r12
80006406:	f4 06 09 43 	lsl	r3,r10,r6
8000640a:	f0 0b 01 0b 	sub	r11,r8,r11
8000640e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80006412:	f8 06 16 10 	lsr	r6,r12,0x10
80006416:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000641a:	f6 06 0d 00 	divu	r0,r11,r6
8000641e:	e6 0b 16 10 	lsr	r11,r3,0x10
80006422:	00 9a       	mov	r10,r0
80006424:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80006428:	e0 0e 02 48 	mul	r8,r0,lr
8000642c:	10 3b       	cp.w	r11,r8
8000642e:	c0 a2       	brcc	80006442 <__avr32_udiv64+0x15a>
80006430:	20 1a       	sub	r10,1
80006432:	18 0b       	add	r11,r12
80006434:	18 3b       	cp.w	r11,r12
80006436:	c0 63       	brcs	80006442 <__avr32_udiv64+0x15a>
80006438:	10 3b       	cp.w	r11,r8
8000643a:	f7 ba 03 01 	sublo	r10,1
8000643e:	f7 dc e3 0b 	addcs	r11,r11,r12
80006442:	f6 08 01 01 	sub	r1,r11,r8
80006446:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000644a:	e2 06 0d 00 	divu	r0,r1,r6
8000644e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80006452:	00 98       	mov	r8,r0
80006454:	e0 0e 02 4b 	mul	r11,r0,lr
80006458:	16 33       	cp.w	r3,r11
8000645a:	c0 82       	brcc	8000646a <__avr32_udiv64+0x182>
8000645c:	20 18       	sub	r8,1
8000645e:	18 03       	add	r3,r12
80006460:	18 33       	cp.w	r3,r12
80006462:	c0 43       	brcs	8000646a <__avr32_udiv64+0x182>
80006464:	16 33       	cp.w	r3,r11
80006466:	f7 b8 03 01 	sublo	r8,1
8000646a:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000646e:	c6 98       	rjmp	80006540 <__avr32_udiv64+0x258>
80006470:	16 39       	cp.w	r9,r11
80006472:	e0 8b 00 65 	brhi	8000653c <__avr32_udiv64+0x254>
80006476:	f2 09 12 00 	clz	r9,r9
8000647a:	c0 b1       	brne	80006490 <__avr32_udiv64+0x1a8>
8000647c:	10 3a       	cp.w	r10,r8
8000647e:	5f 2a       	srhs	r10
80006480:	1c 3b       	cp.w	r11,lr
80006482:	5f b8       	srhi	r8
80006484:	10 4a       	or	r10,r8
80006486:	f2 0a 18 00 	cp.b	r10,r9
8000648a:	c5 90       	breq	8000653c <__avr32_udiv64+0x254>
8000648c:	30 18       	mov	r8,1
8000648e:	c5 98       	rjmp	80006540 <__avr32_udiv64+0x258>
80006490:	f0 09 09 46 	lsl	r6,r8,r9
80006494:	f2 03 11 20 	rsub	r3,r9,32
80006498:	fc 09 09 4e 	lsl	lr,lr,r9
8000649c:	f0 03 0a 48 	lsr	r8,r8,r3
800064a0:	f6 09 09 4c 	lsl	r12,r11,r9
800064a4:	f4 03 0a 42 	lsr	r2,r10,r3
800064a8:	ef 46 ff f4 	st.w	r7[-12],r6
800064ac:	f6 03 0a 43 	lsr	r3,r11,r3
800064b0:	18 42       	or	r2,r12
800064b2:	f1 ee 10 0c 	or	r12,r8,lr
800064b6:	f8 01 16 10 	lsr	r1,r12,0x10
800064ba:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800064be:	e6 01 0d 04 	divu	r4,r3,r1
800064c2:	e4 03 16 10 	lsr	r3,r2,0x10
800064c6:	08 9e       	mov	lr,r4
800064c8:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800064cc:	e8 06 02 48 	mul	r8,r4,r6
800064d0:	10 33       	cp.w	r3,r8
800064d2:	c0 a2       	brcc	800064e6 <__avr32_udiv64+0x1fe>
800064d4:	20 1e       	sub	lr,1
800064d6:	18 03       	add	r3,r12
800064d8:	18 33       	cp.w	r3,r12
800064da:	c0 63       	brcs	800064e6 <__avr32_udiv64+0x1fe>
800064dc:	10 33       	cp.w	r3,r8
800064de:	f7 be 03 01 	sublo	lr,1
800064e2:	e7 dc e3 03 	addcs	r3,r3,r12
800064e6:	10 13       	sub	r3,r8
800064e8:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800064ec:	e6 01 0d 00 	divu	r0,r3,r1
800064f0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800064f4:	00 98       	mov	r8,r0
800064f6:	e0 06 02 46 	mul	r6,r0,r6
800064fa:	0c 3b       	cp.w	r11,r6
800064fc:	c0 a2       	brcc	80006510 <__avr32_udiv64+0x228>
800064fe:	20 18       	sub	r8,1
80006500:	18 0b       	add	r11,r12
80006502:	18 3b       	cp.w	r11,r12
80006504:	c0 63       	brcs	80006510 <__avr32_udiv64+0x228>
80006506:	0c 3b       	cp.w	r11,r6
80006508:	f7 dc e3 0b 	addcs	r11,r11,r12
8000650c:	f7 b8 03 01 	sublo	r8,1
80006510:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80006514:	ee f4 ff f4 	ld.w	r4,r7[-12]
80006518:	0c 1b       	sub	r11,r6
8000651a:	f0 04 06 42 	mulu.d	r2,r8,r4
8000651e:	06 95       	mov	r5,r3
80006520:	16 35       	cp.w	r5,r11
80006522:	e0 8b 00 0a 	brhi	80006536 <__avr32_udiv64+0x24e>
80006526:	5f 0b       	sreq	r11
80006528:	f4 09 09 49 	lsl	r9,r10,r9
8000652c:	12 32       	cp.w	r2,r9
8000652e:	5f b9       	srhi	r9
80006530:	f7 e9 00 09 	and	r9,r11,r9
80006534:	c0 60       	breq	80006540 <__avr32_udiv64+0x258>
80006536:	20 18       	sub	r8,1
80006538:	30 09       	mov	r9,0
8000653a:	c0 38       	rjmp	80006540 <__avr32_udiv64+0x258>
8000653c:	30 09       	mov	r9,0
8000653e:	12 98       	mov	r8,r9
80006540:	10 9a       	mov	r10,r8
80006542:	12 93       	mov	r3,r9
80006544:	10 92       	mov	r2,r8
80006546:	12 9b       	mov	r11,r9
80006548:	2f dd       	sub	sp,-12
8000654a:	d8 32       	popm	r0-r7,pc

8000654c <atexit>:
8000654c:	d4 01       	pushm	lr
8000654e:	30 09       	mov	r9,0
80006550:	18 9b       	mov	r11,r12
80006552:	12 9a       	mov	r10,r9
80006554:	12 9c       	mov	r12,r9
80006556:	e0 a0 05 01 	rcall	80006f58 <__register_exitproc>
8000655a:	d8 02       	popm	pc

8000655c <exit>:
8000655c:	d4 21       	pushm	r4-r7,lr
8000655e:	30 0b       	mov	r11,0
80006560:	18 97       	mov	r7,r12
80006562:	e0 a0 05 4d 	rcall	80006ffc <__call_exitprocs>
80006566:	fe c8 a4 32 	sub	r8,pc,-23502
8000656a:	70 0c       	ld.w	r12,r8[0x0]
8000656c:	78 a8       	ld.w	r8,r12[0x28]
8000656e:	58 08       	cp.w	r8,0
80006570:	c0 20       	breq	80006574 <exit+0x18>
80006572:	5d 18       	icall	r8
80006574:	0e 9c       	mov	r12,r7
80006576:	e0 a0 04 60 	rcall	80006e36 <_exit>
8000657a:	d7 03       	nop

8000657c <free>:
8000657c:	d4 01       	pushm	lr
8000657e:	e0 68 01 18 	mov	r8,280
80006582:	18 9b       	mov	r11,r12
80006584:	70 0c       	ld.w	r12,r8[0x0]
80006586:	e0 a0 06 93 	rcall	800072ac <_free_r>
8000658a:	d8 02       	popm	pc

8000658c <malloc>:
8000658c:	d4 01       	pushm	lr
8000658e:	e0 68 01 18 	mov	r8,280
80006592:	18 9b       	mov	r11,r12
80006594:	70 0c       	ld.w	r12,r8[0x0]
80006596:	c0 3c       	rcall	8000659c <_malloc_r>
80006598:	d8 02       	popm	pc
8000659a:	d7 03       	nop

8000659c <_malloc_r>:
8000659c:	d4 31       	pushm	r0-r7,lr
8000659e:	f6 c8 ff f5 	sub	r8,r11,-11
800065a2:	18 95       	mov	r5,r12
800065a4:	10 97       	mov	r7,r8
800065a6:	e0 17 ff f8 	andl	r7,0xfff8
800065aa:	59 68       	cp.w	r8,22
800065ac:	f9 b7 08 10 	movls	r7,16
800065b0:	16 37       	cp.w	r7,r11
800065b2:	5f 38       	srlo	r8
800065b4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
800065b8:	c0 50       	breq	800065c2 <_malloc_r+0x26>
800065ba:	30 c8       	mov	r8,12
800065bc:	99 38       	st.w	r12[0xc],r8
800065be:	e0 8f 01 fa 	bral	800069b2 <_malloc_r+0x416>
800065c2:	fe b0 f2 9d 	rcall	80004afc <__malloc_lock>
800065c6:	e0 47 01 f7 	cp.w	r7,503
800065ca:	e0 8b 00 1d 	brhi	80006604 <_malloc_r+0x68>
800065ce:	ee 03 16 03 	lsr	r3,r7,0x3
800065d2:	e0 68 01 1c 	mov	r8,284
800065d6:	f0 03 00 38 	add	r8,r8,r3<<0x3
800065da:	70 36       	ld.w	r6,r8[0xc]
800065dc:	10 36       	cp.w	r6,r8
800065de:	c0 61       	brne	800065ea <_malloc_r+0x4e>
800065e0:	ec c8 ff f8 	sub	r8,r6,-8
800065e4:	70 36       	ld.w	r6,r8[0xc]
800065e6:	10 36       	cp.w	r6,r8
800065e8:	c0 c0       	breq	80006600 <_malloc_r+0x64>
800065ea:	6c 18       	ld.w	r8,r6[0x4]
800065ec:	e0 18 ff fc 	andl	r8,0xfffc
800065f0:	6c 3a       	ld.w	r10,r6[0xc]
800065f2:	ec 08 00 09 	add	r9,r6,r8
800065f6:	0a 9c       	mov	r12,r5
800065f8:	6c 28       	ld.w	r8,r6[0x8]
800065fa:	95 28       	st.w	r10[0x8],r8
800065fc:	91 3a       	st.w	r8[0xc],r10
800065fe:	c4 78       	rjmp	8000668c <_malloc_r+0xf0>
80006600:	2f e3       	sub	r3,-2
80006602:	c4 d8       	rjmp	8000669c <_malloc_r+0x100>
80006604:	ee 03 16 09 	lsr	r3,r7,0x9
80006608:	c0 41       	brne	80006610 <_malloc_r+0x74>
8000660a:	ee 03 16 03 	lsr	r3,r7,0x3
8000660e:	c2 68       	rjmp	8000665a <_malloc_r+0xbe>
80006610:	58 43       	cp.w	r3,4
80006612:	e0 8b 00 06 	brhi	8000661e <_malloc_r+0x82>
80006616:	ee 03 16 06 	lsr	r3,r7,0x6
8000661a:	2c 83       	sub	r3,-56
8000661c:	c1 f8       	rjmp	8000665a <_malloc_r+0xbe>
8000661e:	59 43       	cp.w	r3,20
80006620:	e0 8b 00 04 	brhi	80006628 <_malloc_r+0x8c>
80006624:	2a 53       	sub	r3,-91
80006626:	c1 a8       	rjmp	8000665a <_malloc_r+0xbe>
80006628:	e0 43 00 54 	cp.w	r3,84
8000662c:	e0 8b 00 06 	brhi	80006638 <_malloc_r+0x9c>
80006630:	ee 03 16 0c 	lsr	r3,r7,0xc
80006634:	29 23       	sub	r3,-110
80006636:	c1 28       	rjmp	8000665a <_malloc_r+0xbe>
80006638:	e0 43 01 54 	cp.w	r3,340
8000663c:	e0 8b 00 06 	brhi	80006648 <_malloc_r+0xac>
80006640:	ee 03 16 0f 	lsr	r3,r7,0xf
80006644:	28 93       	sub	r3,-119
80006646:	c0 a8       	rjmp	8000665a <_malloc_r+0xbe>
80006648:	e0 43 05 54 	cp.w	r3,1364
8000664c:	e0 88 00 04 	brls	80006654 <_malloc_r+0xb8>
80006650:	37 e3       	mov	r3,126
80006652:	c0 48       	rjmp	8000665a <_malloc_r+0xbe>
80006654:	ee 03 16 12 	lsr	r3,r7,0x12
80006658:	28 43       	sub	r3,-124
8000665a:	e0 6a 01 1c 	mov	r10,284
8000665e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006662:	74 36       	ld.w	r6,r10[0xc]
80006664:	c1 98       	rjmp	80006696 <_malloc_r+0xfa>
80006666:	6c 19       	ld.w	r9,r6[0x4]
80006668:	e0 19 ff fc 	andl	r9,0xfffc
8000666c:	f2 07 01 0b 	sub	r11,r9,r7
80006670:	58 fb       	cp.w	r11,15
80006672:	e0 8a 00 04 	brle	8000667a <_malloc_r+0xde>
80006676:	20 13       	sub	r3,1
80006678:	c1 18       	rjmp	8000669a <_malloc_r+0xfe>
8000667a:	6c 38       	ld.w	r8,r6[0xc]
8000667c:	58 0b       	cp.w	r11,0
8000667e:	c0 b5       	brlt	80006694 <_malloc_r+0xf8>
80006680:	6c 2a       	ld.w	r10,r6[0x8]
80006682:	ec 09 00 09 	add	r9,r6,r9
80006686:	0a 9c       	mov	r12,r5
80006688:	91 2a       	st.w	r8[0x8],r10
8000668a:	95 38       	st.w	r10[0xc],r8
8000668c:	72 18       	ld.w	r8,r9[0x4]
8000668e:	a1 a8       	sbr	r8,0x0
80006690:	93 18       	st.w	r9[0x4],r8
80006692:	cb c8       	rjmp	8000680a <_malloc_r+0x26e>
80006694:	10 96       	mov	r6,r8
80006696:	14 36       	cp.w	r6,r10
80006698:	ce 71       	brne	80006666 <_malloc_r+0xca>
8000669a:	2f f3       	sub	r3,-1
8000669c:	e0 6a 01 1c 	mov	r10,284
800066a0:	f4 cc ff f8 	sub	r12,r10,-8
800066a4:	78 26       	ld.w	r6,r12[0x8]
800066a6:	18 36       	cp.w	r6,r12
800066a8:	c6 c0       	breq	80006780 <_malloc_r+0x1e4>
800066aa:	6c 19       	ld.w	r9,r6[0x4]
800066ac:	e0 19 ff fc 	andl	r9,0xfffc
800066b0:	f2 07 01 08 	sub	r8,r9,r7
800066b4:	58 f8       	cp.w	r8,15
800066b6:	e0 89 00 8f 	brgt	800067d4 <_malloc_r+0x238>
800066ba:	99 3c       	st.w	r12[0xc],r12
800066bc:	99 2c       	st.w	r12[0x8],r12
800066be:	58 08       	cp.w	r8,0
800066c0:	c0 55       	brlt	800066ca <_malloc_r+0x12e>
800066c2:	ec 09 00 09 	add	r9,r6,r9
800066c6:	0a 9c       	mov	r12,r5
800066c8:	ce 2b       	rjmp	8000668c <_malloc_r+0xf0>
800066ca:	e0 49 01 ff 	cp.w	r9,511
800066ce:	e0 8b 00 13 	brhi	800066f4 <_malloc_r+0x158>
800066d2:	a3 99       	lsr	r9,0x3
800066d4:	f4 09 00 38 	add	r8,r10,r9<<0x3
800066d8:	70 2b       	ld.w	r11,r8[0x8]
800066da:	8d 38       	st.w	r6[0xc],r8
800066dc:	8d 2b       	st.w	r6[0x8],r11
800066de:	97 36       	st.w	r11[0xc],r6
800066e0:	91 26       	st.w	r8[0x8],r6
800066e2:	a3 49       	asr	r9,0x2
800066e4:	74 18       	ld.w	r8,r10[0x4]
800066e6:	30 1b       	mov	r11,1
800066e8:	f6 09 09 49 	lsl	r9,r11,r9
800066ec:	f1 e9 10 09 	or	r9,r8,r9
800066f0:	95 19       	st.w	r10[0x4],r9
800066f2:	c4 78       	rjmp	80006780 <_malloc_r+0x1e4>
800066f4:	f2 0a 16 09 	lsr	r10,r9,0x9
800066f8:	58 4a       	cp.w	r10,4
800066fa:	e0 8b 00 07 	brhi	80006708 <_malloc_r+0x16c>
800066fe:	f2 0a 16 06 	lsr	r10,r9,0x6
80006702:	2c 8a       	sub	r10,-56
80006704:	c2 08       	rjmp	80006744 <_malloc_r+0x1a8>
80006706:	d7 03       	nop
80006708:	59 4a       	cp.w	r10,20
8000670a:	e0 8b 00 04 	brhi	80006712 <_malloc_r+0x176>
8000670e:	2a 5a       	sub	r10,-91
80006710:	c1 a8       	rjmp	80006744 <_malloc_r+0x1a8>
80006712:	e0 4a 00 54 	cp.w	r10,84
80006716:	e0 8b 00 06 	brhi	80006722 <_malloc_r+0x186>
8000671a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000671e:	29 2a       	sub	r10,-110
80006720:	c1 28       	rjmp	80006744 <_malloc_r+0x1a8>
80006722:	e0 4a 01 54 	cp.w	r10,340
80006726:	e0 8b 00 06 	brhi	80006732 <_malloc_r+0x196>
8000672a:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000672e:	28 9a       	sub	r10,-119
80006730:	c0 a8       	rjmp	80006744 <_malloc_r+0x1a8>
80006732:	e0 4a 05 54 	cp.w	r10,1364
80006736:	e0 88 00 04 	brls	8000673e <_malloc_r+0x1a2>
8000673a:	37 ea       	mov	r10,126
8000673c:	c0 48       	rjmp	80006744 <_malloc_r+0x1a8>
8000673e:	f2 0a 16 12 	lsr	r10,r9,0x12
80006742:	28 4a       	sub	r10,-124
80006744:	e0 6b 01 1c 	mov	r11,284
80006748:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000674c:	68 28       	ld.w	r8,r4[0x8]
8000674e:	08 38       	cp.w	r8,r4
80006750:	c0 e1       	brne	8000676c <_malloc_r+0x1d0>
80006752:	76 19       	ld.w	r9,r11[0x4]
80006754:	a3 4a       	asr	r10,0x2
80006756:	30 1e       	mov	lr,1
80006758:	fc 0a 09 4a 	lsl	r10,lr,r10
8000675c:	f3 ea 10 0a 	or	r10,r9,r10
80006760:	10 99       	mov	r9,r8
80006762:	97 1a       	st.w	r11[0x4],r10
80006764:	c0 a8       	rjmp	80006778 <_malloc_r+0x1dc>
80006766:	70 28       	ld.w	r8,r8[0x8]
80006768:	08 38       	cp.w	r8,r4
8000676a:	c0 60       	breq	80006776 <_malloc_r+0x1da>
8000676c:	70 1a       	ld.w	r10,r8[0x4]
8000676e:	e0 1a ff fc 	andl	r10,0xfffc
80006772:	14 39       	cp.w	r9,r10
80006774:	cf 93       	brcs	80006766 <_malloc_r+0x1ca>
80006776:	70 39       	ld.w	r9,r8[0xc]
80006778:	8d 39       	st.w	r6[0xc],r9
8000677a:	8d 28       	st.w	r6[0x8],r8
8000677c:	91 36       	st.w	r8[0xc],r6
8000677e:	93 26       	st.w	r9[0x8],r6
80006780:	e6 08 14 02 	asr	r8,r3,0x2
80006784:	30 1b       	mov	r11,1
80006786:	e0 64 01 1c 	mov	r4,284
8000678a:	f6 08 09 4b 	lsl	r11,r11,r8
8000678e:	68 18       	ld.w	r8,r4[0x4]
80006790:	10 3b       	cp.w	r11,r8
80006792:	e0 8b 00 6b 	brhi	80006868 <_malloc_r+0x2cc>
80006796:	f7 e8 00 09 	and	r9,r11,r8
8000679a:	c0 b1       	brne	800067b0 <_malloc_r+0x214>
8000679c:	e0 13 ff fc 	andl	r3,0xfffc
800067a0:	a1 7b       	lsl	r11,0x1
800067a2:	2f c3       	sub	r3,-4
800067a4:	c0 38       	rjmp	800067aa <_malloc_r+0x20e>
800067a6:	2f c3       	sub	r3,-4
800067a8:	a1 7b       	lsl	r11,0x1
800067aa:	f7 e8 00 09 	and	r9,r11,r8
800067ae:	cf c0       	breq	800067a6 <_malloc_r+0x20a>
800067b0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
800067b4:	06 92       	mov	r2,r3
800067b6:	1c 91       	mov	r1,lr
800067b8:	62 36       	ld.w	r6,r1[0xc]
800067ba:	c2 e8       	rjmp	80006816 <_malloc_r+0x27a>
800067bc:	6c 1a       	ld.w	r10,r6[0x4]
800067be:	e0 1a ff fc 	andl	r10,0xfffc
800067c2:	f4 07 01 08 	sub	r8,r10,r7
800067c6:	58 f8       	cp.w	r8,15
800067c8:	e0 8a 00 15 	brle	800067f2 <_malloc_r+0x256>
800067cc:	6c 3a       	ld.w	r10,r6[0xc]
800067ce:	6c 29       	ld.w	r9,r6[0x8]
800067d0:	95 29       	st.w	r10[0x8],r9
800067d2:	93 3a       	st.w	r9[0xc],r10
800067d4:	0e 99       	mov	r9,r7
800067d6:	ec 07 00 07 	add	r7,r6,r7
800067da:	a1 a9       	sbr	r9,0x0
800067dc:	99 37       	st.w	r12[0xc],r7
800067de:	99 27       	st.w	r12[0x8],r7
800067e0:	8d 19       	st.w	r6[0x4],r9
800067e2:	ee 08 09 08 	st.w	r7[r8],r8
800067e6:	8f 2c       	st.w	r7[0x8],r12
800067e8:	8f 3c       	st.w	r7[0xc],r12
800067ea:	a1 a8       	sbr	r8,0x0
800067ec:	0a 9c       	mov	r12,r5
800067ee:	8f 18       	st.w	r7[0x4],r8
800067f0:	c0 d8       	rjmp	8000680a <_malloc_r+0x26e>
800067f2:	6c 39       	ld.w	r9,r6[0xc]
800067f4:	58 08       	cp.w	r8,0
800067f6:	c0 f5       	brlt	80006814 <_malloc_r+0x278>
800067f8:	ec 0a 00 0a 	add	r10,r6,r10
800067fc:	74 18       	ld.w	r8,r10[0x4]
800067fe:	a1 a8       	sbr	r8,0x0
80006800:	0a 9c       	mov	r12,r5
80006802:	95 18       	st.w	r10[0x4],r8
80006804:	6c 28       	ld.w	r8,r6[0x8]
80006806:	93 28       	st.w	r9[0x8],r8
80006808:	91 39       	st.w	r8[0xc],r9
8000680a:	fe b0 f1 87 	rcall	80004b18 <__malloc_unlock>
8000680e:	ec cc ff f8 	sub	r12,r6,-8
80006812:	d8 32       	popm	r0-r7,pc
80006814:	12 96       	mov	r6,r9
80006816:	02 36       	cp.w	r6,r1
80006818:	cd 21       	brne	800067bc <_malloc_r+0x220>
8000681a:	2f f2       	sub	r2,-1
8000681c:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80006820:	c0 30       	breq	80006826 <_malloc_r+0x28a>
80006822:	2f 81       	sub	r1,-8
80006824:	cc ab       	rjmp	800067b8 <_malloc_r+0x21c>
80006826:	1c 98       	mov	r8,lr
80006828:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000682c:	c0 81       	brne	8000683c <_malloc_r+0x2a0>
8000682e:	68 19       	ld.w	r9,r4[0x4]
80006830:	f6 08 11 ff 	rsub	r8,r11,-1
80006834:	f3 e8 00 08 	and	r8,r9,r8
80006838:	89 18       	st.w	r4[0x4],r8
8000683a:	c0 78       	rjmp	80006848 <_malloc_r+0x2ac>
8000683c:	f0 c9 00 08 	sub	r9,r8,8
80006840:	20 13       	sub	r3,1
80006842:	70 08       	ld.w	r8,r8[0x0]
80006844:	12 38       	cp.w	r8,r9
80006846:	cf 10       	breq	80006828 <_malloc_r+0x28c>
80006848:	a1 7b       	lsl	r11,0x1
8000684a:	68 18       	ld.w	r8,r4[0x4]
8000684c:	10 3b       	cp.w	r11,r8
8000684e:	e0 8b 00 0d 	brhi	80006868 <_malloc_r+0x2cc>
80006852:	58 0b       	cp.w	r11,0
80006854:	c0 a0       	breq	80006868 <_malloc_r+0x2cc>
80006856:	04 93       	mov	r3,r2
80006858:	c0 38       	rjmp	8000685e <_malloc_r+0x2c2>
8000685a:	2f c3       	sub	r3,-4
8000685c:	a1 7b       	lsl	r11,0x1
8000685e:	f7 e8 00 09 	and	r9,r11,r8
80006862:	ca 71       	brne	800067b0 <_malloc_r+0x214>
80006864:	cf bb       	rjmp	8000685a <_malloc_r+0x2be>
80006866:	d7 03       	nop
80006868:	68 23       	ld.w	r3,r4[0x8]
8000686a:	66 12       	ld.w	r2,r3[0x4]
8000686c:	e0 12 ff fc 	andl	r2,0xfffc
80006870:	0e 32       	cp.w	r2,r7
80006872:	5f 39       	srlo	r9
80006874:	e4 07 01 08 	sub	r8,r2,r7
80006878:	58 f8       	cp.w	r8,15
8000687a:	5f aa       	srle	r10
8000687c:	f5 e9 10 09 	or	r9,r10,r9
80006880:	e0 80 00 9a 	breq	800069b4 <_malloc_r+0x418>
80006884:	e0 68 07 ac 	mov	r8,1964
80006888:	70 01       	ld.w	r1,r8[0x0]
8000688a:	e0 68 05 28 	mov	r8,1320
8000688e:	2f 01       	sub	r1,-16
80006890:	70 08       	ld.w	r8,r8[0x0]
80006892:	0e 01       	add	r1,r7
80006894:	5b f8       	cp.w	r8,-1
80006896:	c0 40       	breq	8000689e <_malloc_r+0x302>
80006898:	28 11       	sub	r1,-127
8000689a:	e0 11 ff 80 	andl	r1,0xff80
8000689e:	02 9b       	mov	r11,r1
800068a0:	0a 9c       	mov	r12,r5
800068a2:	e0 a0 02 a5 	rcall	80006dec <_sbrk_r>
800068a6:	18 96       	mov	r6,r12
800068a8:	5b fc       	cp.w	r12,-1
800068aa:	c7 50       	breq	80006994 <_malloc_r+0x3f8>
800068ac:	e6 02 00 08 	add	r8,r3,r2
800068b0:	10 3c       	cp.w	r12,r8
800068b2:	c0 32       	brcc	800068b8 <_malloc_r+0x31c>
800068b4:	08 33       	cp.w	r3,r4
800068b6:	c6 f1       	brne	80006994 <_malloc_r+0x3f8>
800068b8:	e0 6a 07 b0 	mov	r10,1968
800068bc:	74 09       	ld.w	r9,r10[0x0]
800068be:	e2 09 00 09 	add	r9,r1,r9
800068c2:	95 09       	st.w	r10[0x0],r9
800068c4:	10 36       	cp.w	r6,r8
800068c6:	c0 a1       	brne	800068da <_malloc_r+0x33e>
800068c8:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
800068cc:	c0 71       	brne	800068da <_malloc_r+0x33e>
800068ce:	e2 02 00 02 	add	r2,r1,r2
800068d2:	68 28       	ld.w	r8,r4[0x8]
800068d4:	a1 a2       	sbr	r2,0x0
800068d6:	91 12       	st.w	r8[0x4],r2
800068d8:	c4 f8       	rjmp	80006976 <_malloc_r+0x3da>
800068da:	e0 6a 05 28 	mov	r10,1320
800068de:	74 0b       	ld.w	r11,r10[0x0]
800068e0:	5b fb       	cp.w	r11,-1
800068e2:	c0 31       	brne	800068e8 <_malloc_r+0x34c>
800068e4:	95 06       	st.w	r10[0x0],r6
800068e6:	c0 78       	rjmp	800068f4 <_malloc_r+0x358>
800068e8:	ec 09 00 09 	add	r9,r6,r9
800068ec:	e0 6a 07 b0 	mov	r10,1968
800068f0:	10 19       	sub	r9,r8
800068f2:	95 09       	st.w	r10[0x0],r9
800068f4:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800068f8:	f0 09 11 08 	rsub	r9,r8,8
800068fc:	58 08       	cp.w	r8,0
800068fe:	f2 08 17 10 	movne	r8,r9
80006902:	ed d8 e1 06 	addne	r6,r6,r8
80006906:	28 08       	sub	r8,-128
80006908:	ec 01 00 01 	add	r1,r6,r1
8000690c:	0a 9c       	mov	r12,r5
8000690e:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80006912:	f0 01 01 01 	sub	r1,r8,r1
80006916:	02 9b       	mov	r11,r1
80006918:	e0 a0 02 6a 	rcall	80006dec <_sbrk_r>
8000691c:	e0 68 07 b0 	mov	r8,1968
80006920:	5b fc       	cp.w	r12,-1
80006922:	ec 0c 17 00 	moveq	r12,r6
80006926:	f9 b1 00 00 	moveq	r1,0
8000692a:	70 09       	ld.w	r9,r8[0x0]
8000692c:	0c 1c       	sub	r12,r6
8000692e:	89 26       	st.w	r4[0x8],r6
80006930:	02 0c       	add	r12,r1
80006932:	12 01       	add	r1,r9
80006934:	a1 ac       	sbr	r12,0x0
80006936:	91 01       	st.w	r8[0x0],r1
80006938:	8d 1c       	st.w	r6[0x4],r12
8000693a:	08 33       	cp.w	r3,r4
8000693c:	c1 d0       	breq	80006976 <_malloc_r+0x3da>
8000693e:	58 f2       	cp.w	r2,15
80006940:	e0 8b 00 05 	brhi	8000694a <_malloc_r+0x3ae>
80006944:	30 18       	mov	r8,1
80006946:	8d 18       	st.w	r6[0x4],r8
80006948:	c2 68       	rjmp	80006994 <_malloc_r+0x3f8>
8000694a:	30 59       	mov	r9,5
8000694c:	20 c2       	sub	r2,12
8000694e:	e0 12 ff f8 	andl	r2,0xfff8
80006952:	e6 02 00 08 	add	r8,r3,r2
80006956:	91 29       	st.w	r8[0x8],r9
80006958:	91 19       	st.w	r8[0x4],r9
8000695a:	66 18       	ld.w	r8,r3[0x4]
8000695c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006960:	e5 e8 10 08 	or	r8,r2,r8
80006964:	87 18       	st.w	r3[0x4],r8
80006966:	58 f2       	cp.w	r2,15
80006968:	e0 88 00 07 	brls	80006976 <_malloc_r+0x3da>
8000696c:	e6 cb ff f8 	sub	r11,r3,-8
80006970:	0a 9c       	mov	r12,r5
80006972:	e0 a0 04 9d 	rcall	800072ac <_free_r>
80006976:	e0 69 07 a8 	mov	r9,1960
8000697a:	72 0a       	ld.w	r10,r9[0x0]
8000697c:	e0 68 07 b0 	mov	r8,1968
80006980:	70 08       	ld.w	r8,r8[0x0]
80006982:	14 38       	cp.w	r8,r10
80006984:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80006988:	e0 69 07 a4 	mov	r9,1956
8000698c:	72 0a       	ld.w	r10,r9[0x0]
8000698e:	14 38       	cp.w	r8,r10
80006990:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80006994:	68 28       	ld.w	r8,r4[0x8]
80006996:	70 18       	ld.w	r8,r8[0x4]
80006998:	e0 18 ff fc 	andl	r8,0xfffc
8000699c:	0e 38       	cp.w	r8,r7
8000699e:	5f 39       	srlo	r9
800069a0:	0e 18       	sub	r8,r7
800069a2:	58 f8       	cp.w	r8,15
800069a4:	5f aa       	srle	r10
800069a6:	f5 e9 10 09 	or	r9,r10,r9
800069aa:	c0 50       	breq	800069b4 <_malloc_r+0x418>
800069ac:	0a 9c       	mov	r12,r5
800069ae:	fe b0 f0 b5 	rcall	80004b18 <__malloc_unlock>
800069b2:	d8 3a       	popm	r0-r7,pc,r12=0
800069b4:	68 26       	ld.w	r6,r4[0x8]
800069b6:	a1 a8       	sbr	r8,0x0
800069b8:	0e 99       	mov	r9,r7
800069ba:	a1 a9       	sbr	r9,0x0
800069bc:	8d 19       	st.w	r6[0x4],r9
800069be:	ec 07 00 07 	add	r7,r6,r7
800069c2:	0a 9c       	mov	r12,r5
800069c4:	89 27       	st.w	r4[0x8],r7
800069c6:	8f 18       	st.w	r7[0x4],r8
800069c8:	fe b0 f0 a8 	rcall	80004b18 <__malloc_unlock>
800069cc:	ec cc ff f8 	sub	r12,r6,-8
800069d0:	d8 32       	popm	r0-r7,pc
800069d2:	d7 03       	nop

800069d4 <memcpy>:
800069d4:	58 8a       	cp.w	r10,8
800069d6:	c2 f5       	brlt	80006a34 <memcpy+0x60>
800069d8:	f9 eb 10 09 	or	r9,r12,r11
800069dc:	e2 19 00 03 	andl	r9,0x3,COH
800069e0:	e0 81 00 97 	brne	80006b0e <memcpy+0x13a>
800069e4:	e0 4a 00 20 	cp.w	r10,32
800069e8:	c3 b4       	brge	80006a5e <memcpy+0x8a>
800069ea:	f4 08 14 02 	asr	r8,r10,0x2
800069ee:	f0 09 11 08 	rsub	r9,r8,8
800069f2:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800069f6:	76 69       	ld.w	r9,r11[0x18]
800069f8:	99 69       	st.w	r12[0x18],r9
800069fa:	76 59       	ld.w	r9,r11[0x14]
800069fc:	99 59       	st.w	r12[0x14],r9
800069fe:	76 49       	ld.w	r9,r11[0x10]
80006a00:	99 49       	st.w	r12[0x10],r9
80006a02:	76 39       	ld.w	r9,r11[0xc]
80006a04:	99 39       	st.w	r12[0xc],r9
80006a06:	76 29       	ld.w	r9,r11[0x8]
80006a08:	99 29       	st.w	r12[0x8],r9
80006a0a:	76 19       	ld.w	r9,r11[0x4]
80006a0c:	99 19       	st.w	r12[0x4],r9
80006a0e:	76 09       	ld.w	r9,r11[0x0]
80006a10:	99 09       	st.w	r12[0x0],r9
80006a12:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80006a16:	f8 08 00 28 	add	r8,r12,r8<<0x2
80006a1a:	e0 1a 00 03 	andl	r10,0x3
80006a1e:	f4 0a 11 04 	rsub	r10,r10,4
80006a22:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80006a26:	17 a9       	ld.ub	r9,r11[0x2]
80006a28:	b0 a9       	st.b	r8[0x2],r9
80006a2a:	17 99       	ld.ub	r9,r11[0x1]
80006a2c:	b0 99       	st.b	r8[0x1],r9
80006a2e:	17 89       	ld.ub	r9,r11[0x0]
80006a30:	b0 89       	st.b	r8[0x0],r9
80006a32:	5e fc       	retal	r12
80006a34:	f4 0a 11 09 	rsub	r10,r10,9
80006a38:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80006a3c:	17 f9       	ld.ub	r9,r11[0x7]
80006a3e:	b8 f9       	st.b	r12[0x7],r9
80006a40:	17 e9       	ld.ub	r9,r11[0x6]
80006a42:	b8 e9       	st.b	r12[0x6],r9
80006a44:	17 d9       	ld.ub	r9,r11[0x5]
80006a46:	b8 d9       	st.b	r12[0x5],r9
80006a48:	17 c9       	ld.ub	r9,r11[0x4]
80006a4a:	b8 c9       	st.b	r12[0x4],r9
80006a4c:	17 b9       	ld.ub	r9,r11[0x3]
80006a4e:	b8 b9       	st.b	r12[0x3],r9
80006a50:	17 a9       	ld.ub	r9,r11[0x2]
80006a52:	b8 a9       	st.b	r12[0x2],r9
80006a54:	17 99       	ld.ub	r9,r11[0x1]
80006a56:	b8 99       	st.b	r12[0x1],r9
80006a58:	17 89       	ld.ub	r9,r11[0x0]
80006a5a:	b8 89       	st.b	r12[0x0],r9
80006a5c:	5e fc       	retal	r12
80006a5e:	eb cd 40 c0 	pushm	r6-r7,lr
80006a62:	18 99       	mov	r9,r12
80006a64:	22 0a       	sub	r10,32
80006a66:	b7 07       	ld.d	r6,r11++
80006a68:	b3 26       	st.d	r9++,r6
80006a6a:	b7 07       	ld.d	r6,r11++
80006a6c:	b3 26       	st.d	r9++,r6
80006a6e:	b7 07       	ld.d	r6,r11++
80006a70:	b3 26       	st.d	r9++,r6
80006a72:	b7 07       	ld.d	r6,r11++
80006a74:	b3 26       	st.d	r9++,r6
80006a76:	22 0a       	sub	r10,32
80006a78:	cf 74       	brge	80006a66 <memcpy+0x92>
80006a7a:	2f 0a       	sub	r10,-16
80006a7c:	c0 65       	brlt	80006a88 <memcpy+0xb4>
80006a7e:	b7 07       	ld.d	r6,r11++
80006a80:	b3 26       	st.d	r9++,r6
80006a82:	b7 07       	ld.d	r6,r11++
80006a84:	b3 26       	st.d	r9++,r6
80006a86:	21 0a       	sub	r10,16
80006a88:	5c 3a       	neg	r10
80006a8a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80006a8e:	d7 03       	nop
80006a90:	d7 03       	nop
80006a92:	f7 36 00 0e 	ld.ub	r6,r11[14]
80006a96:	f3 66 00 0e 	st.b	r9[14],r6
80006a9a:	f7 36 00 0d 	ld.ub	r6,r11[13]
80006a9e:	f3 66 00 0d 	st.b	r9[13],r6
80006aa2:	f7 36 00 0c 	ld.ub	r6,r11[12]
80006aa6:	f3 66 00 0c 	st.b	r9[12],r6
80006aaa:	f7 36 00 0b 	ld.ub	r6,r11[11]
80006aae:	f3 66 00 0b 	st.b	r9[11],r6
80006ab2:	f7 36 00 0a 	ld.ub	r6,r11[10]
80006ab6:	f3 66 00 0a 	st.b	r9[10],r6
80006aba:	f7 36 00 09 	ld.ub	r6,r11[9]
80006abe:	f3 66 00 09 	st.b	r9[9],r6
80006ac2:	f7 36 00 08 	ld.ub	r6,r11[8]
80006ac6:	f3 66 00 08 	st.b	r9[8],r6
80006aca:	f7 36 00 07 	ld.ub	r6,r11[7]
80006ace:	f3 66 00 07 	st.b	r9[7],r6
80006ad2:	f7 36 00 06 	ld.ub	r6,r11[6]
80006ad6:	f3 66 00 06 	st.b	r9[6],r6
80006ada:	f7 36 00 05 	ld.ub	r6,r11[5]
80006ade:	f3 66 00 05 	st.b	r9[5],r6
80006ae2:	f7 36 00 04 	ld.ub	r6,r11[4]
80006ae6:	f3 66 00 04 	st.b	r9[4],r6
80006aea:	f7 36 00 03 	ld.ub	r6,r11[3]
80006aee:	f3 66 00 03 	st.b	r9[3],r6
80006af2:	f7 36 00 02 	ld.ub	r6,r11[2]
80006af6:	f3 66 00 02 	st.b	r9[2],r6
80006afa:	f7 36 00 01 	ld.ub	r6,r11[1]
80006afe:	f3 66 00 01 	st.b	r9[1],r6
80006b02:	f7 36 00 00 	ld.ub	r6,r11[0]
80006b06:	f3 66 00 00 	st.b	r9[0],r6
80006b0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006b0e:	20 1a       	sub	r10,1
80006b10:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80006b14:	f8 0a 0b 09 	st.b	r12[r10],r9
80006b18:	cf b1       	brne	80006b0e <memcpy+0x13a>
80006b1a:	5e fc       	retal	r12

80006b1c <memset>:
80006b1c:	18 98       	mov	r8,r12
80006b1e:	c0 38       	rjmp	80006b24 <memset+0x8>
80006b20:	10 cb       	st.b	r8++,r11
80006b22:	20 1a       	sub	r10,1
80006b24:	58 0a       	cp.w	r10,0
80006b26:	cf d1       	brne	80006b20 <memset+0x4>
80006b28:	5e fc       	retal	r12
80006b2a:	d7 03       	nop

80006b2c <_realloc_r>:
80006b2c:	d4 31       	pushm	r0-r7,lr
80006b2e:	20 1d       	sub	sp,4
80006b30:	16 94       	mov	r4,r11
80006b32:	18 92       	mov	r2,r12
80006b34:	14 9b       	mov	r11,r10
80006b36:	58 04       	cp.w	r4,0
80006b38:	c0 51       	brne	80006b42 <_realloc_r+0x16>
80006b3a:	fe b0 fd 31 	rcall	8000659c <_malloc_r>
80006b3e:	18 95       	mov	r5,r12
80006b40:	c5 39       	rjmp	80006de6 <_realloc_r+0x2ba>
80006b42:	50 0a       	stdsp	sp[0x0],r10
80006b44:	fe b0 ef dc 	rcall	80004afc <__malloc_lock>
80006b48:	40 0b       	lddsp	r11,sp[0x0]
80006b4a:	f6 c8 ff f5 	sub	r8,r11,-11
80006b4e:	e8 c1 00 08 	sub	r1,r4,8
80006b52:	10 96       	mov	r6,r8
80006b54:	62 1c       	ld.w	r12,r1[0x4]
80006b56:	e0 16 ff f8 	andl	r6,0xfff8
80006b5a:	59 68       	cp.w	r8,22
80006b5c:	f9 b6 08 10 	movls	r6,16
80006b60:	16 36       	cp.w	r6,r11
80006b62:	5f 38       	srlo	r8
80006b64:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80006b68:	c0 50       	breq	80006b72 <_realloc_r+0x46>
80006b6a:	30 c8       	mov	r8,12
80006b6c:	30 05       	mov	r5,0
80006b6e:	85 38       	st.w	r2[0xc],r8
80006b70:	c3 b9       	rjmp	80006de6 <_realloc_r+0x2ba>
80006b72:	18 90       	mov	r0,r12
80006b74:	e0 10 ff fc 	andl	r0,0xfffc
80006b78:	0c 30       	cp.w	r0,r6
80006b7a:	e0 84 01 0b 	brge	80006d90 <_realloc_r+0x264>
80006b7e:	e0 68 01 1c 	mov	r8,284
80006b82:	e2 00 00 09 	add	r9,r1,r0
80006b86:	70 25       	ld.w	r5,r8[0x8]
80006b88:	0a 39       	cp.w	r9,r5
80006b8a:	c0 90       	breq	80006b9c <_realloc_r+0x70>
80006b8c:	72 1a       	ld.w	r10,r9[0x4]
80006b8e:	a1 ca       	cbr	r10,0x0
80006b90:	f2 0a 00 0a 	add	r10,r9,r10
80006b94:	74 1a       	ld.w	r10,r10[0x4]
80006b96:	ed ba 00 00 	bld	r10,0x0
80006b9a:	c2 20       	breq	80006bde <_realloc_r+0xb2>
80006b9c:	72 1a       	ld.w	r10,r9[0x4]
80006b9e:	e0 1a ff fc 	andl	r10,0xfffc
80006ba2:	f4 00 00 03 	add	r3,r10,r0
80006ba6:	0a 39       	cp.w	r9,r5
80006ba8:	c1 31       	brne	80006bce <_realloc_r+0xa2>
80006baa:	ec c7 ff f0 	sub	r7,r6,-16
80006bae:	0e 33       	cp.w	r3,r7
80006bb0:	c1 95       	brlt	80006be2 <_realloc_r+0xb6>
80006bb2:	e2 06 00 09 	add	r9,r1,r6
80006bb6:	0c 13       	sub	r3,r6
80006bb8:	a1 a3       	sbr	r3,0x0
80006bba:	93 13       	st.w	r9[0x4],r3
80006bbc:	91 29       	st.w	r8[0x8],r9
80006bbe:	04 9c       	mov	r12,r2
80006bc0:	62 18       	ld.w	r8,r1[0x4]
80006bc2:	08 95       	mov	r5,r4
80006bc4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006bc8:	10 46       	or	r6,r8
80006bca:	83 16       	st.w	r1[0x4],r6
80006bcc:	c0 b9       	rjmp	80006de2 <_realloc_r+0x2b6>
80006bce:	0c 33       	cp.w	r3,r6
80006bd0:	c0 95       	brlt	80006be2 <_realloc_r+0xb6>
80006bd2:	72 28       	ld.w	r8,r9[0x8]
80006bd4:	02 97       	mov	r7,r1
80006bd6:	72 39       	ld.w	r9,r9[0xc]
80006bd8:	93 28       	st.w	r9[0x8],r8
80006bda:	91 39       	st.w	r8[0xc],r9
80006bdc:	cd c8       	rjmp	80006d94 <_realloc_r+0x268>
80006bde:	30 0a       	mov	r10,0
80006be0:	14 99       	mov	r9,r10
80006be2:	ed bc 00 00 	bld	r12,0x0
80006be6:	e0 80 00 95 	breq	80006d10 <_realloc_r+0x1e4>
80006bea:	62 07       	ld.w	r7,r1[0x0]
80006bec:	e2 07 01 07 	sub	r7,r1,r7
80006bf0:	6e 1c       	ld.w	r12,r7[0x4]
80006bf2:	e0 1c ff fc 	andl	r12,0xfffc
80006bf6:	58 09       	cp.w	r9,0
80006bf8:	c5 60       	breq	80006ca4 <_realloc_r+0x178>
80006bfa:	f8 00 00 03 	add	r3,r12,r0
80006bfe:	0a 39       	cp.w	r9,r5
80006c00:	c4 81       	brne	80006c90 <_realloc_r+0x164>
80006c02:	14 03       	add	r3,r10
80006c04:	ec c9 ff f0 	sub	r9,r6,-16
80006c08:	12 33       	cp.w	r3,r9
80006c0a:	c4 d5       	brlt	80006ca4 <_realloc_r+0x178>
80006c0c:	6e 3a       	ld.w	r10,r7[0xc]
80006c0e:	6e 29       	ld.w	r9,r7[0x8]
80006c10:	95 29       	st.w	r10[0x8],r9
80006c12:	93 3a       	st.w	r9[0xc],r10
80006c14:	ee c5 ff f8 	sub	r5,r7,-8
80006c18:	e0 ca 00 04 	sub	r10,r0,4
80006c1c:	e0 4a 00 24 	cp.w	r10,36
80006c20:	e0 8b 00 25 	brhi	80006c6a <_realloc_r+0x13e>
80006c24:	0a 99       	mov	r9,r5
80006c26:	59 3a       	cp.w	r10,19
80006c28:	e0 88 00 1a 	brls	80006c5c <_realloc_r+0x130>
80006c2c:	09 09       	ld.w	r9,r4++
80006c2e:	8b 09       	st.w	r5[0x0],r9
80006c30:	09 09       	ld.w	r9,r4++
80006c32:	8f 39       	st.w	r7[0xc],r9
80006c34:	ee c9 ff f0 	sub	r9,r7,-16
80006c38:	59 ba       	cp.w	r10,27
80006c3a:	e0 88 00 11 	brls	80006c5c <_realloc_r+0x130>
80006c3e:	09 0b       	ld.w	r11,r4++
80006c40:	93 0b       	st.w	r9[0x0],r11
80006c42:	09 09       	ld.w	r9,r4++
80006c44:	8f 59       	st.w	r7[0x14],r9
80006c46:	ee c9 ff e8 	sub	r9,r7,-24
80006c4a:	e0 4a 00 24 	cp.w	r10,36
80006c4e:	c0 71       	brne	80006c5c <_realloc_r+0x130>
80006c50:	09 0a       	ld.w	r10,r4++
80006c52:	93 0a       	st.w	r9[0x0],r10
80006c54:	ee c9 ff e0 	sub	r9,r7,-32
80006c58:	09 0a       	ld.w	r10,r4++
80006c5a:	8f 7a       	st.w	r7[0x1c],r10
80006c5c:	09 0a       	ld.w	r10,r4++
80006c5e:	12 aa       	st.w	r9++,r10
80006c60:	68 0a       	ld.w	r10,r4[0x0]
80006c62:	93 0a       	st.w	r9[0x0],r10
80006c64:	68 1a       	ld.w	r10,r4[0x4]
80006c66:	93 1a       	st.w	r9[0x4],r10
80006c68:	c0 78       	rjmp	80006c76 <_realloc_r+0x14a>
80006c6a:	50 08       	stdsp	sp[0x0],r8
80006c6c:	08 9b       	mov	r11,r4
80006c6e:	0a 9c       	mov	r12,r5
80006c70:	e0 a0 04 08 	rcall	80007480 <memmove>
80006c74:	40 08       	lddsp	r8,sp[0x0]
80006c76:	ee 06 00 09 	add	r9,r7,r6
80006c7a:	0c 13       	sub	r3,r6
80006c7c:	a1 a3       	sbr	r3,0x0
80006c7e:	93 13       	st.w	r9[0x4],r3
80006c80:	91 29       	st.w	r8[0x8],r9
80006c82:	04 9c       	mov	r12,r2
80006c84:	6e 18       	ld.w	r8,r7[0x4]
80006c86:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006c8a:	10 46       	or	r6,r8
80006c8c:	8f 16       	st.w	r7[0x4],r6
80006c8e:	ca a8       	rjmp	80006de2 <_realloc_r+0x2b6>
80006c90:	14 03       	add	r3,r10
80006c92:	0c 33       	cp.w	r3,r6
80006c94:	c0 85       	brlt	80006ca4 <_realloc_r+0x178>
80006c96:	72 28       	ld.w	r8,r9[0x8]
80006c98:	72 39       	ld.w	r9,r9[0xc]
80006c9a:	93 28       	st.w	r9[0x8],r8
80006c9c:	91 39       	st.w	r8[0xc],r9
80006c9e:	6e 28       	ld.w	r8,r7[0x8]
80006ca0:	6e 39       	ld.w	r9,r7[0xc]
80006ca2:	c0 78       	rjmp	80006cb0 <_realloc_r+0x184>
80006ca4:	f8 00 00 03 	add	r3,r12,r0
80006ca8:	0c 33       	cp.w	r3,r6
80006caa:	c3 35       	brlt	80006d10 <_realloc_r+0x1e4>
80006cac:	6e 39       	ld.w	r9,r7[0xc]
80006cae:	6e 28       	ld.w	r8,r7[0x8]
80006cb0:	93 28       	st.w	r9[0x8],r8
80006cb2:	91 39       	st.w	r8[0xc],r9
80006cb4:	e0 ca 00 04 	sub	r10,r0,4
80006cb8:	ee cc ff f8 	sub	r12,r7,-8
80006cbc:	e0 4a 00 24 	cp.w	r10,36
80006cc0:	e0 8b 00 24 	brhi	80006d08 <_realloc_r+0x1dc>
80006cc4:	59 3a       	cp.w	r10,19
80006cc6:	e0 88 00 1a 	brls	80006cfa <_realloc_r+0x1ce>
80006cca:	09 08       	ld.w	r8,r4++
80006ccc:	99 08       	st.w	r12[0x0],r8
80006cce:	09 08       	ld.w	r8,r4++
80006cd0:	8f 38       	st.w	r7[0xc],r8
80006cd2:	ee cc ff f0 	sub	r12,r7,-16
80006cd6:	59 ba       	cp.w	r10,27
80006cd8:	e0 88 00 11 	brls	80006cfa <_realloc_r+0x1ce>
80006cdc:	09 08       	ld.w	r8,r4++
80006cde:	99 08       	st.w	r12[0x0],r8
80006ce0:	09 08       	ld.w	r8,r4++
80006ce2:	8f 58       	st.w	r7[0x14],r8
80006ce4:	ee cc ff e8 	sub	r12,r7,-24
80006ce8:	e0 4a 00 24 	cp.w	r10,36
80006cec:	c0 71       	brne	80006cfa <_realloc_r+0x1ce>
80006cee:	09 08       	ld.w	r8,r4++
80006cf0:	99 08       	st.w	r12[0x0],r8
80006cf2:	ee cc ff e0 	sub	r12,r7,-32
80006cf6:	09 08       	ld.w	r8,r4++
80006cf8:	8f 78       	st.w	r7[0x1c],r8
80006cfa:	09 08       	ld.w	r8,r4++
80006cfc:	18 a8       	st.w	r12++,r8
80006cfe:	68 08       	ld.w	r8,r4[0x0]
80006d00:	99 08       	st.w	r12[0x0],r8
80006d02:	68 18       	ld.w	r8,r4[0x4]
80006d04:	99 18       	st.w	r12[0x4],r8
80006d06:	c4 78       	rjmp	80006d94 <_realloc_r+0x268>
80006d08:	08 9b       	mov	r11,r4
80006d0a:	e0 a0 03 bb 	rcall	80007480 <memmove>
80006d0e:	c4 38       	rjmp	80006d94 <_realloc_r+0x268>
80006d10:	04 9c       	mov	r12,r2
80006d12:	fe b0 fc 45 	rcall	8000659c <_malloc_r>
80006d16:	18 95       	mov	r5,r12
80006d18:	c3 a0       	breq	80006d8c <_realloc_r+0x260>
80006d1a:	62 18       	ld.w	r8,r1[0x4]
80006d1c:	f8 c9 00 08 	sub	r9,r12,8
80006d20:	a1 c8       	cbr	r8,0x0
80006d22:	e2 08 00 08 	add	r8,r1,r8
80006d26:	10 39       	cp.w	r9,r8
80006d28:	c0 71       	brne	80006d36 <_realloc_r+0x20a>
80006d2a:	72 13       	ld.w	r3,r9[0x4]
80006d2c:	02 97       	mov	r7,r1
80006d2e:	e0 13 ff fc 	andl	r3,0xfffc
80006d32:	00 03       	add	r3,r0
80006d34:	c3 08       	rjmp	80006d94 <_realloc_r+0x268>
80006d36:	e0 ca 00 04 	sub	r10,r0,4
80006d3a:	e0 4a 00 24 	cp.w	r10,36
80006d3e:	e0 8b 00 20 	brhi	80006d7e <_realloc_r+0x252>
80006d42:	08 99       	mov	r9,r4
80006d44:	18 98       	mov	r8,r12
80006d46:	59 3a       	cp.w	r10,19
80006d48:	e0 88 00 14 	brls	80006d70 <_realloc_r+0x244>
80006d4c:	13 0b       	ld.w	r11,r9++
80006d4e:	10 ab       	st.w	r8++,r11
80006d50:	13 0b       	ld.w	r11,r9++
80006d52:	10 ab       	st.w	r8++,r11
80006d54:	59 ba       	cp.w	r10,27
80006d56:	e0 88 00 0d 	brls	80006d70 <_realloc_r+0x244>
80006d5a:	13 0b       	ld.w	r11,r9++
80006d5c:	10 ab       	st.w	r8++,r11
80006d5e:	13 0b       	ld.w	r11,r9++
80006d60:	10 ab       	st.w	r8++,r11
80006d62:	e0 4a 00 24 	cp.w	r10,36
80006d66:	c0 51       	brne	80006d70 <_realloc_r+0x244>
80006d68:	13 0a       	ld.w	r10,r9++
80006d6a:	10 aa       	st.w	r8++,r10
80006d6c:	13 0a       	ld.w	r10,r9++
80006d6e:	10 aa       	st.w	r8++,r10
80006d70:	13 0a       	ld.w	r10,r9++
80006d72:	10 aa       	st.w	r8++,r10
80006d74:	72 0a       	ld.w	r10,r9[0x0]
80006d76:	91 0a       	st.w	r8[0x0],r10
80006d78:	72 19       	ld.w	r9,r9[0x4]
80006d7a:	91 19       	st.w	r8[0x4],r9
80006d7c:	c0 48       	rjmp	80006d84 <_realloc_r+0x258>
80006d7e:	08 9b       	mov	r11,r4
80006d80:	e0 a0 03 80 	rcall	80007480 <memmove>
80006d84:	08 9b       	mov	r11,r4
80006d86:	04 9c       	mov	r12,r2
80006d88:	e0 a0 02 92 	rcall	800072ac <_free_r>
80006d8c:	04 9c       	mov	r12,r2
80006d8e:	c2 a8       	rjmp	80006de2 <_realloc_r+0x2b6>
80006d90:	00 93       	mov	r3,r0
80006d92:	02 97       	mov	r7,r1
80006d94:	e6 06 01 09 	sub	r9,r3,r6
80006d98:	6e 18       	ld.w	r8,r7[0x4]
80006d9a:	58 f9       	cp.w	r9,15
80006d9c:	e0 88 00 16 	brls	80006dc8 <_realloc_r+0x29c>
80006da0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006da4:	ed e8 10 08 	or	r8,r6,r8
80006da8:	8f 18       	st.w	r7[0x4],r8
80006daa:	12 98       	mov	r8,r9
80006dac:	a1 a8       	sbr	r8,0x0
80006dae:	ee 06 00 0b 	add	r11,r7,r6
80006db2:	f6 09 00 09 	add	r9,r11,r9
80006db6:	97 18       	st.w	r11[0x4],r8
80006db8:	72 18       	ld.w	r8,r9[0x4]
80006dba:	a1 a8       	sbr	r8,0x0
80006dbc:	2f 8b       	sub	r11,-8
80006dbe:	93 18       	st.w	r9[0x4],r8
80006dc0:	04 9c       	mov	r12,r2
80006dc2:	e0 a0 02 75 	rcall	800072ac <_free_r>
80006dc6:	c0 b8       	rjmp	80006ddc <_realloc_r+0x2b0>
80006dc8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006dcc:	e7 e8 10 08 	or	r8,r3,r8
80006dd0:	8f 18       	st.w	r7[0x4],r8
80006dd2:	ee 03 00 03 	add	r3,r7,r3
80006dd6:	66 18       	ld.w	r8,r3[0x4]
80006dd8:	a1 a8       	sbr	r8,0x0
80006dda:	87 18       	st.w	r3[0x4],r8
80006ddc:	04 9c       	mov	r12,r2
80006dde:	ee c5 ff f8 	sub	r5,r7,-8
80006de2:	fe b0 ee 9b 	rcall	80004b18 <__malloc_unlock>
80006de6:	0a 9c       	mov	r12,r5
80006de8:	2f fd       	sub	sp,-4
80006dea:	d8 32       	popm	r0-r7,pc

80006dec <_sbrk_r>:
80006dec:	d4 21       	pushm	r4-r7,lr
80006dee:	30 08       	mov	r8,0
80006df0:	18 97       	mov	r7,r12
80006df2:	e0 66 07 fc 	mov	r6,2044
80006df6:	16 9c       	mov	r12,r11
80006df8:	8d 08       	st.w	r6[0x0],r8
80006dfa:	c7 1c       	rcall	80006edc <_sbrk>
80006dfc:	5b fc       	cp.w	r12,-1
80006dfe:	c0 51       	brne	80006e08 <_sbrk_r+0x1c>
80006e00:	6c 08       	ld.w	r8,r6[0x0]
80006e02:	58 08       	cp.w	r8,0
80006e04:	ef f8 1a 03 	st.wne	r7[0xc],r8
80006e08:	d8 22       	popm	r4-r7,pc
80006e0a:	d7 03       	nop

80006e0c <strncpy>:
80006e0c:	30 08       	mov	r8,0
80006e0e:	10 3a       	cp.w	r10,r8
80006e10:	5e 0c       	reteq	r12
80006e12:	f6 08 07 09 	ld.ub	r9,r11[r8]
80006e16:	f8 08 0b 09 	st.b	r12[r8],r9
80006e1a:	2f f8       	sub	r8,-1
80006e1c:	58 09       	cp.w	r9,0
80006e1e:	cf 81       	brne	80006e0e <strncpy+0x2>
80006e20:	10 3a       	cp.w	r10,r8
80006e22:	5e 0c       	reteq	r12
80006e24:	f8 08 0b 09 	st.b	r12[r8],r9
80006e28:	2f f8       	sub	r8,-1
80006e2a:	cf bb       	rjmp	80006e20 <strncpy+0x14>

80006e2c <_init_argv>:
80006e2c:	30 e8       	mov	r8,14
80006e2e:	d6 73       	breakpoint
80006e30:	3f fc       	mov	r12,-1
80006e32:	35 8b       	mov	r11,88
80006e34:	5e fc       	retal	r12

80006e36 <_exit>:
80006e36:	30 d8       	mov	r8,13
80006e38:	d6 73       	breakpoint
80006e3a:	3f fc       	mov	r12,-1
80006e3c:	35 8b       	mov	r11,88
80006e3e:	c0 08       	rjmp	80006e3e <_exit+0x8>

80006e40 <_close>:
80006e40:	30 28       	mov	r8,2
80006e42:	d6 73       	breakpoint
80006e44:	3f fc       	mov	r12,-1
80006e46:	35 8b       	mov	r11,88
80006e48:	58 0c       	cp.w	r12,0
80006e4a:	5e 4c       	retge	r12
80006e4c:	e0 6a 07 fc 	mov	r10,2044
80006e50:	95 0b       	st.w	r10[0x0],r11
80006e52:	5e fc       	retal	r12

80006e54 <_lseek>:
80006e54:	30 58       	mov	r8,5
80006e56:	d6 73       	breakpoint
80006e58:	3f fc       	mov	r12,-1
80006e5a:	35 8b       	mov	r11,88
80006e5c:	58 0c       	cp.w	r12,0
80006e5e:	5e 4c       	retge	r12
80006e60:	e0 6a 07 fc 	mov	r10,2044
80006e64:	95 0b       	st.w	r10[0x0],r11
80006e66:	5e fc       	retal	r12

80006e68 <isatty>:
80006e68:	30 b8       	mov	r8,11
80006e6a:	d6 73       	breakpoint
80006e6c:	3f fc       	mov	r12,-1
80006e6e:	35 8b       	mov	r11,88
80006e70:	58 0c       	cp.w	r12,0
80006e72:	5e 4c       	retge	r12
80006e74:	e0 6a 07 fc 	mov	r10,2044
80006e78:	95 0b       	st.w	r10[0x0],r11
80006e7a:	5e fc       	retal	r12

80006e7c <_fstat_host>:
80006e7c:	30 98       	mov	r8,9
80006e7e:	d6 73       	breakpoint
80006e80:	3f fc       	mov	r12,-1
80006e82:	35 8b       	mov	r11,88
80006e84:	58 0c       	cp.w	r12,0
80006e86:	5e 4c       	retge	r12
80006e88:	e0 6a 07 fc 	mov	r10,2044
80006e8c:	95 0b       	st.w	r10[0x0],r11
80006e8e:	5e fc       	retal	r12

80006e90 <_fstat>:
80006e90:	d4 21       	pushm	r4-r7,lr
80006e92:	21 0d       	sub	sp,64
80006e94:	16 97       	mov	r7,r11
80006e96:	1a 9b       	mov	r11,sp
80006e98:	cf 2f       	rcall	80006e7c <_fstat_host>
80006e9a:	c0 34       	brge	80006ea0 <_fstat+0x10>
80006e9c:	3f fc       	mov	r12,-1
80006e9e:	c1 c8       	rjmp	80006ed6 <_fstat+0x46>
80006ea0:	40 08       	lddsp	r8,sp[0x0]
80006ea2:	ae 08       	st.h	r7[0x0],r8
80006ea4:	40 18       	lddsp	r8,sp[0x4]
80006ea6:	ae 18       	st.h	r7[0x2],r8
80006ea8:	40 28       	lddsp	r8,sp[0x8]
80006eaa:	8f 18       	st.w	r7[0x4],r8
80006eac:	40 38       	lddsp	r8,sp[0xc]
80006eae:	ae 48       	st.h	r7[0x8],r8
80006eb0:	40 48       	lddsp	r8,sp[0x10]
80006eb2:	ae 58       	st.h	r7[0xa],r8
80006eb4:	40 58       	lddsp	r8,sp[0x14]
80006eb6:	ae 68       	st.h	r7[0xc],r8
80006eb8:	40 68       	lddsp	r8,sp[0x18]
80006eba:	ae 78       	st.h	r7[0xe],r8
80006ebc:	40 88       	lddsp	r8,sp[0x20]
80006ebe:	8f 48       	st.w	r7[0x10],r8
80006ec0:	40 a8       	lddsp	r8,sp[0x28]
80006ec2:	8f b8       	st.w	r7[0x2c],r8
80006ec4:	40 c8       	lddsp	r8,sp[0x30]
80006ec6:	8f c8       	st.w	r7[0x30],r8
80006ec8:	40 d8       	lddsp	r8,sp[0x34]
80006eca:	8f 58       	st.w	r7[0x14],r8
80006ecc:	40 e8       	lddsp	r8,sp[0x38]
80006ece:	30 0c       	mov	r12,0
80006ed0:	8f 78       	st.w	r7[0x1c],r8
80006ed2:	40 f8       	lddsp	r8,sp[0x3c]
80006ed4:	8f 98       	st.w	r7[0x24],r8
80006ed6:	2f 0d       	sub	sp,-64
80006ed8:	d8 22       	popm	r4-r7,pc
80006eda:	d7 03       	nop

80006edc <_sbrk>:
80006edc:	d4 01       	pushm	lr
80006ede:	e0 68 07 d8 	mov	r8,2008
80006ee2:	70 09       	ld.w	r9,r8[0x0]
80006ee4:	58 09       	cp.w	r9,0
80006ee6:	c0 41       	brne	80006eee <_sbrk+0x12>
80006ee8:	e0 69 08 00 	mov	r9,2048
80006eec:	91 09       	st.w	r8[0x0],r9
80006eee:	e0 69 07 d8 	mov	r9,2008
80006ef2:	e0 6a f0 00 	mov	r10,61440
80006ef6:	72 08       	ld.w	r8,r9[0x0]
80006ef8:	f0 0c 00 0c 	add	r12,r8,r12
80006efc:	14 3c       	cp.w	r12,r10
80006efe:	e0 8b 00 04 	brhi	80006f06 <_sbrk+0x2a>
80006f02:	93 0c       	st.w	r9[0x0],r12
80006f04:	c0 58       	rjmp	80006f0e <_sbrk+0x32>
80006f06:	ce 1c       	rcall	800070c8 <__errno>
80006f08:	30 c8       	mov	r8,12
80006f0a:	99 08       	st.w	r12[0x0],r8
80006f0c:	3f f8       	mov	r8,-1
80006f0e:	10 9c       	mov	r12,r8
80006f10:	d8 02       	popm	pc
80006f12:	d7 03       	nop

80006f14 <_vsprintf_r>:
80006f14:	d4 01       	pushm	lr
80006f16:	21 7d       	sub	sp,92
80006f18:	e0 68 ff ff 	mov	r8,65535
80006f1c:	ea 18 7f ff 	orh	r8,0x7fff
80006f20:	50 58       	stdsp	sp[0x14],r8
80006f22:	50 28       	stdsp	sp[0x8],r8
80006f24:	e0 68 02 08 	mov	r8,520
80006f28:	ba 68       	st.h	sp[0xc],r8
80006f2a:	3f f8       	mov	r8,-1
80006f2c:	50 4b       	stdsp	sp[0x10],r11
80006f2e:	50 0b       	stdsp	sp[0x0],r11
80006f30:	ba 78       	st.h	sp[0xe],r8
80006f32:	1a 9b       	mov	r11,sp
80006f34:	e0 a0 04 9e 	rcall	80007870 <_vfprintf_r>
80006f38:	30 09       	mov	r9,0
80006f3a:	40 08       	lddsp	r8,sp[0x0]
80006f3c:	b0 89       	st.b	r8[0x0],r9
80006f3e:	2e 9d       	sub	sp,-92
80006f40:	d8 02       	popm	pc
80006f42:	d7 03       	nop

80006f44 <vsprintf>:
80006f44:	d4 01       	pushm	lr
80006f46:	e0 68 01 18 	mov	r8,280
80006f4a:	14 99       	mov	r9,r10
80006f4c:	16 9a       	mov	r10,r11
80006f4e:	18 9b       	mov	r11,r12
80006f50:	70 0c       	ld.w	r12,r8[0x0]
80006f52:	ce 1f       	rcall	80006f14 <_vsprintf_r>
80006f54:	d8 02       	popm	pc
80006f56:	d7 03       	nop

80006f58 <__register_exitproc>:
80006f58:	d4 31       	pushm	r0-r7,lr
80006f5a:	fe c8 ae 26 	sub	r8,pc,-20954
80006f5e:	70 03       	ld.w	r3,r8[0x0]
80006f60:	67 24       	ld.w	r4,r3[0x48]
80006f62:	e6 c8 ff b4 	sub	r8,r3,-76
80006f66:	58 04       	cp.w	r4,0
80006f68:	f0 04 17 00 	moveq	r4,r8
80006f6c:	e7 f4 0a 12 	st.weq	r3[0x48],r4
80006f70:	18 97       	mov	r7,r12
80006f72:	16 96       	mov	r6,r11
80006f74:	14 95       	mov	r5,r10
80006f76:	12 92       	mov	r2,r9
80006f78:	68 18       	ld.w	r8,r4[0x4]
80006f7a:	59 f8       	cp.w	r8,31
80006f7c:	e0 8a 00 0e 	brle	80006f98 <__register_exitproc+0x40>
80006f80:	e0 6c 00 8c 	mov	r12,140
80006f84:	fe b0 fb 04 	rcall	8000658c <malloc>
80006f88:	18 94       	mov	r4,r12
80006f8a:	c3 80       	breq	80006ffa <__register_exitproc+0xa2>
80006f8c:	67 28       	ld.w	r8,r3[0x48]
80006f8e:	99 08       	st.w	r12[0x0],r8
80006f90:	e7 4c 00 48 	st.w	r3[72],r12
80006f94:	30 08       	mov	r8,0
80006f96:	99 18       	st.w	r12[0x4],r8
80006f98:	58 07       	cp.w	r7,0
80006f9a:	c2 70       	breq	80006fe8 <__register_exitproc+0x90>
80006f9c:	e8 fc 00 88 	ld.w	r12,r4[136]
80006fa0:	58 0c       	cp.w	r12,0
80006fa2:	c0 d1       	brne	80006fbc <__register_exitproc+0x64>
80006fa4:	e0 6c 01 08 	mov	r12,264
80006fa8:	fe b0 fa f2 	rcall	8000658c <malloc>
80006fac:	c2 70       	breq	80006ffa <__register_exitproc+0xa2>
80006fae:	30 08       	mov	r8,0
80006fb0:	e9 4c 00 88 	st.w	r4[136],r12
80006fb4:	f9 48 01 04 	st.w	r12[260],r8
80006fb8:	f9 48 01 00 	st.w	r12[256],r8
80006fbc:	68 18       	ld.w	r8,r4[0x4]
80006fbe:	f0 c9 ff e0 	sub	r9,r8,-32
80006fc2:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
80006fc6:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
80006fca:	30 1a       	mov	r10,1
80006fcc:	f8 f9 01 00 	ld.w	r9,r12[256]
80006fd0:	f4 08 09 48 	lsl	r8,r10,r8
80006fd4:	10 49       	or	r9,r8
80006fd6:	f9 49 01 00 	st.w	r12[256],r9
80006fda:	58 27       	cp.w	r7,2
80006fdc:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
80006fe0:	f3 d8 e0 38 	oreq	r8,r9,r8
80006fe4:	f9 f8 0a 41 	st.weq	r12[0x104],r8
80006fe8:	68 18       	ld.w	r8,r4[0x4]
80006fea:	30 0c       	mov	r12,0
80006fec:	f0 c9 ff ff 	sub	r9,r8,-1
80006ff0:	2f e8       	sub	r8,-2
80006ff2:	89 19       	st.w	r4[0x4],r9
80006ff4:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
80006ff8:	d8 32       	popm	r0-r7,pc
80006ffa:	dc 3a       	popm	r0-r7,pc,r12=-1

80006ffc <__call_exitprocs>:
80006ffc:	d4 31       	pushm	r0-r7,lr
80006ffe:	20 3d       	sub	sp,12
80007000:	fe c8 ae cc 	sub	r8,pc,-20788
80007004:	50 2c       	stdsp	sp[0x8],r12
80007006:	70 08       	ld.w	r8,r8[0x0]
80007008:	16 91       	mov	r1,r11
8000700a:	50 08       	stdsp	sp[0x0],r8
8000700c:	2b 88       	sub	r8,-72
8000700e:	50 18       	stdsp	sp[0x4],r8
80007010:	40 0a       	lddsp	r10,sp[0x0]
80007012:	40 14       	lddsp	r4,sp[0x4]
80007014:	75 27       	ld.w	r7,r10[0x48]
80007016:	c5 58       	rjmp	800070c0 <__call_exitprocs+0xc4>
80007018:	6e 15       	ld.w	r5,r7[0x4]
8000701a:	ee f6 00 88 	ld.w	r6,r7[136]
8000701e:	ea c2 ff ff 	sub	r2,r5,-1
80007022:	20 15       	sub	r5,1
80007024:	ee 02 00 22 	add	r2,r7,r2<<0x2
80007028:	ec 05 00 23 	add	r3,r6,r5<<0x2
8000702c:	c3 58       	rjmp	80007096 <__call_exitprocs+0x9a>
8000702e:	58 01       	cp.w	r1,0
80007030:	c0 70       	breq	8000703e <__call_exitprocs+0x42>
80007032:	58 06       	cp.w	r6,0
80007034:	c2 e0       	breq	80007090 <__call_exitprocs+0x94>
80007036:	e6 f8 00 80 	ld.w	r8,r3[128]
8000703a:	02 38       	cp.w	r8,r1
8000703c:	c2 a1       	brne	80007090 <__call_exitprocs+0x94>
8000703e:	6e 19       	ld.w	r9,r7[0x4]
80007040:	64 08       	ld.w	r8,r2[0x0]
80007042:	20 19       	sub	r9,1
80007044:	12 35       	cp.w	r5,r9
80007046:	ef f5 0a 01 	st.weq	r7[0x4],r5
8000704a:	f9 b9 01 00 	movne	r9,0
8000704e:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80007052:	58 08       	cp.w	r8,0
80007054:	c1 e0       	breq	80007090 <__call_exitprocs+0x94>
80007056:	6e 10       	ld.w	r0,r7[0x4]
80007058:	58 06       	cp.w	r6,0
8000705a:	c0 90       	breq	8000706c <__call_exitprocs+0x70>
8000705c:	30 1a       	mov	r10,1
8000705e:	f4 05 09 49 	lsl	r9,r10,r5
80007062:	ec fa 01 00 	ld.w	r10,r6[256]
80007066:	f3 ea 00 0a 	and	r10,r9,r10
8000706a:	c0 31       	brne	80007070 <__call_exitprocs+0x74>
8000706c:	5d 18       	icall	r8
8000706e:	c0 b8       	rjmp	80007084 <__call_exitprocs+0x88>
80007070:	ec fa 01 04 	ld.w	r10,r6[260]
80007074:	66 0b       	ld.w	r11,r3[0x0]
80007076:	14 69       	and	r9,r10
80007078:	c0 41       	brne	80007080 <__call_exitprocs+0x84>
8000707a:	40 2c       	lddsp	r12,sp[0x8]
8000707c:	5d 18       	icall	r8
8000707e:	c0 38       	rjmp	80007084 <__call_exitprocs+0x88>
80007080:	16 9c       	mov	r12,r11
80007082:	5d 18       	icall	r8
80007084:	6e 18       	ld.w	r8,r7[0x4]
80007086:	10 30       	cp.w	r0,r8
80007088:	cc 41       	brne	80007010 <__call_exitprocs+0x14>
8000708a:	68 08       	ld.w	r8,r4[0x0]
8000708c:	0e 38       	cp.w	r8,r7
8000708e:	cc 11       	brne	80007010 <__call_exitprocs+0x14>
80007090:	20 15       	sub	r5,1
80007092:	20 43       	sub	r3,4
80007094:	20 42       	sub	r2,4
80007096:	58 05       	cp.w	r5,0
80007098:	cc b4       	brge	8000702e <__call_exitprocs+0x32>
8000709a:	6e 18       	ld.w	r8,r7[0x4]
8000709c:	58 08       	cp.w	r8,0
8000709e:	c0 f1       	brne	800070bc <__call_exitprocs+0xc0>
800070a0:	6e 08       	ld.w	r8,r7[0x0]
800070a2:	58 08       	cp.w	r8,0
800070a4:	c0 c0       	breq	800070bc <__call_exitprocs+0xc0>
800070a6:	89 08       	st.w	r4[0x0],r8
800070a8:	58 06       	cp.w	r6,0
800070aa:	c0 40       	breq	800070b2 <__call_exitprocs+0xb6>
800070ac:	0c 9c       	mov	r12,r6
800070ae:	fe b0 fa 67 	rcall	8000657c <free>
800070b2:	0e 9c       	mov	r12,r7
800070b4:	fe b0 fa 64 	rcall	8000657c <free>
800070b8:	68 07       	ld.w	r7,r4[0x0]
800070ba:	c0 38       	rjmp	800070c0 <__call_exitprocs+0xc4>
800070bc:	0e 94       	mov	r4,r7
800070be:	6e 07       	ld.w	r7,r7[0x0]
800070c0:	58 07       	cp.w	r7,0
800070c2:	ca b1       	brne	80007018 <__call_exitprocs+0x1c>
800070c4:	2f dd       	sub	sp,-12
800070c6:	d8 32       	popm	r0-r7,pc

800070c8 <__errno>:
800070c8:	e0 68 01 18 	mov	r8,280
800070cc:	70 0c       	ld.w	r12,r8[0x0]
800070ce:	2f 4c       	sub	r12,-12
800070d0:	5e fc       	retal	r12
800070d2:	d7 03       	nop

800070d4 <__sfp_lock_acquire>:
800070d4:	5e fc       	retal	r12

800070d6 <__sfp_lock_release>:
800070d6:	5e fc       	retal	r12

800070d8 <_cleanup_r>:
800070d8:	d4 01       	pushm	lr
800070da:	fe cb ca 82 	sub	r11,pc,-13694
800070de:	ca dd       	rcall	80007438 <_fwalk>
800070e0:	d8 02       	popm	pc
800070e2:	d7 03       	nop

800070e4 <__sfmoreglue>:
800070e4:	d4 21       	pushm	r4-r7,lr
800070e6:	16 95       	mov	r5,r11
800070e8:	f6 06 10 5c 	mul	r6,r11,92
800070ec:	ec cb ff f4 	sub	r11,r6,-12
800070f0:	fe b0 fa 56 	rcall	8000659c <_malloc_r>
800070f4:	18 97       	mov	r7,r12
800070f6:	c0 90       	breq	80007108 <__sfmoreglue+0x24>
800070f8:	99 15       	st.w	r12[0x4],r5
800070fa:	30 0b       	mov	r11,0
800070fc:	2f 4c       	sub	r12,-12
800070fe:	0c 9a       	mov	r10,r6
80007100:	8f 2c       	st.w	r7[0x8],r12
80007102:	8f 0b       	st.w	r7[0x0],r11
80007104:	fe b0 fd 0c 	rcall	80006b1c <memset>
80007108:	0e 9c       	mov	r12,r7
8000710a:	d8 22       	popm	r4-r7,pc

8000710c <__sfp>:
8000710c:	d4 21       	pushm	r4-r7,lr
8000710e:	fe c8 af da 	sub	r8,pc,-20518
80007112:	18 96       	mov	r6,r12
80007114:	70 07       	ld.w	r7,r8[0x0]
80007116:	6e 68       	ld.w	r8,r7[0x18]
80007118:	58 08       	cp.w	r8,0
8000711a:	c0 31       	brne	80007120 <__sfp+0x14>
8000711c:	0e 9c       	mov	r12,r7
8000711e:	c2 dc       	rcall	80007178 <__sinit>
80007120:	ee c7 ff 28 	sub	r7,r7,-216
80007124:	30 05       	mov	r5,0
80007126:	6e 2c       	ld.w	r12,r7[0x8]
80007128:	6e 18       	ld.w	r8,r7[0x4]
8000712a:	c0 68       	rjmp	80007136 <__sfp+0x2a>
8000712c:	98 69       	ld.sh	r9,r12[0xc]
8000712e:	ea 09 19 00 	cp.h	r9,r5
80007132:	c1 10       	breq	80007154 <__sfp+0x48>
80007134:	2a 4c       	sub	r12,-92
80007136:	20 18       	sub	r8,1
80007138:	cf a7       	brpl	8000712c <__sfp+0x20>
8000713a:	6e 08       	ld.w	r8,r7[0x0]
8000713c:	58 08       	cp.w	r8,0
8000713e:	c0 61       	brne	8000714a <__sfp+0x3e>
80007140:	30 4b       	mov	r11,4
80007142:	0c 9c       	mov	r12,r6
80007144:	cd 0f       	rcall	800070e4 <__sfmoreglue>
80007146:	8f 0c       	st.w	r7[0x0],r12
80007148:	c0 30       	breq	8000714e <__sfp+0x42>
8000714a:	6e 07       	ld.w	r7,r7[0x0]
8000714c:	ce db       	rjmp	80007126 <__sfp+0x1a>
8000714e:	30 c8       	mov	r8,12
80007150:	8d 38       	st.w	r6[0xc],r8
80007152:	d8 22       	popm	r4-r7,pc
80007154:	30 08       	mov	r8,0
80007156:	f9 48 00 4c 	st.w	r12[76],r8
8000715a:	99 08       	st.w	r12[0x0],r8
8000715c:	99 28       	st.w	r12[0x8],r8
8000715e:	99 18       	st.w	r12[0x4],r8
80007160:	99 48       	st.w	r12[0x10],r8
80007162:	99 58       	st.w	r12[0x14],r8
80007164:	99 68       	st.w	r12[0x18],r8
80007166:	99 d8       	st.w	r12[0x34],r8
80007168:	99 e8       	st.w	r12[0x38],r8
8000716a:	f9 48 00 48 	st.w	r12[72],r8
8000716e:	3f f8       	mov	r8,-1
80007170:	b8 78       	st.h	r12[0xe],r8
80007172:	30 18       	mov	r8,1
80007174:	b8 68       	st.h	r12[0xc],r8
80007176:	d8 22       	popm	r4-r7,pc

80007178 <__sinit>:
80007178:	d4 21       	pushm	r4-r7,lr
8000717a:	18 96       	mov	r6,r12
8000717c:	78 67       	ld.w	r7,r12[0x18]
8000717e:	58 07       	cp.w	r7,0
80007180:	c4 91       	brne	80007212 <__sinit+0x9a>
80007182:	fe c8 00 aa 	sub	r8,pc,170
80007186:	30 15       	mov	r5,1
80007188:	99 a8       	st.w	r12[0x28],r8
8000718a:	f9 47 00 d8 	st.w	r12[216],r7
8000718e:	f9 47 00 dc 	st.w	r12[220],r7
80007192:	f9 47 00 e0 	st.w	r12[224],r7
80007196:	99 65       	st.w	r12[0x18],r5
80007198:	cb af       	rcall	8000710c <__sfp>
8000719a:	8d 0c       	st.w	r6[0x0],r12
8000719c:	0c 9c       	mov	r12,r6
8000719e:	cb 7f       	rcall	8000710c <__sfp>
800071a0:	8d 1c       	st.w	r6[0x4],r12
800071a2:	0c 9c       	mov	r12,r6
800071a4:	cb 4f       	rcall	8000710c <__sfp>
800071a6:	6c 09       	ld.w	r9,r6[0x0]
800071a8:	30 48       	mov	r8,4
800071aa:	93 07       	st.w	r9[0x0],r7
800071ac:	b2 68       	st.h	r9[0xc],r8
800071ae:	93 17       	st.w	r9[0x4],r7
800071b0:	93 27       	st.w	r9[0x8],r7
800071b2:	6c 18       	ld.w	r8,r6[0x4]
800071b4:	b2 77       	st.h	r9[0xe],r7
800071b6:	93 47       	st.w	r9[0x10],r7
800071b8:	93 57       	st.w	r9[0x14],r7
800071ba:	93 67       	st.w	r9[0x18],r7
800071bc:	93 89       	st.w	r9[0x20],r9
800071be:	91 07       	st.w	r8[0x0],r7
800071c0:	91 17       	st.w	r8[0x4],r7
800071c2:	91 27       	st.w	r8[0x8],r7
800071c4:	fe ce fc a4 	sub	lr,pc,-860
800071c8:	fe cb fc d8 	sub	r11,pc,-808
800071cc:	93 9e       	st.w	r9[0x24],lr
800071ce:	93 ab       	st.w	r9[0x28],r11
800071d0:	fe ca fd 04 	sub	r10,pc,-764
800071d4:	fe c4 fd 14 	sub	r4,pc,-748
800071d8:	93 ba       	st.w	r9[0x2c],r10
800071da:	93 c4       	st.w	r9[0x30],r4
800071dc:	30 99       	mov	r9,9
800071de:	b0 69       	st.h	r8[0xc],r9
800071e0:	b0 75       	st.h	r8[0xe],r5
800071e2:	91 c4       	st.w	r8[0x30],r4
800071e4:	91 47       	st.w	r8[0x10],r7
800071e6:	91 57       	st.w	r8[0x14],r7
800071e8:	91 67       	st.w	r8[0x18],r7
800071ea:	91 88       	st.w	r8[0x20],r8
800071ec:	91 9e       	st.w	r8[0x24],lr
800071ee:	91 ab       	st.w	r8[0x28],r11
800071f0:	91 ba       	st.w	r8[0x2c],r10
800071f2:	8d 2c       	st.w	r6[0x8],r12
800071f4:	31 28       	mov	r8,18
800071f6:	99 07       	st.w	r12[0x0],r7
800071f8:	b8 68       	st.h	r12[0xc],r8
800071fa:	99 17       	st.w	r12[0x4],r7
800071fc:	99 27       	st.w	r12[0x8],r7
800071fe:	30 28       	mov	r8,2
80007200:	b8 78       	st.h	r12[0xe],r8
80007202:	99 c4       	st.w	r12[0x30],r4
80007204:	99 67       	st.w	r12[0x18],r7
80007206:	99 9e       	st.w	r12[0x24],lr
80007208:	99 ab       	st.w	r12[0x28],r11
8000720a:	99 ba       	st.w	r12[0x2c],r10
8000720c:	99 47       	st.w	r12[0x10],r7
8000720e:	99 57       	st.w	r12[0x14],r7
80007210:	99 8c       	st.w	r12[0x20],r12
80007212:	d8 22       	popm	r4-r7,pc

80007214 <_malloc_trim_r>:
80007214:	d4 21       	pushm	r4-r7,lr
80007216:	16 95       	mov	r5,r11
80007218:	18 97       	mov	r7,r12
8000721a:	fe b0 ec 71 	rcall	80004afc <__malloc_lock>
8000721e:	e0 64 01 1c 	mov	r4,284
80007222:	68 28       	ld.w	r8,r4[0x8]
80007224:	70 16       	ld.w	r6,r8[0x4]
80007226:	e0 16 ff fc 	andl	r6,0xfffc
8000722a:	ec c8 ff 91 	sub	r8,r6,-111
8000722e:	f0 05 01 05 	sub	r5,r8,r5
80007232:	e0 15 ff 80 	andl	r5,0xff80
80007236:	ea c5 00 80 	sub	r5,r5,128
8000723a:	e0 45 00 7f 	cp.w	r5,127
8000723e:	e0 8a 00 25 	brle	80007288 <_malloc_trim_r+0x74>
80007242:	30 0b       	mov	r11,0
80007244:	0e 9c       	mov	r12,r7
80007246:	fe b0 fd d3 	rcall	80006dec <_sbrk_r>
8000724a:	68 28       	ld.w	r8,r4[0x8]
8000724c:	0c 08       	add	r8,r6
8000724e:	10 3c       	cp.w	r12,r8
80007250:	c1 c1       	brne	80007288 <_malloc_trim_r+0x74>
80007252:	ea 0b 11 00 	rsub	r11,r5,0
80007256:	0e 9c       	mov	r12,r7
80007258:	fe b0 fd ca 	rcall	80006dec <_sbrk_r>
8000725c:	5b fc       	cp.w	r12,-1
8000725e:	c1 91       	brne	80007290 <_malloc_trim_r+0x7c>
80007260:	30 0b       	mov	r11,0
80007262:	0e 9c       	mov	r12,r7
80007264:	fe b0 fd c4 	rcall	80006dec <_sbrk_r>
80007268:	68 28       	ld.w	r8,r4[0x8]
8000726a:	f8 08 01 09 	sub	r9,r12,r8
8000726e:	58 f9       	cp.w	r9,15
80007270:	e0 8a 00 0c 	brle	80007288 <_malloc_trim_r+0x74>
80007274:	a1 a9       	sbr	r9,0x0
80007276:	91 19       	st.w	r8[0x4],r9
80007278:	e0 68 05 28 	mov	r8,1320
8000727c:	70 09       	ld.w	r9,r8[0x0]
8000727e:	e0 68 07 b0 	mov	r8,1968
80007282:	f8 09 01 09 	sub	r9,r12,r9
80007286:	91 09       	st.w	r8[0x0],r9
80007288:	0e 9c       	mov	r12,r7
8000728a:	fe b0 ec 47 	rcall	80004b18 <__malloc_unlock>
8000728e:	d8 2a       	popm	r4-r7,pc,r12=0
80007290:	68 28       	ld.w	r8,r4[0x8]
80007292:	0a 16       	sub	r6,r5
80007294:	a1 a6       	sbr	r6,0x0
80007296:	91 16       	st.w	r8[0x4],r6
80007298:	e0 68 07 b0 	mov	r8,1968
8000729c:	70 09       	ld.w	r9,r8[0x0]
8000729e:	0a 19       	sub	r9,r5
800072a0:	0e 9c       	mov	r12,r7
800072a2:	91 09       	st.w	r8[0x0],r9
800072a4:	fe b0 ec 3a 	rcall	80004b18 <__malloc_unlock>
800072a8:	da 2a       	popm	r4-r7,pc,r12=1
800072aa:	d7 03       	nop

800072ac <_free_r>:
800072ac:	d4 21       	pushm	r4-r7,lr
800072ae:	16 96       	mov	r6,r11
800072b0:	18 97       	mov	r7,r12
800072b2:	58 0b       	cp.w	r11,0
800072b4:	e0 80 00 c0 	breq	80007434 <_free_r+0x188>
800072b8:	fe b0 ec 22 	rcall	80004afc <__malloc_lock>
800072bc:	20 86       	sub	r6,8
800072be:	e0 6a 01 1c 	mov	r10,284
800072c2:	6c 18       	ld.w	r8,r6[0x4]
800072c4:	74 2e       	ld.w	lr,r10[0x8]
800072c6:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800072ca:	a1 c8       	cbr	r8,0x0
800072cc:	ec 08 00 09 	add	r9,r6,r8
800072d0:	72 1b       	ld.w	r11,r9[0x4]
800072d2:	e0 1b ff fc 	andl	r11,0xfffc
800072d6:	1c 39       	cp.w	r9,lr
800072d8:	c1 e1       	brne	80007314 <_free_r+0x68>
800072da:	f6 08 00 08 	add	r8,r11,r8
800072de:	58 0c       	cp.w	r12,0
800072e0:	c0 81       	brne	800072f0 <_free_r+0x44>
800072e2:	6c 09       	ld.w	r9,r6[0x0]
800072e4:	12 16       	sub	r6,r9
800072e6:	12 08       	add	r8,r9
800072e8:	6c 3b       	ld.w	r11,r6[0xc]
800072ea:	6c 29       	ld.w	r9,r6[0x8]
800072ec:	97 29       	st.w	r11[0x8],r9
800072ee:	93 3b       	st.w	r9[0xc],r11
800072f0:	10 99       	mov	r9,r8
800072f2:	95 26       	st.w	r10[0x8],r6
800072f4:	a1 a9       	sbr	r9,0x0
800072f6:	8d 19       	st.w	r6[0x4],r9
800072f8:	e0 69 05 24 	mov	r9,1316
800072fc:	72 09       	ld.w	r9,r9[0x0]
800072fe:	12 38       	cp.w	r8,r9
80007300:	c0 63       	brcs	8000730c <_free_r+0x60>
80007302:	e0 68 07 ac 	mov	r8,1964
80007306:	0e 9c       	mov	r12,r7
80007308:	70 0b       	ld.w	r11,r8[0x0]
8000730a:	c8 5f       	rcall	80007214 <_malloc_trim_r>
8000730c:	0e 9c       	mov	r12,r7
8000730e:	fe b0 ec 05 	rcall	80004b18 <__malloc_unlock>
80007312:	d8 22       	popm	r4-r7,pc
80007314:	93 1b       	st.w	r9[0x4],r11
80007316:	58 0c       	cp.w	r12,0
80007318:	c0 30       	breq	8000731e <_free_r+0x72>
8000731a:	30 0c       	mov	r12,0
8000731c:	c1 08       	rjmp	8000733c <_free_r+0x90>
8000731e:	6c 0e       	ld.w	lr,r6[0x0]
80007320:	f4 c5 ff f8 	sub	r5,r10,-8
80007324:	1c 16       	sub	r6,lr
80007326:	1c 08       	add	r8,lr
80007328:	6c 2e       	ld.w	lr,r6[0x8]
8000732a:	0a 3e       	cp.w	lr,r5
8000732c:	f9 bc 00 01 	moveq	r12,1
80007330:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007334:	eb fe 1a 02 	st.wne	r5[0x8],lr
80007338:	fd f5 1a 03 	st.wne	lr[0xc],r5
8000733c:	f2 0b 00 0e 	add	lr,r9,r11
80007340:	7c 1e       	ld.w	lr,lr[0x4]
80007342:	ed be 00 00 	bld	lr,0x0
80007346:	c1 40       	breq	8000736e <_free_r+0xc2>
80007348:	16 08       	add	r8,r11
8000734a:	58 0c       	cp.w	r12,0
8000734c:	c0 d1       	brne	80007366 <_free_r+0xba>
8000734e:	e0 6e 01 1c 	mov	lr,284
80007352:	72 2b       	ld.w	r11,r9[0x8]
80007354:	2f 8e       	sub	lr,-8
80007356:	1c 3b       	cp.w	r11,lr
80007358:	c0 71       	brne	80007366 <_free_r+0xba>
8000735a:	97 36       	st.w	r11[0xc],r6
8000735c:	97 26       	st.w	r11[0x8],r6
8000735e:	8d 2b       	st.w	r6[0x8],r11
80007360:	8d 3b       	st.w	r6[0xc],r11
80007362:	30 1c       	mov	r12,1
80007364:	c0 58       	rjmp	8000736e <_free_r+0xc2>
80007366:	72 2b       	ld.w	r11,r9[0x8]
80007368:	72 39       	ld.w	r9,r9[0xc]
8000736a:	93 2b       	st.w	r9[0x8],r11
8000736c:	97 39       	st.w	r11[0xc],r9
8000736e:	10 99       	mov	r9,r8
80007370:	ec 08 09 08 	st.w	r6[r8],r8
80007374:	a1 a9       	sbr	r9,0x0
80007376:	8d 19       	st.w	r6[0x4],r9
80007378:	58 0c       	cp.w	r12,0
8000737a:	c5 a1       	brne	8000742e <_free_r+0x182>
8000737c:	e0 48 01 ff 	cp.w	r8,511
80007380:	e0 8b 00 13 	brhi	800073a6 <_free_r+0xfa>
80007384:	a3 98       	lsr	r8,0x3
80007386:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000738a:	72 2b       	ld.w	r11,r9[0x8]
8000738c:	8d 39       	st.w	r6[0xc],r9
8000738e:	8d 2b       	st.w	r6[0x8],r11
80007390:	97 36       	st.w	r11[0xc],r6
80007392:	93 26       	st.w	r9[0x8],r6
80007394:	a3 48       	asr	r8,0x2
80007396:	74 19       	ld.w	r9,r10[0x4]
80007398:	30 1b       	mov	r11,1
8000739a:	f6 08 09 48 	lsl	r8,r11,r8
8000739e:	f3 e8 10 08 	or	r8,r9,r8
800073a2:	95 18       	st.w	r10[0x4],r8
800073a4:	c4 58       	rjmp	8000742e <_free_r+0x182>
800073a6:	f0 0b 16 09 	lsr	r11,r8,0x9
800073aa:	58 4b       	cp.w	r11,4
800073ac:	e0 8b 00 06 	brhi	800073b8 <_free_r+0x10c>
800073b0:	f0 0b 16 06 	lsr	r11,r8,0x6
800073b4:	2c 8b       	sub	r11,-56
800073b6:	c2 08       	rjmp	800073f6 <_free_r+0x14a>
800073b8:	59 4b       	cp.w	r11,20
800073ba:	e0 8b 00 04 	brhi	800073c2 <_free_r+0x116>
800073be:	2a 5b       	sub	r11,-91
800073c0:	c1 b8       	rjmp	800073f6 <_free_r+0x14a>
800073c2:	e0 4b 00 54 	cp.w	r11,84
800073c6:	e0 8b 00 06 	brhi	800073d2 <_free_r+0x126>
800073ca:	f0 0b 16 0c 	lsr	r11,r8,0xc
800073ce:	29 2b       	sub	r11,-110
800073d0:	c1 38       	rjmp	800073f6 <_free_r+0x14a>
800073d2:	e0 4b 01 54 	cp.w	r11,340
800073d6:	e0 8b 00 06 	brhi	800073e2 <_free_r+0x136>
800073da:	f0 0b 16 0f 	lsr	r11,r8,0xf
800073de:	28 9b       	sub	r11,-119
800073e0:	c0 b8       	rjmp	800073f6 <_free_r+0x14a>
800073e2:	e0 4b 05 54 	cp.w	r11,1364
800073e6:	e0 88 00 05 	brls	800073f0 <_free_r+0x144>
800073ea:	37 eb       	mov	r11,126
800073ec:	c0 58       	rjmp	800073f6 <_free_r+0x14a>
800073ee:	d7 03       	nop
800073f0:	f0 0b 16 12 	lsr	r11,r8,0x12
800073f4:	28 4b       	sub	r11,-124
800073f6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800073fa:	78 29       	ld.w	r9,r12[0x8]
800073fc:	18 39       	cp.w	r9,r12
800073fe:	c0 e1       	brne	8000741a <_free_r+0x16e>
80007400:	74 18       	ld.w	r8,r10[0x4]
80007402:	a3 4b       	asr	r11,0x2
80007404:	30 1c       	mov	r12,1
80007406:	f8 0b 09 4b 	lsl	r11,r12,r11
8000740a:	f1 eb 10 0b 	or	r11,r8,r11
8000740e:	12 98       	mov	r8,r9
80007410:	95 1b       	st.w	r10[0x4],r11
80007412:	c0 a8       	rjmp	80007426 <_free_r+0x17a>
80007414:	72 29       	ld.w	r9,r9[0x8]
80007416:	18 39       	cp.w	r9,r12
80007418:	c0 60       	breq	80007424 <_free_r+0x178>
8000741a:	72 1a       	ld.w	r10,r9[0x4]
8000741c:	e0 1a ff fc 	andl	r10,0xfffc
80007420:	14 38       	cp.w	r8,r10
80007422:	cf 93       	brcs	80007414 <_free_r+0x168>
80007424:	72 38       	ld.w	r8,r9[0xc]
80007426:	8d 38       	st.w	r6[0xc],r8
80007428:	8d 29       	st.w	r6[0x8],r9
8000742a:	93 36       	st.w	r9[0xc],r6
8000742c:	91 26       	st.w	r8[0x8],r6
8000742e:	0e 9c       	mov	r12,r7
80007430:	fe b0 eb 74 	rcall	80004b18 <__malloc_unlock>
80007434:	d8 22       	popm	r4-r7,pc
80007436:	d7 03       	nop

80007438 <_fwalk>:
80007438:	d4 31       	pushm	r0-r7,lr
8000743a:	30 05       	mov	r5,0
8000743c:	16 91       	mov	r1,r11
8000743e:	f8 c7 ff 28 	sub	r7,r12,-216
80007442:	0a 92       	mov	r2,r5
80007444:	c4 8e       	rcall	800070d4 <__sfp_lock_acquire>
80007446:	3f f3       	mov	r3,-1
80007448:	c1 68       	rjmp	80007474 <_fwalk+0x3c>
8000744a:	6e 26       	ld.w	r6,r7[0x8]
8000744c:	6e 14       	ld.w	r4,r7[0x4]
8000744e:	2f 46       	sub	r6,-12
80007450:	c0 c8       	rjmp	80007468 <_fwalk+0x30>
80007452:	8c 08       	ld.sh	r8,r6[0x0]
80007454:	e4 08 19 00 	cp.h	r8,r2
80007458:	c0 70       	breq	80007466 <_fwalk+0x2e>
8000745a:	8c 18       	ld.sh	r8,r6[0x2]
8000745c:	e6 08 19 00 	cp.h	r8,r3
80007460:	c0 30       	breq	80007466 <_fwalk+0x2e>
80007462:	5d 11       	icall	r1
80007464:	18 45       	or	r5,r12
80007466:	2a 46       	sub	r6,-92
80007468:	20 14       	sub	r4,1
8000746a:	ec cc 00 0c 	sub	r12,r6,12
8000746e:	58 04       	cp.w	r4,0
80007470:	cf 14       	brge	80007452 <_fwalk+0x1a>
80007472:	6e 07       	ld.w	r7,r7[0x0]
80007474:	58 07       	cp.w	r7,0
80007476:	ce a1       	brne	8000744a <_fwalk+0x12>
80007478:	c2 fe       	rcall	800070d6 <__sfp_lock_release>
8000747a:	0a 9c       	mov	r12,r5
8000747c:	d8 32       	popm	r0-r7,pc
8000747e:	d7 03       	nop

80007480 <memmove>:
80007480:	d4 01       	pushm	lr
80007482:	18 3b       	cp.w	r11,r12
80007484:	c1 92       	brcc	800074b6 <memmove+0x36>
80007486:	f6 0a 00 09 	add	r9,r11,r10
8000748a:	12 3c       	cp.w	r12,r9
8000748c:	c1 52       	brcc	800074b6 <memmove+0x36>
8000748e:	f8 0a 00 0b 	add	r11,r12,r10
80007492:	30 08       	mov	r8,0
80007494:	c0 68       	rjmp	800074a0 <memmove+0x20>
80007496:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000749a:	20 1a       	sub	r10,1
8000749c:	f6 08 0b 0e 	st.b	r11[r8],lr
800074a0:	20 18       	sub	r8,1
800074a2:	58 0a       	cp.w	r10,0
800074a4:	cf 91       	brne	80007496 <memmove+0x16>
800074a6:	d8 02       	popm	pc
800074a8:	f6 08 07 09 	ld.ub	r9,r11[r8]
800074ac:	20 1a       	sub	r10,1
800074ae:	f8 08 0b 09 	st.b	r12[r8],r9
800074b2:	2f f8       	sub	r8,-1
800074b4:	c0 28       	rjmp	800074b8 <memmove+0x38>
800074b6:	30 08       	mov	r8,0
800074b8:	58 0a       	cp.w	r10,0
800074ba:	cf 71       	brne	800074a8 <memmove+0x28>
800074bc:	d8 02       	popm	pc
800074be:	d7 03       	nop

800074c0 <__sclose>:
800074c0:	d4 01       	pushm	lr
800074c2:	96 7b       	ld.sh	r11,r11[0xe]
800074c4:	e0 a0 11 e2 	rcall	80009888 <_close_r>
800074c8:	d8 02       	popm	pc
800074ca:	d7 03       	nop

800074cc <__sseek>:
800074cc:	d4 21       	pushm	r4-r7,lr
800074ce:	16 97       	mov	r7,r11
800074d0:	96 7b       	ld.sh	r11,r11[0xe]
800074d2:	e0 a0 1a a5 	rcall	8000aa1c <_lseek_r>
800074d6:	8e 68       	ld.sh	r8,r7[0xc]
800074d8:	10 99       	mov	r9,r8
800074da:	ad c8       	cbr	r8,0xc
800074dc:	ad a9       	sbr	r9,0xc
800074de:	5b fc       	cp.w	r12,-1
800074e0:	ef f8 0c 06 	st.heq	r7[0xc],r8
800074e4:	ef f9 1c 06 	st.hne	r7[0xc],r9
800074e8:	ef fc 1a 15 	st.wne	r7[0x54],r12
800074ec:	d8 22       	popm	r4-r7,pc
800074ee:	d7 03       	nop

800074f0 <__swrite>:
800074f0:	d4 21       	pushm	r4-r7,lr
800074f2:	96 68       	ld.sh	r8,r11[0xc]
800074f4:	16 97       	mov	r7,r11
800074f6:	14 95       	mov	r5,r10
800074f8:	12 94       	mov	r4,r9
800074fa:	e2 18 01 00 	andl	r8,0x100,COH
800074fe:	18 96       	mov	r6,r12
80007500:	c0 60       	breq	8000750c <__swrite+0x1c>
80007502:	30 29       	mov	r9,2
80007504:	30 0a       	mov	r10,0
80007506:	96 7b       	ld.sh	r11,r11[0xe]
80007508:	e0 a0 1a 8a 	rcall	8000aa1c <_lseek_r>
8000750c:	8e 68       	ld.sh	r8,r7[0xc]
8000750e:	ad c8       	cbr	r8,0xc
80007510:	08 99       	mov	r9,r4
80007512:	0a 9a       	mov	r10,r5
80007514:	8e 7b       	ld.sh	r11,r7[0xe]
80007516:	0c 9c       	mov	r12,r6
80007518:	ae 68       	st.h	r7[0xc],r8
8000751a:	e0 a0 11 35 	rcall	80009784 <_write_r>
8000751e:	d8 22       	popm	r4-r7,pc

80007520 <__sread>:
80007520:	d4 21       	pushm	r4-r7,lr
80007522:	16 97       	mov	r7,r11
80007524:	96 7b       	ld.sh	r11,r11[0xe]
80007526:	e0 a0 1d e3 	rcall	8000b0ec <_read_r>
8000752a:	c0 65       	brlt	80007536 <__sread+0x16>
8000752c:	6f 58       	ld.w	r8,r7[0x54]
8000752e:	18 08       	add	r8,r12
80007530:	ef 48 00 54 	st.w	r7[84],r8
80007534:	d8 22       	popm	r4-r7,pc
80007536:	8e 68       	ld.sh	r8,r7[0xc]
80007538:	ad c8       	cbr	r8,0xc
8000753a:	ae 68       	st.h	r7[0xc],r8
8000753c:	d8 22       	popm	r4-r7,pc
8000753e:	d7 03       	nop

80007540 <get_arg>:
80007540:	d4 31       	pushm	r0-r7,lr
80007542:	20 8d       	sub	sp,32
80007544:	fa c4 ff bc 	sub	r4,sp,-68
80007548:	50 4b       	stdsp	sp[0x10],r11
8000754a:	68 2e       	ld.w	lr,r4[0x8]
8000754c:	50 58       	stdsp	sp[0x14],r8
8000754e:	12 96       	mov	r6,r9
80007550:	7c 0b       	ld.w	r11,lr[0x0]
80007552:	70 05       	ld.w	r5,r8[0x0]
80007554:	50 6e       	stdsp	sp[0x18],lr
80007556:	58 0b       	cp.w	r11,0
80007558:	f4 0b 17 00 	moveq	r11,r10
8000755c:	68 03       	ld.w	r3,r4[0x0]
8000755e:	68 11       	ld.w	r1,r4[0x4]
80007560:	40 49       	lddsp	r9,sp[0x10]
80007562:	30 08       	mov	r8,0
80007564:	c2 89       	rjmp	800077b4 <get_arg+0x274>
80007566:	2f fb       	sub	r11,-1
80007568:	32 5c       	mov	r12,37
8000756a:	17 8a       	ld.ub	r10,r11[0x0]
8000756c:	f8 0a 18 00 	cp.b	r10,r12
80007570:	5f 1e       	srne	lr
80007572:	f0 0a 18 00 	cp.b	r10,r8
80007576:	5f 1c       	srne	r12
80007578:	fd ec 00 0c 	and	r12,lr,r12
8000757c:	f0 0c 18 00 	cp.b	r12,r8
80007580:	cf 31       	brne	80007566 <get_arg+0x26>
80007582:	58 0a       	cp.w	r10,0
80007584:	e0 80 01 25 	breq	800077ce <get_arg+0x28e>
80007588:	30 0c       	mov	r12,0
8000758a:	3f fa       	mov	r10,-1
8000758c:	18 90       	mov	r0,r12
8000758e:	50 3a       	stdsp	sp[0xc],r10
80007590:	18 94       	mov	r4,r12
80007592:	18 92       	mov	r2,r12
80007594:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80007598:	16 97       	mov	r7,r11
8000759a:	50 7c       	stdsp	sp[0x1c],r12
8000759c:	fe cc b1 30 	sub	r12,pc,-20176
800075a0:	0f 3a       	ld.ub	r10,r7++
800075a2:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800075a6:	40 7c       	lddsp	r12,sp[0x1c]
800075a8:	1c 0c       	add	r12,lr
800075aa:	fe ce b2 06 	sub	lr,pc,-19962
800075ae:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800075b2:	20 1e       	sub	lr,1
800075b4:	50 0e       	stdsp	sp[0x0],lr
800075b6:	fe ce b2 7e 	sub	lr,pc,-19842
800075ba:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800075be:	50 7c       	stdsp	sp[0x1c],r12
800075c0:	40 0c       	lddsp	r12,sp[0x0]
800075c2:	58 7c       	cp.w	r12,7
800075c4:	e0 8b 00 f1 	brhi	800077a6 <get_arg+0x266>
800075c8:	fe ce b4 30 	sub	lr,pc,-19408
800075cc:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
800075d0:	36 8b       	mov	r11,104
800075d2:	f6 0a 18 00 	cp.b	r10,r11
800075d6:	e0 80 00 e8 	breq	800077a6 <get_arg+0x266>
800075da:	37 1b       	mov	r11,113
800075dc:	f6 0a 18 00 	cp.b	r10,r11
800075e0:	c0 70       	breq	800075ee <get_arg+0xae>
800075e2:	34 cb       	mov	r11,76
800075e4:	f6 0a 18 00 	cp.b	r10,r11
800075e8:	c0 51       	brne	800075f2 <get_arg+0xb2>
800075ea:	a3 b4       	sbr	r4,0x3
800075ec:	cd d8       	rjmp	800077a6 <get_arg+0x266>
800075ee:	a5 b4       	sbr	r4,0x5
800075f0:	cd b8       	rjmp	800077a6 <get_arg+0x266>
800075f2:	08 9a       	mov	r10,r4
800075f4:	0e 9b       	mov	r11,r7
800075f6:	a5 aa       	sbr	r10,0x4
800075f8:	17 3c       	ld.ub	r12,r11++
800075fa:	a5 b4       	sbr	r4,0x5
800075fc:	36 ce       	mov	lr,108
800075fe:	fc 0c 18 00 	cp.b	r12,lr
80007602:	e0 80 00 d3 	breq	800077a8 <get_arg+0x268>
80007606:	14 94       	mov	r4,r10
80007608:	cc f8       	rjmp	800077a6 <get_arg+0x266>
8000760a:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000760e:	36 7c       	mov	r12,103
80007610:	f8 0a 18 00 	cp.b	r10,r12
80007614:	e0 8b 00 27 	brhi	80007662 <get_arg+0x122>
80007618:	36 5b       	mov	r11,101
8000761a:	f6 0a 18 00 	cp.b	r10,r11
8000761e:	c4 82       	brcc	800076ae <get_arg+0x16e>
80007620:	34 fb       	mov	r11,79
80007622:	f6 0a 18 00 	cp.b	r10,r11
80007626:	c4 80       	breq	800076b6 <get_arg+0x176>
80007628:	e0 8b 00 0c 	brhi	80007640 <get_arg+0x100>
8000762c:	34 5b       	mov	r11,69
8000762e:	f6 0a 18 00 	cp.b	r10,r11
80007632:	c3 e0       	breq	800076ae <get_arg+0x16e>
80007634:	34 7b       	mov	r11,71
80007636:	f6 0a 18 00 	cp.b	r10,r11
8000763a:	c3 a0       	breq	800076ae <get_arg+0x16e>
8000763c:	34 4b       	mov	r11,68
8000763e:	c0 88       	rjmp	8000764e <get_arg+0x10e>
80007640:	35 8b       	mov	r11,88
80007642:	f6 0a 18 00 	cp.b	r10,r11
80007646:	c2 c0       	breq	8000769e <get_arg+0x15e>
80007648:	e0 8b 00 07 	brhi	80007656 <get_arg+0x116>
8000764c:	35 5b       	mov	r11,85
8000764e:	f6 0a 18 00 	cp.b	r10,r11
80007652:	c3 51       	brne	800076bc <get_arg+0x17c>
80007654:	c3 18       	rjmp	800076b6 <get_arg+0x176>
80007656:	36 3b       	mov	r11,99
80007658:	f6 0a 18 00 	cp.b	r10,r11
8000765c:	c2 f0       	breq	800076ba <get_arg+0x17a>
8000765e:	36 4b       	mov	r11,100
80007660:	c0 e8       	rjmp	8000767c <get_arg+0x13c>
80007662:	37 0b       	mov	r11,112
80007664:	f6 0a 18 00 	cp.b	r10,r11
80007668:	c2 50       	breq	800076b2 <get_arg+0x172>
8000766a:	e0 8b 00 0d 	brhi	80007684 <get_arg+0x144>
8000766e:	36 eb       	mov	r11,110
80007670:	f6 0a 18 00 	cp.b	r10,r11
80007674:	c1 f0       	breq	800076b2 <get_arg+0x172>
80007676:	e0 8b 00 14 	brhi	8000769e <get_arg+0x15e>
8000767a:	36 9b       	mov	r11,105
8000767c:	f6 0a 18 00 	cp.b	r10,r11
80007680:	c1 e1       	brne	800076bc <get_arg+0x17c>
80007682:	c0 e8       	rjmp	8000769e <get_arg+0x15e>
80007684:	37 5b       	mov	r11,117
80007686:	f6 0a 18 00 	cp.b	r10,r11
8000768a:	c0 a0       	breq	8000769e <get_arg+0x15e>
8000768c:	37 8b       	mov	r11,120
8000768e:	f6 0a 18 00 	cp.b	r10,r11
80007692:	c0 60       	breq	8000769e <get_arg+0x15e>
80007694:	37 3b       	mov	r11,115
80007696:	f6 0a 18 00 	cp.b	r10,r11
8000769a:	c1 11       	brne	800076bc <get_arg+0x17c>
8000769c:	c0 b8       	rjmp	800076b2 <get_arg+0x172>
8000769e:	ed b4 00 04 	bld	r4,0x4
800076a2:	c0 a0       	breq	800076b6 <get_arg+0x176>
800076a4:	ed b4 00 05 	bld	r4,0x5
800076a8:	c0 91       	brne	800076ba <get_arg+0x17a>
800076aa:	30 20       	mov	r0,2
800076ac:	c0 88       	rjmp	800076bc <get_arg+0x17c>
800076ae:	30 40       	mov	r0,4
800076b0:	c0 68       	rjmp	800076bc <get_arg+0x17c>
800076b2:	30 30       	mov	r0,3
800076b4:	c0 48       	rjmp	800076bc <get_arg+0x17c>
800076b6:	30 10       	mov	r0,1
800076b8:	c0 28       	rjmp	800076bc <get_arg+0x17c>
800076ba:	30 00       	mov	r0,0
800076bc:	40 3b       	lddsp	r11,sp[0xc]
800076be:	5b fb       	cp.w	r11,-1
800076c0:	c0 40       	breq	800076c8 <get_arg+0x188>
800076c2:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800076c6:	c7 08       	rjmp	800077a6 <get_arg+0x266>
800076c8:	58 60       	cp.w	r0,6
800076ca:	e0 8b 00 6e 	brhi	800077a6 <get_arg+0x266>
800076ce:	6c 0a       	ld.w	r10,r6[0x0]
800076d0:	ea cc ff ff 	sub	r12,r5,-1
800076d4:	fe ce b5 1c 	sub	lr,pc,-19172
800076d8:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
800076dc:	f4 cb ff f8 	sub	r11,r10,-8
800076e0:	8d 0b       	st.w	r6[0x0],r11
800076e2:	f4 ea 00 00 	ld.d	r10,r10[0]
800076e6:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800076ea:	c0 f8       	rjmp	80007708 <get_arg+0x1c8>
800076ec:	f4 cb ff fc 	sub	r11,r10,-4
800076f0:	8d 0b       	st.w	r6[0x0],r11
800076f2:	74 0a       	ld.w	r10,r10[0x0]
800076f4:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800076f8:	c0 88       	rjmp	80007708 <get_arg+0x1c8>
800076fa:	f4 cb ff f8 	sub	r11,r10,-8
800076fe:	8d 0b       	st.w	r6[0x0],r11
80007700:	f4 ea 00 00 	ld.d	r10,r10[0]
80007704:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80007708:	0e 9b       	mov	r11,r7
8000770a:	18 95       	mov	r5,r12
8000770c:	c4 e8       	rjmp	800077a8 <get_arg+0x268>
8000770e:	62 0a       	ld.w	r10,r1[0x0]
80007710:	5b fa       	cp.w	r10,-1
80007712:	c0 b1       	brne	80007728 <get_arg+0x1e8>
80007714:	50 19       	stdsp	sp[0x4],r9
80007716:	50 28       	stdsp	sp[0x8],r8
80007718:	e0 6a 00 80 	mov	r10,128
8000771c:	30 0b       	mov	r11,0
8000771e:	02 9c       	mov	r12,r1
80007720:	fe b0 f9 fe 	rcall	80006b1c <memset>
80007724:	40 28       	lddsp	r8,sp[0x8]
80007726:	40 19       	lddsp	r9,sp[0x4]
80007728:	e4 cc 00 01 	sub	r12,r2,1
8000772c:	0e 9b       	mov	r11,r7
8000772e:	50 3c       	stdsp	sp[0xc],r12
80007730:	f2 0c 0c 49 	max	r9,r9,r12
80007734:	c3 a8       	rjmp	800077a8 <get_arg+0x268>
80007736:	62 0a       	ld.w	r10,r1[0x0]
80007738:	5b fa       	cp.w	r10,-1
8000773a:	c0 b1       	brne	80007750 <get_arg+0x210>
8000773c:	50 19       	stdsp	sp[0x4],r9
8000773e:	50 28       	stdsp	sp[0x8],r8
80007740:	e0 6a 00 80 	mov	r10,128
80007744:	30 0b       	mov	r11,0
80007746:	02 9c       	mov	r12,r1
80007748:	fe b0 f9 ea 	rcall	80006b1c <memset>
8000774c:	40 28       	lddsp	r8,sp[0x8]
8000774e:	40 19       	lddsp	r9,sp[0x4]
80007750:	20 12       	sub	r2,1
80007752:	30 0a       	mov	r10,0
80007754:	0e 9b       	mov	r11,r7
80007756:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000775a:	f2 02 0c 49 	max	r9,r9,r2
8000775e:	c2 58       	rjmp	800077a8 <get_arg+0x268>
80007760:	16 97       	mov	r7,r11
80007762:	6c 0a       	ld.w	r10,r6[0x0]
80007764:	f4 cb ff fc 	sub	r11,r10,-4
80007768:	8d 0b       	st.w	r6[0x0],r11
8000776a:	74 0a       	ld.w	r10,r10[0x0]
8000776c:	0e 9b       	mov	r11,r7
8000776e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80007772:	2f f5       	sub	r5,-1
80007774:	c1 a8       	rjmp	800077a8 <get_arg+0x268>
80007776:	f4 c2 00 30 	sub	r2,r10,48
8000777a:	c0 68       	rjmp	80007786 <get_arg+0x246>
8000777c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80007780:	2f f7       	sub	r7,-1
80007782:	f4 02 00 12 	add	r2,r10,r2<<0x1
80007786:	0f 8a       	ld.ub	r10,r7[0x0]
80007788:	58 0a       	cp.w	r10,0
8000778a:	c0 e0       	breq	800077a6 <get_arg+0x266>
8000778c:	23 0a       	sub	r10,48
8000778e:	58 9a       	cp.w	r10,9
80007790:	fe 98 ff f6 	brls	8000777c <get_arg+0x23c>
80007794:	c0 98       	rjmp	800077a6 <get_arg+0x266>
80007796:	2f f7       	sub	r7,-1
80007798:	0f 8a       	ld.ub	r10,r7[0x0]
8000779a:	58 0a       	cp.w	r10,0
8000779c:	c0 50       	breq	800077a6 <get_arg+0x266>
8000779e:	23 0a       	sub	r10,48
800077a0:	58 9a       	cp.w	r10,9
800077a2:	fe 98 ff fa 	brls	80007796 <get_arg+0x256>
800077a6:	0e 9b       	mov	r11,r7
800077a8:	40 7c       	lddsp	r12,sp[0x1c]
800077aa:	30 ba       	mov	r10,11
800077ac:	f4 0c 18 00 	cp.b	r12,r10
800077b0:	fe 91 fe f2 	brne	80007594 <get_arg+0x54>
800077b4:	40 42       	lddsp	r2,sp[0x10]
800077b6:	17 8c       	ld.ub	r12,r11[0x0]
800077b8:	0a 32       	cp.w	r2,r5
800077ba:	5f 4a       	srge	r10
800077bc:	f0 0c 18 00 	cp.b	r12,r8
800077c0:	5f 1c       	srne	r12
800077c2:	f9 ea 00 0a 	and	r10,r12,r10
800077c6:	f0 0a 18 00 	cp.b	r10,r8
800077ca:	fe 91 fe cf 	brne	80007568 <get_arg+0x28>
800077ce:	30 08       	mov	r8,0
800077d0:	40 4e       	lddsp	lr,sp[0x10]
800077d2:	17 8a       	ld.ub	r10,r11[0x0]
800077d4:	e2 05 00 21 	add	r1,r1,r5<<0x2
800077d8:	f0 0a 18 00 	cp.b	r10,r8
800077dc:	fc 09 17 10 	movne	r9,lr
800077e0:	e6 05 00 38 	add	r8,r3,r5<<0x3
800077e4:	06 9e       	mov	lr,r3
800077e6:	c2 a8       	rjmp	8000783a <get_arg+0x2fa>
800077e8:	62 0a       	ld.w	r10,r1[0x0]
800077ea:	58 3a       	cp.w	r10,3
800077ec:	c1 e0       	breq	80007828 <get_arg+0x2e8>
800077ee:	e0 89 00 07 	brgt	800077fc <get_arg+0x2bc>
800077f2:	58 1a       	cp.w	r10,1
800077f4:	c1 a0       	breq	80007828 <get_arg+0x2e8>
800077f6:	58 2a       	cp.w	r10,2
800077f8:	c1 81       	brne	80007828 <get_arg+0x2e8>
800077fa:	c0 58       	rjmp	80007804 <get_arg+0x2c4>
800077fc:	58 5a       	cp.w	r10,5
800077fe:	c0 c0       	breq	80007816 <get_arg+0x2d6>
80007800:	c0 b5       	brlt	80007816 <get_arg+0x2d6>
80007802:	c1 38       	rjmp	80007828 <get_arg+0x2e8>
80007804:	6c 0a       	ld.w	r10,r6[0x0]
80007806:	f4 cc ff f8 	sub	r12,r10,-8
8000780a:	8d 0c       	st.w	r6[0x0],r12
8000780c:	f4 e2 00 00 	ld.d	r2,r10[0]
80007810:	f0 e3 00 00 	st.d	r8[0],r2
80007814:	c1 08       	rjmp	80007834 <get_arg+0x2f4>
80007816:	6c 0a       	ld.w	r10,r6[0x0]
80007818:	f4 cc ff f8 	sub	r12,r10,-8
8000781c:	8d 0c       	st.w	r6[0x0],r12
8000781e:	f4 e2 00 00 	ld.d	r2,r10[0]
80007822:	f0 e3 00 00 	st.d	r8[0],r2
80007826:	c0 78       	rjmp	80007834 <get_arg+0x2f4>
80007828:	6c 0a       	ld.w	r10,r6[0x0]
8000782a:	f4 cc ff fc 	sub	r12,r10,-4
8000782e:	8d 0c       	st.w	r6[0x0],r12
80007830:	74 0a       	ld.w	r10,r10[0x0]
80007832:	91 0a       	st.w	r8[0x0],r10
80007834:	2f f5       	sub	r5,-1
80007836:	2f 88       	sub	r8,-8
80007838:	2f c1       	sub	r1,-4
8000783a:	12 35       	cp.w	r5,r9
8000783c:	fe 9a ff d6 	brle	800077e8 <get_arg+0x2a8>
80007840:	1c 93       	mov	r3,lr
80007842:	40 52       	lddsp	r2,sp[0x14]
80007844:	40 6e       	lddsp	lr,sp[0x18]
80007846:	85 05       	st.w	r2[0x0],r5
80007848:	9d 0b       	st.w	lr[0x0],r11
8000784a:	40 4b       	lddsp	r11,sp[0x10]
8000784c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80007850:	2f 8d       	sub	sp,-32
80007852:	d8 32       	popm	r0-r7,pc

80007854 <__sprint_r>:
80007854:	d4 21       	pushm	r4-r7,lr
80007856:	14 97       	mov	r7,r10
80007858:	74 28       	ld.w	r8,r10[0x8]
8000785a:	58 08       	cp.w	r8,0
8000785c:	c0 41       	brne	80007864 <__sprint_r+0x10>
8000785e:	95 18       	st.w	r10[0x4],r8
80007860:	10 9c       	mov	r12,r8
80007862:	d8 22       	popm	r4-r7,pc
80007864:	e0 a0 17 8a 	rcall	8000a778 <__sfvwrite_r>
80007868:	30 08       	mov	r8,0
8000786a:	8f 18       	st.w	r7[0x4],r8
8000786c:	8f 28       	st.w	r7[0x8],r8
8000786e:	d8 22       	popm	r4-r7,pc

80007870 <_vfprintf_r>:
80007870:	d4 31       	pushm	r0-r7,lr
80007872:	fa cd 06 bc 	sub	sp,sp,1724
80007876:	51 09       	stdsp	sp[0x40],r9
80007878:	16 91       	mov	r1,r11
8000787a:	14 97       	mov	r7,r10
8000787c:	18 95       	mov	r5,r12
8000787e:	e0 a0 18 cb 	rcall	8000aa14 <_localeconv_r>
80007882:	78 0c       	ld.w	r12,r12[0x0]
80007884:	50 cc       	stdsp	sp[0x30],r12
80007886:	58 05       	cp.w	r5,0
80007888:	c0 70       	breq	80007896 <_vfprintf_r+0x26>
8000788a:	6a 68       	ld.w	r8,r5[0x18]
8000788c:	58 08       	cp.w	r8,0
8000788e:	c0 41       	brne	80007896 <_vfprintf_r+0x26>
80007890:	0a 9c       	mov	r12,r5
80007892:	fe b0 fc 73 	rcall	80007178 <__sinit>
80007896:	fe c8 b7 5e 	sub	r8,pc,-18594
8000789a:	10 31       	cp.w	r1,r8
8000789c:	c0 31       	brne	800078a2 <_vfprintf_r+0x32>
8000789e:	6a 01       	ld.w	r1,r5[0x0]
800078a0:	c0 c8       	rjmp	800078b8 <_vfprintf_r+0x48>
800078a2:	fe c8 b7 4a 	sub	r8,pc,-18614
800078a6:	10 31       	cp.w	r1,r8
800078a8:	c0 31       	brne	800078ae <_vfprintf_r+0x3e>
800078aa:	6a 11       	ld.w	r1,r5[0x4]
800078ac:	c0 68       	rjmp	800078b8 <_vfprintf_r+0x48>
800078ae:	fe c8 b7 36 	sub	r8,pc,-18634
800078b2:	10 31       	cp.w	r1,r8
800078b4:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800078b8:	82 68       	ld.sh	r8,r1[0xc]
800078ba:	ed b8 00 03 	bld	r8,0x3
800078be:	c0 41       	brne	800078c6 <_vfprintf_r+0x56>
800078c0:	62 48       	ld.w	r8,r1[0x10]
800078c2:	58 08       	cp.w	r8,0
800078c4:	c0 71       	brne	800078d2 <_vfprintf_r+0x62>
800078c6:	02 9b       	mov	r11,r1
800078c8:	0a 9c       	mov	r12,r5
800078ca:	e0 a0 0f 71 	rcall	800097ac <__swsetup_r>
800078ce:	e0 81 0f 54 	brne	80009776 <_vfprintf_r+0x1f06>
800078d2:	82 68       	ld.sh	r8,r1[0xc]
800078d4:	10 99       	mov	r9,r8
800078d6:	e2 19 00 1a 	andl	r9,0x1a,COH
800078da:	58 a9       	cp.w	r9,10
800078dc:	c3 c1       	brne	80007954 <_vfprintf_r+0xe4>
800078de:	82 79       	ld.sh	r9,r1[0xe]
800078e0:	30 0a       	mov	r10,0
800078e2:	f4 09 19 00 	cp.h	r9,r10
800078e6:	c3 75       	brlt	80007954 <_vfprintf_r+0xe4>
800078e8:	a1 d8       	cbr	r8,0x1
800078ea:	fb 58 05 d0 	st.h	sp[1488],r8
800078ee:	62 88       	ld.w	r8,r1[0x20]
800078f0:	fb 48 05 e4 	st.w	sp[1508],r8
800078f4:	62 a8       	ld.w	r8,r1[0x28]
800078f6:	fb 48 05 ec 	st.w	sp[1516],r8
800078fa:	fa c8 ff bc 	sub	r8,sp,-68
800078fe:	fb 48 05 d4 	st.w	sp[1492],r8
80007902:	fb 48 05 c4 	st.w	sp[1476],r8
80007906:	e0 68 04 00 	mov	r8,1024
8000790a:	fb 48 05 d8 	st.w	sp[1496],r8
8000790e:	fb 48 05 cc 	st.w	sp[1484],r8
80007912:	30 08       	mov	r8,0
80007914:	fb 59 05 d2 	st.h	sp[1490],r9
80007918:	0e 9a       	mov	r10,r7
8000791a:	41 09       	lddsp	r9,sp[0x40]
8000791c:	fa c7 fa 3c 	sub	r7,sp,-1476
80007920:	fb 48 05 dc 	st.w	sp[1500],r8
80007924:	0a 9c       	mov	r12,r5
80007926:	0e 9b       	mov	r11,r7
80007928:	ca 4f       	rcall	80007870 <_vfprintf_r>
8000792a:	50 bc       	stdsp	sp[0x2c],r12
8000792c:	c0 95       	brlt	8000793e <_vfprintf_r+0xce>
8000792e:	0e 9b       	mov	r11,r7
80007930:	0a 9c       	mov	r12,r5
80007932:	e0 a0 16 9b 	rcall	8000a668 <_fflush_r>
80007936:	40 be       	lddsp	lr,sp[0x2c]
80007938:	f9 be 01 ff 	movne	lr,-1
8000793c:	50 be       	stdsp	sp[0x2c],lr
8000793e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80007942:	ed b8 00 06 	bld	r8,0x6
80007946:	e0 81 0f 1a 	brne	8000977a <_vfprintf_r+0x1f0a>
8000794a:	82 68       	ld.sh	r8,r1[0xc]
8000794c:	a7 a8       	sbr	r8,0x6
8000794e:	a2 68       	st.h	r1[0xc],r8
80007950:	e0 8f 0f 15 	bral	8000977a <_vfprintf_r+0x1f0a>
80007954:	30 08       	mov	r8,0
80007956:	fb 48 06 b4 	st.w	sp[1716],r8
8000795a:	fb 48 06 90 	st.w	sp[1680],r8
8000795e:	fb 48 06 8c 	st.w	sp[1676],r8
80007962:	fb 48 06 b0 	st.w	sp[1712],r8
80007966:	30 08       	mov	r8,0
80007968:	30 09       	mov	r9,0
8000796a:	50 a7       	stdsp	sp[0x28],r7
8000796c:	50 78       	stdsp	sp[0x1c],r8
8000796e:	fa c3 f9 e0 	sub	r3,sp,-1568
80007972:	3f f8       	mov	r8,-1
80007974:	50 59       	stdsp	sp[0x14],r9
80007976:	fb 43 06 88 	st.w	sp[1672],r3
8000797a:	fb 48 05 44 	st.w	sp[1348],r8
8000797e:	12 9c       	mov	r12,r9
80007980:	50 69       	stdsp	sp[0x18],r9
80007982:	50 d9       	stdsp	sp[0x34],r9
80007984:	50 e9       	stdsp	sp[0x38],r9
80007986:	50 b9       	stdsp	sp[0x2c],r9
80007988:	12 97       	mov	r7,r9
8000798a:	0a 94       	mov	r4,r5
8000798c:	40 a2       	lddsp	r2,sp[0x28]
8000798e:	32 5a       	mov	r10,37
80007990:	30 08       	mov	r8,0
80007992:	c0 28       	rjmp	80007996 <_vfprintf_r+0x126>
80007994:	2f f2       	sub	r2,-1
80007996:	05 89       	ld.ub	r9,r2[0x0]
80007998:	f0 09 18 00 	cp.b	r9,r8
8000799c:	5f 1b       	srne	r11
8000799e:	f4 09 18 00 	cp.b	r9,r10
800079a2:	5f 19       	srne	r9
800079a4:	f3 eb 00 0b 	and	r11,r9,r11
800079a8:	f0 0b 18 00 	cp.b	r11,r8
800079ac:	cf 41       	brne	80007994 <_vfprintf_r+0x124>
800079ae:	40 ab       	lddsp	r11,sp[0x28]
800079b0:	e4 0b 01 06 	sub	r6,r2,r11
800079b4:	c1 e0       	breq	800079f0 <_vfprintf_r+0x180>
800079b6:	fa f8 06 90 	ld.w	r8,sp[1680]
800079ba:	0c 08       	add	r8,r6
800079bc:	87 0b       	st.w	r3[0x0],r11
800079be:	fb 48 06 90 	st.w	sp[1680],r8
800079c2:	87 16       	st.w	r3[0x4],r6
800079c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800079c8:	2f f8       	sub	r8,-1
800079ca:	fb 48 06 8c 	st.w	sp[1676],r8
800079ce:	58 78       	cp.w	r8,7
800079d0:	e0 89 00 04 	brgt	800079d8 <_vfprintf_r+0x168>
800079d4:	2f 83       	sub	r3,-8
800079d6:	c0 a8       	rjmp	800079ea <_vfprintf_r+0x17a>
800079d8:	fa ca f9 78 	sub	r10,sp,-1672
800079dc:	02 9b       	mov	r11,r1
800079de:	08 9c       	mov	r12,r4
800079e0:	c3 af       	rcall	80007854 <__sprint_r>
800079e2:	e0 81 0e c6 	brne	8000976e <_vfprintf_r+0x1efe>
800079e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800079ea:	40 ba       	lddsp	r10,sp[0x2c]
800079ec:	0c 0a       	add	r10,r6
800079ee:	50 ba       	stdsp	sp[0x2c],r10
800079f0:	05 89       	ld.ub	r9,r2[0x0]
800079f2:	30 08       	mov	r8,0
800079f4:	f0 09 18 00 	cp.b	r9,r8
800079f8:	e0 80 0e aa 	breq	8000974c <_vfprintf_r+0x1edc>
800079fc:	30 09       	mov	r9,0
800079fe:	fb 68 06 bb 	st.b	sp[1723],r8
80007a02:	0e 96       	mov	r6,r7
80007a04:	e4 c8 ff ff 	sub	r8,r2,-1
80007a08:	3f fe       	mov	lr,-1
80007a0a:	50 93       	stdsp	sp[0x24],r3
80007a0c:	50 41       	stdsp	sp[0x10],r1
80007a0e:	0e 93       	mov	r3,r7
80007a10:	04 91       	mov	r1,r2
80007a12:	50 89       	stdsp	sp[0x20],r9
80007a14:	50 a8       	stdsp	sp[0x28],r8
80007a16:	50 2e       	stdsp	sp[0x8],lr
80007a18:	50 39       	stdsp	sp[0xc],r9
80007a1a:	12 95       	mov	r5,r9
80007a1c:	12 90       	mov	r0,r9
80007a1e:	10 97       	mov	r7,r8
80007a20:	08 92       	mov	r2,r4
80007a22:	c0 78       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007a24:	3f fc       	mov	r12,-1
80007a26:	08 97       	mov	r7,r4
80007a28:	50 2c       	stdsp	sp[0x8],r12
80007a2a:	c0 38       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007a2c:	30 0b       	mov	r11,0
80007a2e:	50 3b       	stdsp	sp[0xc],r11
80007a30:	0f 38       	ld.ub	r8,r7++
80007a32:	c0 28       	rjmp	80007a36 <_vfprintf_r+0x1c6>
80007a34:	12 90       	mov	r0,r9
80007a36:	f0 c9 00 20 	sub	r9,r8,32
80007a3a:	e0 49 00 58 	cp.w	r9,88
80007a3e:	e0 8b 0a 30 	brhi	80008e9e <_vfprintf_r+0x162e>
80007a42:	fe ca b8 6e 	sub	r10,pc,-18322
80007a46:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80007a4a:	50 a7       	stdsp	sp[0x28],r7
80007a4c:	50 80       	stdsp	sp[0x20],r0
80007a4e:	0c 97       	mov	r7,r6
80007a50:	04 94       	mov	r4,r2
80007a52:	06 96       	mov	r6,r3
80007a54:	02 92       	mov	r2,r1
80007a56:	fe c9 b6 46 	sub	r9,pc,-18874
80007a5a:	40 93       	lddsp	r3,sp[0x24]
80007a5c:	10 90       	mov	r0,r8
80007a5e:	40 41       	lddsp	r1,sp[0x10]
80007a60:	50 d9       	stdsp	sp[0x34],r9
80007a62:	e0 8f 08 8e 	bral	80008b7e <_vfprintf_r+0x130e>
80007a66:	30 08       	mov	r8,0
80007a68:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80007a6c:	f0 09 18 00 	cp.b	r9,r8
80007a70:	ce 01       	brne	80007a30 <_vfprintf_r+0x1c0>
80007a72:	32 08       	mov	r8,32
80007a74:	c6 e8       	rjmp	80007b50 <_vfprintf_r+0x2e0>
80007a76:	a1 a5       	sbr	r5,0x0
80007a78:	cd cb       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007a7a:	0f 89       	ld.ub	r9,r7[0x0]
80007a7c:	f2 c8 00 30 	sub	r8,r9,48
80007a80:	58 98       	cp.w	r8,9
80007a82:	e0 8b 00 1d 	brhi	80007abc <_vfprintf_r+0x24c>
80007a86:	ee c8 ff ff 	sub	r8,r7,-1
80007a8a:	30 0b       	mov	r11,0
80007a8c:	23 09       	sub	r9,48
80007a8e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80007a92:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80007a96:	11 39       	ld.ub	r9,r8++
80007a98:	f2 ca 00 30 	sub	r10,r9,48
80007a9c:	58 9a       	cp.w	r10,9
80007a9e:	fe 98 ff f7 	brls	80007a8c <_vfprintf_r+0x21c>
80007aa2:	e0 49 00 24 	cp.w	r9,36
80007aa6:	cc 31       	brne	80007a2c <_vfprintf_r+0x1bc>
80007aa8:	e0 4b 00 20 	cp.w	r11,32
80007aac:	e0 89 0e 60 	brgt	8000976c <_vfprintf_r+0x1efc>
80007ab0:	20 1b       	sub	r11,1
80007ab2:	fa f9 06 b4 	ld.w	r9,sp[1716]
80007ab6:	12 3b       	cp.w	r11,r9
80007ab8:	c0 95       	brlt	80007aca <_vfprintf_r+0x25a>
80007aba:	c1 08       	rjmp	80007ada <_vfprintf_r+0x26a>
80007abc:	fa f9 06 b4 	ld.w	r9,sp[1716]
80007ac0:	ec ca ff ff 	sub	r10,r6,-1
80007ac4:	12 36       	cp.w	r6,r9
80007ac6:	c1 f5       	brlt	80007b04 <_vfprintf_r+0x294>
80007ac8:	c2 68       	rjmp	80007b14 <_vfprintf_r+0x2a4>
80007aca:	fa ce f9 44 	sub	lr,sp,-1724
80007ace:	10 97       	mov	r7,r8
80007ad0:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80007ad4:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80007ad8:	c3 58       	rjmp	80007b42 <_vfprintf_r+0x2d2>
80007ada:	10 97       	mov	r7,r8
80007adc:	fa c8 f9 50 	sub	r8,sp,-1712
80007ae0:	1a d8       	st.w	--sp,r8
80007ae2:	fa c8 fa b8 	sub	r8,sp,-1352
80007ae6:	1a d8       	st.w	--sp,r8
80007ae8:	fa c8 fb b4 	sub	r8,sp,-1100
80007aec:	02 9a       	mov	r10,r1
80007aee:	1a d8       	st.w	--sp,r8
80007af0:	04 9c       	mov	r12,r2
80007af2:	fa c8 f9 40 	sub	r8,sp,-1728
80007af6:	fa c9 ff b4 	sub	r9,sp,-76
80007afa:	fe b0 fd 23 	rcall	80007540 <get_arg>
80007afe:	2f dd       	sub	sp,-12
80007b00:	78 00       	ld.w	r0,r12[0x0]
80007b02:	c2 08       	rjmp	80007b42 <_vfprintf_r+0x2d2>
80007b04:	fa cc f9 44 	sub	r12,sp,-1724
80007b08:	14 96       	mov	r6,r10
80007b0a:	f8 03 00 38 	add	r8,r12,r3<<0x3
80007b0e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80007b12:	c1 88       	rjmp	80007b42 <_vfprintf_r+0x2d2>
80007b14:	41 08       	lddsp	r8,sp[0x40]
80007b16:	59 f9       	cp.w	r9,31
80007b18:	e0 89 00 11 	brgt	80007b3a <_vfprintf_r+0x2ca>
80007b1c:	f0 cb ff fc 	sub	r11,r8,-4
80007b20:	51 0b       	stdsp	sp[0x40],r11
80007b22:	70 00       	ld.w	r0,r8[0x0]
80007b24:	fa cb f9 44 	sub	r11,sp,-1724
80007b28:	f6 09 00 38 	add	r8,r11,r9<<0x3
80007b2c:	f1 40 fd 88 	st.w	r8[-632],r0
80007b30:	2f f9       	sub	r9,-1
80007b32:	14 96       	mov	r6,r10
80007b34:	fb 49 06 b4 	st.w	sp[1716],r9
80007b38:	c0 58       	rjmp	80007b42 <_vfprintf_r+0x2d2>
80007b3a:	70 00       	ld.w	r0,r8[0x0]
80007b3c:	14 96       	mov	r6,r10
80007b3e:	2f c8       	sub	r8,-4
80007b40:	51 08       	stdsp	sp[0x40],r8
80007b42:	58 00       	cp.w	r0,0
80007b44:	fe 94 ff 76 	brge	80007a30 <_vfprintf_r+0x1c0>
80007b48:	5c 30       	neg	r0
80007b4a:	a3 a5       	sbr	r5,0x2
80007b4c:	c7 2b       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007b4e:	32 b8       	mov	r8,43
80007b50:	fb 68 06 bb 	st.b	sp[1723],r8
80007b54:	c6 eb       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007b56:	0f 38       	ld.ub	r8,r7++
80007b58:	e0 48 00 2a 	cp.w	r8,42
80007b5c:	c0 30       	breq	80007b62 <_vfprintf_r+0x2f2>
80007b5e:	30 09       	mov	r9,0
80007b60:	c7 98       	rjmp	80007c52 <_vfprintf_r+0x3e2>
80007b62:	0f 88       	ld.ub	r8,r7[0x0]
80007b64:	f0 c9 00 30 	sub	r9,r8,48
80007b68:	58 99       	cp.w	r9,9
80007b6a:	e0 8b 00 1f 	brhi	80007ba8 <_vfprintf_r+0x338>
80007b6e:	ee c4 ff ff 	sub	r4,r7,-1
80007b72:	30 0b       	mov	r11,0
80007b74:	23 08       	sub	r8,48
80007b76:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80007b7a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80007b7e:	09 38       	ld.ub	r8,r4++
80007b80:	f0 c9 00 30 	sub	r9,r8,48
80007b84:	58 99       	cp.w	r9,9
80007b86:	fe 98 ff f7 	brls	80007b74 <_vfprintf_r+0x304>
80007b8a:	e0 48 00 24 	cp.w	r8,36
80007b8e:	fe 91 ff 4f 	brne	80007a2c <_vfprintf_r+0x1bc>
80007b92:	e0 4b 00 20 	cp.w	r11,32
80007b96:	e0 89 0d eb 	brgt	8000976c <_vfprintf_r+0x1efc>
80007b9a:	20 1b       	sub	r11,1
80007b9c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007ba0:	10 3b       	cp.w	r11,r8
80007ba2:	c0 a5       	brlt	80007bb6 <_vfprintf_r+0x346>
80007ba4:	c1 18       	rjmp	80007bc6 <_vfprintf_r+0x356>
80007ba6:	d7 03       	nop
80007ba8:	fa fa 06 b4 	ld.w	r10,sp[1716]
80007bac:	ec c9 ff ff 	sub	r9,r6,-1
80007bb0:	14 36       	cp.w	r6,r10
80007bb2:	c1 f5       	brlt	80007bf0 <_vfprintf_r+0x380>
80007bb4:	c2 88       	rjmp	80007c04 <_vfprintf_r+0x394>
80007bb6:	fa ca f9 44 	sub	r10,sp,-1724
80007bba:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80007bbe:	f6 fb fd 88 	ld.w	r11,r11[-632]
80007bc2:	50 2b       	stdsp	sp[0x8],r11
80007bc4:	c3 c8       	rjmp	80007c3c <_vfprintf_r+0x3cc>
80007bc6:	fa c8 f9 50 	sub	r8,sp,-1712
80007bca:	1a d8       	st.w	--sp,r8
80007bcc:	fa c8 fa b8 	sub	r8,sp,-1352
80007bd0:	1a d8       	st.w	--sp,r8
80007bd2:	fa c8 fb b4 	sub	r8,sp,-1100
80007bd6:	02 9a       	mov	r10,r1
80007bd8:	1a d8       	st.w	--sp,r8
80007bda:	04 9c       	mov	r12,r2
80007bdc:	fa c8 f9 40 	sub	r8,sp,-1728
80007be0:	fa c9 ff b4 	sub	r9,sp,-76
80007be4:	fe b0 fc ae 	rcall	80007540 <get_arg>
80007be8:	2f dd       	sub	sp,-12
80007bea:	78 0c       	ld.w	r12,r12[0x0]
80007bec:	50 2c       	stdsp	sp[0x8],r12
80007bee:	c2 78       	rjmp	80007c3c <_vfprintf_r+0x3cc>
80007bf0:	12 96       	mov	r6,r9
80007bf2:	0e 94       	mov	r4,r7
80007bf4:	fa c9 f9 44 	sub	r9,sp,-1724
80007bf8:	f2 03 00 38 	add	r8,r9,r3<<0x3
80007bfc:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80007c00:	50 28       	stdsp	sp[0x8],r8
80007c02:	c1 d8       	rjmp	80007c3c <_vfprintf_r+0x3cc>
80007c04:	41 08       	lddsp	r8,sp[0x40]
80007c06:	59 fa       	cp.w	r10,31
80007c08:	e0 89 00 14 	brgt	80007c30 <_vfprintf_r+0x3c0>
80007c0c:	f0 cb ff fc 	sub	r11,r8,-4
80007c10:	70 08       	ld.w	r8,r8[0x0]
80007c12:	51 0b       	stdsp	sp[0x40],r11
80007c14:	50 28       	stdsp	sp[0x8],r8
80007c16:	fa c6 f9 44 	sub	r6,sp,-1724
80007c1a:	40 2e       	lddsp	lr,sp[0x8]
80007c1c:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80007c20:	f1 4e fd 88 	st.w	r8[-632],lr
80007c24:	2f fa       	sub	r10,-1
80007c26:	0e 94       	mov	r4,r7
80007c28:	fb 4a 06 b4 	st.w	sp[1716],r10
80007c2c:	12 96       	mov	r6,r9
80007c2e:	c0 78       	rjmp	80007c3c <_vfprintf_r+0x3cc>
80007c30:	70 0c       	ld.w	r12,r8[0x0]
80007c32:	0e 94       	mov	r4,r7
80007c34:	2f c8       	sub	r8,-4
80007c36:	50 2c       	stdsp	sp[0x8],r12
80007c38:	12 96       	mov	r6,r9
80007c3a:	51 08       	stdsp	sp[0x40],r8
80007c3c:	40 2b       	lddsp	r11,sp[0x8]
80007c3e:	58 0b       	cp.w	r11,0
80007c40:	fe 95 fe f2 	brlt	80007a24 <_vfprintf_r+0x1b4>
80007c44:	08 97       	mov	r7,r4
80007c46:	cf 5a       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007c48:	f2 09 00 29 	add	r9,r9,r9<<0x2
80007c4c:	0f 38       	ld.ub	r8,r7++
80007c4e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80007c52:	f0 ca 00 30 	sub	r10,r8,48
80007c56:	58 9a       	cp.w	r10,9
80007c58:	fe 98 ff f8 	brls	80007c48 <_vfprintf_r+0x3d8>
80007c5c:	3f fa       	mov	r10,-1
80007c5e:	f2 0a 0c 49 	max	r9,r9,r10
80007c62:	50 29       	stdsp	sp[0x8],r9
80007c64:	ce 9a       	rjmp	80007a36 <_vfprintf_r+0x1c6>
80007c66:	a7 b5       	sbr	r5,0x7
80007c68:	ce 4a       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007c6a:	30 09       	mov	r9,0
80007c6c:	23 08       	sub	r8,48
80007c6e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80007c72:	f0 09 00 19 	add	r9,r8,r9<<0x1
80007c76:	0f 38       	ld.ub	r8,r7++
80007c78:	f0 ca 00 30 	sub	r10,r8,48
80007c7c:	58 9a       	cp.w	r10,9
80007c7e:	fe 98 ff f7 	brls	80007c6c <_vfprintf_r+0x3fc>
80007c82:	e0 48 00 24 	cp.w	r8,36
80007c86:	fe 91 fe d7 	brne	80007a34 <_vfprintf_r+0x1c4>
80007c8a:	e0 49 00 20 	cp.w	r9,32
80007c8e:	e0 89 0d 6f 	brgt	8000976c <_vfprintf_r+0x1efc>
80007c92:	f2 c3 00 01 	sub	r3,r9,1
80007c96:	30 19       	mov	r9,1
80007c98:	50 39       	stdsp	sp[0xc],r9
80007c9a:	cc ba       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007c9c:	a3 b5       	sbr	r5,0x3
80007c9e:	cc 9a       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007ca0:	a7 a5       	sbr	r5,0x6
80007ca2:	cc 7a       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007ca4:	0a 98       	mov	r8,r5
80007ca6:	a5 b5       	sbr	r5,0x5
80007ca8:	a5 a8       	sbr	r8,0x4
80007caa:	0f 89       	ld.ub	r9,r7[0x0]
80007cac:	36 ce       	mov	lr,108
80007cae:	fc 09 18 00 	cp.b	r9,lr
80007cb2:	f7 b7 00 ff 	subeq	r7,-1
80007cb6:	f0 05 17 10 	movne	r5,r8
80007cba:	cb ba       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007cbc:	a5 b5       	sbr	r5,0x5
80007cbe:	cb 9a       	rjmp	80007a30 <_vfprintf_r+0x1c0>
80007cc0:	50 a7       	stdsp	sp[0x28],r7
80007cc2:	50 80       	stdsp	sp[0x20],r0
80007cc4:	0c 97       	mov	r7,r6
80007cc6:	10 90       	mov	r0,r8
80007cc8:	06 96       	mov	r6,r3
80007cca:	04 94       	mov	r4,r2
80007ccc:	40 93       	lddsp	r3,sp[0x24]
80007cce:	02 92       	mov	r2,r1
80007cd0:	0e 99       	mov	r9,r7
80007cd2:	40 41       	lddsp	r1,sp[0x10]
80007cd4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007cd8:	40 3c       	lddsp	r12,sp[0xc]
80007cda:	58 0c       	cp.w	r12,0
80007cdc:	c1 d0       	breq	80007d16 <_vfprintf_r+0x4a6>
80007cde:	10 36       	cp.w	r6,r8
80007ce0:	c0 64       	brge	80007cec <_vfprintf_r+0x47c>
80007ce2:	fa cb f9 44 	sub	r11,sp,-1724
80007ce6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007cea:	c1 d8       	rjmp	80007d24 <_vfprintf_r+0x4b4>
80007cec:	fa c8 f9 50 	sub	r8,sp,-1712
80007cf0:	1a d8       	st.w	--sp,r8
80007cf2:	fa c8 fa b8 	sub	r8,sp,-1352
80007cf6:	1a d8       	st.w	--sp,r8
80007cf8:	fa c8 fb b4 	sub	r8,sp,-1100
80007cfc:	1a d8       	st.w	--sp,r8
80007cfe:	fa c8 f9 40 	sub	r8,sp,-1728
80007d02:	fa c9 ff b4 	sub	r9,sp,-76
80007d06:	04 9a       	mov	r10,r2
80007d08:	0c 9b       	mov	r11,r6
80007d0a:	08 9c       	mov	r12,r4
80007d0c:	fe b0 fc 1a 	rcall	80007540 <get_arg>
80007d10:	2f dd       	sub	sp,-12
80007d12:	19 b8       	ld.ub	r8,r12[0x3]
80007d14:	c2 28       	rjmp	80007d58 <_vfprintf_r+0x4e8>
80007d16:	2f f7       	sub	r7,-1
80007d18:	10 39       	cp.w	r9,r8
80007d1a:	c0 84       	brge	80007d2a <_vfprintf_r+0x4ba>
80007d1c:	fa ca f9 44 	sub	r10,sp,-1724
80007d20:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007d24:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80007d28:	c1 88       	rjmp	80007d58 <_vfprintf_r+0x4e8>
80007d2a:	41 09       	lddsp	r9,sp[0x40]
80007d2c:	59 f8       	cp.w	r8,31
80007d2e:	e0 89 00 12 	brgt	80007d52 <_vfprintf_r+0x4e2>
80007d32:	f2 ca ff fc 	sub	r10,r9,-4
80007d36:	51 0a       	stdsp	sp[0x40],r10
80007d38:	72 09       	ld.w	r9,r9[0x0]
80007d3a:	fa c6 f9 44 	sub	r6,sp,-1724
80007d3e:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80007d42:	2f f8       	sub	r8,-1
80007d44:	f5 49 fd 88 	st.w	r10[-632],r9
80007d48:	fb 48 06 b4 	st.w	sp[1716],r8
80007d4c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80007d50:	c0 48       	rjmp	80007d58 <_vfprintf_r+0x4e8>
80007d52:	13 b8       	ld.ub	r8,r9[0x3]
80007d54:	2f c9       	sub	r9,-4
80007d56:	51 09       	stdsp	sp[0x40],r9
80007d58:	fb 68 06 60 	st.b	sp[1632],r8
80007d5c:	30 0e       	mov	lr,0
80007d5e:	30 08       	mov	r8,0
80007d60:	30 12       	mov	r2,1
80007d62:	fb 68 06 bb 	st.b	sp[1723],r8
80007d66:	50 2e       	stdsp	sp[0x8],lr
80007d68:	e0 8f 08 ad 	bral	80008ec2 <_vfprintf_r+0x1652>
80007d6c:	50 a7       	stdsp	sp[0x28],r7
80007d6e:	50 80       	stdsp	sp[0x20],r0
80007d70:	0c 97       	mov	r7,r6
80007d72:	04 94       	mov	r4,r2
80007d74:	06 96       	mov	r6,r3
80007d76:	02 92       	mov	r2,r1
80007d78:	40 93       	lddsp	r3,sp[0x24]
80007d7a:	10 90       	mov	r0,r8
80007d7c:	40 41       	lddsp	r1,sp[0x10]
80007d7e:	a5 a5       	sbr	r5,0x4
80007d80:	c0 a8       	rjmp	80007d94 <_vfprintf_r+0x524>
80007d82:	50 a7       	stdsp	sp[0x28],r7
80007d84:	50 80       	stdsp	sp[0x20],r0
80007d86:	0c 97       	mov	r7,r6
80007d88:	04 94       	mov	r4,r2
80007d8a:	06 96       	mov	r6,r3
80007d8c:	02 92       	mov	r2,r1
80007d8e:	40 93       	lddsp	r3,sp[0x24]
80007d90:	10 90       	mov	r0,r8
80007d92:	40 41       	lddsp	r1,sp[0x10]
80007d94:	ed b5 00 05 	bld	r5,0x5
80007d98:	c5 11       	brne	80007e3a <_vfprintf_r+0x5ca>
80007d9a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007d9e:	40 3c       	lddsp	r12,sp[0xc]
80007da0:	58 0c       	cp.w	r12,0
80007da2:	c1 e0       	breq	80007dde <_vfprintf_r+0x56e>
80007da4:	10 36       	cp.w	r6,r8
80007da6:	c0 64       	brge	80007db2 <_vfprintf_r+0x542>
80007da8:	fa cb f9 44 	sub	r11,sp,-1724
80007dac:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007db0:	c2 08       	rjmp	80007df0 <_vfprintf_r+0x580>
80007db2:	fa c8 f9 50 	sub	r8,sp,-1712
80007db6:	1a d8       	st.w	--sp,r8
80007db8:	fa c8 fa b8 	sub	r8,sp,-1352
80007dbc:	0c 9b       	mov	r11,r6
80007dbe:	1a d8       	st.w	--sp,r8
80007dc0:	fa c8 fb b4 	sub	r8,sp,-1100
80007dc4:	1a d8       	st.w	--sp,r8
80007dc6:	fa c9 ff b4 	sub	r9,sp,-76
80007dca:	fa c8 f9 40 	sub	r8,sp,-1728
80007dce:	04 9a       	mov	r10,r2
80007dd0:	08 9c       	mov	r12,r4
80007dd2:	fe b0 fb b7 	rcall	80007540 <get_arg>
80007dd6:	2f dd       	sub	sp,-12
80007dd8:	78 1b       	ld.w	r11,r12[0x4]
80007dda:	78 09       	ld.w	r9,r12[0x0]
80007ddc:	c2 b8       	rjmp	80007e32 <_vfprintf_r+0x5c2>
80007dde:	ee ca ff ff 	sub	r10,r7,-1
80007de2:	10 37       	cp.w	r7,r8
80007de4:	c0 b4       	brge	80007dfa <_vfprintf_r+0x58a>
80007de6:	fa c9 f9 44 	sub	r9,sp,-1724
80007dea:	14 97       	mov	r7,r10
80007dec:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007df0:	ec fb fd 8c 	ld.w	r11,r6[-628]
80007df4:	ec f9 fd 88 	ld.w	r9,r6[-632]
80007df8:	c1 d8       	rjmp	80007e32 <_vfprintf_r+0x5c2>
80007dfa:	41 09       	lddsp	r9,sp[0x40]
80007dfc:	59 f8       	cp.w	r8,31
80007dfe:	e0 89 00 14 	brgt	80007e26 <_vfprintf_r+0x5b6>
80007e02:	f2 cb ff f8 	sub	r11,r9,-8
80007e06:	51 0b       	stdsp	sp[0x40],r11
80007e08:	fa c6 f9 44 	sub	r6,sp,-1724
80007e0c:	72 1b       	ld.w	r11,r9[0x4]
80007e0e:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80007e12:	72 09       	ld.w	r9,r9[0x0]
80007e14:	f9 4b fd 8c 	st.w	r12[-628],r11
80007e18:	f9 49 fd 88 	st.w	r12[-632],r9
80007e1c:	2f f8       	sub	r8,-1
80007e1e:	14 97       	mov	r7,r10
80007e20:	fb 48 06 b4 	st.w	sp[1716],r8
80007e24:	c0 78       	rjmp	80007e32 <_vfprintf_r+0x5c2>
80007e26:	f2 c8 ff f8 	sub	r8,r9,-8
80007e2a:	72 1b       	ld.w	r11,r9[0x4]
80007e2c:	14 97       	mov	r7,r10
80007e2e:	51 08       	stdsp	sp[0x40],r8
80007e30:	72 09       	ld.w	r9,r9[0x0]
80007e32:	16 98       	mov	r8,r11
80007e34:	fa e9 00 00 	st.d	sp[0],r8
80007e38:	ca e8       	rjmp	80007f94 <_vfprintf_r+0x724>
80007e3a:	ed b5 00 04 	bld	r5,0x4
80007e3e:	c1 71       	brne	80007e6c <_vfprintf_r+0x5fc>
80007e40:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007e44:	40 3e       	lddsp	lr,sp[0xc]
80007e46:	58 0e       	cp.w	lr,0
80007e48:	c0 80       	breq	80007e58 <_vfprintf_r+0x5e8>
80007e4a:	10 36       	cp.w	r6,r8
80007e4c:	c6 94       	brge	80007f1e <_vfprintf_r+0x6ae>
80007e4e:	fa cc f9 44 	sub	r12,sp,-1724
80007e52:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007e56:	c8 28       	rjmp	80007f5a <_vfprintf_r+0x6ea>
80007e58:	ee ca ff ff 	sub	r10,r7,-1
80007e5c:	10 37       	cp.w	r7,r8
80007e5e:	e0 84 00 81 	brge	80007f60 <_vfprintf_r+0x6f0>
80007e62:	fa cb f9 44 	sub	r11,sp,-1724
80007e66:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007e6a:	c7 78       	rjmp	80007f58 <_vfprintf_r+0x6e8>
80007e6c:	ed b5 00 06 	bld	r5,0x6
80007e70:	c4 b1       	brne	80007f06 <_vfprintf_r+0x696>
80007e72:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007e76:	40 3c       	lddsp	r12,sp[0xc]
80007e78:	58 0c       	cp.w	r12,0
80007e7a:	c1 d0       	breq	80007eb4 <_vfprintf_r+0x644>
80007e7c:	10 36       	cp.w	r6,r8
80007e7e:	c0 64       	brge	80007e8a <_vfprintf_r+0x61a>
80007e80:	fa cb f9 44 	sub	r11,sp,-1724
80007e84:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007e88:	c1 f8       	rjmp	80007ec6 <_vfprintf_r+0x656>
80007e8a:	fa c8 f9 50 	sub	r8,sp,-1712
80007e8e:	1a d8       	st.w	--sp,r8
80007e90:	fa c8 fa b8 	sub	r8,sp,-1352
80007e94:	1a d8       	st.w	--sp,r8
80007e96:	fa c8 fb b4 	sub	r8,sp,-1100
80007e9a:	1a d8       	st.w	--sp,r8
80007e9c:	fa c8 f9 40 	sub	r8,sp,-1728
80007ea0:	fa c9 ff b4 	sub	r9,sp,-76
80007ea4:	04 9a       	mov	r10,r2
80007ea6:	0c 9b       	mov	r11,r6
80007ea8:	08 9c       	mov	r12,r4
80007eaa:	fe b0 fb 4b 	rcall	80007540 <get_arg>
80007eae:	2f dd       	sub	sp,-12
80007eb0:	98 18       	ld.sh	r8,r12[0x2]
80007eb2:	c2 68       	rjmp	80007efe <_vfprintf_r+0x68e>
80007eb4:	ee ca ff ff 	sub	r10,r7,-1
80007eb8:	10 37       	cp.w	r7,r8
80007eba:	c0 94       	brge	80007ecc <_vfprintf_r+0x65c>
80007ebc:	fa c9 f9 44 	sub	r9,sp,-1724
80007ec0:	14 97       	mov	r7,r10
80007ec2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007ec6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007eca:	c1 a8       	rjmp	80007efe <_vfprintf_r+0x68e>
80007ecc:	41 09       	lddsp	r9,sp[0x40]
80007ece:	59 f8       	cp.w	r8,31
80007ed0:	e0 89 00 13 	brgt	80007ef6 <_vfprintf_r+0x686>
80007ed4:	f2 cb ff fc 	sub	r11,r9,-4
80007ed8:	51 0b       	stdsp	sp[0x40],r11
80007eda:	72 09       	ld.w	r9,r9[0x0]
80007edc:	fa c6 f9 44 	sub	r6,sp,-1724
80007ee0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007ee4:	2f f8       	sub	r8,-1
80007ee6:	f7 49 fd 88 	st.w	r11[-632],r9
80007eea:	fb 48 06 b4 	st.w	sp[1716],r8
80007eee:	14 97       	mov	r7,r10
80007ef0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007ef4:	c0 58       	rjmp	80007efe <_vfprintf_r+0x68e>
80007ef6:	92 18       	ld.sh	r8,r9[0x2]
80007ef8:	14 97       	mov	r7,r10
80007efa:	2f c9       	sub	r9,-4
80007efc:	51 09       	stdsp	sp[0x40],r9
80007efe:	50 18       	stdsp	sp[0x4],r8
80007f00:	bf 58       	asr	r8,0x1f
80007f02:	50 08       	stdsp	sp[0x0],r8
80007f04:	c4 88       	rjmp	80007f94 <_vfprintf_r+0x724>
80007f06:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007f0a:	40 3c       	lddsp	r12,sp[0xc]
80007f0c:	58 0c       	cp.w	r12,0
80007f0e:	c1 d0       	breq	80007f48 <_vfprintf_r+0x6d8>
80007f10:	10 36       	cp.w	r6,r8
80007f12:	c0 64       	brge	80007f1e <_vfprintf_r+0x6ae>
80007f14:	fa cb f9 44 	sub	r11,sp,-1724
80007f18:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007f1c:	c1 f8       	rjmp	80007f5a <_vfprintf_r+0x6ea>
80007f1e:	fa c8 f9 50 	sub	r8,sp,-1712
80007f22:	1a d8       	st.w	--sp,r8
80007f24:	fa c8 fa b8 	sub	r8,sp,-1352
80007f28:	0c 9b       	mov	r11,r6
80007f2a:	1a d8       	st.w	--sp,r8
80007f2c:	fa c8 fb b4 	sub	r8,sp,-1100
80007f30:	04 9a       	mov	r10,r2
80007f32:	1a d8       	st.w	--sp,r8
80007f34:	08 9c       	mov	r12,r4
80007f36:	fa c8 f9 40 	sub	r8,sp,-1728
80007f3a:	fa c9 ff b4 	sub	r9,sp,-76
80007f3e:	fe b0 fb 01 	rcall	80007540 <get_arg>
80007f42:	2f dd       	sub	sp,-12
80007f44:	78 0b       	ld.w	r11,r12[0x0]
80007f46:	c2 48       	rjmp	80007f8e <_vfprintf_r+0x71e>
80007f48:	ee ca ff ff 	sub	r10,r7,-1
80007f4c:	10 37       	cp.w	r7,r8
80007f4e:	c0 94       	brge	80007f60 <_vfprintf_r+0x6f0>
80007f50:	fa c9 f9 44 	sub	r9,sp,-1724
80007f54:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007f58:	14 97       	mov	r7,r10
80007f5a:	ec fb fd 88 	ld.w	r11,r6[-632]
80007f5e:	c1 88       	rjmp	80007f8e <_vfprintf_r+0x71e>
80007f60:	41 09       	lddsp	r9,sp[0x40]
80007f62:	59 f8       	cp.w	r8,31
80007f64:	e0 89 00 11 	brgt	80007f86 <_vfprintf_r+0x716>
80007f68:	f2 cb ff fc 	sub	r11,r9,-4
80007f6c:	51 0b       	stdsp	sp[0x40],r11
80007f6e:	fa c6 f9 44 	sub	r6,sp,-1724
80007f72:	72 0b       	ld.w	r11,r9[0x0]
80007f74:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007f78:	f3 4b fd 88 	st.w	r9[-632],r11
80007f7c:	2f f8       	sub	r8,-1
80007f7e:	14 97       	mov	r7,r10
80007f80:	fb 48 06 b4 	st.w	sp[1716],r8
80007f84:	c0 58       	rjmp	80007f8e <_vfprintf_r+0x71e>
80007f86:	72 0b       	ld.w	r11,r9[0x0]
80007f88:	14 97       	mov	r7,r10
80007f8a:	2f c9       	sub	r9,-4
80007f8c:	51 09       	stdsp	sp[0x40],r9
80007f8e:	50 1b       	stdsp	sp[0x4],r11
80007f90:	bf 5b       	asr	r11,0x1f
80007f92:	50 0b       	stdsp	sp[0x0],r11
80007f94:	fa ea 00 00 	ld.d	r10,sp[0]
80007f98:	58 0a       	cp.w	r10,0
80007f9a:	5c 2b       	cpc	r11
80007f9c:	c0 e4       	brge	80007fb8 <_vfprintf_r+0x748>
80007f9e:	30 08       	mov	r8,0
80007fa0:	fa ea 00 00 	ld.d	r10,sp[0]
80007fa4:	30 09       	mov	r9,0
80007fa6:	f0 0a 01 0a 	sub	r10,r8,r10
80007faa:	f2 0b 01 4b 	sbc	r11,r9,r11
80007fae:	32 d8       	mov	r8,45
80007fb0:	fa eb 00 00 	st.d	sp[0],r10
80007fb4:	fb 68 06 bb 	st.b	sp[1723],r8
80007fb8:	30 18       	mov	r8,1
80007fba:	e0 8f 06 fa 	bral	80008dae <_vfprintf_r+0x153e>
80007fbe:	50 a7       	stdsp	sp[0x28],r7
80007fc0:	50 80       	stdsp	sp[0x20],r0
80007fc2:	0c 97       	mov	r7,r6
80007fc4:	04 94       	mov	r4,r2
80007fc6:	06 96       	mov	r6,r3
80007fc8:	02 92       	mov	r2,r1
80007fca:	40 93       	lddsp	r3,sp[0x24]
80007fcc:	10 90       	mov	r0,r8
80007fce:	40 41       	lddsp	r1,sp[0x10]
80007fd0:	0e 99       	mov	r9,r7
80007fd2:	ed b5 00 03 	bld	r5,0x3
80007fd6:	c4 11       	brne	80008058 <_vfprintf_r+0x7e8>
80007fd8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007fdc:	40 3a       	lddsp	r10,sp[0xc]
80007fde:	58 0a       	cp.w	r10,0
80007fe0:	c1 90       	breq	80008012 <_vfprintf_r+0x7a2>
80007fe2:	10 36       	cp.w	r6,r8
80007fe4:	c6 45       	brlt	800080ac <_vfprintf_r+0x83c>
80007fe6:	fa c8 f9 50 	sub	r8,sp,-1712
80007fea:	1a d8       	st.w	--sp,r8
80007fec:	fa c8 fa b8 	sub	r8,sp,-1352
80007ff0:	1a d8       	st.w	--sp,r8
80007ff2:	fa c8 fb b4 	sub	r8,sp,-1100
80007ff6:	0c 9b       	mov	r11,r6
80007ff8:	1a d8       	st.w	--sp,r8
80007ffa:	04 9a       	mov	r10,r2
80007ffc:	fa c8 f9 40 	sub	r8,sp,-1728
80008000:	fa c9 ff b4 	sub	r9,sp,-76
80008004:	08 9c       	mov	r12,r4
80008006:	fe b0 fa 9d 	rcall	80007540 <get_arg>
8000800a:	2f dd       	sub	sp,-12
8000800c:	78 16       	ld.w	r6,r12[0x4]
8000800e:	50 76       	stdsp	sp[0x1c],r6
80008010:	c4 88       	rjmp	800080a0 <_vfprintf_r+0x830>
80008012:	2f f7       	sub	r7,-1
80008014:	10 39       	cp.w	r9,r8
80008016:	c0 c4       	brge	8000802e <_vfprintf_r+0x7be>
80008018:	fa ce f9 44 	sub	lr,sp,-1724
8000801c:	fc 06 00 36 	add	r6,lr,r6<<0x3
80008020:	ec fc fd 8c 	ld.w	r12,r6[-628]
80008024:	50 7c       	stdsp	sp[0x1c],r12
80008026:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000802a:	50 56       	stdsp	sp[0x14],r6
8000802c:	c6 68       	rjmp	800080f8 <_vfprintf_r+0x888>
8000802e:	41 09       	lddsp	r9,sp[0x40]
80008030:	59 f8       	cp.w	r8,31
80008032:	e0 89 00 10 	brgt	80008052 <_vfprintf_r+0x7e2>
80008036:	f2 ca ff f8 	sub	r10,r9,-8
8000803a:	72 1b       	ld.w	r11,r9[0x4]
8000803c:	51 0a       	stdsp	sp[0x40],r10
8000803e:	72 09       	ld.w	r9,r9[0x0]
80008040:	fa ca f9 44 	sub	r10,sp,-1724
80008044:	50 7b       	stdsp	sp[0x1c],r11
80008046:	50 59       	stdsp	sp[0x14],r9
80008048:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000804c:	40 5b       	lddsp	r11,sp[0x14]
8000804e:	40 7a       	lddsp	r10,sp[0x1c]
80008050:	c4 78       	rjmp	800080de <_vfprintf_r+0x86e>
80008052:	72 18       	ld.w	r8,r9[0x4]
80008054:	50 78       	stdsp	sp[0x1c],r8
80008056:	c4 c8       	rjmp	800080ee <_vfprintf_r+0x87e>
80008058:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000805c:	40 3e       	lddsp	lr,sp[0xc]
8000805e:	58 0e       	cp.w	lr,0
80008060:	c2 30       	breq	800080a6 <_vfprintf_r+0x836>
80008062:	10 36       	cp.w	r6,r8
80008064:	c0 94       	brge	80008076 <_vfprintf_r+0x806>
80008066:	fa cc f9 44 	sub	r12,sp,-1724
8000806a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000806e:	ec fb fd 8c 	ld.w	r11,r6[-628]
80008072:	50 7b       	stdsp	sp[0x1c],r11
80008074:	cd 9b       	rjmp	80008026 <_vfprintf_r+0x7b6>
80008076:	fa c8 f9 50 	sub	r8,sp,-1712
8000807a:	1a d8       	st.w	--sp,r8
8000807c:	fa c8 fa b8 	sub	r8,sp,-1352
80008080:	04 9a       	mov	r10,r2
80008082:	1a d8       	st.w	--sp,r8
80008084:	fa c8 fb b4 	sub	r8,sp,-1100
80008088:	0c 9b       	mov	r11,r6
8000808a:	1a d8       	st.w	--sp,r8
8000808c:	08 9c       	mov	r12,r4
8000808e:	fa c8 f9 40 	sub	r8,sp,-1728
80008092:	fa c9 ff b4 	sub	r9,sp,-76
80008096:	fe b0 fa 55 	rcall	80007540 <get_arg>
8000809a:	2f dd       	sub	sp,-12
8000809c:	78 1a       	ld.w	r10,r12[0x4]
8000809e:	50 7a       	stdsp	sp[0x1c],r10
800080a0:	78 0c       	ld.w	r12,r12[0x0]
800080a2:	50 5c       	stdsp	sp[0x14],r12
800080a4:	c2 a8       	rjmp	800080f8 <_vfprintf_r+0x888>
800080a6:	2f f7       	sub	r7,-1
800080a8:	10 39       	cp.w	r9,r8
800080aa:	c0 94       	brge	800080bc <_vfprintf_r+0x84c>
800080ac:	fa c9 f9 44 	sub	r9,sp,-1724
800080b0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800080b4:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800080b8:	50 78       	stdsp	sp[0x1c],r8
800080ba:	cb 6b       	rjmp	80008026 <_vfprintf_r+0x7b6>
800080bc:	41 09       	lddsp	r9,sp[0x40]
800080be:	59 f8       	cp.w	r8,31
800080c0:	e0 89 00 15 	brgt	800080ea <_vfprintf_r+0x87a>
800080c4:	f2 ca ff f8 	sub	r10,r9,-8
800080c8:	72 16       	ld.w	r6,r9[0x4]
800080ca:	72 09       	ld.w	r9,r9[0x0]
800080cc:	51 0a       	stdsp	sp[0x40],r10
800080ce:	50 59       	stdsp	sp[0x14],r9
800080d0:	fa ce f9 44 	sub	lr,sp,-1724
800080d4:	50 76       	stdsp	sp[0x1c],r6
800080d6:	fc 08 00 39 	add	r9,lr,r8<<0x3
800080da:	40 5b       	lddsp	r11,sp[0x14]
800080dc:	0c 9a       	mov	r10,r6
800080de:	f2 eb fd 88 	st.d	r9[-632],r10
800080e2:	2f f8       	sub	r8,-1
800080e4:	fb 48 06 b4 	st.w	sp[1716],r8
800080e8:	c0 88       	rjmp	800080f8 <_vfprintf_r+0x888>
800080ea:	72 1c       	ld.w	r12,r9[0x4]
800080ec:	50 7c       	stdsp	sp[0x1c],r12
800080ee:	f2 c8 ff f8 	sub	r8,r9,-8
800080f2:	51 08       	stdsp	sp[0x40],r8
800080f4:	72 09       	ld.w	r9,r9[0x0]
800080f6:	50 59       	stdsp	sp[0x14],r9
800080f8:	40 5b       	lddsp	r11,sp[0x14]
800080fa:	40 7a       	lddsp	r10,sp[0x1c]
800080fc:	e0 a0 18 0c 	rcall	8000b114 <__isinfd>
80008100:	18 96       	mov	r6,r12
80008102:	c1 70       	breq	80008130 <_vfprintf_r+0x8c0>
80008104:	30 08       	mov	r8,0
80008106:	30 09       	mov	r9,0
80008108:	40 5b       	lddsp	r11,sp[0x14]
8000810a:	40 7a       	lddsp	r10,sp[0x1c]
8000810c:	e0 a0 1b 82 	rcall	8000b810 <__avr32_f64_cmp_lt>
80008110:	c0 40       	breq	80008118 <_vfprintf_r+0x8a8>
80008112:	32 d8       	mov	r8,45
80008114:	fb 68 06 bb 	st.b	sp[1723],r8
80008118:	fe c8 bc f4 	sub	r8,pc,-17164
8000811c:	fe c6 bc f4 	sub	r6,pc,-17164
80008120:	a7 d5       	cbr	r5,0x7
80008122:	e0 40 00 47 	cp.w	r0,71
80008126:	f0 06 17 a0 	movle	r6,r8
8000812a:	30 32       	mov	r2,3
8000812c:	e0 8f 06 ce 	bral	80008ec8 <_vfprintf_r+0x1658>
80008130:	40 5b       	lddsp	r11,sp[0x14]
80008132:	40 7a       	lddsp	r10,sp[0x1c]
80008134:	e0 a0 18 05 	rcall	8000b13e <__isnand>
80008138:	c0 e0       	breq	80008154 <_vfprintf_r+0x8e4>
8000813a:	50 26       	stdsp	sp[0x8],r6
8000813c:	fe c8 bd 10 	sub	r8,pc,-17136
80008140:	fe c6 bd 10 	sub	r6,pc,-17136
80008144:	a7 d5       	cbr	r5,0x7
80008146:	e0 40 00 47 	cp.w	r0,71
8000814a:	f0 06 17 a0 	movle	r6,r8
8000814e:	30 32       	mov	r2,3
80008150:	e0 8f 06 c2 	bral	80008ed4 <_vfprintf_r+0x1664>
80008154:	40 2a       	lddsp	r10,sp[0x8]
80008156:	5b fa       	cp.w	r10,-1
80008158:	c0 41       	brne	80008160 <_vfprintf_r+0x8f0>
8000815a:	30 69       	mov	r9,6
8000815c:	50 29       	stdsp	sp[0x8],r9
8000815e:	c1 18       	rjmp	80008180 <_vfprintf_r+0x910>
80008160:	e0 40 00 47 	cp.w	r0,71
80008164:	5f 09       	sreq	r9
80008166:	e0 40 00 67 	cp.w	r0,103
8000816a:	5f 08       	sreq	r8
8000816c:	f3 e8 10 08 	or	r8,r9,r8
80008170:	f8 08 18 00 	cp.b	r8,r12
80008174:	c0 60       	breq	80008180 <_vfprintf_r+0x910>
80008176:	40 28       	lddsp	r8,sp[0x8]
80008178:	58 08       	cp.w	r8,0
8000817a:	f9 b8 00 01 	moveq	r8,1
8000817e:	50 28       	stdsp	sp[0x8],r8
80008180:	40 78       	lddsp	r8,sp[0x1c]
80008182:	40 59       	lddsp	r9,sp[0x14]
80008184:	fa e9 06 94 	st.d	sp[1684],r8
80008188:	a9 a5       	sbr	r5,0x8
8000818a:	fa f8 06 94 	ld.w	r8,sp[1684]
8000818e:	58 08       	cp.w	r8,0
80008190:	c0 65       	brlt	8000819c <_vfprintf_r+0x92c>
80008192:	40 5e       	lddsp	lr,sp[0x14]
80008194:	30 0c       	mov	r12,0
80008196:	50 6e       	stdsp	sp[0x18],lr
80008198:	50 9c       	stdsp	sp[0x24],r12
8000819a:	c0 78       	rjmp	800081a8 <_vfprintf_r+0x938>
8000819c:	40 5b       	lddsp	r11,sp[0x14]
8000819e:	32 da       	mov	r10,45
800081a0:	ee 1b 80 00 	eorh	r11,0x8000
800081a4:	50 9a       	stdsp	sp[0x24],r10
800081a6:	50 6b       	stdsp	sp[0x18],r11
800081a8:	e0 40 00 46 	cp.w	r0,70
800081ac:	5f 09       	sreq	r9
800081ae:	e0 40 00 66 	cp.w	r0,102
800081b2:	5f 08       	sreq	r8
800081b4:	f3 e8 10 08 	or	r8,r9,r8
800081b8:	50 48       	stdsp	sp[0x10],r8
800081ba:	c0 40       	breq	800081c2 <_vfprintf_r+0x952>
800081bc:	40 22       	lddsp	r2,sp[0x8]
800081be:	30 39       	mov	r9,3
800081c0:	c1 08       	rjmp	800081e0 <_vfprintf_r+0x970>
800081c2:	e0 40 00 45 	cp.w	r0,69
800081c6:	5f 09       	sreq	r9
800081c8:	e0 40 00 65 	cp.w	r0,101
800081cc:	5f 08       	sreq	r8
800081ce:	40 22       	lddsp	r2,sp[0x8]
800081d0:	10 49       	or	r9,r8
800081d2:	2f f2       	sub	r2,-1
800081d4:	40 46       	lddsp	r6,sp[0x10]
800081d6:	ec 09 18 00 	cp.b	r9,r6
800081da:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800081de:	30 29       	mov	r9,2
800081e0:	fa c8 f9 5c 	sub	r8,sp,-1700
800081e4:	1a d8       	st.w	--sp,r8
800081e6:	fa c8 f9 54 	sub	r8,sp,-1708
800081ea:	1a d8       	st.w	--sp,r8
800081ec:	fa c8 f9 4c 	sub	r8,sp,-1716
800081f0:	08 9c       	mov	r12,r4
800081f2:	1a d8       	st.w	--sp,r8
800081f4:	04 98       	mov	r8,r2
800081f6:	40 9b       	lddsp	r11,sp[0x24]
800081f8:	40 aa       	lddsp	r10,sp[0x28]
800081fa:	e0 a0 0b e7 	rcall	800099c8 <_dtoa_r>
800081fe:	e0 40 00 47 	cp.w	r0,71
80008202:	5f 19       	srne	r9
80008204:	e0 40 00 67 	cp.w	r0,103
80008208:	5f 18       	srne	r8
8000820a:	18 96       	mov	r6,r12
8000820c:	2f dd       	sub	sp,-12
8000820e:	f3 e8 00 08 	and	r8,r9,r8
80008212:	c0 41       	brne	8000821a <_vfprintf_r+0x9aa>
80008214:	ed b5 00 00 	bld	r5,0x0
80008218:	c3 01       	brne	80008278 <_vfprintf_r+0xa08>
8000821a:	ec 02 00 0e 	add	lr,r6,r2
8000821e:	50 3e       	stdsp	sp[0xc],lr
80008220:	40 4c       	lddsp	r12,sp[0x10]
80008222:	58 0c       	cp.w	r12,0
80008224:	c1 50       	breq	8000824e <_vfprintf_r+0x9de>
80008226:	0d 89       	ld.ub	r9,r6[0x0]
80008228:	33 08       	mov	r8,48
8000822a:	f0 09 18 00 	cp.b	r9,r8
8000822e:	c0 b1       	brne	80008244 <_vfprintf_r+0x9d4>
80008230:	30 08       	mov	r8,0
80008232:	30 09       	mov	r9,0
80008234:	40 6b       	lddsp	r11,sp[0x18]
80008236:	40 7a       	lddsp	r10,sp[0x1c]
80008238:	e0 a0 1a a5 	rcall	8000b782 <__avr32_f64_cmp_eq>
8000823c:	fb b2 00 01 	rsubeq	r2,1
80008240:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80008244:	40 3b       	lddsp	r11,sp[0xc]
80008246:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000824a:	10 0b       	add	r11,r8
8000824c:	50 3b       	stdsp	sp[0xc],r11
8000824e:	40 6b       	lddsp	r11,sp[0x18]
80008250:	30 08       	mov	r8,0
80008252:	30 09       	mov	r9,0
80008254:	40 7a       	lddsp	r10,sp[0x1c]
80008256:	e0 a0 1a 96 	rcall	8000b782 <__avr32_f64_cmp_eq>
8000825a:	c0 90       	breq	8000826c <_vfprintf_r+0x9fc>
8000825c:	40 3a       	lddsp	r10,sp[0xc]
8000825e:	fb 4a 06 a4 	st.w	sp[1700],r10
80008262:	c0 58       	rjmp	8000826c <_vfprintf_r+0x9fc>
80008264:	10 c9       	st.b	r8++,r9
80008266:	fb 48 06 a4 	st.w	sp[1700],r8
8000826a:	c0 28       	rjmp	8000826e <_vfprintf_r+0x9fe>
8000826c:	33 09       	mov	r9,48
8000826e:	fa f8 06 a4 	ld.w	r8,sp[1700]
80008272:	40 3e       	lddsp	lr,sp[0xc]
80008274:	1c 38       	cp.w	r8,lr
80008276:	cf 73       	brcs	80008264 <_vfprintf_r+0x9f4>
80008278:	e0 40 00 47 	cp.w	r0,71
8000827c:	5f 09       	sreq	r9
8000827e:	e0 40 00 67 	cp.w	r0,103
80008282:	5f 08       	sreq	r8
80008284:	f3 e8 10 08 	or	r8,r9,r8
80008288:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000828c:	0c 19       	sub	r9,r6
8000828e:	50 69       	stdsp	sp[0x18],r9
80008290:	58 08       	cp.w	r8,0
80008292:	c0 b0       	breq	800082a8 <_vfprintf_r+0xa38>
80008294:	fa f8 06 ac 	ld.w	r8,sp[1708]
80008298:	5b d8       	cp.w	r8,-3
8000829a:	c0 55       	brlt	800082a4 <_vfprintf_r+0xa34>
8000829c:	40 2c       	lddsp	r12,sp[0x8]
8000829e:	18 38       	cp.w	r8,r12
800082a0:	e0 8a 00 6a 	brle	80008374 <_vfprintf_r+0xb04>
800082a4:	20 20       	sub	r0,2
800082a6:	c0 58       	rjmp	800082b0 <_vfprintf_r+0xa40>
800082a8:	e0 40 00 65 	cp.w	r0,101
800082ac:	e0 89 00 46 	brgt	80008338 <_vfprintf_r+0xac8>
800082b0:	fa fb 06 ac 	ld.w	r11,sp[1708]
800082b4:	fb 60 06 9c 	st.b	sp[1692],r0
800082b8:	20 1b       	sub	r11,1
800082ba:	fb 4b 06 ac 	st.w	sp[1708],r11
800082be:	c0 47       	brpl	800082c6 <_vfprintf_r+0xa56>
800082c0:	5c 3b       	neg	r11
800082c2:	32 d8       	mov	r8,45
800082c4:	c0 28       	rjmp	800082c8 <_vfprintf_r+0xa58>
800082c6:	32 b8       	mov	r8,43
800082c8:	fb 68 06 9d 	st.b	sp[1693],r8
800082cc:	58 9b       	cp.w	r11,9
800082ce:	e0 8a 00 1d 	brle	80008308 <_vfprintf_r+0xa98>
800082d2:	fa c9 fa 35 	sub	r9,sp,-1483
800082d6:	30 aa       	mov	r10,10
800082d8:	12 98       	mov	r8,r9
800082da:	0e 9c       	mov	r12,r7
800082dc:	0c 92       	mov	r2,r6
800082de:	f6 0a 0c 06 	divs	r6,r11,r10
800082e2:	0e 9b       	mov	r11,r7
800082e4:	2d 0b       	sub	r11,-48
800082e6:	10 fb       	st.b	--r8,r11
800082e8:	0c 9b       	mov	r11,r6
800082ea:	58 96       	cp.w	r6,9
800082ec:	fe 99 ff f9 	brgt	800082de <_vfprintf_r+0xa6e>
800082f0:	2d 0b       	sub	r11,-48
800082f2:	18 97       	mov	r7,r12
800082f4:	04 96       	mov	r6,r2
800082f6:	10 fb       	st.b	--r8,r11
800082f8:	fa ca f9 62 	sub	r10,sp,-1694
800082fc:	c0 38       	rjmp	80008302 <_vfprintf_r+0xa92>
800082fe:	11 3b       	ld.ub	r11,r8++
80008300:	14 cb       	st.b	r10++,r11
80008302:	12 38       	cp.w	r8,r9
80008304:	cf d3       	brcs	800082fe <_vfprintf_r+0xa8e>
80008306:	c0 98       	rjmp	80008318 <_vfprintf_r+0xaa8>
80008308:	2d 0b       	sub	r11,-48
8000830a:	33 08       	mov	r8,48
8000830c:	fb 6b 06 9f 	st.b	sp[1695],r11
80008310:	fb 68 06 9e 	st.b	sp[1694],r8
80008314:	fa ca f9 60 	sub	r10,sp,-1696
80008318:	fa c8 f9 64 	sub	r8,sp,-1692
8000831c:	f4 08 01 08 	sub	r8,r10,r8
80008320:	50 e8       	stdsp	sp[0x38],r8
80008322:	10 92       	mov	r2,r8
80008324:	40 6b       	lddsp	r11,sp[0x18]
80008326:	16 02       	add	r2,r11
80008328:	58 1b       	cp.w	r11,1
8000832a:	e0 89 00 05 	brgt	80008334 <_vfprintf_r+0xac4>
8000832e:	ed b5 00 00 	bld	r5,0x0
80008332:	c3 51       	brne	8000839c <_vfprintf_r+0xb2c>
80008334:	2f f2       	sub	r2,-1
80008336:	c3 38       	rjmp	8000839c <_vfprintf_r+0xb2c>
80008338:	e0 40 00 66 	cp.w	r0,102
8000833c:	c1 c1       	brne	80008374 <_vfprintf_r+0xb04>
8000833e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80008342:	58 02       	cp.w	r2,0
80008344:	e0 8a 00 0c 	brle	8000835c <_vfprintf_r+0xaec>
80008348:	40 2a       	lddsp	r10,sp[0x8]
8000834a:	58 0a       	cp.w	r10,0
8000834c:	c0 41       	brne	80008354 <_vfprintf_r+0xae4>
8000834e:	ed b5 00 00 	bld	r5,0x0
80008352:	c2 51       	brne	8000839c <_vfprintf_r+0xb2c>
80008354:	2f f2       	sub	r2,-1
80008356:	40 29       	lddsp	r9,sp[0x8]
80008358:	12 02       	add	r2,r9
8000835a:	c0 b8       	rjmp	80008370 <_vfprintf_r+0xb00>
8000835c:	40 28       	lddsp	r8,sp[0x8]
8000835e:	58 08       	cp.w	r8,0
80008360:	c0 61       	brne	8000836c <_vfprintf_r+0xafc>
80008362:	ed b5 00 00 	bld	r5,0x0
80008366:	c0 30       	breq	8000836c <_vfprintf_r+0xafc>
80008368:	30 12       	mov	r2,1
8000836a:	c1 98       	rjmp	8000839c <_vfprintf_r+0xb2c>
8000836c:	40 22       	lddsp	r2,sp[0x8]
8000836e:	2f e2       	sub	r2,-2
80008370:	36 60       	mov	r0,102
80008372:	c1 58       	rjmp	8000839c <_vfprintf_r+0xb2c>
80008374:	fa f2 06 ac 	ld.w	r2,sp[1708]
80008378:	40 6e       	lddsp	lr,sp[0x18]
8000837a:	1c 32       	cp.w	r2,lr
8000837c:	c0 65       	brlt	80008388 <_vfprintf_r+0xb18>
8000837e:	ed b5 00 00 	bld	r5,0x0
80008382:	f7 b2 00 ff 	subeq	r2,-1
80008386:	c0 a8       	rjmp	8000839a <_vfprintf_r+0xb2a>
80008388:	e4 08 11 02 	rsub	r8,r2,2
8000838c:	40 6c       	lddsp	r12,sp[0x18]
8000838e:	58 02       	cp.w	r2,0
80008390:	f0 02 17 a0 	movle	r2,r8
80008394:	f9 b2 09 01 	movgt	r2,1
80008398:	18 02       	add	r2,r12
8000839a:	36 70       	mov	r0,103
8000839c:	40 9b       	lddsp	r11,sp[0x24]
8000839e:	58 0b       	cp.w	r11,0
800083a0:	e0 80 05 94 	breq	80008ec8 <_vfprintf_r+0x1658>
800083a4:	32 d8       	mov	r8,45
800083a6:	fb 68 06 bb 	st.b	sp[1723],r8
800083aa:	e0 8f 05 93 	bral	80008ed0 <_vfprintf_r+0x1660>
800083ae:	50 a7       	stdsp	sp[0x28],r7
800083b0:	04 94       	mov	r4,r2
800083b2:	0c 97       	mov	r7,r6
800083b4:	02 92       	mov	r2,r1
800083b6:	06 96       	mov	r6,r3
800083b8:	40 41       	lddsp	r1,sp[0x10]
800083ba:	40 93       	lddsp	r3,sp[0x24]
800083bc:	0e 99       	mov	r9,r7
800083be:	ed b5 00 05 	bld	r5,0x5
800083c2:	c4 81       	brne	80008452 <_vfprintf_r+0xbe2>
800083c4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800083c8:	40 3e       	lddsp	lr,sp[0xc]
800083ca:	58 0e       	cp.w	lr,0
800083cc:	c1 d0       	breq	80008406 <_vfprintf_r+0xb96>
800083ce:	10 36       	cp.w	r6,r8
800083d0:	c0 64       	brge	800083dc <_vfprintf_r+0xb6c>
800083d2:	fa cc f9 44 	sub	r12,sp,-1724
800083d6:	f8 06 00 36 	add	r6,r12,r6<<0x3
800083da:	c1 d8       	rjmp	80008414 <_vfprintf_r+0xba4>
800083dc:	fa c8 f9 50 	sub	r8,sp,-1712
800083e0:	1a d8       	st.w	--sp,r8
800083e2:	fa c8 fa b8 	sub	r8,sp,-1352
800083e6:	04 9a       	mov	r10,r2
800083e8:	1a d8       	st.w	--sp,r8
800083ea:	fa c8 fb b4 	sub	r8,sp,-1100
800083ee:	0c 9b       	mov	r11,r6
800083f0:	1a d8       	st.w	--sp,r8
800083f2:	08 9c       	mov	r12,r4
800083f4:	fa c8 f9 40 	sub	r8,sp,-1728
800083f8:	fa c9 ff b4 	sub	r9,sp,-76
800083fc:	fe b0 f8 a2 	rcall	80007540 <get_arg>
80008400:	2f dd       	sub	sp,-12
80008402:	78 0a       	ld.w	r10,r12[0x0]
80008404:	c2 08       	rjmp	80008444 <_vfprintf_r+0xbd4>
80008406:	2f f7       	sub	r7,-1
80008408:	10 39       	cp.w	r9,r8
8000840a:	c0 84       	brge	8000841a <_vfprintf_r+0xbaa>
8000840c:	fa cb f9 44 	sub	r11,sp,-1724
80008410:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008414:	ec fa fd 88 	ld.w	r10,r6[-632]
80008418:	c1 68       	rjmp	80008444 <_vfprintf_r+0xbd4>
8000841a:	41 09       	lddsp	r9,sp[0x40]
8000841c:	59 f8       	cp.w	r8,31
8000841e:	e0 89 00 10 	brgt	8000843e <_vfprintf_r+0xbce>
80008422:	f2 ca ff fc 	sub	r10,r9,-4
80008426:	51 0a       	stdsp	sp[0x40],r10
80008428:	fa c6 f9 44 	sub	r6,sp,-1724
8000842c:	72 0a       	ld.w	r10,r9[0x0]
8000842e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008432:	f3 4a fd 88 	st.w	r9[-632],r10
80008436:	2f f8       	sub	r8,-1
80008438:	fb 48 06 b4 	st.w	sp[1716],r8
8000843c:	c0 48       	rjmp	80008444 <_vfprintf_r+0xbd4>
8000843e:	72 0a       	ld.w	r10,r9[0x0]
80008440:	2f c9       	sub	r9,-4
80008442:	51 09       	stdsp	sp[0x40],r9
80008444:	40 be       	lddsp	lr,sp[0x2c]
80008446:	1c 98       	mov	r8,lr
80008448:	95 1e       	st.w	r10[0x4],lr
8000844a:	bf 58       	asr	r8,0x1f
8000844c:	95 08       	st.w	r10[0x0],r8
8000844e:	fe 9f fa 9f 	bral	8000798c <_vfprintf_r+0x11c>
80008452:	ed b5 00 04 	bld	r5,0x4
80008456:	c4 80       	breq	800084e6 <_vfprintf_r+0xc76>
80008458:	e2 15 00 40 	andl	r5,0x40,COH
8000845c:	c4 50       	breq	800084e6 <_vfprintf_r+0xc76>
8000845e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008462:	40 3c       	lddsp	r12,sp[0xc]
80008464:	58 0c       	cp.w	r12,0
80008466:	c1 d0       	breq	800084a0 <_vfprintf_r+0xc30>
80008468:	10 36       	cp.w	r6,r8
8000846a:	c0 64       	brge	80008476 <_vfprintf_r+0xc06>
8000846c:	fa cb f9 44 	sub	r11,sp,-1724
80008470:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008474:	c1 d8       	rjmp	800084ae <_vfprintf_r+0xc3e>
80008476:	fa c8 f9 50 	sub	r8,sp,-1712
8000847a:	1a d8       	st.w	--sp,r8
8000847c:	fa c8 fa b8 	sub	r8,sp,-1352
80008480:	04 9a       	mov	r10,r2
80008482:	1a d8       	st.w	--sp,r8
80008484:	fa c8 fb b4 	sub	r8,sp,-1100
80008488:	0c 9b       	mov	r11,r6
8000848a:	1a d8       	st.w	--sp,r8
8000848c:	08 9c       	mov	r12,r4
8000848e:	fa c8 f9 40 	sub	r8,sp,-1728
80008492:	fa c9 ff b4 	sub	r9,sp,-76
80008496:	fe b0 f8 55 	rcall	80007540 <get_arg>
8000849a:	2f dd       	sub	sp,-12
8000849c:	78 0a       	ld.w	r10,r12[0x0]
8000849e:	c2 08       	rjmp	800084de <_vfprintf_r+0xc6e>
800084a0:	2f f7       	sub	r7,-1
800084a2:	10 39       	cp.w	r9,r8
800084a4:	c0 84       	brge	800084b4 <_vfprintf_r+0xc44>
800084a6:	fa ca f9 44 	sub	r10,sp,-1724
800084aa:	f4 06 00 36 	add	r6,r10,r6<<0x3
800084ae:	ec fa fd 88 	ld.w	r10,r6[-632]
800084b2:	c1 68       	rjmp	800084de <_vfprintf_r+0xc6e>
800084b4:	41 09       	lddsp	r9,sp[0x40]
800084b6:	59 f8       	cp.w	r8,31
800084b8:	e0 89 00 10 	brgt	800084d8 <_vfprintf_r+0xc68>
800084bc:	f2 ca ff fc 	sub	r10,r9,-4
800084c0:	51 0a       	stdsp	sp[0x40],r10
800084c2:	fa c6 f9 44 	sub	r6,sp,-1724
800084c6:	72 0a       	ld.w	r10,r9[0x0]
800084c8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800084cc:	f3 4a fd 88 	st.w	r9[-632],r10
800084d0:	2f f8       	sub	r8,-1
800084d2:	fb 48 06 b4 	st.w	sp[1716],r8
800084d6:	c0 48       	rjmp	800084de <_vfprintf_r+0xc6e>
800084d8:	72 0a       	ld.w	r10,r9[0x0]
800084da:	2f c9       	sub	r9,-4
800084dc:	51 09       	stdsp	sp[0x40],r9
800084de:	40 be       	lddsp	lr,sp[0x2c]
800084e0:	b4 0e       	st.h	r10[0x0],lr
800084e2:	fe 9f fa 55 	bral	8000798c <_vfprintf_r+0x11c>
800084e6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800084ea:	40 3c       	lddsp	r12,sp[0xc]
800084ec:	58 0c       	cp.w	r12,0
800084ee:	c1 d0       	breq	80008528 <_vfprintf_r+0xcb8>
800084f0:	10 36       	cp.w	r6,r8
800084f2:	c0 64       	brge	800084fe <_vfprintf_r+0xc8e>
800084f4:	fa cb f9 44 	sub	r11,sp,-1724
800084f8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800084fc:	c1 d8       	rjmp	80008536 <_vfprintf_r+0xcc6>
800084fe:	fa c8 f9 50 	sub	r8,sp,-1712
80008502:	1a d8       	st.w	--sp,r8
80008504:	fa c8 fa b8 	sub	r8,sp,-1352
80008508:	04 9a       	mov	r10,r2
8000850a:	1a d8       	st.w	--sp,r8
8000850c:	fa c8 fb b4 	sub	r8,sp,-1100
80008510:	0c 9b       	mov	r11,r6
80008512:	1a d8       	st.w	--sp,r8
80008514:	08 9c       	mov	r12,r4
80008516:	fa c8 f9 40 	sub	r8,sp,-1728
8000851a:	fa c9 ff b4 	sub	r9,sp,-76
8000851e:	fe b0 f8 11 	rcall	80007540 <get_arg>
80008522:	2f dd       	sub	sp,-12
80008524:	78 0a       	ld.w	r10,r12[0x0]
80008526:	c2 08       	rjmp	80008566 <_vfprintf_r+0xcf6>
80008528:	2f f7       	sub	r7,-1
8000852a:	10 39       	cp.w	r9,r8
8000852c:	c0 84       	brge	8000853c <_vfprintf_r+0xccc>
8000852e:	fa ca f9 44 	sub	r10,sp,-1724
80008532:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008536:	ec fa fd 88 	ld.w	r10,r6[-632]
8000853a:	c1 68       	rjmp	80008566 <_vfprintf_r+0xcf6>
8000853c:	41 09       	lddsp	r9,sp[0x40]
8000853e:	59 f8       	cp.w	r8,31
80008540:	e0 89 00 10 	brgt	80008560 <_vfprintf_r+0xcf0>
80008544:	f2 ca ff fc 	sub	r10,r9,-4
80008548:	51 0a       	stdsp	sp[0x40],r10
8000854a:	fa c6 f9 44 	sub	r6,sp,-1724
8000854e:	72 0a       	ld.w	r10,r9[0x0]
80008550:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008554:	f3 4a fd 88 	st.w	r9[-632],r10
80008558:	2f f8       	sub	r8,-1
8000855a:	fb 48 06 b4 	st.w	sp[1716],r8
8000855e:	c0 48       	rjmp	80008566 <_vfprintf_r+0xcf6>
80008560:	72 0a       	ld.w	r10,r9[0x0]
80008562:	2f c9       	sub	r9,-4
80008564:	51 09       	stdsp	sp[0x40],r9
80008566:	40 be       	lddsp	lr,sp[0x2c]
80008568:	95 0e       	st.w	r10[0x0],lr
8000856a:	fe 9f fa 11 	bral	8000798c <_vfprintf_r+0x11c>
8000856e:	50 a7       	stdsp	sp[0x28],r7
80008570:	50 80       	stdsp	sp[0x20],r0
80008572:	0c 97       	mov	r7,r6
80008574:	04 94       	mov	r4,r2
80008576:	06 96       	mov	r6,r3
80008578:	02 92       	mov	r2,r1
8000857a:	40 93       	lddsp	r3,sp[0x24]
8000857c:	10 90       	mov	r0,r8
8000857e:	40 41       	lddsp	r1,sp[0x10]
80008580:	a5 a5       	sbr	r5,0x4
80008582:	c0 a8       	rjmp	80008596 <_vfprintf_r+0xd26>
80008584:	50 a7       	stdsp	sp[0x28],r7
80008586:	50 80       	stdsp	sp[0x20],r0
80008588:	0c 97       	mov	r7,r6
8000858a:	04 94       	mov	r4,r2
8000858c:	06 96       	mov	r6,r3
8000858e:	02 92       	mov	r2,r1
80008590:	40 93       	lddsp	r3,sp[0x24]
80008592:	10 90       	mov	r0,r8
80008594:	40 41       	lddsp	r1,sp[0x10]
80008596:	ed b5 00 05 	bld	r5,0x5
8000859a:	c5 d1       	brne	80008654 <_vfprintf_r+0xde4>
8000859c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800085a0:	40 3c       	lddsp	r12,sp[0xc]
800085a2:	58 0c       	cp.w	r12,0
800085a4:	c2 60       	breq	800085f0 <_vfprintf_r+0xd80>
800085a6:	10 36       	cp.w	r6,r8
800085a8:	c0 a4       	brge	800085bc <_vfprintf_r+0xd4c>
800085aa:	fa cb f9 44 	sub	r11,sp,-1724
800085ae:	f6 06 00 36 	add	r6,r11,r6<<0x3
800085b2:	ec e8 fd 88 	ld.d	r8,r6[-632]
800085b6:	fa e9 00 00 	st.d	sp[0],r8
800085ba:	c1 88       	rjmp	800085ea <_vfprintf_r+0xd7a>
800085bc:	fa c8 f9 50 	sub	r8,sp,-1712
800085c0:	1a d8       	st.w	--sp,r8
800085c2:	fa c8 fa b8 	sub	r8,sp,-1352
800085c6:	04 9a       	mov	r10,r2
800085c8:	1a d8       	st.w	--sp,r8
800085ca:	0c 9b       	mov	r11,r6
800085cc:	fa c8 fb b4 	sub	r8,sp,-1100
800085d0:	08 9c       	mov	r12,r4
800085d2:	1a d8       	st.w	--sp,r8
800085d4:	fa c8 f9 40 	sub	r8,sp,-1728
800085d8:	fa c9 ff b4 	sub	r9,sp,-76
800085dc:	fe b0 f7 b2 	rcall	80007540 <get_arg>
800085e0:	2f dd       	sub	sp,-12
800085e2:	f8 ea 00 00 	ld.d	r10,r12[0]
800085e6:	fa eb 00 00 	st.d	sp[0],r10
800085ea:	30 08       	mov	r8,0
800085ec:	e0 8f 03 de 	bral	80008da8 <_vfprintf_r+0x1538>
800085f0:	ee ca ff ff 	sub	r10,r7,-1
800085f4:	10 37       	cp.w	r7,r8
800085f6:	c0 b4       	brge	8000860c <_vfprintf_r+0xd9c>
800085f8:	fa c9 f9 44 	sub	r9,sp,-1724
800085fc:	14 97       	mov	r7,r10
800085fe:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008602:	ec ea fd 88 	ld.d	r10,r6[-632]
80008606:	fa eb 00 00 	st.d	sp[0],r10
8000860a:	c1 88       	rjmp	8000863a <_vfprintf_r+0xdca>
8000860c:	41 09       	lddsp	r9,sp[0x40]
8000860e:	59 f8       	cp.w	r8,31
80008610:	e0 89 00 18 	brgt	80008640 <_vfprintf_r+0xdd0>
80008614:	f2 e6 00 00 	ld.d	r6,r9[0]
80008618:	f2 cb ff f8 	sub	r11,r9,-8
8000861c:	fa e7 00 00 	st.d	sp[0],r6
80008620:	51 0b       	stdsp	sp[0x40],r11
80008622:	fa c6 f9 44 	sub	r6,sp,-1724
80008626:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000862a:	fa e6 00 00 	ld.d	r6,sp[0]
8000862e:	f2 e7 fd 88 	st.d	r9[-632],r6
80008632:	2f f8       	sub	r8,-1
80008634:	14 97       	mov	r7,r10
80008636:	fb 48 06 b4 	st.w	sp[1716],r8
8000863a:	40 38       	lddsp	r8,sp[0xc]
8000863c:	e0 8f 03 b6 	bral	80008da8 <_vfprintf_r+0x1538>
80008640:	f2 e6 00 00 	ld.d	r6,r9[0]
80008644:	40 38       	lddsp	r8,sp[0xc]
80008646:	fa e7 00 00 	st.d	sp[0],r6
8000864a:	2f 89       	sub	r9,-8
8000864c:	14 97       	mov	r7,r10
8000864e:	51 09       	stdsp	sp[0x40],r9
80008650:	e0 8f 03 ac 	bral	80008da8 <_vfprintf_r+0x1538>
80008654:	ed b5 00 04 	bld	r5,0x4
80008658:	c1 61       	brne	80008684 <_vfprintf_r+0xe14>
8000865a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000865e:	40 3e       	lddsp	lr,sp[0xc]
80008660:	58 0e       	cp.w	lr,0
80008662:	c0 80       	breq	80008672 <_vfprintf_r+0xe02>
80008664:	10 36       	cp.w	r6,r8
80008666:	c6 74       	brge	80008734 <_vfprintf_r+0xec4>
80008668:	fa cc f9 44 	sub	r12,sp,-1724
8000866c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008670:	c8 08       	rjmp	80008770 <_vfprintf_r+0xf00>
80008672:	ee ca ff ff 	sub	r10,r7,-1
80008676:	10 37       	cp.w	r7,r8
80008678:	c7 f4       	brge	80008776 <_vfprintf_r+0xf06>
8000867a:	fa cb f9 44 	sub	r11,sp,-1724
8000867e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008682:	c7 68       	rjmp	8000876e <_vfprintf_r+0xefe>
80008684:	ed b5 00 06 	bld	r5,0x6
80008688:	c4 a1       	brne	8000871c <_vfprintf_r+0xeac>
8000868a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000868e:	40 3c       	lddsp	r12,sp[0xc]
80008690:	58 0c       	cp.w	r12,0
80008692:	c1 d0       	breq	800086cc <_vfprintf_r+0xe5c>
80008694:	10 36       	cp.w	r6,r8
80008696:	c0 64       	brge	800086a2 <_vfprintf_r+0xe32>
80008698:	fa cb f9 44 	sub	r11,sp,-1724
8000869c:	f6 06 00 36 	add	r6,r11,r6<<0x3
800086a0:	c1 f8       	rjmp	800086de <_vfprintf_r+0xe6e>
800086a2:	fa c8 f9 50 	sub	r8,sp,-1712
800086a6:	1a d8       	st.w	--sp,r8
800086a8:	fa c8 fa b8 	sub	r8,sp,-1352
800086ac:	1a d8       	st.w	--sp,r8
800086ae:	fa c8 fb b4 	sub	r8,sp,-1100
800086b2:	1a d8       	st.w	--sp,r8
800086b4:	fa c8 f9 40 	sub	r8,sp,-1728
800086b8:	fa c9 ff b4 	sub	r9,sp,-76
800086bc:	04 9a       	mov	r10,r2
800086be:	0c 9b       	mov	r11,r6
800086c0:	08 9c       	mov	r12,r4
800086c2:	fe b0 f7 3f 	rcall	80007540 <get_arg>
800086c6:	2f dd       	sub	sp,-12
800086c8:	98 18       	ld.sh	r8,r12[0x2]
800086ca:	c2 68       	rjmp	80008716 <_vfprintf_r+0xea6>
800086cc:	ee ca ff ff 	sub	r10,r7,-1
800086d0:	10 37       	cp.w	r7,r8
800086d2:	c0 94       	brge	800086e4 <_vfprintf_r+0xe74>
800086d4:	fa c9 f9 44 	sub	r9,sp,-1724
800086d8:	14 97       	mov	r7,r10
800086da:	f2 06 00 36 	add	r6,r9,r6<<0x3
800086de:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800086e2:	c1 a8       	rjmp	80008716 <_vfprintf_r+0xea6>
800086e4:	41 09       	lddsp	r9,sp[0x40]
800086e6:	59 f8       	cp.w	r8,31
800086e8:	e0 89 00 13 	brgt	8000870e <_vfprintf_r+0xe9e>
800086ec:	f2 cb ff fc 	sub	r11,r9,-4
800086f0:	51 0b       	stdsp	sp[0x40],r11
800086f2:	72 09       	ld.w	r9,r9[0x0]
800086f4:	fa c6 f9 44 	sub	r6,sp,-1724
800086f8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800086fc:	2f f8       	sub	r8,-1
800086fe:	f7 49 fd 88 	st.w	r11[-632],r9
80008702:	fb 48 06 b4 	st.w	sp[1716],r8
80008706:	14 97       	mov	r7,r10
80008708:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000870c:	c0 58       	rjmp	80008716 <_vfprintf_r+0xea6>
8000870e:	92 18       	ld.sh	r8,r9[0x2]
80008710:	14 97       	mov	r7,r10
80008712:	2f c9       	sub	r9,-4
80008714:	51 09       	stdsp	sp[0x40],r9
80008716:	5c 78       	castu.h	r8
80008718:	50 18       	stdsp	sp[0x4],r8
8000871a:	c4 68       	rjmp	800087a6 <_vfprintf_r+0xf36>
8000871c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008720:	40 3c       	lddsp	r12,sp[0xc]
80008722:	58 0c       	cp.w	r12,0
80008724:	c1 d0       	breq	8000875e <_vfprintf_r+0xeee>
80008726:	10 36       	cp.w	r6,r8
80008728:	c0 64       	brge	80008734 <_vfprintf_r+0xec4>
8000872a:	fa cb f9 44 	sub	r11,sp,-1724
8000872e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008732:	c1 f8       	rjmp	80008770 <_vfprintf_r+0xf00>
80008734:	fa c8 f9 50 	sub	r8,sp,-1712
80008738:	1a d8       	st.w	--sp,r8
8000873a:	fa c8 fa b8 	sub	r8,sp,-1352
8000873e:	0c 9b       	mov	r11,r6
80008740:	1a d8       	st.w	--sp,r8
80008742:	fa c8 fb b4 	sub	r8,sp,-1100
80008746:	04 9a       	mov	r10,r2
80008748:	1a d8       	st.w	--sp,r8
8000874a:	08 9c       	mov	r12,r4
8000874c:	fa c8 f9 40 	sub	r8,sp,-1728
80008750:	fa c9 ff b4 	sub	r9,sp,-76
80008754:	fe b0 f6 f6 	rcall	80007540 <get_arg>
80008758:	2f dd       	sub	sp,-12
8000875a:	78 0b       	ld.w	r11,r12[0x0]
8000875c:	c2 48       	rjmp	800087a4 <_vfprintf_r+0xf34>
8000875e:	ee ca ff ff 	sub	r10,r7,-1
80008762:	10 37       	cp.w	r7,r8
80008764:	c0 94       	brge	80008776 <_vfprintf_r+0xf06>
80008766:	fa c9 f9 44 	sub	r9,sp,-1724
8000876a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000876e:	14 97       	mov	r7,r10
80008770:	ec fb fd 88 	ld.w	r11,r6[-632]
80008774:	c1 88       	rjmp	800087a4 <_vfprintf_r+0xf34>
80008776:	41 09       	lddsp	r9,sp[0x40]
80008778:	59 f8       	cp.w	r8,31
8000877a:	e0 89 00 11 	brgt	8000879c <_vfprintf_r+0xf2c>
8000877e:	f2 cb ff fc 	sub	r11,r9,-4
80008782:	51 0b       	stdsp	sp[0x40],r11
80008784:	fa c6 f9 44 	sub	r6,sp,-1724
80008788:	72 0b       	ld.w	r11,r9[0x0]
8000878a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000878e:	f3 4b fd 88 	st.w	r9[-632],r11
80008792:	2f f8       	sub	r8,-1
80008794:	14 97       	mov	r7,r10
80008796:	fb 48 06 b4 	st.w	sp[1716],r8
8000879a:	c0 58       	rjmp	800087a4 <_vfprintf_r+0xf34>
8000879c:	72 0b       	ld.w	r11,r9[0x0]
8000879e:	14 97       	mov	r7,r10
800087a0:	2f c9       	sub	r9,-4
800087a2:	51 09       	stdsp	sp[0x40],r9
800087a4:	50 1b       	stdsp	sp[0x4],r11
800087a6:	30 0e       	mov	lr,0
800087a8:	50 0e       	stdsp	sp[0x0],lr
800087aa:	1c 98       	mov	r8,lr
800087ac:	e0 8f 02 fe 	bral	80008da8 <_vfprintf_r+0x1538>
800087b0:	50 a7       	stdsp	sp[0x28],r7
800087b2:	50 80       	stdsp	sp[0x20],r0
800087b4:	0c 97       	mov	r7,r6
800087b6:	04 94       	mov	r4,r2
800087b8:	06 96       	mov	r6,r3
800087ba:	02 92       	mov	r2,r1
800087bc:	40 93       	lddsp	r3,sp[0x24]
800087be:	40 41       	lddsp	r1,sp[0x10]
800087c0:	0e 99       	mov	r9,r7
800087c2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800087c6:	40 3c       	lddsp	r12,sp[0xc]
800087c8:	58 0c       	cp.w	r12,0
800087ca:	c1 d0       	breq	80008804 <_vfprintf_r+0xf94>
800087cc:	10 36       	cp.w	r6,r8
800087ce:	c0 64       	brge	800087da <_vfprintf_r+0xf6a>
800087d0:	fa cb f9 44 	sub	r11,sp,-1724
800087d4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800087d8:	c1 d8       	rjmp	80008812 <_vfprintf_r+0xfa2>
800087da:	fa c8 f9 50 	sub	r8,sp,-1712
800087de:	1a d8       	st.w	--sp,r8
800087e0:	fa c8 fa b8 	sub	r8,sp,-1352
800087e4:	1a d8       	st.w	--sp,r8
800087e6:	fa c8 fb b4 	sub	r8,sp,-1100
800087ea:	1a d8       	st.w	--sp,r8
800087ec:	fa c9 ff b4 	sub	r9,sp,-76
800087f0:	fa c8 f9 40 	sub	r8,sp,-1728
800087f4:	04 9a       	mov	r10,r2
800087f6:	0c 9b       	mov	r11,r6
800087f8:	08 9c       	mov	r12,r4
800087fa:	fe b0 f6 a3 	rcall	80007540 <get_arg>
800087fe:	2f dd       	sub	sp,-12
80008800:	78 09       	ld.w	r9,r12[0x0]
80008802:	c2 18       	rjmp	80008844 <_vfprintf_r+0xfd4>
80008804:	2f f7       	sub	r7,-1
80008806:	10 39       	cp.w	r9,r8
80008808:	c0 84       	brge	80008818 <_vfprintf_r+0xfa8>
8000880a:	fa ca f9 44 	sub	r10,sp,-1724
8000880e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008812:	ec f9 fd 88 	ld.w	r9,r6[-632]
80008816:	c1 78       	rjmp	80008844 <_vfprintf_r+0xfd4>
80008818:	41 09       	lddsp	r9,sp[0x40]
8000881a:	59 f8       	cp.w	r8,31
8000881c:	e0 89 00 10 	brgt	8000883c <_vfprintf_r+0xfcc>
80008820:	f2 ca ff fc 	sub	r10,r9,-4
80008824:	51 0a       	stdsp	sp[0x40],r10
80008826:	fa c6 f9 44 	sub	r6,sp,-1724
8000882a:	72 09       	ld.w	r9,r9[0x0]
8000882c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80008830:	f5 49 fd 88 	st.w	r10[-632],r9
80008834:	2f f8       	sub	r8,-1
80008836:	fb 48 06 b4 	st.w	sp[1716],r8
8000883a:	c0 58       	rjmp	80008844 <_vfprintf_r+0xfd4>
8000883c:	f2 c8 ff fc 	sub	r8,r9,-4
80008840:	51 08       	stdsp	sp[0x40],r8
80008842:	72 09       	ld.w	r9,r9[0x0]
80008844:	33 08       	mov	r8,48
80008846:	fb 68 06 b8 	st.b	sp[1720],r8
8000884a:	37 88       	mov	r8,120
8000884c:	30 0e       	mov	lr,0
8000884e:	fb 68 06 b9 	st.b	sp[1721],r8
80008852:	fe cc c4 1e 	sub	r12,pc,-15330
80008856:	50 19       	stdsp	sp[0x4],r9
80008858:	a1 b5       	sbr	r5,0x1
8000885a:	50 0e       	stdsp	sp[0x0],lr
8000885c:	50 dc       	stdsp	sp[0x34],r12
8000885e:	30 28       	mov	r8,2
80008860:	37 80       	mov	r0,120
80008862:	e0 8f 02 a3 	bral	80008da8 <_vfprintf_r+0x1538>
80008866:	50 a7       	stdsp	sp[0x28],r7
80008868:	50 80       	stdsp	sp[0x20],r0
8000886a:	10 90       	mov	r0,r8
8000886c:	30 08       	mov	r8,0
8000886e:	fb 68 06 bb 	st.b	sp[1723],r8
80008872:	0c 97       	mov	r7,r6
80008874:	04 94       	mov	r4,r2
80008876:	06 96       	mov	r6,r3
80008878:	02 92       	mov	r2,r1
8000887a:	40 93       	lddsp	r3,sp[0x24]
8000887c:	40 41       	lddsp	r1,sp[0x10]
8000887e:	0e 99       	mov	r9,r7
80008880:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008884:	40 3b       	lddsp	r11,sp[0xc]
80008886:	58 0b       	cp.w	r11,0
80008888:	c1 d0       	breq	800088c2 <_vfprintf_r+0x1052>
8000888a:	10 36       	cp.w	r6,r8
8000888c:	c0 64       	brge	80008898 <_vfprintf_r+0x1028>
8000888e:	fa ca f9 44 	sub	r10,sp,-1724
80008892:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008896:	c1 d8       	rjmp	800088d0 <_vfprintf_r+0x1060>
80008898:	fa c8 f9 50 	sub	r8,sp,-1712
8000889c:	1a d8       	st.w	--sp,r8
8000889e:	fa c8 fa b8 	sub	r8,sp,-1352
800088a2:	1a d8       	st.w	--sp,r8
800088a4:	fa c8 fb b4 	sub	r8,sp,-1100
800088a8:	0c 9b       	mov	r11,r6
800088aa:	1a d8       	st.w	--sp,r8
800088ac:	04 9a       	mov	r10,r2
800088ae:	fa c8 f9 40 	sub	r8,sp,-1728
800088b2:	fa c9 ff b4 	sub	r9,sp,-76
800088b6:	08 9c       	mov	r12,r4
800088b8:	fe b0 f6 44 	rcall	80007540 <get_arg>
800088bc:	2f dd       	sub	sp,-12
800088be:	78 06       	ld.w	r6,r12[0x0]
800088c0:	c2 08       	rjmp	80008900 <_vfprintf_r+0x1090>
800088c2:	2f f7       	sub	r7,-1
800088c4:	10 39       	cp.w	r9,r8
800088c6:	c0 84       	brge	800088d6 <_vfprintf_r+0x1066>
800088c8:	fa c9 f9 44 	sub	r9,sp,-1724
800088cc:	f2 06 00 36 	add	r6,r9,r6<<0x3
800088d0:	ec f6 fd 88 	ld.w	r6,r6[-632]
800088d4:	c1 68       	rjmp	80008900 <_vfprintf_r+0x1090>
800088d6:	41 09       	lddsp	r9,sp[0x40]
800088d8:	59 f8       	cp.w	r8,31
800088da:	e0 89 00 10 	brgt	800088fa <_vfprintf_r+0x108a>
800088de:	f2 ca ff fc 	sub	r10,r9,-4
800088e2:	51 0a       	stdsp	sp[0x40],r10
800088e4:	72 06       	ld.w	r6,r9[0x0]
800088e6:	fa ce f9 44 	sub	lr,sp,-1724
800088ea:	fc 08 00 39 	add	r9,lr,r8<<0x3
800088ee:	f3 46 fd 88 	st.w	r9[-632],r6
800088f2:	2f f8       	sub	r8,-1
800088f4:	fb 48 06 b4 	st.w	sp[1716],r8
800088f8:	c0 48       	rjmp	80008900 <_vfprintf_r+0x1090>
800088fa:	72 06       	ld.w	r6,r9[0x0]
800088fc:	2f c9       	sub	r9,-4
800088fe:	51 09       	stdsp	sp[0x40],r9
80008900:	40 2c       	lddsp	r12,sp[0x8]
80008902:	58 0c       	cp.w	r12,0
80008904:	c1 05       	brlt	80008924 <_vfprintf_r+0x10b4>
80008906:	18 9a       	mov	r10,r12
80008908:	30 0b       	mov	r11,0
8000890a:	0c 9c       	mov	r12,r6
8000890c:	e0 a0 10 fa 	rcall	8000ab00 <memchr>
80008910:	e0 80 02 df 	breq	80008ece <_vfprintf_r+0x165e>
80008914:	f8 06 01 02 	sub	r2,r12,r6
80008918:	40 2b       	lddsp	r11,sp[0x8]
8000891a:	16 32       	cp.w	r2,r11
8000891c:	e0 89 02 d9 	brgt	80008ece <_vfprintf_r+0x165e>
80008920:	e0 8f 02 d4 	bral	80008ec8 <_vfprintf_r+0x1658>
80008924:	30 0a       	mov	r10,0
80008926:	0c 9c       	mov	r12,r6
80008928:	50 2a       	stdsp	sp[0x8],r10
8000892a:	e0 a0 14 18 	rcall	8000b15a <strlen>
8000892e:	18 92       	mov	r2,r12
80008930:	e0 8f 02 d2 	bral	80008ed4 <_vfprintf_r+0x1664>
80008934:	50 a7       	stdsp	sp[0x28],r7
80008936:	50 80       	stdsp	sp[0x20],r0
80008938:	0c 97       	mov	r7,r6
8000893a:	04 94       	mov	r4,r2
8000893c:	06 96       	mov	r6,r3
8000893e:	02 92       	mov	r2,r1
80008940:	40 93       	lddsp	r3,sp[0x24]
80008942:	10 90       	mov	r0,r8
80008944:	40 41       	lddsp	r1,sp[0x10]
80008946:	a5 a5       	sbr	r5,0x4
80008948:	c0 a8       	rjmp	8000895c <_vfprintf_r+0x10ec>
8000894a:	50 a7       	stdsp	sp[0x28],r7
8000894c:	50 80       	stdsp	sp[0x20],r0
8000894e:	0c 97       	mov	r7,r6
80008950:	04 94       	mov	r4,r2
80008952:	06 96       	mov	r6,r3
80008954:	02 92       	mov	r2,r1
80008956:	40 93       	lddsp	r3,sp[0x24]
80008958:	10 90       	mov	r0,r8
8000895a:	40 41       	lddsp	r1,sp[0x10]
8000895c:	ed b5 00 05 	bld	r5,0x5
80008960:	c5 61       	brne	80008a0c <_vfprintf_r+0x119c>
80008962:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008966:	40 39       	lddsp	r9,sp[0xc]
80008968:	58 09       	cp.w	r9,0
8000896a:	c2 10       	breq	800089ac <_vfprintf_r+0x113c>
8000896c:	10 36       	cp.w	r6,r8
8000896e:	c0 74       	brge	8000897c <_vfprintf_r+0x110c>
80008970:	fa c8 f9 44 	sub	r8,sp,-1724
80008974:	f0 06 00 36 	add	r6,r8,r6<<0x3
80008978:	c2 38       	rjmp	800089be <_vfprintf_r+0x114e>
8000897a:	d7 03       	nop
8000897c:	fa c8 f9 50 	sub	r8,sp,-1712
80008980:	1a d8       	st.w	--sp,r8
80008982:	fa c8 fa b8 	sub	r8,sp,-1352
80008986:	1a d8       	st.w	--sp,r8
80008988:	fa c8 fb b4 	sub	r8,sp,-1100
8000898c:	1a d8       	st.w	--sp,r8
8000898e:	fa c8 f9 40 	sub	r8,sp,-1728
80008992:	fa c9 ff b4 	sub	r9,sp,-76
80008996:	04 9a       	mov	r10,r2
80008998:	0c 9b       	mov	r11,r6
8000899a:	08 9c       	mov	r12,r4
8000899c:	fe b0 f5 d2 	rcall	80007540 <get_arg>
800089a0:	2f dd       	sub	sp,-12
800089a2:	f8 e8 00 00 	ld.d	r8,r12[0]
800089a6:	fa e9 00 00 	st.d	sp[0],r8
800089aa:	c2 e8       	rjmp	80008a06 <_vfprintf_r+0x1196>
800089ac:	ee ca ff ff 	sub	r10,r7,-1
800089b0:	10 37       	cp.w	r7,r8
800089b2:	c0 b4       	brge	800089c8 <_vfprintf_r+0x1158>
800089b4:	fa c8 f9 44 	sub	r8,sp,-1724
800089b8:	14 97       	mov	r7,r10
800089ba:	f0 06 00 36 	add	r6,r8,r6<<0x3
800089be:	ec ea fd 88 	ld.d	r10,r6[-632]
800089c2:	fa eb 00 00 	st.d	sp[0],r10
800089c6:	c2 08       	rjmp	80008a06 <_vfprintf_r+0x1196>
800089c8:	41 09       	lddsp	r9,sp[0x40]
800089ca:	59 f8       	cp.w	r8,31
800089cc:	e0 89 00 16 	brgt	800089f8 <_vfprintf_r+0x1188>
800089d0:	f2 e6 00 00 	ld.d	r6,r9[0]
800089d4:	f2 cb ff f8 	sub	r11,r9,-8
800089d8:	fa e7 00 00 	st.d	sp[0],r6
800089dc:	51 0b       	stdsp	sp[0x40],r11
800089de:	fa c6 f9 44 	sub	r6,sp,-1724
800089e2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800089e6:	fa e6 00 00 	ld.d	r6,sp[0]
800089ea:	f2 e7 fd 88 	st.d	r9[-632],r6
800089ee:	2f f8       	sub	r8,-1
800089f0:	14 97       	mov	r7,r10
800089f2:	fb 48 06 b4 	st.w	sp[1716],r8
800089f6:	c0 88       	rjmp	80008a06 <_vfprintf_r+0x1196>
800089f8:	f2 e6 00 00 	ld.d	r6,r9[0]
800089fc:	2f 89       	sub	r9,-8
800089fe:	fa e7 00 00 	st.d	sp[0],r6
80008a02:	51 09       	stdsp	sp[0x40],r9
80008a04:	14 97       	mov	r7,r10
80008a06:	30 18       	mov	r8,1
80008a08:	e0 8f 01 d0 	bral	80008da8 <_vfprintf_r+0x1538>
80008a0c:	ed b5 00 04 	bld	r5,0x4
80008a10:	c1 61       	brne	80008a3c <_vfprintf_r+0x11cc>
80008a12:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008a16:	40 3e       	lddsp	lr,sp[0xc]
80008a18:	58 0e       	cp.w	lr,0
80008a1a:	c0 80       	breq	80008a2a <_vfprintf_r+0x11ba>
80008a1c:	10 36       	cp.w	r6,r8
80008a1e:	c6 74       	brge	80008aec <_vfprintf_r+0x127c>
80008a20:	fa cc f9 44 	sub	r12,sp,-1724
80008a24:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008a28:	c8 08       	rjmp	80008b28 <_vfprintf_r+0x12b8>
80008a2a:	ee ca ff ff 	sub	r10,r7,-1
80008a2e:	10 37       	cp.w	r7,r8
80008a30:	c7 f4       	brge	80008b2e <_vfprintf_r+0x12be>
80008a32:	fa cb f9 44 	sub	r11,sp,-1724
80008a36:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008a3a:	c7 68       	rjmp	80008b26 <_vfprintf_r+0x12b6>
80008a3c:	ed b5 00 06 	bld	r5,0x6
80008a40:	c4 a1       	brne	80008ad4 <_vfprintf_r+0x1264>
80008a42:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008a46:	40 3c       	lddsp	r12,sp[0xc]
80008a48:	58 0c       	cp.w	r12,0
80008a4a:	c1 d0       	breq	80008a84 <_vfprintf_r+0x1214>
80008a4c:	10 36       	cp.w	r6,r8
80008a4e:	c0 64       	brge	80008a5a <_vfprintf_r+0x11ea>
80008a50:	fa cb f9 44 	sub	r11,sp,-1724
80008a54:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008a58:	c1 f8       	rjmp	80008a96 <_vfprintf_r+0x1226>
80008a5a:	fa c8 f9 50 	sub	r8,sp,-1712
80008a5e:	1a d8       	st.w	--sp,r8
80008a60:	fa c8 fa b8 	sub	r8,sp,-1352
80008a64:	1a d8       	st.w	--sp,r8
80008a66:	fa c8 fb b4 	sub	r8,sp,-1100
80008a6a:	1a d8       	st.w	--sp,r8
80008a6c:	fa c8 f9 40 	sub	r8,sp,-1728
80008a70:	fa c9 ff b4 	sub	r9,sp,-76
80008a74:	04 9a       	mov	r10,r2
80008a76:	0c 9b       	mov	r11,r6
80008a78:	08 9c       	mov	r12,r4
80008a7a:	fe b0 f5 63 	rcall	80007540 <get_arg>
80008a7e:	2f dd       	sub	sp,-12
80008a80:	98 18       	ld.sh	r8,r12[0x2]
80008a82:	c2 68       	rjmp	80008ace <_vfprintf_r+0x125e>
80008a84:	ee ca ff ff 	sub	r10,r7,-1
80008a88:	10 37       	cp.w	r7,r8
80008a8a:	c0 94       	brge	80008a9c <_vfprintf_r+0x122c>
80008a8c:	fa c9 f9 44 	sub	r9,sp,-1724
80008a90:	14 97       	mov	r7,r10
80008a92:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008a96:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008a9a:	c1 a8       	rjmp	80008ace <_vfprintf_r+0x125e>
80008a9c:	41 09       	lddsp	r9,sp[0x40]
80008a9e:	59 f8       	cp.w	r8,31
80008aa0:	e0 89 00 13 	brgt	80008ac6 <_vfprintf_r+0x1256>
80008aa4:	f2 cb ff fc 	sub	r11,r9,-4
80008aa8:	51 0b       	stdsp	sp[0x40],r11
80008aaa:	72 09       	ld.w	r9,r9[0x0]
80008aac:	fa c6 f9 44 	sub	r6,sp,-1724
80008ab0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008ab4:	2f f8       	sub	r8,-1
80008ab6:	f7 49 fd 88 	st.w	r11[-632],r9
80008aba:	fb 48 06 b4 	st.w	sp[1716],r8
80008abe:	14 97       	mov	r7,r10
80008ac0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008ac4:	c0 58       	rjmp	80008ace <_vfprintf_r+0x125e>
80008ac6:	92 18       	ld.sh	r8,r9[0x2]
80008ac8:	14 97       	mov	r7,r10
80008aca:	2f c9       	sub	r9,-4
80008acc:	51 09       	stdsp	sp[0x40],r9
80008ace:	5c 78       	castu.h	r8
80008ad0:	50 18       	stdsp	sp[0x4],r8
80008ad2:	c4 68       	rjmp	80008b5e <_vfprintf_r+0x12ee>
80008ad4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008ad8:	40 3c       	lddsp	r12,sp[0xc]
80008ada:	58 0c       	cp.w	r12,0
80008adc:	c1 d0       	breq	80008b16 <_vfprintf_r+0x12a6>
80008ade:	10 36       	cp.w	r6,r8
80008ae0:	c0 64       	brge	80008aec <_vfprintf_r+0x127c>
80008ae2:	fa cb f9 44 	sub	r11,sp,-1724
80008ae6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008aea:	c1 f8       	rjmp	80008b28 <_vfprintf_r+0x12b8>
80008aec:	fa c8 f9 50 	sub	r8,sp,-1712
80008af0:	1a d8       	st.w	--sp,r8
80008af2:	fa c8 fa b8 	sub	r8,sp,-1352
80008af6:	0c 9b       	mov	r11,r6
80008af8:	1a d8       	st.w	--sp,r8
80008afa:	fa c8 fb b4 	sub	r8,sp,-1100
80008afe:	04 9a       	mov	r10,r2
80008b00:	1a d8       	st.w	--sp,r8
80008b02:	08 9c       	mov	r12,r4
80008b04:	fa c8 f9 40 	sub	r8,sp,-1728
80008b08:	fa c9 ff b4 	sub	r9,sp,-76
80008b0c:	fe b0 f5 1a 	rcall	80007540 <get_arg>
80008b10:	2f dd       	sub	sp,-12
80008b12:	78 0b       	ld.w	r11,r12[0x0]
80008b14:	c2 48       	rjmp	80008b5c <_vfprintf_r+0x12ec>
80008b16:	ee ca ff ff 	sub	r10,r7,-1
80008b1a:	10 37       	cp.w	r7,r8
80008b1c:	c0 94       	brge	80008b2e <_vfprintf_r+0x12be>
80008b1e:	fa c9 f9 44 	sub	r9,sp,-1724
80008b22:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008b26:	14 97       	mov	r7,r10
80008b28:	ec fb fd 88 	ld.w	r11,r6[-632]
80008b2c:	c1 88       	rjmp	80008b5c <_vfprintf_r+0x12ec>
80008b2e:	41 09       	lddsp	r9,sp[0x40]
80008b30:	59 f8       	cp.w	r8,31
80008b32:	e0 89 00 11 	brgt	80008b54 <_vfprintf_r+0x12e4>
80008b36:	f2 cb ff fc 	sub	r11,r9,-4
80008b3a:	51 0b       	stdsp	sp[0x40],r11
80008b3c:	fa c6 f9 44 	sub	r6,sp,-1724
80008b40:	72 0b       	ld.w	r11,r9[0x0]
80008b42:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008b46:	f3 4b fd 88 	st.w	r9[-632],r11
80008b4a:	2f f8       	sub	r8,-1
80008b4c:	14 97       	mov	r7,r10
80008b4e:	fb 48 06 b4 	st.w	sp[1716],r8
80008b52:	c0 58       	rjmp	80008b5c <_vfprintf_r+0x12ec>
80008b54:	72 0b       	ld.w	r11,r9[0x0]
80008b56:	14 97       	mov	r7,r10
80008b58:	2f c9       	sub	r9,-4
80008b5a:	51 09       	stdsp	sp[0x40],r9
80008b5c:	50 1b       	stdsp	sp[0x4],r11
80008b5e:	30 0e       	mov	lr,0
80008b60:	30 18       	mov	r8,1
80008b62:	50 0e       	stdsp	sp[0x0],lr
80008b64:	c2 29       	rjmp	80008da8 <_vfprintf_r+0x1538>
80008b66:	50 a7       	stdsp	sp[0x28],r7
80008b68:	50 80       	stdsp	sp[0x20],r0
80008b6a:	0c 97       	mov	r7,r6
80008b6c:	04 94       	mov	r4,r2
80008b6e:	06 96       	mov	r6,r3
80008b70:	02 92       	mov	r2,r1
80008b72:	fe cc c7 3e 	sub	r12,pc,-14530
80008b76:	40 93       	lddsp	r3,sp[0x24]
80008b78:	10 90       	mov	r0,r8
80008b7a:	40 41       	lddsp	r1,sp[0x10]
80008b7c:	50 dc       	stdsp	sp[0x34],r12
80008b7e:	ed b5 00 05 	bld	r5,0x5
80008b82:	c5 51       	brne	80008c2c <_vfprintf_r+0x13bc>
80008b84:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008b88:	40 3b       	lddsp	r11,sp[0xc]
80008b8a:	58 0b       	cp.w	r11,0
80008b8c:	c2 20       	breq	80008bd0 <_vfprintf_r+0x1360>
80008b8e:	10 36       	cp.w	r6,r8
80008b90:	c0 a4       	brge	80008ba4 <_vfprintf_r+0x1334>
80008b92:	fa ca f9 44 	sub	r10,sp,-1724
80008b96:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008b9a:	ec e8 fd 88 	ld.d	r8,r6[-632]
80008b9e:	fa e9 00 00 	st.d	sp[0],r8
80008ba2:	cf 28       	rjmp	80008d86 <_vfprintf_r+0x1516>
80008ba4:	fa c8 f9 50 	sub	r8,sp,-1712
80008ba8:	1a d8       	st.w	--sp,r8
80008baa:	fa c8 fa b8 	sub	r8,sp,-1352
80008bae:	04 9a       	mov	r10,r2
80008bb0:	1a d8       	st.w	--sp,r8
80008bb2:	0c 9b       	mov	r11,r6
80008bb4:	fa c8 fb b4 	sub	r8,sp,-1100
80008bb8:	08 9c       	mov	r12,r4
80008bba:	1a d8       	st.w	--sp,r8
80008bbc:	fa c8 f9 40 	sub	r8,sp,-1728
80008bc0:	fa c9 ff b4 	sub	r9,sp,-76
80008bc4:	fe b0 f4 be 	rcall	80007540 <get_arg>
80008bc8:	2f dd       	sub	sp,-12
80008bca:	f8 ea 00 00 	ld.d	r10,r12[0]
80008bce:	c0 c8       	rjmp	80008be6 <_vfprintf_r+0x1376>
80008bd0:	ee ca ff ff 	sub	r10,r7,-1
80008bd4:	10 37       	cp.w	r7,r8
80008bd6:	c0 b4       	brge	80008bec <_vfprintf_r+0x137c>
80008bd8:	fa c9 f9 44 	sub	r9,sp,-1724
80008bdc:	14 97       	mov	r7,r10
80008bde:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008be2:	ec ea fd 88 	ld.d	r10,r6[-632]
80008be6:	fa eb 00 00 	st.d	sp[0],r10
80008bea:	cc e8       	rjmp	80008d86 <_vfprintf_r+0x1516>
80008bec:	41 09       	lddsp	r9,sp[0x40]
80008bee:	59 f8       	cp.w	r8,31
80008bf0:	e0 89 00 16 	brgt	80008c1c <_vfprintf_r+0x13ac>
80008bf4:	f2 e6 00 00 	ld.d	r6,r9[0]
80008bf8:	f2 cb ff f8 	sub	r11,r9,-8
80008bfc:	fa e7 00 00 	st.d	sp[0],r6
80008c00:	51 0b       	stdsp	sp[0x40],r11
80008c02:	fa c6 f9 44 	sub	r6,sp,-1724
80008c06:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008c0a:	fa e6 00 00 	ld.d	r6,sp[0]
80008c0e:	f2 e7 fd 88 	st.d	r9[-632],r6
80008c12:	2f f8       	sub	r8,-1
80008c14:	14 97       	mov	r7,r10
80008c16:	fb 48 06 b4 	st.w	sp[1716],r8
80008c1a:	cb 68       	rjmp	80008d86 <_vfprintf_r+0x1516>
80008c1c:	f2 e6 00 00 	ld.d	r6,r9[0]
80008c20:	2f 89       	sub	r9,-8
80008c22:	fa e7 00 00 	st.d	sp[0],r6
80008c26:	51 09       	stdsp	sp[0x40],r9
80008c28:	14 97       	mov	r7,r10
80008c2a:	ca e8       	rjmp	80008d86 <_vfprintf_r+0x1516>
80008c2c:	ed b5 00 04 	bld	r5,0x4
80008c30:	c1 71       	brne	80008c5e <_vfprintf_r+0x13ee>
80008c32:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008c36:	40 3e       	lddsp	lr,sp[0xc]
80008c38:	58 0e       	cp.w	lr,0
80008c3a:	c0 80       	breq	80008c4a <_vfprintf_r+0x13da>
80008c3c:	10 36       	cp.w	r6,r8
80008c3e:	c6 94       	brge	80008d10 <_vfprintf_r+0x14a0>
80008c40:	fa cc f9 44 	sub	r12,sp,-1724
80008c44:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008c48:	c8 28       	rjmp	80008d4c <_vfprintf_r+0x14dc>
80008c4a:	ee ca ff ff 	sub	r10,r7,-1
80008c4e:	10 37       	cp.w	r7,r8
80008c50:	e0 84 00 81 	brge	80008d52 <_vfprintf_r+0x14e2>
80008c54:	fa cb f9 44 	sub	r11,sp,-1724
80008c58:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008c5c:	c7 78       	rjmp	80008d4a <_vfprintf_r+0x14da>
80008c5e:	ed b5 00 06 	bld	r5,0x6
80008c62:	c4 b1       	brne	80008cf8 <_vfprintf_r+0x1488>
80008c64:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008c68:	40 3c       	lddsp	r12,sp[0xc]
80008c6a:	58 0c       	cp.w	r12,0
80008c6c:	c1 d0       	breq	80008ca6 <_vfprintf_r+0x1436>
80008c6e:	10 36       	cp.w	r6,r8
80008c70:	c0 64       	brge	80008c7c <_vfprintf_r+0x140c>
80008c72:	fa cb f9 44 	sub	r11,sp,-1724
80008c76:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008c7a:	c1 f8       	rjmp	80008cb8 <_vfprintf_r+0x1448>
80008c7c:	fa c8 f9 50 	sub	r8,sp,-1712
80008c80:	1a d8       	st.w	--sp,r8
80008c82:	fa c8 fa b8 	sub	r8,sp,-1352
80008c86:	1a d8       	st.w	--sp,r8
80008c88:	fa c8 fb b4 	sub	r8,sp,-1100
80008c8c:	1a d8       	st.w	--sp,r8
80008c8e:	fa c8 f9 40 	sub	r8,sp,-1728
80008c92:	fa c9 ff b4 	sub	r9,sp,-76
80008c96:	04 9a       	mov	r10,r2
80008c98:	0c 9b       	mov	r11,r6
80008c9a:	08 9c       	mov	r12,r4
80008c9c:	fe b0 f4 52 	rcall	80007540 <get_arg>
80008ca0:	2f dd       	sub	sp,-12
80008ca2:	98 18       	ld.sh	r8,r12[0x2]
80008ca4:	c2 78       	rjmp	80008cf2 <_vfprintf_r+0x1482>
80008ca6:	ee ca ff ff 	sub	r10,r7,-1
80008caa:	10 37       	cp.w	r7,r8
80008cac:	c0 a4       	brge	80008cc0 <_vfprintf_r+0x1450>
80008cae:	fa c9 f9 44 	sub	r9,sp,-1724
80008cb2:	14 97       	mov	r7,r10
80008cb4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008cb8:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008cbc:	c1 b8       	rjmp	80008cf2 <_vfprintf_r+0x1482>
80008cbe:	d7 03       	nop
80008cc0:	41 09       	lddsp	r9,sp[0x40]
80008cc2:	59 f8       	cp.w	r8,31
80008cc4:	e0 89 00 13 	brgt	80008cea <_vfprintf_r+0x147a>
80008cc8:	f2 cb ff fc 	sub	r11,r9,-4
80008ccc:	51 0b       	stdsp	sp[0x40],r11
80008cce:	72 09       	ld.w	r9,r9[0x0]
80008cd0:	fa c6 f9 44 	sub	r6,sp,-1724
80008cd4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008cd8:	2f f8       	sub	r8,-1
80008cda:	f7 49 fd 88 	st.w	r11[-632],r9
80008cde:	fb 48 06 b4 	st.w	sp[1716],r8
80008ce2:	14 97       	mov	r7,r10
80008ce4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008ce8:	c0 58       	rjmp	80008cf2 <_vfprintf_r+0x1482>
80008cea:	92 18       	ld.sh	r8,r9[0x2]
80008cec:	14 97       	mov	r7,r10
80008cee:	2f c9       	sub	r9,-4
80008cf0:	51 09       	stdsp	sp[0x40],r9
80008cf2:	5c 78       	castu.h	r8
80008cf4:	50 18       	stdsp	sp[0x4],r8
80008cf6:	c4 68       	rjmp	80008d82 <_vfprintf_r+0x1512>
80008cf8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008cfc:	40 3c       	lddsp	r12,sp[0xc]
80008cfe:	58 0c       	cp.w	r12,0
80008d00:	c1 d0       	breq	80008d3a <_vfprintf_r+0x14ca>
80008d02:	10 36       	cp.w	r6,r8
80008d04:	c0 64       	brge	80008d10 <_vfprintf_r+0x14a0>
80008d06:	fa cb f9 44 	sub	r11,sp,-1724
80008d0a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008d0e:	c1 f8       	rjmp	80008d4c <_vfprintf_r+0x14dc>
80008d10:	fa c8 f9 50 	sub	r8,sp,-1712
80008d14:	1a d8       	st.w	--sp,r8
80008d16:	fa c8 fa b8 	sub	r8,sp,-1352
80008d1a:	0c 9b       	mov	r11,r6
80008d1c:	1a d8       	st.w	--sp,r8
80008d1e:	fa c8 fb b4 	sub	r8,sp,-1100
80008d22:	04 9a       	mov	r10,r2
80008d24:	1a d8       	st.w	--sp,r8
80008d26:	08 9c       	mov	r12,r4
80008d28:	fa c8 f9 40 	sub	r8,sp,-1728
80008d2c:	fa c9 ff b4 	sub	r9,sp,-76
80008d30:	fe b0 f4 08 	rcall	80007540 <get_arg>
80008d34:	2f dd       	sub	sp,-12
80008d36:	78 0b       	ld.w	r11,r12[0x0]
80008d38:	c2 48       	rjmp	80008d80 <_vfprintf_r+0x1510>
80008d3a:	ee ca ff ff 	sub	r10,r7,-1
80008d3e:	10 37       	cp.w	r7,r8
80008d40:	c0 94       	brge	80008d52 <_vfprintf_r+0x14e2>
80008d42:	fa c9 f9 44 	sub	r9,sp,-1724
80008d46:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008d4a:	14 97       	mov	r7,r10
80008d4c:	ec fb fd 88 	ld.w	r11,r6[-632]
80008d50:	c1 88       	rjmp	80008d80 <_vfprintf_r+0x1510>
80008d52:	41 09       	lddsp	r9,sp[0x40]
80008d54:	59 f8       	cp.w	r8,31
80008d56:	e0 89 00 11 	brgt	80008d78 <_vfprintf_r+0x1508>
80008d5a:	f2 cb ff fc 	sub	r11,r9,-4
80008d5e:	51 0b       	stdsp	sp[0x40],r11
80008d60:	fa c6 f9 44 	sub	r6,sp,-1724
80008d64:	72 0b       	ld.w	r11,r9[0x0]
80008d66:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008d6a:	f3 4b fd 88 	st.w	r9[-632],r11
80008d6e:	2f f8       	sub	r8,-1
80008d70:	14 97       	mov	r7,r10
80008d72:	fb 48 06 b4 	st.w	sp[1716],r8
80008d76:	c0 58       	rjmp	80008d80 <_vfprintf_r+0x1510>
80008d78:	72 0b       	ld.w	r11,r9[0x0]
80008d7a:	14 97       	mov	r7,r10
80008d7c:	2f c9       	sub	r9,-4
80008d7e:	51 09       	stdsp	sp[0x40],r9
80008d80:	50 1b       	stdsp	sp[0x4],r11
80008d82:	30 0e       	mov	lr,0
80008d84:	50 0e       	stdsp	sp[0x0],lr
80008d86:	40 08       	lddsp	r8,sp[0x0]
80008d88:	40 1c       	lddsp	r12,sp[0x4]
80008d8a:	18 48       	or	r8,r12
80008d8c:	5f 19       	srne	r9
80008d8e:	0a 98       	mov	r8,r5
80008d90:	eb e9 00 09 	and	r9,r5,r9
80008d94:	a1 b8       	sbr	r8,0x1
80008d96:	58 09       	cp.w	r9,0
80008d98:	c0 70       	breq	80008da6 <_vfprintf_r+0x1536>
80008d9a:	10 95       	mov	r5,r8
80008d9c:	fb 60 06 b9 	st.b	sp[1721],r0
80008da0:	33 08       	mov	r8,48
80008da2:	fb 68 06 b8 	st.b	sp[1720],r8
80008da6:	30 28       	mov	r8,2
80008da8:	30 09       	mov	r9,0
80008daa:	fb 69 06 bb 	st.b	sp[1723],r9
80008dae:	0a 99       	mov	r9,r5
80008db0:	a7 d9       	cbr	r9,0x7
80008db2:	40 2b       	lddsp	r11,sp[0x8]
80008db4:	40 16       	lddsp	r6,sp[0x4]
80008db6:	58 0b       	cp.w	r11,0
80008db8:	5f 1a       	srne	r10
80008dba:	f2 05 17 40 	movge	r5,r9
80008dbe:	fa c2 f9 78 	sub	r2,sp,-1672
80008dc2:	40 09       	lddsp	r9,sp[0x0]
80008dc4:	0c 49       	or	r9,r6
80008dc6:	5f 19       	srne	r9
80008dc8:	f5 e9 10 09 	or	r9,r10,r9
80008dcc:	c5 c0       	breq	80008e84 <_vfprintf_r+0x1614>
80008dce:	30 19       	mov	r9,1
80008dd0:	f2 08 18 00 	cp.b	r8,r9
80008dd4:	c0 60       	breq	80008de0 <_vfprintf_r+0x1570>
80008dd6:	30 29       	mov	r9,2
80008dd8:	f2 08 18 00 	cp.b	r8,r9
80008ddc:	c0 41       	brne	80008de4 <_vfprintf_r+0x1574>
80008dde:	c3 c8       	rjmp	80008e56 <_vfprintf_r+0x15e6>
80008de0:	04 96       	mov	r6,r2
80008de2:	c3 08       	rjmp	80008e42 <_vfprintf_r+0x15d2>
80008de4:	04 96       	mov	r6,r2
80008de6:	fa e8 00 00 	ld.d	r8,sp[0]
80008dea:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80008dee:	2d 0a       	sub	r10,-48
80008df0:	0c fa       	st.b	--r6,r10
80008df2:	f0 0b 16 03 	lsr	r11,r8,0x3
80008df6:	f2 0c 16 03 	lsr	r12,r9,0x3
80008dfa:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80008dfe:	18 99       	mov	r9,r12
80008e00:	16 98       	mov	r8,r11
80008e02:	58 08       	cp.w	r8,0
80008e04:	5c 29       	cpc	r9
80008e06:	cf 21       	brne	80008dea <_vfprintf_r+0x157a>
80008e08:	fa e9 00 00 	st.d	sp[0],r8
80008e0c:	ed b5 00 00 	bld	r5,0x0
80008e10:	c4 51       	brne	80008e9a <_vfprintf_r+0x162a>
80008e12:	33 09       	mov	r9,48
80008e14:	f2 0a 18 00 	cp.b	r10,r9
80008e18:	c4 10       	breq	80008e9a <_vfprintf_r+0x162a>
80008e1a:	0c f9       	st.b	--r6,r9
80008e1c:	c3 f8       	rjmp	80008e9a <_vfprintf_r+0x162a>
80008e1e:	fa ea 00 00 	ld.d	r10,sp[0]
80008e22:	30 a8       	mov	r8,10
80008e24:	30 09       	mov	r9,0
80008e26:	e0 a0 16 b5 	rcall	8000bb90 <__avr32_umod64>
80008e2a:	30 a8       	mov	r8,10
80008e2c:	2d 0a       	sub	r10,-48
80008e2e:	30 09       	mov	r9,0
80008e30:	ac 8a       	st.b	r6[0x0],r10
80008e32:	fa ea 00 00 	ld.d	r10,sp[0]
80008e36:	fe b0 ea 59 	rcall	800062e8 <__avr32_udiv64>
80008e3a:	16 99       	mov	r9,r11
80008e3c:	14 98       	mov	r8,r10
80008e3e:	fa e9 00 00 	st.d	sp[0],r8
80008e42:	20 16       	sub	r6,1
80008e44:	fa ea 00 00 	ld.d	r10,sp[0]
80008e48:	58 9a       	cp.w	r10,9
80008e4a:	5c 2b       	cpc	r11
80008e4c:	fe 9b ff e9 	brhi	80008e1e <_vfprintf_r+0x15ae>
80008e50:	1b f8       	ld.ub	r8,sp[0x7]
80008e52:	2d 08       	sub	r8,-48
80008e54:	c2 08       	rjmp	80008e94 <_vfprintf_r+0x1624>
80008e56:	04 96       	mov	r6,r2
80008e58:	fa e8 00 00 	ld.d	r8,sp[0]
80008e5c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80008e60:	40 de       	lddsp	lr,sp[0x34]
80008e62:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80008e66:	0c fa       	st.b	--r6,r10
80008e68:	f2 0b 16 04 	lsr	r11,r9,0x4
80008e6c:	f0 0a 16 04 	lsr	r10,r8,0x4
80008e70:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80008e74:	16 99       	mov	r9,r11
80008e76:	14 98       	mov	r8,r10
80008e78:	58 08       	cp.w	r8,0
80008e7a:	5c 29       	cpc	r9
80008e7c:	cf 01       	brne	80008e5c <_vfprintf_r+0x15ec>
80008e7e:	fa e9 00 00 	st.d	sp[0],r8
80008e82:	c0 c8       	rjmp	80008e9a <_vfprintf_r+0x162a>
80008e84:	58 08       	cp.w	r8,0
80008e86:	c0 91       	brne	80008e98 <_vfprintf_r+0x1628>
80008e88:	ed b5 00 00 	bld	r5,0x0
80008e8c:	c0 61       	brne	80008e98 <_vfprintf_r+0x1628>
80008e8e:	fa c6 f9 79 	sub	r6,sp,-1671
80008e92:	33 08       	mov	r8,48
80008e94:	ac 88       	st.b	r6[0x0],r8
80008e96:	c0 28       	rjmp	80008e9a <_vfprintf_r+0x162a>
80008e98:	04 96       	mov	r6,r2
80008e9a:	0c 12       	sub	r2,r6
80008e9c:	c1 c8       	rjmp	80008ed4 <_vfprintf_r+0x1664>
80008e9e:	50 a7       	stdsp	sp[0x28],r7
80008ea0:	50 80       	stdsp	sp[0x20],r0
80008ea2:	40 93       	lddsp	r3,sp[0x24]
80008ea4:	0c 97       	mov	r7,r6
80008ea6:	10 90       	mov	r0,r8
80008ea8:	04 94       	mov	r4,r2
80008eaa:	40 41       	lddsp	r1,sp[0x10]
80008eac:	58 08       	cp.w	r8,0
80008eae:	e0 80 04 4f 	breq	8000974c <_vfprintf_r+0x1edc>
80008eb2:	fb 68 06 60 	st.b	sp[1632],r8
80008eb6:	30 0c       	mov	r12,0
80008eb8:	30 08       	mov	r8,0
80008eba:	30 12       	mov	r2,1
80008ebc:	fb 68 06 bb 	st.b	sp[1723],r8
80008ec0:	50 2c       	stdsp	sp[0x8],r12
80008ec2:	fa c6 f9 a0 	sub	r6,sp,-1632
80008ec6:	c0 78       	rjmp	80008ed4 <_vfprintf_r+0x1664>
80008ec8:	30 0b       	mov	r11,0
80008eca:	50 2b       	stdsp	sp[0x8],r11
80008ecc:	c0 48       	rjmp	80008ed4 <_vfprintf_r+0x1664>
80008ece:	40 22       	lddsp	r2,sp[0x8]
80008ed0:	30 0a       	mov	r10,0
80008ed2:	50 2a       	stdsp	sp[0x8],r10
80008ed4:	40 29       	lddsp	r9,sp[0x8]
80008ed6:	e4 09 0c 49 	max	r9,r2,r9
80008eda:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80008ede:	50 39       	stdsp	sp[0xc],r9
80008ee0:	0a 9e       	mov	lr,r5
80008ee2:	30 09       	mov	r9,0
80008ee4:	e2 1e 00 02 	andl	lr,0x2,COH
80008ee8:	f2 08 18 00 	cp.b	r8,r9
80008eec:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80008ef0:	f7 b8 01 ff 	subne	r8,-1
80008ef4:	fb f8 1a 03 	st.wne	sp[0xc],r8
80008ef8:	0a 9b       	mov	r11,r5
80008efa:	58 0e       	cp.w	lr,0
80008efc:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80008f00:	f7 bc 01 fe 	subne	r12,-2
80008f04:	fb fc 1a 03 	st.wne	sp[0xc],r12
80008f08:	e2 1b 00 84 	andl	r11,0x84,COH
80008f0c:	50 fe       	stdsp	sp[0x3c],lr
80008f0e:	50 9b       	stdsp	sp[0x24],r11
80008f10:	c4 71       	brne	80008f9e <_vfprintf_r+0x172e>
80008f12:	40 8a       	lddsp	r10,sp[0x20]
80008f14:	40 39       	lddsp	r9,sp[0xc]
80008f16:	12 1a       	sub	r10,r9
80008f18:	50 4a       	stdsp	sp[0x10],r10
80008f1a:	58 0a       	cp.w	r10,0
80008f1c:	e0 89 00 20 	brgt	80008f5c <_vfprintf_r+0x16ec>
80008f20:	c3 f8       	rjmp	80008f9e <_vfprintf_r+0x172e>
80008f22:	2f 09       	sub	r9,-16
80008f24:	2f f8       	sub	r8,-1
80008f26:	fe ce ca da 	sub	lr,pc,-13606
80008f2a:	31 0c       	mov	r12,16
80008f2c:	fb 49 06 90 	st.w	sp[1680],r9
80008f30:	87 0e       	st.w	r3[0x0],lr
80008f32:	87 1c       	st.w	r3[0x4],r12
80008f34:	fb 48 06 8c 	st.w	sp[1676],r8
80008f38:	58 78       	cp.w	r8,7
80008f3a:	e0 89 00 04 	brgt	80008f42 <_vfprintf_r+0x16d2>
80008f3e:	2f 83       	sub	r3,-8
80008f40:	c0 b8       	rjmp	80008f56 <_vfprintf_r+0x16e6>
80008f42:	fa ca f9 78 	sub	r10,sp,-1672
80008f46:	02 9b       	mov	r11,r1
80008f48:	08 9c       	mov	r12,r4
80008f4a:	fe b0 f4 85 	rcall	80007854 <__sprint_r>
80008f4e:	e0 81 04 10 	brne	8000976e <_vfprintf_r+0x1efe>
80008f52:	fa c3 f9 e0 	sub	r3,sp,-1568
80008f56:	40 4b       	lddsp	r11,sp[0x10]
80008f58:	21 0b       	sub	r11,16
80008f5a:	50 4b       	stdsp	sp[0x10],r11
80008f5c:	fa f9 06 90 	ld.w	r9,sp[1680]
80008f60:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008f64:	fe ca cb 18 	sub	r10,pc,-13544
80008f68:	40 4e       	lddsp	lr,sp[0x10]
80008f6a:	59 0e       	cp.w	lr,16
80008f6c:	fe 99 ff db 	brgt	80008f22 <_vfprintf_r+0x16b2>
80008f70:	1c 09       	add	r9,lr
80008f72:	2f f8       	sub	r8,-1
80008f74:	87 0a       	st.w	r3[0x0],r10
80008f76:	fb 49 06 90 	st.w	sp[1680],r9
80008f7a:	87 1e       	st.w	r3[0x4],lr
80008f7c:	fb 48 06 8c 	st.w	sp[1676],r8
80008f80:	58 78       	cp.w	r8,7
80008f82:	e0 89 00 04 	brgt	80008f8a <_vfprintf_r+0x171a>
80008f86:	2f 83       	sub	r3,-8
80008f88:	c0 b8       	rjmp	80008f9e <_vfprintf_r+0x172e>
80008f8a:	fa ca f9 78 	sub	r10,sp,-1672
80008f8e:	02 9b       	mov	r11,r1
80008f90:	08 9c       	mov	r12,r4
80008f92:	fe b0 f4 61 	rcall	80007854 <__sprint_r>
80008f96:	e0 81 03 ec 	brne	8000976e <_vfprintf_r+0x1efe>
80008f9a:	fa c3 f9 e0 	sub	r3,sp,-1568
80008f9e:	30 09       	mov	r9,0
80008fa0:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80008fa4:	f2 08 18 00 	cp.b	r8,r9
80008fa8:	c1 f0       	breq	80008fe6 <_vfprintf_r+0x1776>
80008faa:	fa f8 06 90 	ld.w	r8,sp[1680]
80008fae:	fa c9 f9 45 	sub	r9,sp,-1723
80008fb2:	2f f8       	sub	r8,-1
80008fb4:	87 09       	st.w	r3[0x0],r9
80008fb6:	fb 48 06 90 	st.w	sp[1680],r8
80008fba:	30 19       	mov	r9,1
80008fbc:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008fc0:	87 19       	st.w	r3[0x4],r9
80008fc2:	2f f8       	sub	r8,-1
80008fc4:	fb 48 06 8c 	st.w	sp[1676],r8
80008fc8:	58 78       	cp.w	r8,7
80008fca:	e0 89 00 04 	brgt	80008fd2 <_vfprintf_r+0x1762>
80008fce:	2f 83       	sub	r3,-8
80008fd0:	c0 b8       	rjmp	80008fe6 <_vfprintf_r+0x1776>
80008fd2:	fa ca f9 78 	sub	r10,sp,-1672
80008fd6:	02 9b       	mov	r11,r1
80008fd8:	08 9c       	mov	r12,r4
80008fda:	fe b0 f4 3d 	rcall	80007854 <__sprint_r>
80008fde:	e0 81 03 c8 	brne	8000976e <_vfprintf_r+0x1efe>
80008fe2:	fa c3 f9 e0 	sub	r3,sp,-1568
80008fe6:	40 fc       	lddsp	r12,sp[0x3c]
80008fe8:	58 0c       	cp.w	r12,0
80008fea:	c1 f0       	breq	80009028 <_vfprintf_r+0x17b8>
80008fec:	fa f8 06 90 	ld.w	r8,sp[1680]
80008ff0:	fa c9 f9 48 	sub	r9,sp,-1720
80008ff4:	2f e8       	sub	r8,-2
80008ff6:	87 09       	st.w	r3[0x0],r9
80008ff8:	fb 48 06 90 	st.w	sp[1680],r8
80008ffc:	30 29       	mov	r9,2
80008ffe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009002:	87 19       	st.w	r3[0x4],r9
80009004:	2f f8       	sub	r8,-1
80009006:	fb 48 06 8c 	st.w	sp[1676],r8
8000900a:	58 78       	cp.w	r8,7
8000900c:	e0 89 00 04 	brgt	80009014 <_vfprintf_r+0x17a4>
80009010:	2f 83       	sub	r3,-8
80009012:	c0 b8       	rjmp	80009028 <_vfprintf_r+0x17b8>
80009014:	fa ca f9 78 	sub	r10,sp,-1672
80009018:	02 9b       	mov	r11,r1
8000901a:	08 9c       	mov	r12,r4
8000901c:	fe b0 f4 1c 	rcall	80007854 <__sprint_r>
80009020:	e0 81 03 a7 	brne	8000976e <_vfprintf_r+0x1efe>
80009024:	fa c3 f9 e0 	sub	r3,sp,-1568
80009028:	40 9b       	lddsp	r11,sp[0x24]
8000902a:	e0 4b 00 80 	cp.w	r11,128
8000902e:	c4 71       	brne	800090bc <_vfprintf_r+0x184c>
80009030:	40 8a       	lddsp	r10,sp[0x20]
80009032:	40 39       	lddsp	r9,sp[0xc]
80009034:	12 1a       	sub	r10,r9
80009036:	50 4a       	stdsp	sp[0x10],r10
80009038:	58 0a       	cp.w	r10,0
8000903a:	e0 89 00 20 	brgt	8000907a <_vfprintf_r+0x180a>
8000903e:	c3 f8       	rjmp	800090bc <_vfprintf_r+0x184c>
80009040:	2f 09       	sub	r9,-16
80009042:	2f f8       	sub	r8,-1
80009044:	fe ce cb e8 	sub	lr,pc,-13336
80009048:	31 0c       	mov	r12,16
8000904a:	fb 49 06 90 	st.w	sp[1680],r9
8000904e:	87 0e       	st.w	r3[0x0],lr
80009050:	87 1c       	st.w	r3[0x4],r12
80009052:	fb 48 06 8c 	st.w	sp[1676],r8
80009056:	58 78       	cp.w	r8,7
80009058:	e0 89 00 04 	brgt	80009060 <_vfprintf_r+0x17f0>
8000905c:	2f 83       	sub	r3,-8
8000905e:	c0 b8       	rjmp	80009074 <_vfprintf_r+0x1804>
80009060:	fa ca f9 78 	sub	r10,sp,-1672
80009064:	02 9b       	mov	r11,r1
80009066:	08 9c       	mov	r12,r4
80009068:	fe b0 f3 f6 	rcall	80007854 <__sprint_r>
8000906c:	e0 81 03 81 	brne	8000976e <_vfprintf_r+0x1efe>
80009070:	fa c3 f9 e0 	sub	r3,sp,-1568
80009074:	40 4b       	lddsp	r11,sp[0x10]
80009076:	21 0b       	sub	r11,16
80009078:	50 4b       	stdsp	sp[0x10],r11
8000907a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000907e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009082:	fe ca cc 26 	sub	r10,pc,-13274
80009086:	40 4e       	lddsp	lr,sp[0x10]
80009088:	59 0e       	cp.w	lr,16
8000908a:	fe 99 ff db 	brgt	80009040 <_vfprintf_r+0x17d0>
8000908e:	1c 09       	add	r9,lr
80009090:	2f f8       	sub	r8,-1
80009092:	87 0a       	st.w	r3[0x0],r10
80009094:	fb 49 06 90 	st.w	sp[1680],r9
80009098:	87 1e       	st.w	r3[0x4],lr
8000909a:	fb 48 06 8c 	st.w	sp[1676],r8
8000909e:	58 78       	cp.w	r8,7
800090a0:	e0 89 00 04 	brgt	800090a8 <_vfprintf_r+0x1838>
800090a4:	2f 83       	sub	r3,-8
800090a6:	c0 b8       	rjmp	800090bc <_vfprintf_r+0x184c>
800090a8:	fa ca f9 78 	sub	r10,sp,-1672
800090ac:	02 9b       	mov	r11,r1
800090ae:	08 9c       	mov	r12,r4
800090b0:	fe b0 f3 d2 	rcall	80007854 <__sprint_r>
800090b4:	e0 81 03 5d 	brne	8000976e <_vfprintf_r+0x1efe>
800090b8:	fa c3 f9 e0 	sub	r3,sp,-1568
800090bc:	40 2c       	lddsp	r12,sp[0x8]
800090be:	04 1c       	sub	r12,r2
800090c0:	50 2c       	stdsp	sp[0x8],r12
800090c2:	58 0c       	cp.w	r12,0
800090c4:	e0 89 00 20 	brgt	80009104 <_vfprintf_r+0x1894>
800090c8:	c3 f8       	rjmp	80009146 <_vfprintf_r+0x18d6>
800090ca:	2f 09       	sub	r9,-16
800090cc:	2f f8       	sub	r8,-1
800090ce:	fe cb cc 72 	sub	r11,pc,-13198
800090d2:	31 0a       	mov	r10,16
800090d4:	fb 49 06 90 	st.w	sp[1680],r9
800090d8:	87 0b       	st.w	r3[0x0],r11
800090da:	87 1a       	st.w	r3[0x4],r10
800090dc:	fb 48 06 8c 	st.w	sp[1676],r8
800090e0:	58 78       	cp.w	r8,7
800090e2:	e0 89 00 04 	brgt	800090ea <_vfprintf_r+0x187a>
800090e6:	2f 83       	sub	r3,-8
800090e8:	c0 b8       	rjmp	800090fe <_vfprintf_r+0x188e>
800090ea:	fa ca f9 78 	sub	r10,sp,-1672
800090ee:	02 9b       	mov	r11,r1
800090f0:	08 9c       	mov	r12,r4
800090f2:	fe b0 f3 b1 	rcall	80007854 <__sprint_r>
800090f6:	e0 81 03 3c 	brne	8000976e <_vfprintf_r+0x1efe>
800090fa:	fa c3 f9 e0 	sub	r3,sp,-1568
800090fe:	40 29       	lddsp	r9,sp[0x8]
80009100:	21 09       	sub	r9,16
80009102:	50 29       	stdsp	sp[0x8],r9
80009104:	fa f9 06 90 	ld.w	r9,sp[1680]
80009108:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000910c:	fe ca cc b0 	sub	r10,pc,-13136
80009110:	40 2e       	lddsp	lr,sp[0x8]
80009112:	59 0e       	cp.w	lr,16
80009114:	fe 99 ff db 	brgt	800090ca <_vfprintf_r+0x185a>
80009118:	1c 09       	add	r9,lr
8000911a:	2f f8       	sub	r8,-1
8000911c:	87 0a       	st.w	r3[0x0],r10
8000911e:	fb 49 06 90 	st.w	sp[1680],r9
80009122:	87 1e       	st.w	r3[0x4],lr
80009124:	fb 48 06 8c 	st.w	sp[1676],r8
80009128:	58 78       	cp.w	r8,7
8000912a:	e0 89 00 04 	brgt	80009132 <_vfprintf_r+0x18c2>
8000912e:	2f 83       	sub	r3,-8
80009130:	c0 b8       	rjmp	80009146 <_vfprintf_r+0x18d6>
80009132:	fa ca f9 78 	sub	r10,sp,-1672
80009136:	02 9b       	mov	r11,r1
80009138:	08 9c       	mov	r12,r4
8000913a:	fe b0 f3 8d 	rcall	80007854 <__sprint_r>
8000913e:	e0 81 03 18 	brne	8000976e <_vfprintf_r+0x1efe>
80009142:	fa c3 f9 e0 	sub	r3,sp,-1568
80009146:	ed b5 00 08 	bld	r5,0x8
8000914a:	c0 b0       	breq	80009160 <_vfprintf_r+0x18f0>
8000914c:	fa f8 06 90 	ld.w	r8,sp[1680]
80009150:	87 12       	st.w	r3[0x4],r2
80009152:	87 06       	st.w	r3[0x0],r6
80009154:	f0 02 00 02 	add	r2,r8,r2
80009158:	fb 42 06 90 	st.w	sp[1680],r2
8000915c:	e0 8f 01 d4 	bral	80009504 <_vfprintf_r+0x1c94>
80009160:	e0 40 00 65 	cp.w	r0,101
80009164:	e0 8a 01 d6 	brle	80009510 <_vfprintf_r+0x1ca0>
80009168:	30 08       	mov	r8,0
8000916a:	30 09       	mov	r9,0
8000916c:	40 5b       	lddsp	r11,sp[0x14]
8000916e:	40 7a       	lddsp	r10,sp[0x1c]
80009170:	e0 a0 13 09 	rcall	8000b782 <__avr32_f64_cmp_eq>
80009174:	c7 90       	breq	80009266 <_vfprintf_r+0x19f6>
80009176:	fa f8 06 90 	ld.w	r8,sp[1680]
8000917a:	fe c9 cd 32 	sub	r9,pc,-13006
8000917e:	2f f8       	sub	r8,-1
80009180:	87 09       	st.w	r3[0x0],r9
80009182:	fb 48 06 90 	st.w	sp[1680],r8
80009186:	30 19       	mov	r9,1
80009188:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000918c:	87 19       	st.w	r3[0x4],r9
8000918e:	2f f8       	sub	r8,-1
80009190:	fb 48 06 8c 	st.w	sp[1676],r8
80009194:	58 78       	cp.w	r8,7
80009196:	e0 89 00 05 	brgt	800091a0 <_vfprintf_r+0x1930>
8000919a:	2f 83       	sub	r3,-8
8000919c:	c0 c8       	rjmp	800091b4 <_vfprintf_r+0x1944>
8000919e:	d7 03       	nop
800091a0:	fa ca f9 78 	sub	r10,sp,-1672
800091a4:	02 9b       	mov	r11,r1
800091a6:	08 9c       	mov	r12,r4
800091a8:	fe b0 f3 56 	rcall	80007854 <__sprint_r>
800091ac:	e0 81 02 e1 	brne	8000976e <_vfprintf_r+0x1efe>
800091b0:	fa c3 f9 e0 	sub	r3,sp,-1568
800091b4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800091b8:	40 6c       	lddsp	r12,sp[0x18]
800091ba:	18 38       	cp.w	r8,r12
800091bc:	c0 55       	brlt	800091c6 <_vfprintf_r+0x1956>
800091be:	ed b5 00 00 	bld	r5,0x0
800091c2:	e0 81 02 6b 	brne	80009698 <_vfprintf_r+0x1e28>
800091c6:	fa f8 06 90 	ld.w	r8,sp[1680]
800091ca:	2f f8       	sub	r8,-1
800091cc:	40 cb       	lddsp	r11,sp[0x30]
800091ce:	fb 48 06 90 	st.w	sp[1680],r8
800091d2:	30 19       	mov	r9,1
800091d4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800091d8:	87 0b       	st.w	r3[0x0],r11
800091da:	2f f8       	sub	r8,-1
800091dc:	87 19       	st.w	r3[0x4],r9
800091de:	fb 48 06 8c 	st.w	sp[1676],r8
800091e2:	58 78       	cp.w	r8,7
800091e4:	e0 89 00 04 	brgt	800091ec <_vfprintf_r+0x197c>
800091e8:	2f 83       	sub	r3,-8
800091ea:	c0 b8       	rjmp	80009200 <_vfprintf_r+0x1990>
800091ec:	fa ca f9 78 	sub	r10,sp,-1672
800091f0:	02 9b       	mov	r11,r1
800091f2:	08 9c       	mov	r12,r4
800091f4:	fe b0 f3 30 	rcall	80007854 <__sprint_r>
800091f8:	e0 81 02 bb 	brne	8000976e <_vfprintf_r+0x1efe>
800091fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80009200:	40 66       	lddsp	r6,sp[0x18]
80009202:	20 16       	sub	r6,1
80009204:	58 06       	cp.w	r6,0
80009206:	e0 89 00 1d 	brgt	80009240 <_vfprintf_r+0x19d0>
8000920a:	e0 8f 02 47 	bral	80009698 <_vfprintf_r+0x1e28>
8000920e:	2f 09       	sub	r9,-16
80009210:	2f f8       	sub	r8,-1
80009212:	fb 49 06 90 	st.w	sp[1680],r9
80009216:	87 02       	st.w	r3[0x0],r2
80009218:	87 10       	st.w	r3[0x4],r0
8000921a:	fb 48 06 8c 	st.w	sp[1676],r8
8000921e:	58 78       	cp.w	r8,7
80009220:	e0 89 00 04 	brgt	80009228 <_vfprintf_r+0x19b8>
80009224:	2f 83       	sub	r3,-8
80009226:	c0 b8       	rjmp	8000923c <_vfprintf_r+0x19cc>
80009228:	fa ca f9 78 	sub	r10,sp,-1672
8000922c:	02 9b       	mov	r11,r1
8000922e:	08 9c       	mov	r12,r4
80009230:	fe b0 f3 12 	rcall	80007854 <__sprint_r>
80009234:	e0 81 02 9d 	brne	8000976e <_vfprintf_r+0x1efe>
80009238:	fa c3 f9 e0 	sub	r3,sp,-1568
8000923c:	21 06       	sub	r6,16
8000923e:	c0 48       	rjmp	80009246 <_vfprintf_r+0x19d6>
80009240:	fe c2 cd e4 	sub	r2,pc,-12828
80009244:	31 00       	mov	r0,16
80009246:	fa f9 06 90 	ld.w	r9,sp[1680]
8000924a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000924e:	fe ca cd f2 	sub	r10,pc,-12814
80009252:	59 06       	cp.w	r6,16
80009254:	fe 99 ff dd 	brgt	8000920e <_vfprintf_r+0x199e>
80009258:	0c 09       	add	r9,r6
8000925a:	87 0a       	st.w	r3[0x0],r10
8000925c:	fb 49 06 90 	st.w	sp[1680],r9
80009260:	2f f8       	sub	r8,-1
80009262:	87 16       	st.w	r3[0x4],r6
80009264:	c5 39       	rjmp	8000950a <_vfprintf_r+0x1c9a>
80009266:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000926a:	58 0a       	cp.w	r10,0
8000926c:	e0 89 00 92 	brgt	80009390 <_vfprintf_r+0x1b20>
80009270:	fa f8 06 90 	ld.w	r8,sp[1680]
80009274:	fe c9 ce 2c 	sub	r9,pc,-12756
80009278:	2f f8       	sub	r8,-1
8000927a:	87 09       	st.w	r3[0x0],r9
8000927c:	fb 48 06 90 	st.w	sp[1680],r8
80009280:	30 19       	mov	r9,1
80009282:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009286:	87 19       	st.w	r3[0x4],r9
80009288:	2f f8       	sub	r8,-1
8000928a:	fb 48 06 8c 	st.w	sp[1676],r8
8000928e:	58 78       	cp.w	r8,7
80009290:	e0 89 00 04 	brgt	80009298 <_vfprintf_r+0x1a28>
80009294:	2f 83       	sub	r3,-8
80009296:	c0 b8       	rjmp	800092ac <_vfprintf_r+0x1a3c>
80009298:	fa ca f9 78 	sub	r10,sp,-1672
8000929c:	02 9b       	mov	r11,r1
8000929e:	08 9c       	mov	r12,r4
800092a0:	fe b0 f2 da 	rcall	80007854 <__sprint_r>
800092a4:	e0 81 02 65 	brne	8000976e <_vfprintf_r+0x1efe>
800092a8:	fa c3 f9 e0 	sub	r3,sp,-1568
800092ac:	fa f8 06 ac 	ld.w	r8,sp[1708]
800092b0:	58 08       	cp.w	r8,0
800092b2:	c0 81       	brne	800092c2 <_vfprintf_r+0x1a52>
800092b4:	40 6a       	lddsp	r10,sp[0x18]
800092b6:	58 0a       	cp.w	r10,0
800092b8:	c0 51       	brne	800092c2 <_vfprintf_r+0x1a52>
800092ba:	ed b5 00 00 	bld	r5,0x0
800092be:	e0 81 01 ed 	brne	80009698 <_vfprintf_r+0x1e28>
800092c2:	40 c9       	lddsp	r9,sp[0x30]
800092c4:	fa f8 06 90 	ld.w	r8,sp[1680]
800092c8:	2f f8       	sub	r8,-1
800092ca:	87 09       	st.w	r3[0x0],r9
800092cc:	fb 48 06 90 	st.w	sp[1680],r8
800092d0:	30 19       	mov	r9,1
800092d2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800092d6:	87 19       	st.w	r3[0x4],r9
800092d8:	2f f8       	sub	r8,-1
800092da:	fb 48 06 8c 	st.w	sp[1676],r8
800092de:	58 78       	cp.w	r8,7
800092e0:	e0 89 00 04 	brgt	800092e8 <_vfprintf_r+0x1a78>
800092e4:	2f 83       	sub	r3,-8
800092e6:	c0 b8       	rjmp	800092fc <_vfprintf_r+0x1a8c>
800092e8:	fa ca f9 78 	sub	r10,sp,-1672
800092ec:	02 9b       	mov	r11,r1
800092ee:	08 9c       	mov	r12,r4
800092f0:	fe b0 f2 b2 	rcall	80007854 <__sprint_r>
800092f4:	e0 81 02 3d 	brne	8000976e <_vfprintf_r+0x1efe>
800092f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800092fc:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009300:	5c 32       	neg	r2
80009302:	58 02       	cp.w	r2,0
80009304:	e0 89 00 1d 	brgt	8000933e <_vfprintf_r+0x1ace>
80009308:	c3 d8       	rjmp	80009382 <_vfprintf_r+0x1b12>
8000930a:	2f 09       	sub	r9,-16
8000930c:	2f f8       	sub	r8,-1
8000930e:	31 0e       	mov	lr,16
80009310:	fb 49 06 90 	st.w	sp[1680],r9
80009314:	87 00       	st.w	r3[0x0],r0
80009316:	87 1e       	st.w	r3[0x4],lr
80009318:	fb 48 06 8c 	st.w	sp[1676],r8
8000931c:	58 78       	cp.w	r8,7
8000931e:	e0 89 00 04 	brgt	80009326 <_vfprintf_r+0x1ab6>
80009322:	2f 83       	sub	r3,-8
80009324:	c0 b8       	rjmp	8000933a <_vfprintf_r+0x1aca>
80009326:	fa ca f9 78 	sub	r10,sp,-1672
8000932a:	02 9b       	mov	r11,r1
8000932c:	08 9c       	mov	r12,r4
8000932e:	fe b0 f2 93 	rcall	80007854 <__sprint_r>
80009332:	e0 81 02 1e 	brne	8000976e <_vfprintf_r+0x1efe>
80009336:	fa c3 f9 e0 	sub	r3,sp,-1568
8000933a:	21 02       	sub	r2,16
8000933c:	c0 38       	rjmp	80009342 <_vfprintf_r+0x1ad2>
8000933e:	fe c0 ce e2 	sub	r0,pc,-12574
80009342:	fa f9 06 90 	ld.w	r9,sp[1680]
80009346:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000934a:	fe ca ce ee 	sub	r10,pc,-12562
8000934e:	59 02       	cp.w	r2,16
80009350:	fe 99 ff dd 	brgt	8000930a <_vfprintf_r+0x1a9a>
80009354:	04 09       	add	r9,r2
80009356:	2f f8       	sub	r8,-1
80009358:	87 0a       	st.w	r3[0x0],r10
8000935a:	fb 49 06 90 	st.w	sp[1680],r9
8000935e:	87 12       	st.w	r3[0x4],r2
80009360:	fb 48 06 8c 	st.w	sp[1676],r8
80009364:	58 78       	cp.w	r8,7
80009366:	e0 89 00 04 	brgt	8000936e <_vfprintf_r+0x1afe>
8000936a:	2f 83       	sub	r3,-8
8000936c:	c0 b8       	rjmp	80009382 <_vfprintf_r+0x1b12>
8000936e:	fa ca f9 78 	sub	r10,sp,-1672
80009372:	02 9b       	mov	r11,r1
80009374:	08 9c       	mov	r12,r4
80009376:	fe b0 f2 6f 	rcall	80007854 <__sprint_r>
8000937a:	e0 81 01 fa 	brne	8000976e <_vfprintf_r+0x1efe>
8000937e:	fa c3 f9 e0 	sub	r3,sp,-1568
80009382:	40 6c       	lddsp	r12,sp[0x18]
80009384:	fa f8 06 90 	ld.w	r8,sp[1680]
80009388:	87 06       	st.w	r3[0x0],r6
8000938a:	87 1c       	st.w	r3[0x4],r12
8000938c:	18 08       	add	r8,r12
8000938e:	cb 98       	rjmp	80009500 <_vfprintf_r+0x1c90>
80009390:	fa f9 06 90 	ld.w	r9,sp[1680]
80009394:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009398:	40 6b       	lddsp	r11,sp[0x18]
8000939a:	16 3a       	cp.w	r10,r11
8000939c:	c6 f5       	brlt	8000947a <_vfprintf_r+0x1c0a>
8000939e:	16 09       	add	r9,r11
800093a0:	2f f8       	sub	r8,-1
800093a2:	87 06       	st.w	r3[0x0],r6
800093a4:	fb 49 06 90 	st.w	sp[1680],r9
800093a8:	87 1b       	st.w	r3[0x4],r11
800093aa:	fb 48 06 8c 	st.w	sp[1676],r8
800093ae:	58 78       	cp.w	r8,7
800093b0:	e0 89 00 04 	brgt	800093b8 <_vfprintf_r+0x1b48>
800093b4:	2f 83       	sub	r3,-8
800093b6:	c0 b8       	rjmp	800093cc <_vfprintf_r+0x1b5c>
800093b8:	fa ca f9 78 	sub	r10,sp,-1672
800093bc:	02 9b       	mov	r11,r1
800093be:	08 9c       	mov	r12,r4
800093c0:	fe b0 f2 4a 	rcall	80007854 <__sprint_r>
800093c4:	e0 81 01 d5 	brne	8000976e <_vfprintf_r+0x1efe>
800093c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800093cc:	fa f6 06 ac 	ld.w	r6,sp[1708]
800093d0:	40 6a       	lddsp	r10,sp[0x18]
800093d2:	14 16       	sub	r6,r10
800093d4:	58 06       	cp.w	r6,0
800093d6:	e0 89 00 1c 	brgt	8000940e <_vfprintf_r+0x1b9e>
800093da:	c3 d8       	rjmp	80009454 <_vfprintf_r+0x1be4>
800093dc:	2f 09       	sub	r9,-16
800093de:	2f f8       	sub	r8,-1
800093e0:	fb 49 06 90 	st.w	sp[1680],r9
800093e4:	87 02       	st.w	r3[0x0],r2
800093e6:	87 10       	st.w	r3[0x4],r0
800093e8:	fb 48 06 8c 	st.w	sp[1676],r8
800093ec:	58 78       	cp.w	r8,7
800093ee:	e0 89 00 04 	brgt	800093f6 <_vfprintf_r+0x1b86>
800093f2:	2f 83       	sub	r3,-8
800093f4:	c0 b8       	rjmp	8000940a <_vfprintf_r+0x1b9a>
800093f6:	fa ca f9 78 	sub	r10,sp,-1672
800093fa:	02 9b       	mov	r11,r1
800093fc:	08 9c       	mov	r12,r4
800093fe:	fe b0 f2 2b 	rcall	80007854 <__sprint_r>
80009402:	e0 81 01 b6 	brne	8000976e <_vfprintf_r+0x1efe>
80009406:	fa c3 f9 e0 	sub	r3,sp,-1568
8000940a:	21 06       	sub	r6,16
8000940c:	c0 48       	rjmp	80009414 <_vfprintf_r+0x1ba4>
8000940e:	fe c2 cf b2 	sub	r2,pc,-12366
80009412:	31 00       	mov	r0,16
80009414:	fa f9 06 90 	ld.w	r9,sp[1680]
80009418:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000941c:	fe ca cf c0 	sub	r10,pc,-12352
80009420:	59 06       	cp.w	r6,16
80009422:	fe 99 ff dd 	brgt	800093dc <_vfprintf_r+0x1b6c>
80009426:	0c 09       	add	r9,r6
80009428:	2f f8       	sub	r8,-1
8000942a:	87 0a       	st.w	r3[0x0],r10
8000942c:	fb 49 06 90 	st.w	sp[1680],r9
80009430:	87 16       	st.w	r3[0x4],r6
80009432:	fb 48 06 8c 	st.w	sp[1676],r8
80009436:	58 78       	cp.w	r8,7
80009438:	e0 89 00 04 	brgt	80009440 <_vfprintf_r+0x1bd0>
8000943c:	2f 83       	sub	r3,-8
8000943e:	c0 b8       	rjmp	80009454 <_vfprintf_r+0x1be4>
80009440:	fa ca f9 78 	sub	r10,sp,-1672
80009444:	02 9b       	mov	r11,r1
80009446:	08 9c       	mov	r12,r4
80009448:	fe b0 f2 06 	rcall	80007854 <__sprint_r>
8000944c:	e0 81 01 91 	brne	8000976e <_vfprintf_r+0x1efe>
80009450:	fa c3 f9 e0 	sub	r3,sp,-1568
80009454:	ed b5 00 00 	bld	r5,0x0
80009458:	e0 81 01 20 	brne	80009698 <_vfprintf_r+0x1e28>
8000945c:	40 c9       	lddsp	r9,sp[0x30]
8000945e:	fa f8 06 90 	ld.w	r8,sp[1680]
80009462:	2f f8       	sub	r8,-1
80009464:	87 09       	st.w	r3[0x0],r9
80009466:	fb 48 06 90 	st.w	sp[1680],r8
8000946a:	30 19       	mov	r9,1
8000946c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009470:	87 19       	st.w	r3[0x4],r9
80009472:	2f f8       	sub	r8,-1
80009474:	fb 48 06 8c 	st.w	sp[1676],r8
80009478:	c0 29       	rjmp	8000967c <_vfprintf_r+0x1e0c>
8000947a:	14 09       	add	r9,r10
8000947c:	2f f8       	sub	r8,-1
8000947e:	fb 49 06 90 	st.w	sp[1680],r9
80009482:	87 06       	st.w	r3[0x0],r6
80009484:	87 1a       	st.w	r3[0x4],r10
80009486:	fb 48 06 8c 	st.w	sp[1676],r8
8000948a:	58 78       	cp.w	r8,7
8000948c:	e0 89 00 04 	brgt	80009494 <_vfprintf_r+0x1c24>
80009490:	2f 83       	sub	r3,-8
80009492:	c0 b8       	rjmp	800094a8 <_vfprintf_r+0x1c38>
80009494:	fa ca f9 78 	sub	r10,sp,-1672
80009498:	02 9b       	mov	r11,r1
8000949a:	08 9c       	mov	r12,r4
8000949c:	fe b0 f1 dc 	rcall	80007854 <__sprint_r>
800094a0:	e0 81 01 67 	brne	8000976e <_vfprintf_r+0x1efe>
800094a4:	fa c3 f9 e0 	sub	r3,sp,-1568
800094a8:	40 c8       	lddsp	r8,sp[0x30]
800094aa:	87 08       	st.w	r3[0x0],r8
800094ac:	fa f8 06 90 	ld.w	r8,sp[1680]
800094b0:	2f f8       	sub	r8,-1
800094b2:	30 19       	mov	r9,1
800094b4:	fb 48 06 90 	st.w	sp[1680],r8
800094b8:	87 19       	st.w	r3[0x4],r9
800094ba:	fa f8 06 8c 	ld.w	r8,sp[1676]
800094be:	2f f8       	sub	r8,-1
800094c0:	fb 48 06 8c 	st.w	sp[1676],r8
800094c4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800094c8:	58 78       	cp.w	r8,7
800094ca:	e0 89 00 04 	brgt	800094d2 <_vfprintf_r+0x1c62>
800094ce:	2f 83       	sub	r3,-8
800094d0:	c0 b8       	rjmp	800094e6 <_vfprintf_r+0x1c76>
800094d2:	fa ca f9 78 	sub	r10,sp,-1672
800094d6:	02 9b       	mov	r11,r1
800094d8:	08 9c       	mov	r12,r4
800094da:	fe b0 f1 bd 	rcall	80007854 <__sprint_r>
800094de:	e0 81 01 48 	brne	8000976e <_vfprintf_r+0x1efe>
800094e2:	fa c3 f9 e0 	sub	r3,sp,-1568
800094e6:	04 06       	add	r6,r2
800094e8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800094ec:	87 06       	st.w	r3[0x0],r6
800094ee:	fa f9 06 90 	ld.w	r9,sp[1680]
800094f2:	40 66       	lddsp	r6,sp[0x18]
800094f4:	40 6e       	lddsp	lr,sp[0x18]
800094f6:	10 16       	sub	r6,r8
800094f8:	f2 08 01 08 	sub	r8,r9,r8
800094fc:	87 16       	st.w	r3[0x4],r6
800094fe:	1c 08       	add	r8,lr
80009500:	fb 48 06 90 	st.w	sp[1680],r8
80009504:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009508:	2f f8       	sub	r8,-1
8000950a:	fb 48 06 8c 	st.w	sp[1676],r8
8000950e:	cb 78       	rjmp	8000967c <_vfprintf_r+0x1e0c>
80009510:	40 6c       	lddsp	r12,sp[0x18]
80009512:	58 1c       	cp.w	r12,1
80009514:	e0 89 00 06 	brgt	80009520 <_vfprintf_r+0x1cb0>
80009518:	ed b5 00 00 	bld	r5,0x0
8000951c:	e0 81 00 85 	brne	80009626 <_vfprintf_r+0x1db6>
80009520:	fa f8 06 90 	ld.w	r8,sp[1680]
80009524:	2f f8       	sub	r8,-1
80009526:	30 19       	mov	r9,1
80009528:	fb 48 06 90 	st.w	sp[1680],r8
8000952c:	87 06       	st.w	r3[0x0],r6
8000952e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009532:	87 19       	st.w	r3[0x4],r9
80009534:	2f f8       	sub	r8,-1
80009536:	fb 48 06 8c 	st.w	sp[1676],r8
8000953a:	58 78       	cp.w	r8,7
8000953c:	e0 89 00 04 	brgt	80009544 <_vfprintf_r+0x1cd4>
80009540:	2f 83       	sub	r3,-8
80009542:	c0 b8       	rjmp	80009558 <_vfprintf_r+0x1ce8>
80009544:	fa ca f9 78 	sub	r10,sp,-1672
80009548:	02 9b       	mov	r11,r1
8000954a:	08 9c       	mov	r12,r4
8000954c:	fe b0 f1 84 	rcall	80007854 <__sprint_r>
80009550:	e0 81 01 0f 	brne	8000976e <_vfprintf_r+0x1efe>
80009554:	fa c3 f9 e0 	sub	r3,sp,-1568
80009558:	fa f8 06 90 	ld.w	r8,sp[1680]
8000955c:	2f f8       	sub	r8,-1
8000955e:	40 cb       	lddsp	r11,sp[0x30]
80009560:	fb 48 06 90 	st.w	sp[1680],r8
80009564:	30 19       	mov	r9,1
80009566:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000956a:	87 0b       	st.w	r3[0x0],r11
8000956c:	2f f8       	sub	r8,-1
8000956e:	87 19       	st.w	r3[0x4],r9
80009570:	fb 48 06 8c 	st.w	sp[1676],r8
80009574:	58 78       	cp.w	r8,7
80009576:	e0 89 00 05 	brgt	80009580 <_vfprintf_r+0x1d10>
8000957a:	2f 83       	sub	r3,-8
8000957c:	c0 c8       	rjmp	80009594 <_vfprintf_r+0x1d24>
8000957e:	d7 03       	nop
80009580:	fa ca f9 78 	sub	r10,sp,-1672
80009584:	02 9b       	mov	r11,r1
80009586:	08 9c       	mov	r12,r4
80009588:	fe b0 f1 66 	rcall	80007854 <__sprint_r>
8000958c:	e0 81 00 f1 	brne	8000976e <_vfprintf_r+0x1efe>
80009590:	fa c3 f9 e0 	sub	r3,sp,-1568
80009594:	30 08       	mov	r8,0
80009596:	30 09       	mov	r9,0
80009598:	40 5b       	lddsp	r11,sp[0x14]
8000959a:	40 7a       	lddsp	r10,sp[0x1c]
8000959c:	e0 a0 10 f3 	rcall	8000b782 <__avr32_f64_cmp_eq>
800095a0:	40 68       	lddsp	r8,sp[0x18]
800095a2:	20 18       	sub	r8,1
800095a4:	58 0c       	cp.w	r12,0
800095a6:	c0 d1       	brne	800095c0 <_vfprintf_r+0x1d50>
800095a8:	2f f6       	sub	r6,-1
800095aa:	87 18       	st.w	r3[0x4],r8
800095ac:	87 06       	st.w	r3[0x0],r6
800095ae:	fa f6 06 90 	ld.w	r6,sp[1680]
800095b2:	10 06       	add	r6,r8
800095b4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800095b8:	fb 46 06 90 	st.w	sp[1680],r6
800095bc:	2f f8       	sub	r8,-1
800095be:	c3 18       	rjmp	80009620 <_vfprintf_r+0x1db0>
800095c0:	10 96       	mov	r6,r8
800095c2:	58 08       	cp.w	r8,0
800095c4:	e0 89 00 1c 	brgt	800095fc <_vfprintf_r+0x1d8c>
800095c8:	c4 b8       	rjmp	8000965e <_vfprintf_r+0x1dee>
800095ca:	2f 09       	sub	r9,-16
800095cc:	2f f8       	sub	r8,-1
800095ce:	fb 49 06 90 	st.w	sp[1680],r9
800095d2:	87 02       	st.w	r3[0x0],r2
800095d4:	87 10       	st.w	r3[0x4],r0
800095d6:	fb 48 06 8c 	st.w	sp[1676],r8
800095da:	58 78       	cp.w	r8,7
800095dc:	e0 89 00 04 	brgt	800095e4 <_vfprintf_r+0x1d74>
800095e0:	2f 83       	sub	r3,-8
800095e2:	c0 b8       	rjmp	800095f8 <_vfprintf_r+0x1d88>
800095e4:	fa ca f9 78 	sub	r10,sp,-1672
800095e8:	02 9b       	mov	r11,r1
800095ea:	08 9c       	mov	r12,r4
800095ec:	fe b0 f1 34 	rcall	80007854 <__sprint_r>
800095f0:	e0 81 00 bf 	brne	8000976e <_vfprintf_r+0x1efe>
800095f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800095f8:	21 06       	sub	r6,16
800095fa:	c0 48       	rjmp	80009602 <_vfprintf_r+0x1d92>
800095fc:	fe c2 d1 a0 	sub	r2,pc,-11872
80009600:	31 00       	mov	r0,16
80009602:	fa f9 06 90 	ld.w	r9,sp[1680]
80009606:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000960a:	fe ca d1 ae 	sub	r10,pc,-11858
8000960e:	59 06       	cp.w	r6,16
80009610:	fe 99 ff dd 	brgt	800095ca <_vfprintf_r+0x1d5a>
80009614:	0c 09       	add	r9,r6
80009616:	87 0a       	st.w	r3[0x0],r10
80009618:	fb 49 06 90 	st.w	sp[1680],r9
8000961c:	2f f8       	sub	r8,-1
8000961e:	87 16       	st.w	r3[0x4],r6
80009620:	fb 48 06 8c 	st.w	sp[1676],r8
80009624:	c0 e8       	rjmp	80009640 <_vfprintf_r+0x1dd0>
80009626:	fa f8 06 90 	ld.w	r8,sp[1680]
8000962a:	2f f8       	sub	r8,-1
8000962c:	30 19       	mov	r9,1
8000962e:	fb 48 06 90 	st.w	sp[1680],r8
80009632:	87 06       	st.w	r3[0x0],r6
80009634:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009638:	87 19       	st.w	r3[0x4],r9
8000963a:	2f f8       	sub	r8,-1
8000963c:	fb 48 06 8c 	st.w	sp[1676],r8
80009640:	58 78       	cp.w	r8,7
80009642:	e0 89 00 04 	brgt	8000964a <_vfprintf_r+0x1dda>
80009646:	2f 83       	sub	r3,-8
80009648:	c0 b8       	rjmp	8000965e <_vfprintf_r+0x1dee>
8000964a:	fa ca f9 78 	sub	r10,sp,-1672
8000964e:	02 9b       	mov	r11,r1
80009650:	08 9c       	mov	r12,r4
80009652:	fe b0 f1 01 	rcall	80007854 <__sprint_r>
80009656:	e0 81 00 8c 	brne	8000976e <_vfprintf_r+0x1efe>
8000965a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000965e:	40 ea       	lddsp	r10,sp[0x38]
80009660:	fa f8 06 90 	ld.w	r8,sp[1680]
80009664:	14 08       	add	r8,r10
80009666:	fa c9 f9 64 	sub	r9,sp,-1692
8000966a:	fb 48 06 90 	st.w	sp[1680],r8
8000966e:	87 1a       	st.w	r3[0x4],r10
80009670:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009674:	87 09       	st.w	r3[0x0],r9
80009676:	2f f8       	sub	r8,-1
80009678:	fb 48 06 8c 	st.w	sp[1676],r8
8000967c:	58 78       	cp.w	r8,7
8000967e:	e0 89 00 04 	brgt	80009686 <_vfprintf_r+0x1e16>
80009682:	2f 83       	sub	r3,-8
80009684:	c0 a8       	rjmp	80009698 <_vfprintf_r+0x1e28>
80009686:	fa ca f9 78 	sub	r10,sp,-1672
8000968a:	02 9b       	mov	r11,r1
8000968c:	08 9c       	mov	r12,r4
8000968e:	fe b0 f0 e3 	rcall	80007854 <__sprint_r>
80009692:	c6 e1       	brne	8000976e <_vfprintf_r+0x1efe>
80009694:	fa c3 f9 e0 	sub	r3,sp,-1568
80009698:	e2 15 00 04 	andl	r5,0x4,COH
8000969c:	c3 f0       	breq	8000971a <_vfprintf_r+0x1eaa>
8000969e:	40 86       	lddsp	r6,sp[0x20]
800096a0:	40 39       	lddsp	r9,sp[0xc]
800096a2:	12 16       	sub	r6,r9
800096a4:	58 06       	cp.w	r6,0
800096a6:	e0 89 00 1a 	brgt	800096da <_vfprintf_r+0x1e6a>
800096aa:	c3 88       	rjmp	8000971a <_vfprintf_r+0x1eaa>
800096ac:	2f 09       	sub	r9,-16
800096ae:	2f f8       	sub	r8,-1
800096b0:	fb 49 06 90 	st.w	sp[1680],r9
800096b4:	87 05       	st.w	r3[0x0],r5
800096b6:	87 12       	st.w	r3[0x4],r2
800096b8:	fb 48 06 8c 	st.w	sp[1676],r8
800096bc:	58 78       	cp.w	r8,7
800096be:	e0 89 00 04 	brgt	800096c6 <_vfprintf_r+0x1e56>
800096c2:	2f 83       	sub	r3,-8
800096c4:	c0 98       	rjmp	800096d6 <_vfprintf_r+0x1e66>
800096c6:	00 9a       	mov	r10,r0
800096c8:	02 9b       	mov	r11,r1
800096ca:	08 9c       	mov	r12,r4
800096cc:	fe b0 f0 c4 	rcall	80007854 <__sprint_r>
800096d0:	c4 f1       	brne	8000976e <_vfprintf_r+0x1efe>
800096d2:	fa c3 f9 e0 	sub	r3,sp,-1568
800096d6:	21 06       	sub	r6,16
800096d8:	c0 68       	rjmp	800096e4 <_vfprintf_r+0x1e74>
800096da:	fe c5 d2 8e 	sub	r5,pc,-11634
800096de:	31 02       	mov	r2,16
800096e0:	fa c0 f9 78 	sub	r0,sp,-1672
800096e4:	fa f9 06 90 	ld.w	r9,sp[1680]
800096e8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800096ec:	fe ca d2 a0 	sub	r10,pc,-11616
800096f0:	59 06       	cp.w	r6,16
800096f2:	fe 99 ff dd 	brgt	800096ac <_vfprintf_r+0x1e3c>
800096f6:	0c 09       	add	r9,r6
800096f8:	2f f8       	sub	r8,-1
800096fa:	87 0a       	st.w	r3[0x0],r10
800096fc:	87 16       	st.w	r3[0x4],r6
800096fe:	fb 49 06 90 	st.w	sp[1680],r9
80009702:	fb 48 06 8c 	st.w	sp[1676],r8
80009706:	58 78       	cp.w	r8,7
80009708:	e0 8a 00 09 	brle	8000971a <_vfprintf_r+0x1eaa>
8000970c:	fa ca f9 78 	sub	r10,sp,-1672
80009710:	02 9b       	mov	r11,r1
80009712:	08 9c       	mov	r12,r4
80009714:	fe b0 f0 a0 	rcall	80007854 <__sprint_r>
80009718:	c2 b1       	brne	8000976e <_vfprintf_r+0x1efe>
8000971a:	40 bc       	lddsp	r12,sp[0x2c]
8000971c:	40 36       	lddsp	r6,sp[0xc]
8000971e:	40 8e       	lddsp	lr,sp[0x20]
80009720:	ec 0e 0c 48 	max	r8,r6,lr
80009724:	10 0c       	add	r12,r8
80009726:	50 bc       	stdsp	sp[0x2c],r12
80009728:	fa f8 06 90 	ld.w	r8,sp[1680]
8000972c:	58 08       	cp.w	r8,0
8000972e:	c0 80       	breq	8000973e <_vfprintf_r+0x1ece>
80009730:	fa ca f9 78 	sub	r10,sp,-1672
80009734:	02 9b       	mov	r11,r1
80009736:	08 9c       	mov	r12,r4
80009738:	fe b0 f0 8e 	rcall	80007854 <__sprint_r>
8000973c:	c1 91       	brne	8000976e <_vfprintf_r+0x1efe>
8000973e:	30 0b       	mov	r11,0
80009740:	fa c3 f9 e0 	sub	r3,sp,-1568
80009744:	fb 4b 06 8c 	st.w	sp[1676],r11
80009748:	fe 9f f1 22 	bral	8000798c <_vfprintf_r+0x11c>
8000974c:	08 95       	mov	r5,r4
8000974e:	fa f8 06 90 	ld.w	r8,sp[1680]
80009752:	58 08       	cp.w	r8,0
80009754:	c0 80       	breq	80009764 <_vfprintf_r+0x1ef4>
80009756:	08 9c       	mov	r12,r4
80009758:	fa ca f9 78 	sub	r10,sp,-1672
8000975c:	02 9b       	mov	r11,r1
8000975e:	fe b0 f0 7b 	rcall	80007854 <__sprint_r>
80009762:	c0 61       	brne	8000976e <_vfprintf_r+0x1efe>
80009764:	30 08       	mov	r8,0
80009766:	fb 48 06 8c 	st.w	sp[1676],r8
8000976a:	c0 28       	rjmp	8000976e <_vfprintf_r+0x1efe>
8000976c:	40 41       	lddsp	r1,sp[0x10]
8000976e:	82 68       	ld.sh	r8,r1[0xc]
80009770:	ed b8 00 06 	bld	r8,0x6
80009774:	c0 31       	brne	8000977a <_vfprintf_r+0x1f0a>
80009776:	3f fa       	mov	r10,-1
80009778:	50 ba       	stdsp	sp[0x2c],r10
8000977a:	40 bc       	lddsp	r12,sp[0x2c]
8000977c:	fe 3d f9 44 	sub	sp,-1724
80009780:	d8 32       	popm	r0-r7,pc
80009782:	d7 03       	nop

80009784 <_write_r>:
80009784:	d4 21       	pushm	r4-r7,lr
80009786:	16 98       	mov	r8,r11
80009788:	18 97       	mov	r7,r12
8000978a:	10 9c       	mov	r12,r8
8000978c:	30 08       	mov	r8,0
8000978e:	14 9b       	mov	r11,r10
80009790:	e0 66 07 fc 	mov	r6,2044
80009794:	12 9a       	mov	r10,r9
80009796:	8d 08       	st.w	r6[0x0],r8
80009798:	fe b0 db e8 	rcall	80004f68 <_write>
8000979c:	5b fc       	cp.w	r12,-1
8000979e:	c0 51       	brne	800097a8 <_write_r+0x24>
800097a0:	6c 08       	ld.w	r8,r6[0x0]
800097a2:	58 08       	cp.w	r8,0
800097a4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800097a8:	d8 22       	popm	r4-r7,pc
800097aa:	d7 03       	nop

800097ac <__swsetup_r>:
800097ac:	d4 21       	pushm	r4-r7,lr
800097ae:	e0 68 01 18 	mov	r8,280
800097b2:	18 96       	mov	r6,r12
800097b4:	16 97       	mov	r7,r11
800097b6:	70 0c       	ld.w	r12,r8[0x0]
800097b8:	58 0c       	cp.w	r12,0
800097ba:	c0 60       	breq	800097c6 <__swsetup_r+0x1a>
800097bc:	78 68       	ld.w	r8,r12[0x18]
800097be:	58 08       	cp.w	r8,0
800097c0:	c0 31       	brne	800097c6 <__swsetup_r+0x1a>
800097c2:	fe b0 ec db 	rcall	80007178 <__sinit>
800097c6:	fe c8 d6 8e 	sub	r8,pc,-10610
800097ca:	10 37       	cp.w	r7,r8
800097cc:	c0 61       	brne	800097d8 <__swsetup_r+0x2c>
800097ce:	e0 68 01 18 	mov	r8,280
800097d2:	70 08       	ld.w	r8,r8[0x0]
800097d4:	70 07       	ld.w	r7,r8[0x0]
800097d6:	c1 28       	rjmp	800097fa <__swsetup_r+0x4e>
800097d8:	fe c8 d6 80 	sub	r8,pc,-10624
800097dc:	10 37       	cp.w	r7,r8
800097de:	c0 61       	brne	800097ea <__swsetup_r+0x3e>
800097e0:	e0 68 01 18 	mov	r8,280
800097e4:	70 08       	ld.w	r8,r8[0x0]
800097e6:	70 17       	ld.w	r7,r8[0x4]
800097e8:	c0 98       	rjmp	800097fa <__swsetup_r+0x4e>
800097ea:	fe c8 d6 72 	sub	r8,pc,-10638
800097ee:	10 37       	cp.w	r7,r8
800097f0:	c0 51       	brne	800097fa <__swsetup_r+0x4e>
800097f2:	e0 68 01 18 	mov	r8,280
800097f6:	70 08       	ld.w	r8,r8[0x0]
800097f8:	70 27       	ld.w	r7,r8[0x8]
800097fa:	8e 68       	ld.sh	r8,r7[0xc]
800097fc:	ed b8 00 03 	bld	r8,0x3
80009800:	c1 e0       	breq	8000983c <__swsetup_r+0x90>
80009802:	ed b8 00 04 	bld	r8,0x4
80009806:	c3 e1       	brne	80009882 <__swsetup_r+0xd6>
80009808:	ed b8 00 02 	bld	r8,0x2
8000980c:	c1 51       	brne	80009836 <__swsetup_r+0x8a>
8000980e:	6e db       	ld.w	r11,r7[0x34]
80009810:	58 0b       	cp.w	r11,0
80009812:	c0 a0       	breq	80009826 <__swsetup_r+0x7a>
80009814:	ee c8 ff bc 	sub	r8,r7,-68
80009818:	10 3b       	cp.w	r11,r8
8000981a:	c0 40       	breq	80009822 <__swsetup_r+0x76>
8000981c:	0c 9c       	mov	r12,r6
8000981e:	fe b0 ed 47 	rcall	800072ac <_free_r>
80009822:	30 08       	mov	r8,0
80009824:	8f d8       	st.w	r7[0x34],r8
80009826:	8e 68       	ld.sh	r8,r7[0xc]
80009828:	e0 18 ff db 	andl	r8,0xffdb
8000982c:	ae 68       	st.h	r7[0xc],r8
8000982e:	30 08       	mov	r8,0
80009830:	8f 18       	st.w	r7[0x4],r8
80009832:	6e 48       	ld.w	r8,r7[0x10]
80009834:	8f 08       	st.w	r7[0x0],r8
80009836:	8e 68       	ld.sh	r8,r7[0xc]
80009838:	a3 b8       	sbr	r8,0x3
8000983a:	ae 68       	st.h	r7[0xc],r8
8000983c:	6e 48       	ld.w	r8,r7[0x10]
8000983e:	58 08       	cp.w	r8,0
80009840:	c0 b1       	brne	80009856 <__swsetup_r+0xaa>
80009842:	8e 68       	ld.sh	r8,r7[0xc]
80009844:	e2 18 02 80 	andl	r8,0x280,COH
80009848:	e0 48 02 00 	cp.w	r8,512
8000984c:	c0 50       	breq	80009856 <__swsetup_r+0xaa>
8000984e:	0c 9c       	mov	r12,r6
80009850:	0e 9b       	mov	r11,r7
80009852:	e0 a0 08 f9 	rcall	8000aa44 <__smakebuf_r>
80009856:	8e 69       	ld.sh	r9,r7[0xc]
80009858:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000985c:	c0 70       	breq	8000986a <__swsetup_r+0xbe>
8000985e:	30 08       	mov	r8,0
80009860:	8f 28       	st.w	r7[0x8],r8
80009862:	6e 58       	ld.w	r8,r7[0x14]
80009864:	5c 38       	neg	r8
80009866:	8f 68       	st.w	r7[0x18],r8
80009868:	c0 68       	rjmp	80009874 <__swsetup_r+0xc8>
8000986a:	ed b9 00 01 	bld	r9,0x1
8000986e:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80009872:	8f 28       	st.w	r7[0x8],r8
80009874:	6e 48       	ld.w	r8,r7[0x10]
80009876:	58 08       	cp.w	r8,0
80009878:	c0 61       	brne	80009884 <__swsetup_r+0xd8>
8000987a:	8e 68       	ld.sh	r8,r7[0xc]
8000987c:	ed b8 00 07 	bld	r8,0x7
80009880:	c0 21       	brne	80009884 <__swsetup_r+0xd8>
80009882:	dc 2a       	popm	r4-r7,pc,r12=-1
80009884:	d8 2a       	popm	r4-r7,pc,r12=0
80009886:	d7 03       	nop

80009888 <_close_r>:
80009888:	d4 21       	pushm	r4-r7,lr
8000988a:	30 08       	mov	r8,0
8000988c:	18 97       	mov	r7,r12
8000988e:	e0 66 07 fc 	mov	r6,2044
80009892:	16 9c       	mov	r12,r11
80009894:	8d 08       	st.w	r6[0x0],r8
80009896:	fe b0 ea d5 	rcall	80006e40 <_close>
8000989a:	5b fc       	cp.w	r12,-1
8000989c:	c0 51       	brne	800098a6 <_close_r+0x1e>
8000989e:	6c 08       	ld.w	r8,r6[0x0]
800098a0:	58 08       	cp.w	r8,0
800098a2:	ef f8 1a 03 	st.wne	r7[0xc],r8
800098a6:	d8 22       	popm	r4-r7,pc

800098a8 <quorem>:
800098a8:	d4 31       	pushm	r0-r7,lr
800098aa:	20 2d       	sub	sp,8
800098ac:	18 97       	mov	r7,r12
800098ae:	78 48       	ld.w	r8,r12[0x10]
800098b0:	76 46       	ld.w	r6,r11[0x10]
800098b2:	0c 38       	cp.w	r8,r6
800098b4:	c0 34       	brge	800098ba <quorem+0x12>
800098b6:	30 0c       	mov	r12,0
800098b8:	c8 58       	rjmp	800099c2 <quorem+0x11a>
800098ba:	ec c2 ff fc 	sub	r2,r6,-4
800098be:	f6 c3 ff ec 	sub	r3,r11,-20
800098c2:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800098c6:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800098ca:	2f f9       	sub	r9,-1
800098cc:	20 16       	sub	r6,1
800098ce:	f8 09 0d 08 	divu	r8,r12,r9
800098d2:	f6 02 00 22 	add	r2,r11,r2<<0x2
800098d6:	ee c4 ff ec 	sub	r4,r7,-20
800098da:	10 95       	mov	r5,r8
800098dc:	58 08       	cp.w	r8,0
800098de:	c4 10       	breq	80009960 <quorem+0xb8>
800098e0:	30 09       	mov	r9,0
800098e2:	06 9a       	mov	r10,r3
800098e4:	08 98       	mov	r8,r4
800098e6:	12 91       	mov	r1,r9
800098e8:	50 0b       	stdsp	sp[0x0],r11
800098ea:	70 0e       	ld.w	lr,r8[0x0]
800098ec:	b1 8e       	lsr	lr,0x10
800098ee:	50 1e       	stdsp	sp[0x4],lr
800098f0:	15 0e       	ld.w	lr,r10++
800098f2:	fc 00 16 10 	lsr	r0,lr,0x10
800098f6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800098fa:	ea 0e 03 41 	mac	r1,r5,lr
800098fe:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80009902:	b1 81       	lsr	r1,0x10
80009904:	40 1b       	lddsp	r11,sp[0x4]
80009906:	ea 00 02 40 	mul	r0,r5,r0
8000990a:	e2 00 00 00 	add	r0,r1,r0
8000990e:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80009912:	02 1b       	sub	r11,r1
80009914:	50 1b       	stdsp	sp[0x4],r11
80009916:	70 0b       	ld.w	r11,r8[0x0]
80009918:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
8000991c:	02 09       	add	r9,r1
8000991e:	f2 0e 01 0e 	sub	lr,r9,lr
80009922:	b0 1e       	st.h	r8[0x2],lr
80009924:	fc 09 14 10 	asr	r9,lr,0x10
80009928:	40 1e       	lddsp	lr,sp[0x4]
8000992a:	fc 09 00 09 	add	r9,lr,r9
8000992e:	b0 09       	st.h	r8[0x0],r9
80009930:	e0 01 16 10 	lsr	r1,r0,0x10
80009934:	2f c8       	sub	r8,-4
80009936:	b1 49       	asr	r9,0x10
80009938:	04 3a       	cp.w	r10,r2
8000993a:	fe 98 ff d8 	brls	800098ea <quorem+0x42>
8000993e:	40 0b       	lddsp	r11,sp[0x0]
80009940:	58 0c       	cp.w	r12,0
80009942:	c0 f1       	brne	80009960 <quorem+0xb8>
80009944:	ec c8 ff fb 	sub	r8,r6,-5
80009948:	ee 08 00 28 	add	r8,r7,r8<<0x2
8000994c:	c0 28       	rjmp	80009950 <quorem+0xa8>
8000994e:	20 16       	sub	r6,1
80009950:	20 48       	sub	r8,4
80009952:	08 38       	cp.w	r8,r4
80009954:	e0 88 00 05 	brls	8000995e <quorem+0xb6>
80009958:	70 09       	ld.w	r9,r8[0x0]
8000995a:	58 09       	cp.w	r9,0
8000995c:	cf 90       	breq	8000994e <quorem+0xa6>
8000995e:	8f 46       	st.w	r7[0x10],r6
80009960:	0e 9c       	mov	r12,r7
80009962:	e0 a0 09 51 	rcall	8000ac04 <__mcmp>
80009966:	c2 d5       	brlt	800099c0 <quorem+0x118>
80009968:	2f f5       	sub	r5,-1
8000996a:	08 98       	mov	r8,r4
8000996c:	30 09       	mov	r9,0
8000996e:	07 0b       	ld.w	r11,r3++
80009970:	f6 0a 16 10 	lsr	r10,r11,0x10
80009974:	70 0c       	ld.w	r12,r8[0x0]
80009976:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000997a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000997e:	14 1e       	sub	lr,r10
80009980:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80009984:	16 1a       	sub	r10,r11
80009986:	12 0a       	add	r10,r9
80009988:	b0 1a       	st.h	r8[0x2],r10
8000998a:	b1 4a       	asr	r10,0x10
8000998c:	fc 0a 00 09 	add	r9,lr,r10
80009990:	b0 09       	st.h	r8[0x0],r9
80009992:	2f c8       	sub	r8,-4
80009994:	b1 49       	asr	r9,0x10
80009996:	04 33       	cp.w	r3,r2
80009998:	fe 98 ff eb 	brls	8000996e <quorem+0xc6>
8000999c:	ec c8 ff fb 	sub	r8,r6,-5
800099a0:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800099a4:	58 09       	cp.w	r9,0
800099a6:	c0 d1       	brne	800099c0 <quorem+0x118>
800099a8:	ee 08 00 28 	add	r8,r7,r8<<0x2
800099ac:	c0 28       	rjmp	800099b0 <quorem+0x108>
800099ae:	20 16       	sub	r6,1
800099b0:	20 48       	sub	r8,4
800099b2:	08 38       	cp.w	r8,r4
800099b4:	e0 88 00 05 	brls	800099be <quorem+0x116>
800099b8:	70 09       	ld.w	r9,r8[0x0]
800099ba:	58 09       	cp.w	r9,0
800099bc:	cf 90       	breq	800099ae <quorem+0x106>
800099be:	8f 46       	st.w	r7[0x10],r6
800099c0:	0a 9c       	mov	r12,r5
800099c2:	2f ed       	sub	sp,-8
800099c4:	d8 32       	popm	r0-r7,pc
800099c6:	d7 03       	nop

800099c8 <_dtoa_r>:
800099c8:	d4 31       	pushm	r0-r7,lr
800099ca:	21 ad       	sub	sp,104
800099cc:	fa c4 ff 74 	sub	r4,sp,-140
800099d0:	18 97       	mov	r7,r12
800099d2:	16 95       	mov	r5,r11
800099d4:	68 2c       	ld.w	r12,r4[0x8]
800099d6:	50 c9       	stdsp	sp[0x30],r9
800099d8:	68 16       	ld.w	r6,r4[0x4]
800099da:	68 09       	ld.w	r9,r4[0x0]
800099dc:	50 e8       	stdsp	sp[0x38],r8
800099de:	14 94       	mov	r4,r10
800099e0:	51 2c       	stdsp	sp[0x48],r12
800099e2:	fa e5 00 08 	st.d	sp[8],r4
800099e6:	51 59       	stdsp	sp[0x54],r9
800099e8:	6e 95       	ld.w	r5,r7[0x24]
800099ea:	58 05       	cp.w	r5,0
800099ec:	c0 91       	brne	800099fe <_dtoa_r+0x36>
800099ee:	31 0c       	mov	r12,16
800099f0:	fe b0 e5 ce 	rcall	8000658c <malloc>
800099f4:	99 35       	st.w	r12[0xc],r5
800099f6:	8f 9c       	st.w	r7[0x24],r12
800099f8:	99 15       	st.w	r12[0x4],r5
800099fa:	99 25       	st.w	r12[0x8],r5
800099fc:	99 05       	st.w	r12[0x0],r5
800099fe:	6e 99       	ld.w	r9,r7[0x24]
80009a00:	72 08       	ld.w	r8,r9[0x0]
80009a02:	58 08       	cp.w	r8,0
80009a04:	c0 f0       	breq	80009a22 <_dtoa_r+0x5a>
80009a06:	72 1a       	ld.w	r10,r9[0x4]
80009a08:	91 1a       	st.w	r8[0x4],r10
80009a0a:	30 1a       	mov	r10,1
80009a0c:	72 19       	ld.w	r9,r9[0x4]
80009a0e:	f4 09 09 49 	lsl	r9,r10,r9
80009a12:	10 9b       	mov	r11,r8
80009a14:	91 29       	st.w	r8[0x8],r9
80009a16:	0e 9c       	mov	r12,r7
80009a18:	e0 a0 09 10 	rcall	8000ac38 <_Bfree>
80009a1c:	6e 98       	ld.w	r8,r7[0x24]
80009a1e:	30 09       	mov	r9,0
80009a20:	91 09       	st.w	r8[0x0],r9
80009a22:	40 28       	lddsp	r8,sp[0x8]
80009a24:	10 94       	mov	r4,r8
80009a26:	58 08       	cp.w	r8,0
80009a28:	c0 64       	brge	80009a34 <_dtoa_r+0x6c>
80009a2a:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80009a2e:	50 28       	stdsp	sp[0x8],r8
80009a30:	30 18       	mov	r8,1
80009a32:	c0 28       	rjmp	80009a36 <_dtoa_r+0x6e>
80009a34:	30 08       	mov	r8,0
80009a36:	8d 08       	st.w	r6[0x0],r8
80009a38:	fc 1c 7f f0 	movh	r12,0x7ff0
80009a3c:	40 26       	lddsp	r6,sp[0x8]
80009a3e:	0c 98       	mov	r8,r6
80009a40:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80009a44:	18 38       	cp.w	r8,r12
80009a46:	c2 01       	brne	80009a86 <_dtoa_r+0xbe>
80009a48:	e0 68 27 0f 	mov	r8,9999
80009a4c:	41 5b       	lddsp	r11,sp[0x54]
80009a4e:	97 08       	st.w	r11[0x0],r8
80009a50:	40 3a       	lddsp	r10,sp[0xc]
80009a52:	58 0a       	cp.w	r10,0
80009a54:	c0 71       	brne	80009a62 <_dtoa_r+0x9a>
80009a56:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80009a5a:	c0 41       	brne	80009a62 <_dtoa_r+0x9a>
80009a5c:	fe cc d4 f0 	sub	r12,pc,-11024
80009a60:	c0 38       	rjmp	80009a66 <_dtoa_r+0x9e>
80009a62:	fe cc d4 ea 	sub	r12,pc,-11030
80009a66:	41 29       	lddsp	r9,sp[0x48]
80009a68:	58 09       	cp.w	r9,0
80009a6a:	e0 80 05 9a 	breq	8000a59e <_dtoa_r+0xbd6>
80009a6e:	f8 c8 ff fd 	sub	r8,r12,-3
80009a72:	f8 c9 ff f8 	sub	r9,r12,-8
80009a76:	11 8b       	ld.ub	r11,r8[0x0]
80009a78:	30 0a       	mov	r10,0
80009a7a:	41 25       	lddsp	r5,sp[0x48]
80009a7c:	f4 0b 18 00 	cp.b	r11,r10
80009a80:	f2 08 17 10 	movne	r8,r9
80009a84:	c1 68       	rjmp	80009ab0 <_dtoa_r+0xe8>
80009a86:	fa ea 00 08 	ld.d	r10,sp[8]
80009a8a:	30 08       	mov	r8,0
80009a8c:	fa eb 00 3c 	st.d	sp[60],r10
80009a90:	30 09       	mov	r9,0
80009a92:	e0 a0 0e 78 	rcall	8000b782 <__avr32_f64_cmp_eq>
80009a96:	c1 00       	breq	80009ab6 <_dtoa_r+0xee>
80009a98:	30 18       	mov	r8,1
80009a9a:	41 5a       	lddsp	r10,sp[0x54]
80009a9c:	95 08       	st.w	r10[0x0],r8
80009a9e:	fe cc d6 56 	sub	r12,pc,-10666
80009aa2:	41 29       	lddsp	r9,sp[0x48]
80009aa4:	f8 08 00 08 	add	r8,r12,r8
80009aa8:	58 09       	cp.w	r9,0
80009aaa:	e0 80 05 7a 	breq	8000a59e <_dtoa_r+0xbd6>
80009aae:	12 95       	mov	r5,r9
80009ab0:	8b 08       	st.w	r5[0x0],r8
80009ab2:	e0 8f 05 76 	bral	8000a59e <_dtoa_r+0xbd6>
80009ab6:	fa c8 ff 9c 	sub	r8,sp,-100
80009aba:	fa c9 ff a0 	sub	r9,sp,-96
80009abe:	fa ea 00 3c 	ld.d	r10,sp[60]
80009ac2:	0e 9c       	mov	r12,r7
80009ac4:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80009ac8:	e0 a0 09 0a 	rcall	8000acdc <__d2b>
80009acc:	18 93       	mov	r3,r12
80009ace:	58 05       	cp.w	r5,0
80009ad0:	c0 d0       	breq	80009aea <_dtoa_r+0x122>
80009ad2:	fa ea 00 3c 	ld.d	r10,sp[60]
80009ad6:	30 04       	mov	r4,0
80009ad8:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80009adc:	ea c5 03 ff 	sub	r5,r5,1023
80009ae0:	10 9b       	mov	r11,r8
80009ae2:	51 74       	stdsp	sp[0x5c],r4
80009ae4:	ea 1b 3f f0 	orh	r11,0x3ff0
80009ae8:	c2 58       	rjmp	80009b32 <_dtoa_r+0x16a>
80009aea:	41 88       	lddsp	r8,sp[0x60]
80009aec:	41 9c       	lddsp	r12,sp[0x64]
80009aee:	10 0c       	add	r12,r8
80009af0:	f8 c5 fb ce 	sub	r5,r12,-1074
80009af4:	e0 45 00 20 	cp.w	r5,32
80009af8:	e0 8a 00 0e 	brle	80009b14 <_dtoa_r+0x14c>
80009afc:	f8 cc fb ee 	sub	r12,r12,-1042
80009b00:	40 3b       	lddsp	r11,sp[0xc]
80009b02:	ea 08 11 40 	rsub	r8,r5,64
80009b06:	f6 0c 0a 4c 	lsr	r12,r11,r12
80009b0a:	ec 08 09 46 	lsl	r6,r6,r8
80009b0e:	0c 4c       	or	r12,r6
80009b10:	c0 78       	rjmp	80009b1e <_dtoa_r+0x156>
80009b12:	d7 03       	nop
80009b14:	ea 0c 11 20 	rsub	r12,r5,32
80009b18:	40 3a       	lddsp	r10,sp[0xc]
80009b1a:	f4 0c 09 4c 	lsl	r12,r10,r12
80009b1e:	e0 a0 0d be 	rcall	8000b69a <__avr32_u32_to_f64>
80009b22:	fc 18 fe 10 	movh	r8,0xfe10
80009b26:	30 19       	mov	r9,1
80009b28:	ea c5 04 33 	sub	r5,r5,1075
80009b2c:	f0 0b 00 0b 	add	r11,r8,r11
80009b30:	51 79       	stdsp	sp[0x5c],r9
80009b32:	30 08       	mov	r8,0
80009b34:	fc 19 3f f8 	movh	r9,0x3ff8
80009b38:	e0 a0 0c 46 	rcall	8000b3c4 <__avr32_f64_sub>
80009b3c:	e0 68 43 61 	mov	r8,17249
80009b40:	ea 18 63 6f 	orh	r8,0x636f
80009b44:	e0 69 87 a7 	mov	r9,34727
80009b48:	ea 19 3f d2 	orh	r9,0x3fd2
80009b4c:	e0 a0 0b 50 	rcall	8000b1ec <__avr32_f64_mul>
80009b50:	e0 68 c8 b3 	mov	r8,51379
80009b54:	ea 18 8b 60 	orh	r8,0x8b60
80009b58:	e0 69 8a 28 	mov	r9,35368
80009b5c:	ea 19 3f c6 	orh	r9,0x3fc6
80009b60:	e0 a0 0d 00 	rcall	8000b560 <__avr32_f64_add>
80009b64:	0a 9c       	mov	r12,r5
80009b66:	14 90       	mov	r0,r10
80009b68:	16 91       	mov	r1,r11
80009b6a:	e0 a0 0d 9c 	rcall	8000b6a2 <__avr32_s32_to_f64>
80009b6e:	e0 68 79 fb 	mov	r8,31227
80009b72:	ea 18 50 9f 	orh	r8,0x509f
80009b76:	e0 69 44 13 	mov	r9,17427
80009b7a:	ea 19 3f d3 	orh	r9,0x3fd3
80009b7e:	e0 a0 0b 37 	rcall	8000b1ec <__avr32_f64_mul>
80009b82:	14 98       	mov	r8,r10
80009b84:	16 99       	mov	r9,r11
80009b86:	00 9a       	mov	r10,r0
80009b88:	02 9b       	mov	r11,r1
80009b8a:	e0 a0 0c eb 	rcall	8000b560 <__avr32_f64_add>
80009b8e:	14 90       	mov	r0,r10
80009b90:	16 91       	mov	r1,r11
80009b92:	e0 a0 0d 71 	rcall	8000b674 <__avr32_f64_to_s32>
80009b96:	30 08       	mov	r8,0
80009b98:	18 96       	mov	r6,r12
80009b9a:	30 09       	mov	r9,0
80009b9c:	00 9a       	mov	r10,r0
80009b9e:	02 9b       	mov	r11,r1
80009ba0:	e0 a0 0e 38 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009ba4:	c0 c0       	breq	80009bbc <_dtoa_r+0x1f4>
80009ba6:	0c 9c       	mov	r12,r6
80009ba8:	e0 a0 0d 7d 	rcall	8000b6a2 <__avr32_s32_to_f64>
80009bac:	14 98       	mov	r8,r10
80009bae:	16 99       	mov	r9,r11
80009bb0:	00 9a       	mov	r10,r0
80009bb2:	02 9b       	mov	r11,r1
80009bb4:	e0 a0 0d e7 	rcall	8000b782 <__avr32_f64_cmp_eq>
80009bb8:	f7 b6 00 01 	subeq	r6,1
80009bbc:	59 66       	cp.w	r6,22
80009bbe:	e0 88 00 05 	brls	80009bc8 <_dtoa_r+0x200>
80009bc2:	30 18       	mov	r8,1
80009bc4:	51 48       	stdsp	sp[0x50],r8
80009bc6:	c1 38       	rjmp	80009bec <_dtoa_r+0x224>
80009bc8:	fe c8 d6 00 	sub	r8,pc,-10752
80009bcc:	fa ea 00 3c 	ld.d	r10,sp[60]
80009bd0:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80009bd4:	e0 a0 0e 1e 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009bd8:	f9 b4 00 00 	moveq	r4,0
80009bdc:	fb f4 0a 14 	st.weq	sp[0x50],r4
80009be0:	f7 b6 01 01 	subne	r6,1
80009be4:	f9 bc 01 00 	movne	r12,0
80009be8:	fb fc 1a 14 	st.wne	sp[0x50],r12
80009bec:	41 90       	lddsp	r0,sp[0x64]
80009bee:	20 10       	sub	r0,1
80009bf0:	0a 10       	sub	r0,r5
80009bf2:	c0 46       	brmi	80009bfa <_dtoa_r+0x232>
80009bf4:	50 40       	stdsp	sp[0x10],r0
80009bf6:	30 00       	mov	r0,0
80009bf8:	c0 48       	rjmp	80009c00 <_dtoa_r+0x238>
80009bfa:	30 0b       	mov	r11,0
80009bfc:	5c 30       	neg	r0
80009bfe:	50 4b       	stdsp	sp[0x10],r11
80009c00:	ec 02 11 00 	rsub	r2,r6,0
80009c04:	58 06       	cp.w	r6,0
80009c06:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80009c0a:	f5 d6 e4 0a 	addge	r10,r10,r6
80009c0e:	fb fa 4a 04 	st.wge	sp[0x10],r10
80009c12:	fb f6 4a 11 	st.wge	sp[0x44],r6
80009c16:	f9 b2 04 00 	movge	r2,0
80009c1a:	e1 d6 e5 10 	sublt	r0,r0,r6
80009c1e:	f9 b9 05 00 	movlt	r9,0
80009c22:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80009c26:	40 c8       	lddsp	r8,sp[0x30]
80009c28:	58 98       	cp.w	r8,9
80009c2a:	e0 8b 00 20 	brhi	80009c6a <_dtoa_r+0x2a2>
80009c2e:	58 58       	cp.w	r8,5
80009c30:	f9 b4 0a 01 	movle	r4,1
80009c34:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80009c38:	f7 b5 09 04 	subgt	r5,4
80009c3c:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80009c40:	f9 b4 09 00 	movgt	r4,0
80009c44:	40 cc       	lddsp	r12,sp[0x30]
80009c46:	58 3c       	cp.w	r12,3
80009c48:	c2 d0       	breq	80009ca2 <_dtoa_r+0x2da>
80009c4a:	e0 89 00 05 	brgt	80009c54 <_dtoa_r+0x28c>
80009c4e:	58 2c       	cp.w	r12,2
80009c50:	c1 01       	brne	80009c70 <_dtoa_r+0x2a8>
80009c52:	c1 88       	rjmp	80009c82 <_dtoa_r+0x2ba>
80009c54:	40 cb       	lddsp	r11,sp[0x30]
80009c56:	58 4b       	cp.w	r11,4
80009c58:	c0 60       	breq	80009c64 <_dtoa_r+0x29c>
80009c5a:	58 5b       	cp.w	r11,5
80009c5c:	c0 a1       	brne	80009c70 <_dtoa_r+0x2a8>
80009c5e:	30 1a       	mov	r10,1
80009c60:	50 da       	stdsp	sp[0x34],r10
80009c62:	c2 28       	rjmp	80009ca6 <_dtoa_r+0x2de>
80009c64:	30 19       	mov	r9,1
80009c66:	50 d9       	stdsp	sp[0x34],r9
80009c68:	c0 f8       	rjmp	80009c86 <_dtoa_r+0x2be>
80009c6a:	30 08       	mov	r8,0
80009c6c:	30 14       	mov	r4,1
80009c6e:	50 c8       	stdsp	sp[0x30],r8
80009c70:	3f f5       	mov	r5,-1
80009c72:	30 1c       	mov	r12,1
80009c74:	30 0b       	mov	r11,0
80009c76:	50 95       	stdsp	sp[0x24],r5
80009c78:	50 dc       	stdsp	sp[0x34],r12
80009c7a:	0a 91       	mov	r1,r5
80009c7c:	31 28       	mov	r8,18
80009c7e:	50 eb       	stdsp	sp[0x38],r11
80009c80:	c2 08       	rjmp	80009cc0 <_dtoa_r+0x2f8>
80009c82:	30 0a       	mov	r10,0
80009c84:	50 da       	stdsp	sp[0x34],r10
80009c86:	40 e9       	lddsp	r9,sp[0x38]
80009c88:	58 09       	cp.w	r9,0
80009c8a:	e0 89 00 07 	brgt	80009c98 <_dtoa_r+0x2d0>
80009c8e:	30 18       	mov	r8,1
80009c90:	50 98       	stdsp	sp[0x24],r8
80009c92:	10 91       	mov	r1,r8
80009c94:	50 e8       	stdsp	sp[0x38],r8
80009c96:	c1 58       	rjmp	80009cc0 <_dtoa_r+0x2f8>
80009c98:	40 e5       	lddsp	r5,sp[0x38]
80009c9a:	50 95       	stdsp	sp[0x24],r5
80009c9c:	0a 91       	mov	r1,r5
80009c9e:	0a 98       	mov	r8,r5
80009ca0:	c1 08       	rjmp	80009cc0 <_dtoa_r+0x2f8>
80009ca2:	30 0c       	mov	r12,0
80009ca4:	50 dc       	stdsp	sp[0x34],r12
80009ca6:	40 eb       	lddsp	r11,sp[0x38]
80009ca8:	ec 0b 00 0b 	add	r11,r6,r11
80009cac:	50 9b       	stdsp	sp[0x24],r11
80009cae:	16 98       	mov	r8,r11
80009cb0:	2f f8       	sub	r8,-1
80009cb2:	58 08       	cp.w	r8,0
80009cb4:	e0 89 00 05 	brgt	80009cbe <_dtoa_r+0x2f6>
80009cb8:	10 91       	mov	r1,r8
80009cba:	30 18       	mov	r8,1
80009cbc:	c0 28       	rjmp	80009cc0 <_dtoa_r+0x2f8>
80009cbe:	10 91       	mov	r1,r8
80009cc0:	30 09       	mov	r9,0
80009cc2:	6e 9a       	ld.w	r10,r7[0x24]
80009cc4:	95 19       	st.w	r10[0x4],r9
80009cc6:	30 49       	mov	r9,4
80009cc8:	c0 68       	rjmp	80009cd4 <_dtoa_r+0x30c>
80009cca:	d7 03       	nop
80009ccc:	6a 1a       	ld.w	r10,r5[0x4]
80009cce:	a1 79       	lsl	r9,0x1
80009cd0:	2f fa       	sub	r10,-1
80009cd2:	8b 1a       	st.w	r5[0x4],r10
80009cd4:	6e 95       	ld.w	r5,r7[0x24]
80009cd6:	f2 ca ff ec 	sub	r10,r9,-20
80009cda:	10 3a       	cp.w	r10,r8
80009cdc:	fe 98 ff f8 	brls	80009ccc <_dtoa_r+0x304>
80009ce0:	6a 1b       	ld.w	r11,r5[0x4]
80009ce2:	0e 9c       	mov	r12,r7
80009ce4:	e0 a0 07 c4 	rcall	8000ac6c <_Balloc>
80009ce8:	58 e1       	cp.w	r1,14
80009cea:	5f 88       	srls	r8
80009cec:	8b 0c       	st.w	r5[0x0],r12
80009cee:	f1 e4 00 04 	and	r4,r8,r4
80009cf2:	6e 98       	ld.w	r8,r7[0x24]
80009cf4:	70 08       	ld.w	r8,r8[0x0]
80009cf6:	50 88       	stdsp	sp[0x20],r8
80009cf8:	e0 80 01 82 	breq	80009ffc <_dtoa_r+0x634>
80009cfc:	58 06       	cp.w	r6,0
80009cfe:	e0 8a 00 43 	brle	80009d84 <_dtoa_r+0x3bc>
80009d02:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80009d06:	fe c8 d7 3e 	sub	r8,pc,-10434
80009d0a:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80009d0e:	fa e5 00 18 	st.d	sp[24],r4
80009d12:	ec 04 14 04 	asr	r4,r6,0x4
80009d16:	ed b4 00 04 	bld	r4,0x4
80009d1a:	c0 30       	breq	80009d20 <_dtoa_r+0x358>
80009d1c:	30 25       	mov	r5,2
80009d1e:	c1 08       	rjmp	80009d3e <_dtoa_r+0x376>
80009d20:	fe c8 d6 90 	sub	r8,pc,-10608
80009d24:	f0 e8 00 20 	ld.d	r8,r8[32]
80009d28:	fa ea 00 3c 	ld.d	r10,sp[60]
80009d2c:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80009d30:	e0 a0 0d a4 	rcall	8000b878 <__avr32_f64_div>
80009d34:	30 35       	mov	r5,3
80009d36:	14 98       	mov	r8,r10
80009d38:	16 99       	mov	r9,r11
80009d3a:	fa e9 00 08 	st.d	sp[8],r8
80009d3e:	fe cc d6 ae 	sub	r12,pc,-10578
80009d42:	50 a3       	stdsp	sp[0x28],r3
80009d44:	0c 93       	mov	r3,r6
80009d46:	18 96       	mov	r6,r12
80009d48:	c0 f8       	rjmp	80009d66 <_dtoa_r+0x39e>
80009d4a:	fa ea 00 18 	ld.d	r10,sp[24]
80009d4e:	ed b4 00 00 	bld	r4,0x0
80009d52:	c0 81       	brne	80009d62 <_dtoa_r+0x39a>
80009d54:	ec e8 00 00 	ld.d	r8,r6[0]
80009d58:	2f f5       	sub	r5,-1
80009d5a:	e0 a0 0a 49 	rcall	8000b1ec <__avr32_f64_mul>
80009d5e:	fa eb 00 18 	st.d	sp[24],r10
80009d62:	a1 54       	asr	r4,0x1
80009d64:	2f 86       	sub	r6,-8
80009d66:	58 04       	cp.w	r4,0
80009d68:	cf 11       	brne	80009d4a <_dtoa_r+0x382>
80009d6a:	fa e8 00 18 	ld.d	r8,sp[24]
80009d6e:	fa ea 00 08 	ld.d	r10,sp[8]
80009d72:	06 96       	mov	r6,r3
80009d74:	e0 a0 0d 82 	rcall	8000b878 <__avr32_f64_div>
80009d78:	40 a3       	lddsp	r3,sp[0x28]
80009d7a:	14 98       	mov	r8,r10
80009d7c:	16 99       	mov	r9,r11
80009d7e:	fa e9 00 08 	st.d	sp[8],r8
80009d82:	c2 f8       	rjmp	80009de0 <_dtoa_r+0x418>
80009d84:	ec 08 11 00 	rsub	r8,r6,0
80009d88:	c0 31       	brne	80009d8e <_dtoa_r+0x3c6>
80009d8a:	30 25       	mov	r5,2
80009d8c:	c2 a8       	rjmp	80009de0 <_dtoa_r+0x418>
80009d8e:	fe cc d6 fe 	sub	r12,pc,-10498
80009d92:	f0 04 14 04 	asr	r4,r8,0x4
80009d96:	50 1c       	stdsp	sp[0x4],r12
80009d98:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009d9c:	fe c9 d7 d4 	sub	r9,pc,-10284
80009da0:	fa ea 00 3c 	ld.d	r10,sp[60]
80009da4:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80009da8:	e0 a0 0a 22 	rcall	8000b1ec <__avr32_f64_mul>
80009dac:	40 1c       	lddsp	r12,sp[0x4]
80009dae:	50 63       	stdsp	sp[0x18],r3
80009db0:	30 25       	mov	r5,2
80009db2:	0c 93       	mov	r3,r6
80009db4:	fa eb 00 08 	st.d	sp[8],r10
80009db8:	18 96       	mov	r6,r12
80009dba:	c0 f8       	rjmp	80009dd8 <_dtoa_r+0x410>
80009dbc:	fa ea 00 08 	ld.d	r10,sp[8]
80009dc0:	ed b4 00 00 	bld	r4,0x0
80009dc4:	c0 81       	brne	80009dd4 <_dtoa_r+0x40c>
80009dc6:	ec e8 00 00 	ld.d	r8,r6[0]
80009dca:	2f f5       	sub	r5,-1
80009dcc:	e0 a0 0a 10 	rcall	8000b1ec <__avr32_f64_mul>
80009dd0:	fa eb 00 08 	st.d	sp[8],r10
80009dd4:	a1 54       	asr	r4,0x1
80009dd6:	2f 86       	sub	r6,-8
80009dd8:	58 04       	cp.w	r4,0
80009dda:	cf 11       	brne	80009dbc <_dtoa_r+0x3f4>
80009ddc:	06 96       	mov	r6,r3
80009dde:	40 63       	lddsp	r3,sp[0x18]
80009de0:	41 4a       	lddsp	r10,sp[0x50]
80009de2:	58 0a       	cp.w	r10,0
80009de4:	c2 a0       	breq	80009e38 <_dtoa_r+0x470>
80009de6:	fa e8 00 08 	ld.d	r8,sp[8]
80009dea:	58 01       	cp.w	r1,0
80009dec:	5f 94       	srgt	r4
80009dee:	fa e9 00 18 	st.d	sp[24],r8
80009df2:	30 08       	mov	r8,0
80009df4:	fc 19 3f f0 	movh	r9,0x3ff0
80009df8:	fa ea 00 18 	ld.d	r10,sp[24]
80009dfc:	e0 a0 0d 0a 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009e00:	f9 bc 00 00 	moveq	r12,0
80009e04:	f9 bc 01 01 	movne	r12,1
80009e08:	e9 ec 00 0c 	and	r12,r4,r12
80009e0c:	c1 60       	breq	80009e38 <_dtoa_r+0x470>
80009e0e:	40 98       	lddsp	r8,sp[0x24]
80009e10:	58 08       	cp.w	r8,0
80009e12:	e0 8a 00 f1 	brle	80009ff4 <_dtoa_r+0x62c>
80009e16:	30 08       	mov	r8,0
80009e18:	fc 19 40 24 	movh	r9,0x4024
80009e1c:	ec c4 00 01 	sub	r4,r6,1
80009e20:	fa ea 00 18 	ld.d	r10,sp[24]
80009e24:	2f f5       	sub	r5,-1
80009e26:	50 64       	stdsp	sp[0x18],r4
80009e28:	e0 a0 09 e2 	rcall	8000b1ec <__avr32_f64_mul>
80009e2c:	40 94       	lddsp	r4,sp[0x24]
80009e2e:	14 98       	mov	r8,r10
80009e30:	16 99       	mov	r9,r11
80009e32:	fa e9 00 08 	st.d	sp[8],r8
80009e36:	c0 38       	rjmp	80009e3c <_dtoa_r+0x474>
80009e38:	50 66       	stdsp	sp[0x18],r6
80009e3a:	02 94       	mov	r4,r1
80009e3c:	0a 9c       	mov	r12,r5
80009e3e:	e0 a0 0c 32 	rcall	8000b6a2 <__avr32_s32_to_f64>
80009e42:	fa e8 00 08 	ld.d	r8,sp[8]
80009e46:	e0 a0 09 d3 	rcall	8000b1ec <__avr32_f64_mul>
80009e4a:	30 08       	mov	r8,0
80009e4c:	fc 19 40 1c 	movh	r9,0x401c
80009e50:	e0 a0 0b 88 	rcall	8000b560 <__avr32_f64_add>
80009e54:	14 98       	mov	r8,r10
80009e56:	16 99       	mov	r9,r11
80009e58:	fa e9 00 28 	st.d	sp[40],r8
80009e5c:	fc 18 fc c0 	movh	r8,0xfcc0
80009e60:	40 a5       	lddsp	r5,sp[0x28]
80009e62:	10 05       	add	r5,r8
80009e64:	50 a5       	stdsp	sp[0x28],r5
80009e66:	58 04       	cp.w	r4,0
80009e68:	c2 11       	brne	80009eaa <_dtoa_r+0x4e2>
80009e6a:	fa ea 00 08 	ld.d	r10,sp[8]
80009e6e:	30 08       	mov	r8,0
80009e70:	fc 19 40 14 	movh	r9,0x4014
80009e74:	e0 a0 0a a8 	rcall	8000b3c4 <__avr32_f64_sub>
80009e78:	40 bc       	lddsp	r12,sp[0x2c]
80009e7a:	fa eb 00 08 	st.d	sp[8],r10
80009e7e:	14 98       	mov	r8,r10
80009e80:	16 99       	mov	r9,r11
80009e82:	18 9a       	mov	r10,r12
80009e84:	0a 9b       	mov	r11,r5
80009e86:	e0 a0 0c c5 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009e8a:	e0 81 02 54 	brne	8000a332 <_dtoa_r+0x96a>
80009e8e:	0a 98       	mov	r8,r5
80009e90:	40 b9       	lddsp	r9,sp[0x2c]
80009e92:	ee 18 80 00 	eorh	r8,0x8000
80009e96:	fa ea 00 08 	ld.d	r10,sp[8]
80009e9a:	10 95       	mov	r5,r8
80009e9c:	12 98       	mov	r8,r9
80009e9e:	0a 99       	mov	r9,r5
80009ea0:	e0 a0 0c b8 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009ea4:	e0 81 02 3e 	brne	8000a320 <_dtoa_r+0x958>
80009ea8:	ca 68       	rjmp	80009ff4 <_dtoa_r+0x62c>
80009eaa:	fe c9 d8 e2 	sub	r9,pc,-10014
80009eae:	e8 c8 00 01 	sub	r8,r4,1
80009eb2:	40 d5       	lddsp	r5,sp[0x34]
80009eb4:	58 05       	cp.w	r5,0
80009eb6:	c4 f0       	breq	80009f54 <_dtoa_r+0x58c>
80009eb8:	30 0c       	mov	r12,0
80009eba:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80009ebe:	51 3c       	stdsp	sp[0x4c],r12
80009ec0:	30 0a       	mov	r10,0
80009ec2:	fc 1b 3f e0 	movh	r11,0x3fe0
80009ec6:	e0 a0 0c d9 	rcall	8000b878 <__avr32_f64_div>
80009eca:	fa e8 00 28 	ld.d	r8,sp[40]
80009ece:	40 85       	lddsp	r5,sp[0x20]
80009ed0:	e0 a0 0a 7a 	rcall	8000b3c4 <__avr32_f64_sub>
80009ed4:	fa eb 00 28 	st.d	sp[40],r10
80009ed8:	fa ea 00 08 	ld.d	r10,sp[8]
80009edc:	e0 a0 0b cc 	rcall	8000b674 <__avr32_f64_to_s32>
80009ee0:	51 6c       	stdsp	sp[0x58],r12
80009ee2:	e0 a0 0b e0 	rcall	8000b6a2 <__avr32_s32_to_f64>
80009ee6:	14 98       	mov	r8,r10
80009ee8:	16 99       	mov	r9,r11
80009eea:	fa ea 00 08 	ld.d	r10,sp[8]
80009eee:	e0 a0 0a 6b 	rcall	8000b3c4 <__avr32_f64_sub>
80009ef2:	fa eb 00 08 	st.d	sp[8],r10
80009ef6:	41 68       	lddsp	r8,sp[0x58]
80009ef8:	2d 08       	sub	r8,-48
80009efa:	0a c8       	st.b	r5++,r8
80009efc:	41 39       	lddsp	r9,sp[0x4c]
80009efe:	2f f9       	sub	r9,-1
80009f00:	51 39       	stdsp	sp[0x4c],r9
80009f02:	fa e8 00 28 	ld.d	r8,sp[40]
80009f06:	e0 a0 0c 85 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009f0a:	e0 81 03 39 	brne	8000a57c <_dtoa_r+0xbb4>
80009f0e:	fa e8 00 08 	ld.d	r8,sp[8]
80009f12:	30 0a       	mov	r10,0
80009f14:	fc 1b 3f f0 	movh	r11,0x3ff0
80009f18:	e0 a0 0a 56 	rcall	8000b3c4 <__avr32_f64_sub>
80009f1c:	fa e8 00 28 	ld.d	r8,sp[40]
80009f20:	e0 a0 0c 78 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009f24:	fa ea 00 28 	ld.d	r10,sp[40]
80009f28:	30 08       	mov	r8,0
80009f2a:	fc 19 40 24 	movh	r9,0x4024
80009f2e:	e0 81 00 da 	brne	8000a0e2 <_dtoa_r+0x71a>
80009f32:	41 3c       	lddsp	r12,sp[0x4c]
80009f34:	08 3c       	cp.w	r12,r4
80009f36:	c5 f4       	brge	80009ff4 <_dtoa_r+0x62c>
80009f38:	e0 a0 09 5a 	rcall	8000b1ec <__avr32_f64_mul>
80009f3c:	30 08       	mov	r8,0
80009f3e:	fa eb 00 28 	st.d	sp[40],r10
80009f42:	fc 19 40 24 	movh	r9,0x4024
80009f46:	fa ea 00 08 	ld.d	r10,sp[8]
80009f4a:	e0 a0 09 51 	rcall	8000b1ec <__avr32_f64_mul>
80009f4e:	fa eb 00 08 	st.d	sp[8],r10
80009f52:	cc 3b       	rjmp	80009ed8 <_dtoa_r+0x510>
80009f54:	40 85       	lddsp	r5,sp[0x20]
80009f56:	08 05       	add	r5,r4
80009f58:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80009f5c:	51 35       	stdsp	sp[0x4c],r5
80009f5e:	fa e8 00 28 	ld.d	r8,sp[40]
80009f62:	40 85       	lddsp	r5,sp[0x20]
80009f64:	e0 a0 09 44 	rcall	8000b1ec <__avr32_f64_mul>
80009f68:	fa eb 00 28 	st.d	sp[40],r10
80009f6c:	fa ea 00 08 	ld.d	r10,sp[8]
80009f70:	e0 a0 0b 82 	rcall	8000b674 <__avr32_f64_to_s32>
80009f74:	51 6c       	stdsp	sp[0x58],r12
80009f76:	e0 a0 0b 96 	rcall	8000b6a2 <__avr32_s32_to_f64>
80009f7a:	14 98       	mov	r8,r10
80009f7c:	16 99       	mov	r9,r11
80009f7e:	fa ea 00 08 	ld.d	r10,sp[8]
80009f82:	e0 a0 0a 21 	rcall	8000b3c4 <__avr32_f64_sub>
80009f86:	fa eb 00 08 	st.d	sp[8],r10
80009f8a:	41 68       	lddsp	r8,sp[0x58]
80009f8c:	2d 08       	sub	r8,-48
80009f8e:	0a c8       	st.b	r5++,r8
80009f90:	41 3c       	lddsp	r12,sp[0x4c]
80009f92:	18 35       	cp.w	r5,r12
80009f94:	c2 81       	brne	80009fe4 <_dtoa_r+0x61c>
80009f96:	30 08       	mov	r8,0
80009f98:	fc 19 3f e0 	movh	r9,0x3fe0
80009f9c:	fa ea 00 28 	ld.d	r10,sp[40]
80009fa0:	e0 a0 0a e0 	rcall	8000b560 <__avr32_f64_add>
80009fa4:	40 85       	lddsp	r5,sp[0x20]
80009fa6:	fa e8 00 08 	ld.d	r8,sp[8]
80009faa:	08 05       	add	r5,r4
80009fac:	e0 a0 0c 32 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009fb0:	e0 81 00 99 	brne	8000a0e2 <_dtoa_r+0x71a>
80009fb4:	fa e8 00 28 	ld.d	r8,sp[40]
80009fb8:	30 0a       	mov	r10,0
80009fba:	fc 1b 3f e0 	movh	r11,0x3fe0
80009fbe:	e0 a0 0a 03 	rcall	8000b3c4 <__avr32_f64_sub>
80009fc2:	14 98       	mov	r8,r10
80009fc4:	16 99       	mov	r9,r11
80009fc6:	fa ea 00 08 	ld.d	r10,sp[8]
80009fca:	e0 a0 0c 23 	rcall	8000b810 <__avr32_f64_cmp_lt>
80009fce:	c1 30       	breq	80009ff4 <_dtoa_r+0x62c>
80009fd0:	33 09       	mov	r9,48
80009fd2:	0a 98       	mov	r8,r5
80009fd4:	11 7a       	ld.ub	r10,--r8
80009fd6:	f2 0a 18 00 	cp.b	r10,r9
80009fda:	e0 81 02 d1 	brne	8000a57c <_dtoa_r+0xbb4>
80009fde:	10 95       	mov	r5,r8
80009fe0:	cf 9b       	rjmp	80009fd2 <_dtoa_r+0x60a>
80009fe2:	d7 03       	nop
80009fe4:	30 08       	mov	r8,0
80009fe6:	fc 19 40 24 	movh	r9,0x4024
80009fea:	e0 a0 09 01 	rcall	8000b1ec <__avr32_f64_mul>
80009fee:	fa eb 00 08 	st.d	sp[8],r10
80009ff2:	cb db       	rjmp	80009f6c <_dtoa_r+0x5a4>
80009ff4:	fa ea 00 3c 	ld.d	r10,sp[60]
80009ff8:	fa eb 00 08 	st.d	sp[8],r10
80009ffc:	58 e6       	cp.w	r6,14
80009ffe:	5f ab       	srle	r11
8000a000:	41 8a       	lddsp	r10,sp[0x60]
8000a002:	30 08       	mov	r8,0
8000a004:	f4 09 11 ff 	rsub	r9,r10,-1
8000a008:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000a00c:	f0 09 18 00 	cp.b	r9,r8
8000a010:	e0 80 00 82 	breq	8000a114 <_dtoa_r+0x74c>
8000a014:	40 ea       	lddsp	r10,sp[0x38]
8000a016:	58 01       	cp.w	r1,0
8000a018:	5f a9       	srle	r9
8000a01a:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000a01e:	fe ca da 56 	sub	r10,pc,-9642
8000a022:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000a026:	fa e5 00 10 	st.d	sp[16],r4
8000a02a:	f0 09 18 00 	cp.b	r9,r8
8000a02e:	c1 40       	breq	8000a056 <_dtoa_r+0x68e>
8000a030:	58 01       	cp.w	r1,0
8000a032:	e0 81 01 77 	brne	8000a320 <_dtoa_r+0x958>
8000a036:	30 08       	mov	r8,0
8000a038:	fc 19 40 14 	movh	r9,0x4014
8000a03c:	08 9a       	mov	r10,r4
8000a03e:	0a 9b       	mov	r11,r5
8000a040:	e0 a0 08 d6 	rcall	8000b1ec <__avr32_f64_mul>
8000a044:	fa e8 00 08 	ld.d	r8,sp[8]
8000a048:	e0 a0 0b b0 	rcall	8000b7a8 <__avr32_f64_cmp_ge>
8000a04c:	e0 81 01 6a 	brne	8000a320 <_dtoa_r+0x958>
8000a050:	02 92       	mov	r2,r1
8000a052:	e0 8f 01 72 	bral	8000a336 <_dtoa_r+0x96e>
8000a056:	40 85       	lddsp	r5,sp[0x20]
8000a058:	30 14       	mov	r4,1
8000a05a:	fa e8 00 10 	ld.d	r8,sp[16]
8000a05e:	fa ea 00 08 	ld.d	r10,sp[8]
8000a062:	e0 a0 0c 0b 	rcall	8000b878 <__avr32_f64_div>
8000a066:	e0 a0 0b 07 	rcall	8000b674 <__avr32_f64_to_s32>
8000a06a:	18 92       	mov	r2,r12
8000a06c:	e0 a0 0b 1b 	rcall	8000b6a2 <__avr32_s32_to_f64>
8000a070:	fa e8 00 10 	ld.d	r8,sp[16]
8000a074:	e0 a0 08 bc 	rcall	8000b1ec <__avr32_f64_mul>
8000a078:	14 98       	mov	r8,r10
8000a07a:	16 99       	mov	r9,r11
8000a07c:	fa ea 00 08 	ld.d	r10,sp[8]
8000a080:	e0 a0 09 a2 	rcall	8000b3c4 <__avr32_f64_sub>
8000a084:	fa eb 00 08 	st.d	sp[8],r10
8000a088:	e4 c8 ff d0 	sub	r8,r2,-48
8000a08c:	0a c8       	st.b	r5++,r8
8000a08e:	fc 19 40 24 	movh	r9,0x4024
8000a092:	30 08       	mov	r8,0
8000a094:	02 34       	cp.w	r4,r1
8000a096:	c3 31       	brne	8000a0fc <_dtoa_r+0x734>
8000a098:	fa e8 00 08 	ld.d	r8,sp[8]
8000a09c:	e0 a0 0a 62 	rcall	8000b560 <__avr32_f64_add>
8000a0a0:	16 91       	mov	r1,r11
8000a0a2:	14 90       	mov	r0,r10
8000a0a4:	14 98       	mov	r8,r10
8000a0a6:	02 99       	mov	r9,r1
8000a0a8:	fa ea 00 10 	ld.d	r10,sp[16]
8000a0ac:	e0 a0 0b b2 	rcall	8000b810 <__avr32_f64_cmp_lt>
8000a0b0:	c1 a1       	brne	8000a0e4 <_dtoa_r+0x71c>
8000a0b2:	fa e8 00 10 	ld.d	r8,sp[16]
8000a0b6:	00 9a       	mov	r10,r0
8000a0b8:	02 9b       	mov	r11,r1
8000a0ba:	e0 a0 0b 64 	rcall	8000b782 <__avr32_f64_cmp_eq>
8000a0be:	e0 80 02 5e 	breq	8000a57a <_dtoa_r+0xbb2>
8000a0c2:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000a0c6:	c0 f1       	brne	8000a0e4 <_dtoa_r+0x71c>
8000a0c8:	e0 8f 02 59 	bral	8000a57a <_dtoa_r+0xbb2>
8000a0cc:	40 8a       	lddsp	r10,sp[0x20]
8000a0ce:	14 38       	cp.w	r8,r10
8000a0d0:	c0 30       	breq	8000a0d6 <_dtoa_r+0x70e>
8000a0d2:	10 95       	mov	r5,r8
8000a0d4:	c0 98       	rjmp	8000a0e6 <_dtoa_r+0x71e>
8000a0d6:	33 08       	mov	r8,48
8000a0d8:	40 89       	lddsp	r9,sp[0x20]
8000a0da:	2f f6       	sub	r6,-1
8000a0dc:	b2 88       	st.b	r9[0x0],r8
8000a0de:	40 88       	lddsp	r8,sp[0x20]
8000a0e0:	c0 88       	rjmp	8000a0f0 <_dtoa_r+0x728>
8000a0e2:	40 66       	lddsp	r6,sp[0x18]
8000a0e4:	33 99       	mov	r9,57
8000a0e6:	0a 98       	mov	r8,r5
8000a0e8:	11 7a       	ld.ub	r10,--r8
8000a0ea:	f2 0a 18 00 	cp.b	r10,r9
8000a0ee:	ce f0       	breq	8000a0cc <_dtoa_r+0x704>
8000a0f0:	50 66       	stdsp	sp[0x18],r6
8000a0f2:	11 89       	ld.ub	r9,r8[0x0]
8000a0f4:	2f f9       	sub	r9,-1
8000a0f6:	b0 89       	st.b	r8[0x0],r9
8000a0f8:	e0 8f 02 42 	bral	8000a57c <_dtoa_r+0xbb4>
8000a0fc:	e0 a0 08 78 	rcall	8000b1ec <__avr32_f64_mul>
8000a100:	2f f4       	sub	r4,-1
8000a102:	fa eb 00 08 	st.d	sp[8],r10
8000a106:	30 08       	mov	r8,0
8000a108:	30 09       	mov	r9,0
8000a10a:	e0 a0 0b 3c 	rcall	8000b782 <__avr32_f64_cmp_eq>
8000a10e:	ca 60       	breq	8000a05a <_dtoa_r+0x692>
8000a110:	e0 8f 02 35 	bral	8000a57a <_dtoa_r+0xbb2>
8000a114:	40 d8       	lddsp	r8,sp[0x34]
8000a116:	58 08       	cp.w	r8,0
8000a118:	c0 51       	brne	8000a122 <_dtoa_r+0x75a>
8000a11a:	04 98       	mov	r8,r2
8000a11c:	00 95       	mov	r5,r0
8000a11e:	40 d4       	lddsp	r4,sp[0x34]
8000a120:	c3 78       	rjmp	8000a18e <_dtoa_r+0x7c6>
8000a122:	40 c5       	lddsp	r5,sp[0x30]
8000a124:	58 15       	cp.w	r5,1
8000a126:	e0 89 00 0f 	brgt	8000a144 <_dtoa_r+0x77c>
8000a12a:	41 74       	lddsp	r4,sp[0x5c]
8000a12c:	58 04       	cp.w	r4,0
8000a12e:	c0 40       	breq	8000a136 <_dtoa_r+0x76e>
8000a130:	f4 c9 fb cd 	sub	r9,r10,-1075
8000a134:	c0 48       	rjmp	8000a13c <_dtoa_r+0x774>
8000a136:	41 99       	lddsp	r9,sp[0x64]
8000a138:	f2 09 11 36 	rsub	r9,r9,54
8000a13c:	04 98       	mov	r8,r2
8000a13e:	00 95       	mov	r5,r0
8000a140:	c1 c8       	rjmp	8000a178 <_dtoa_r+0x7b0>
8000a142:	d7 03       	nop
8000a144:	e2 c8 00 01 	sub	r8,r1,1
8000a148:	58 01       	cp.w	r1,0
8000a14a:	e0 05 17 40 	movge	r5,r0
8000a14e:	e2 09 17 40 	movge	r9,r1
8000a152:	e1 d1 e5 15 	sublt	r5,r0,r1
8000a156:	f9 b9 05 00 	movlt	r9,0
8000a15a:	10 32       	cp.w	r2,r8
8000a15c:	e5 d8 e4 18 	subge	r8,r2,r8
8000a160:	f1 d2 e5 18 	sublt	r8,r8,r2
8000a164:	e5 d8 e5 02 	addlt	r2,r2,r8
8000a168:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000a16c:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000a170:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000a174:	f9 b8 05 00 	movlt	r8,0
8000a178:	40 4b       	lddsp	r11,sp[0x10]
8000a17a:	12 0b       	add	r11,r9
8000a17c:	50 08       	stdsp	sp[0x0],r8
8000a17e:	50 4b       	stdsp	sp[0x10],r11
8000a180:	12 00       	add	r0,r9
8000a182:	30 1b       	mov	r11,1
8000a184:	0e 9c       	mov	r12,r7
8000a186:	e0 a0 07 27 	rcall	8000afd4 <__i2b>
8000a18a:	40 08       	lddsp	r8,sp[0x0]
8000a18c:	18 94       	mov	r4,r12
8000a18e:	40 4a       	lddsp	r10,sp[0x10]
8000a190:	58 05       	cp.w	r5,0
8000a192:	5f 99       	srgt	r9
8000a194:	58 0a       	cp.w	r10,0
8000a196:	5f 9a       	srgt	r10
8000a198:	f5 e9 00 09 	and	r9,r10,r9
8000a19c:	c0 80       	breq	8000a1ac <_dtoa_r+0x7e4>
8000a19e:	40 4c       	lddsp	r12,sp[0x10]
8000a1a0:	f8 05 0d 49 	min	r9,r12,r5
8000a1a4:	12 1c       	sub	r12,r9
8000a1a6:	12 10       	sub	r0,r9
8000a1a8:	50 4c       	stdsp	sp[0x10],r12
8000a1aa:	12 15       	sub	r5,r9
8000a1ac:	58 02       	cp.w	r2,0
8000a1ae:	e0 8a 00 27 	brle	8000a1fc <_dtoa_r+0x834>
8000a1b2:	40 db       	lddsp	r11,sp[0x34]
8000a1b4:	58 0b       	cp.w	r11,0
8000a1b6:	c1 d0       	breq	8000a1f0 <_dtoa_r+0x828>
8000a1b8:	58 08       	cp.w	r8,0
8000a1ba:	e0 8a 00 17 	brle	8000a1e8 <_dtoa_r+0x820>
8000a1be:	10 9a       	mov	r10,r8
8000a1c0:	50 08       	stdsp	sp[0x0],r8
8000a1c2:	08 9b       	mov	r11,r4
8000a1c4:	0e 9c       	mov	r12,r7
8000a1c6:	e0 a0 07 4d 	rcall	8000b060 <__pow5mult>
8000a1ca:	06 9a       	mov	r10,r3
8000a1cc:	18 9b       	mov	r11,r12
8000a1ce:	18 94       	mov	r4,r12
8000a1d0:	0e 9c       	mov	r12,r7
8000a1d2:	e0 a0 06 81 	rcall	8000aed4 <__multiply>
8000a1d6:	18 99       	mov	r9,r12
8000a1d8:	06 9b       	mov	r11,r3
8000a1da:	50 19       	stdsp	sp[0x4],r9
8000a1dc:	0e 9c       	mov	r12,r7
8000a1de:	e0 a0 05 2d 	rcall	8000ac38 <_Bfree>
8000a1e2:	40 19       	lddsp	r9,sp[0x4]
8000a1e4:	40 08       	lddsp	r8,sp[0x0]
8000a1e6:	12 93       	mov	r3,r9
8000a1e8:	e4 08 01 0a 	sub	r10,r2,r8
8000a1ec:	c0 80       	breq	8000a1fc <_dtoa_r+0x834>
8000a1ee:	c0 28       	rjmp	8000a1f2 <_dtoa_r+0x82a>
8000a1f0:	04 9a       	mov	r10,r2
8000a1f2:	06 9b       	mov	r11,r3
8000a1f4:	0e 9c       	mov	r12,r7
8000a1f6:	e0 a0 07 35 	rcall	8000b060 <__pow5mult>
8000a1fa:	18 93       	mov	r3,r12
8000a1fc:	30 1b       	mov	r11,1
8000a1fe:	0e 9c       	mov	r12,r7
8000a200:	e0 a0 06 ea 	rcall	8000afd4 <__i2b>
8000a204:	41 1a       	lddsp	r10,sp[0x44]
8000a206:	18 92       	mov	r2,r12
8000a208:	58 0a       	cp.w	r10,0
8000a20a:	e0 8a 00 07 	brle	8000a218 <_dtoa_r+0x850>
8000a20e:	18 9b       	mov	r11,r12
8000a210:	0e 9c       	mov	r12,r7
8000a212:	e0 a0 07 27 	rcall	8000b060 <__pow5mult>
8000a216:	18 92       	mov	r2,r12
8000a218:	40 c9       	lddsp	r9,sp[0x30]
8000a21a:	58 19       	cp.w	r9,1
8000a21c:	e0 89 00 14 	brgt	8000a244 <_dtoa_r+0x87c>
8000a220:	40 38       	lddsp	r8,sp[0xc]
8000a222:	58 08       	cp.w	r8,0
8000a224:	c1 01       	brne	8000a244 <_dtoa_r+0x87c>
8000a226:	40 29       	lddsp	r9,sp[0x8]
8000a228:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000a22c:	c0 c1       	brne	8000a244 <_dtoa_r+0x87c>
8000a22e:	12 98       	mov	r8,r9
8000a230:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000a234:	c0 80       	breq	8000a244 <_dtoa_r+0x87c>
8000a236:	40 4c       	lddsp	r12,sp[0x10]
8000a238:	30 1b       	mov	r11,1
8000a23a:	2f fc       	sub	r12,-1
8000a23c:	2f f0       	sub	r0,-1
8000a23e:	50 4c       	stdsp	sp[0x10],r12
8000a240:	50 6b       	stdsp	sp[0x18],r11
8000a242:	c0 38       	rjmp	8000a248 <_dtoa_r+0x880>
8000a244:	30 0a       	mov	r10,0
8000a246:	50 6a       	stdsp	sp[0x18],r10
8000a248:	41 19       	lddsp	r9,sp[0x44]
8000a24a:	58 09       	cp.w	r9,0
8000a24c:	c0 31       	brne	8000a252 <_dtoa_r+0x88a>
8000a24e:	30 1c       	mov	r12,1
8000a250:	c0 98       	rjmp	8000a262 <_dtoa_r+0x89a>
8000a252:	64 48       	ld.w	r8,r2[0x10]
8000a254:	2f c8       	sub	r8,-4
8000a256:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000a25a:	e0 a0 04 5e 	rcall	8000ab16 <__hi0bits>
8000a25e:	f8 0c 11 20 	rsub	r12,r12,32
8000a262:	40 4b       	lddsp	r11,sp[0x10]
8000a264:	f8 0b 00 08 	add	r8,r12,r11
8000a268:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000a26c:	c0 c0       	breq	8000a284 <_dtoa_r+0x8bc>
8000a26e:	f0 08 11 20 	rsub	r8,r8,32
8000a272:	58 48       	cp.w	r8,4
8000a274:	e0 8a 00 06 	brle	8000a280 <_dtoa_r+0x8b8>
8000a278:	20 48       	sub	r8,4
8000a27a:	10 0b       	add	r11,r8
8000a27c:	50 4b       	stdsp	sp[0x10],r11
8000a27e:	c0 78       	rjmp	8000a28c <_dtoa_r+0x8c4>
8000a280:	58 48       	cp.w	r8,4
8000a282:	c0 70       	breq	8000a290 <_dtoa_r+0x8c8>
8000a284:	40 4a       	lddsp	r10,sp[0x10]
8000a286:	2e 48       	sub	r8,-28
8000a288:	10 0a       	add	r10,r8
8000a28a:	50 4a       	stdsp	sp[0x10],r10
8000a28c:	10 00       	add	r0,r8
8000a28e:	10 05       	add	r5,r8
8000a290:	58 00       	cp.w	r0,0
8000a292:	e0 8a 00 08 	brle	8000a2a2 <_dtoa_r+0x8da>
8000a296:	06 9b       	mov	r11,r3
8000a298:	00 9a       	mov	r10,r0
8000a29a:	0e 9c       	mov	r12,r7
8000a29c:	e0 a0 05 d8 	rcall	8000ae4c <__lshift>
8000a2a0:	18 93       	mov	r3,r12
8000a2a2:	40 49       	lddsp	r9,sp[0x10]
8000a2a4:	58 09       	cp.w	r9,0
8000a2a6:	e0 8a 00 08 	brle	8000a2b6 <_dtoa_r+0x8ee>
8000a2aa:	04 9b       	mov	r11,r2
8000a2ac:	12 9a       	mov	r10,r9
8000a2ae:	0e 9c       	mov	r12,r7
8000a2b0:	e0 a0 05 ce 	rcall	8000ae4c <__lshift>
8000a2b4:	18 92       	mov	r2,r12
8000a2b6:	41 48       	lddsp	r8,sp[0x50]
8000a2b8:	58 08       	cp.w	r8,0
8000a2ba:	c1 b0       	breq	8000a2f0 <_dtoa_r+0x928>
8000a2bc:	04 9b       	mov	r11,r2
8000a2be:	06 9c       	mov	r12,r3
8000a2c0:	e0 a0 04 a2 	rcall	8000ac04 <__mcmp>
8000a2c4:	c1 64       	brge	8000a2f0 <_dtoa_r+0x928>
8000a2c6:	06 9b       	mov	r11,r3
8000a2c8:	30 09       	mov	r9,0
8000a2ca:	30 aa       	mov	r10,10
8000a2cc:	0e 9c       	mov	r12,r7
8000a2ce:	e0 a0 06 8b 	rcall	8000afe4 <__multadd>
8000a2d2:	20 16       	sub	r6,1
8000a2d4:	18 93       	mov	r3,r12
8000a2d6:	40 dc       	lddsp	r12,sp[0x34]
8000a2d8:	58 0c       	cp.w	r12,0
8000a2da:	c0 31       	brne	8000a2e0 <_dtoa_r+0x918>
8000a2dc:	40 91       	lddsp	r1,sp[0x24]
8000a2de:	c0 98       	rjmp	8000a2f0 <_dtoa_r+0x928>
8000a2e0:	08 9b       	mov	r11,r4
8000a2e2:	40 91       	lddsp	r1,sp[0x24]
8000a2e4:	30 09       	mov	r9,0
8000a2e6:	30 aa       	mov	r10,10
8000a2e8:	0e 9c       	mov	r12,r7
8000a2ea:	e0 a0 06 7d 	rcall	8000afe4 <__multadd>
8000a2ee:	18 94       	mov	r4,r12
8000a2f0:	58 01       	cp.w	r1,0
8000a2f2:	5f a9       	srle	r9
8000a2f4:	40 cb       	lddsp	r11,sp[0x30]
8000a2f6:	58 2b       	cp.w	r11,2
8000a2f8:	5f 98       	srgt	r8
8000a2fa:	f3 e8 00 08 	and	r8,r9,r8
8000a2fe:	c2 50       	breq	8000a348 <_dtoa_r+0x980>
8000a300:	58 01       	cp.w	r1,0
8000a302:	c1 11       	brne	8000a324 <_dtoa_r+0x95c>
8000a304:	04 9b       	mov	r11,r2
8000a306:	02 99       	mov	r9,r1
8000a308:	30 5a       	mov	r10,5
8000a30a:	0e 9c       	mov	r12,r7
8000a30c:	e0 a0 06 6c 	rcall	8000afe4 <__multadd>
8000a310:	18 92       	mov	r2,r12
8000a312:	18 9b       	mov	r11,r12
8000a314:	06 9c       	mov	r12,r3
8000a316:	e0 a0 04 77 	rcall	8000ac04 <__mcmp>
8000a31a:	e0 89 00 0f 	brgt	8000a338 <_dtoa_r+0x970>
8000a31e:	c0 38       	rjmp	8000a324 <_dtoa_r+0x95c>
8000a320:	30 02       	mov	r2,0
8000a322:	04 94       	mov	r4,r2
8000a324:	40 ea       	lddsp	r10,sp[0x38]
8000a326:	30 09       	mov	r9,0
8000a328:	5c da       	com	r10
8000a32a:	40 85       	lddsp	r5,sp[0x20]
8000a32c:	50 6a       	stdsp	sp[0x18],r10
8000a32e:	50 49       	stdsp	sp[0x10],r9
8000a330:	c0 f9       	rjmp	8000a54e <_dtoa_r+0xb86>
8000a332:	08 92       	mov	r2,r4
8000a334:	40 66       	lddsp	r6,sp[0x18]
8000a336:	04 94       	mov	r4,r2
8000a338:	2f f6       	sub	r6,-1
8000a33a:	50 66       	stdsp	sp[0x18],r6
8000a33c:	33 18       	mov	r8,49
8000a33e:	40 85       	lddsp	r5,sp[0x20]
8000a340:	0a c8       	st.b	r5++,r8
8000a342:	30 08       	mov	r8,0
8000a344:	50 48       	stdsp	sp[0x10],r8
8000a346:	c0 49       	rjmp	8000a54e <_dtoa_r+0xb86>
8000a348:	40 dc       	lddsp	r12,sp[0x34]
8000a34a:	58 0c       	cp.w	r12,0
8000a34c:	e0 80 00 b5 	breq	8000a4b6 <_dtoa_r+0xaee>
8000a350:	58 05       	cp.w	r5,0
8000a352:	e0 8a 00 08 	brle	8000a362 <_dtoa_r+0x99a>
8000a356:	08 9b       	mov	r11,r4
8000a358:	0a 9a       	mov	r10,r5
8000a35a:	0e 9c       	mov	r12,r7
8000a35c:	e0 a0 05 78 	rcall	8000ae4c <__lshift>
8000a360:	18 94       	mov	r4,r12
8000a362:	40 6b       	lddsp	r11,sp[0x18]
8000a364:	58 0b       	cp.w	r11,0
8000a366:	c0 31       	brne	8000a36c <_dtoa_r+0x9a4>
8000a368:	08 9c       	mov	r12,r4
8000a36a:	c1 38       	rjmp	8000a390 <_dtoa_r+0x9c8>
8000a36c:	68 1b       	ld.w	r11,r4[0x4]
8000a36e:	0e 9c       	mov	r12,r7
8000a370:	e0 a0 04 7e 	rcall	8000ac6c <_Balloc>
8000a374:	68 4a       	ld.w	r10,r4[0x10]
8000a376:	18 95       	mov	r5,r12
8000a378:	e8 cb ff f4 	sub	r11,r4,-12
8000a37c:	2f ea       	sub	r10,-2
8000a37e:	2f 4c       	sub	r12,-12
8000a380:	a3 6a       	lsl	r10,0x2
8000a382:	fe b0 e3 29 	rcall	800069d4 <memcpy>
8000a386:	0a 9b       	mov	r11,r5
8000a388:	30 1a       	mov	r10,1
8000a38a:	0e 9c       	mov	r12,r7
8000a38c:	e0 a0 05 60 	rcall	8000ae4c <__lshift>
8000a390:	50 44       	stdsp	sp[0x10],r4
8000a392:	40 3a       	lddsp	r10,sp[0xc]
8000a394:	30 19       	mov	r9,1
8000a396:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000a39a:	18 94       	mov	r4,r12
8000a39c:	50 da       	stdsp	sp[0x34],r10
8000a39e:	40 85       	lddsp	r5,sp[0x20]
8000a3a0:	50 99       	stdsp	sp[0x24],r9
8000a3a2:	50 26       	stdsp	sp[0x8],r6
8000a3a4:	50 e1       	stdsp	sp[0x38],r1
8000a3a6:	04 9b       	mov	r11,r2
8000a3a8:	06 9c       	mov	r12,r3
8000a3aa:	fe b0 fa 7f 	rcall	800098a8 <quorem>
8000a3ae:	40 4b       	lddsp	r11,sp[0x10]
8000a3b0:	f8 c0 ff d0 	sub	r0,r12,-48
8000a3b4:	06 9c       	mov	r12,r3
8000a3b6:	e0 a0 04 27 	rcall	8000ac04 <__mcmp>
8000a3ba:	08 9a       	mov	r10,r4
8000a3bc:	50 6c       	stdsp	sp[0x18],r12
8000a3be:	04 9b       	mov	r11,r2
8000a3c0:	0e 9c       	mov	r12,r7
8000a3c2:	e0 a0 04 dd 	rcall	8000ad7c <__mdiff>
8000a3c6:	18 91       	mov	r1,r12
8000a3c8:	78 38       	ld.w	r8,r12[0xc]
8000a3ca:	58 08       	cp.w	r8,0
8000a3cc:	c0 30       	breq	8000a3d2 <_dtoa_r+0xa0a>
8000a3ce:	30 16       	mov	r6,1
8000a3d0:	c0 68       	rjmp	8000a3dc <_dtoa_r+0xa14>
8000a3d2:	18 9b       	mov	r11,r12
8000a3d4:	06 9c       	mov	r12,r3
8000a3d6:	e0 a0 04 17 	rcall	8000ac04 <__mcmp>
8000a3da:	18 96       	mov	r6,r12
8000a3dc:	0e 9c       	mov	r12,r7
8000a3de:	02 9b       	mov	r11,r1
8000a3e0:	e0 a0 04 2c 	rcall	8000ac38 <_Bfree>
8000a3e4:	40 cc       	lddsp	r12,sp[0x30]
8000a3e6:	ed ec 10 08 	or	r8,r6,r12
8000a3ea:	c0 d1       	brne	8000a404 <_dtoa_r+0xa3c>
8000a3ec:	40 db       	lddsp	r11,sp[0x34]
8000a3ee:	58 0b       	cp.w	r11,0
8000a3f0:	c0 a1       	brne	8000a404 <_dtoa_r+0xa3c>
8000a3f2:	40 26       	lddsp	r6,sp[0x8]
8000a3f4:	e0 40 00 39 	cp.w	r0,57
8000a3f8:	c3 00       	breq	8000a458 <_dtoa_r+0xa90>
8000a3fa:	40 6a       	lddsp	r10,sp[0x18]
8000a3fc:	58 0a       	cp.w	r10,0
8000a3fe:	e0 89 00 24 	brgt	8000a446 <_dtoa_r+0xa7e>
8000a402:	c2 f8       	rjmp	8000a460 <_dtoa_r+0xa98>
8000a404:	40 69       	lddsp	r9,sp[0x18]
8000a406:	58 09       	cp.w	r9,0
8000a408:	c0 85       	brlt	8000a418 <_dtoa_r+0xa50>
8000a40a:	12 98       	mov	r8,r9
8000a40c:	40 cc       	lddsp	r12,sp[0x30]
8000a40e:	18 48       	or	r8,r12
8000a410:	c1 d1       	brne	8000a44a <_dtoa_r+0xa82>
8000a412:	40 db       	lddsp	r11,sp[0x34]
8000a414:	58 0b       	cp.w	r11,0
8000a416:	c1 a1       	brne	8000a44a <_dtoa_r+0xa82>
8000a418:	0c 99       	mov	r9,r6
8000a41a:	40 26       	lddsp	r6,sp[0x8]
8000a41c:	58 09       	cp.w	r9,0
8000a41e:	e0 8a 00 21 	brle	8000a460 <_dtoa_r+0xa98>
8000a422:	06 9b       	mov	r11,r3
8000a424:	30 1a       	mov	r10,1
8000a426:	0e 9c       	mov	r12,r7
8000a428:	e0 a0 05 12 	rcall	8000ae4c <__lshift>
8000a42c:	04 9b       	mov	r11,r2
8000a42e:	18 93       	mov	r3,r12
8000a430:	e0 a0 03 ea 	rcall	8000ac04 <__mcmp>
8000a434:	e0 89 00 06 	brgt	8000a440 <_dtoa_r+0xa78>
8000a438:	c1 41       	brne	8000a460 <_dtoa_r+0xa98>
8000a43a:	ed b0 00 00 	bld	r0,0x0
8000a43e:	c1 11       	brne	8000a460 <_dtoa_r+0xa98>
8000a440:	e0 40 00 39 	cp.w	r0,57
8000a444:	c0 a0       	breq	8000a458 <_dtoa_r+0xa90>
8000a446:	2f f0       	sub	r0,-1
8000a448:	c0 c8       	rjmp	8000a460 <_dtoa_r+0xa98>
8000a44a:	58 06       	cp.w	r6,0
8000a44c:	e0 8a 00 0c 	brle	8000a464 <_dtoa_r+0xa9c>
8000a450:	40 26       	lddsp	r6,sp[0x8]
8000a452:	e0 40 00 39 	cp.w	r0,57
8000a456:	c0 41       	brne	8000a45e <_dtoa_r+0xa96>
8000a458:	33 98       	mov	r8,57
8000a45a:	0a c8       	st.b	r5++,r8
8000a45c:	c6 78       	rjmp	8000a52a <_dtoa_r+0xb62>
8000a45e:	2f f0       	sub	r0,-1
8000a460:	0a c0       	st.b	r5++,r0
8000a462:	c7 58       	rjmp	8000a54c <_dtoa_r+0xb84>
8000a464:	0a c0       	st.b	r5++,r0
8000a466:	40 9a       	lddsp	r10,sp[0x24]
8000a468:	40 e9       	lddsp	r9,sp[0x38]
8000a46a:	12 3a       	cp.w	r10,r9
8000a46c:	c4 30       	breq	8000a4f2 <_dtoa_r+0xb2a>
8000a46e:	06 9b       	mov	r11,r3
8000a470:	30 09       	mov	r9,0
8000a472:	30 aa       	mov	r10,10
8000a474:	0e 9c       	mov	r12,r7
8000a476:	e0 a0 05 b7 	rcall	8000afe4 <__multadd>
8000a47a:	40 48       	lddsp	r8,sp[0x10]
8000a47c:	18 93       	mov	r3,r12
8000a47e:	08 38       	cp.w	r8,r4
8000a480:	c0 91       	brne	8000a492 <_dtoa_r+0xaca>
8000a482:	10 9b       	mov	r11,r8
8000a484:	30 09       	mov	r9,0
8000a486:	30 aa       	mov	r10,10
8000a488:	0e 9c       	mov	r12,r7
8000a48a:	e0 a0 05 ad 	rcall	8000afe4 <__multadd>
8000a48e:	50 4c       	stdsp	sp[0x10],r12
8000a490:	c0 e8       	rjmp	8000a4ac <_dtoa_r+0xae4>
8000a492:	40 4b       	lddsp	r11,sp[0x10]
8000a494:	30 09       	mov	r9,0
8000a496:	30 aa       	mov	r10,10
8000a498:	0e 9c       	mov	r12,r7
8000a49a:	e0 a0 05 a5 	rcall	8000afe4 <__multadd>
8000a49e:	08 9b       	mov	r11,r4
8000a4a0:	50 4c       	stdsp	sp[0x10],r12
8000a4a2:	30 09       	mov	r9,0
8000a4a4:	30 aa       	mov	r10,10
8000a4a6:	0e 9c       	mov	r12,r7
8000a4a8:	e0 a0 05 9e 	rcall	8000afe4 <__multadd>
8000a4ac:	18 94       	mov	r4,r12
8000a4ae:	40 9c       	lddsp	r12,sp[0x24]
8000a4b0:	2f fc       	sub	r12,-1
8000a4b2:	50 9c       	stdsp	sp[0x24],r12
8000a4b4:	c7 9b       	rjmp	8000a3a6 <_dtoa_r+0x9de>
8000a4b6:	30 18       	mov	r8,1
8000a4b8:	06 90       	mov	r0,r3
8000a4ba:	40 85       	lddsp	r5,sp[0x20]
8000a4bc:	08 93       	mov	r3,r4
8000a4be:	0c 94       	mov	r4,r6
8000a4c0:	10 96       	mov	r6,r8
8000a4c2:	04 9b       	mov	r11,r2
8000a4c4:	00 9c       	mov	r12,r0
8000a4c6:	fe b0 f9 f1 	rcall	800098a8 <quorem>
8000a4ca:	2d 0c       	sub	r12,-48
8000a4cc:	0a cc       	st.b	r5++,r12
8000a4ce:	02 36       	cp.w	r6,r1
8000a4d0:	c0 a4       	brge	8000a4e4 <_dtoa_r+0xb1c>
8000a4d2:	00 9b       	mov	r11,r0
8000a4d4:	30 09       	mov	r9,0
8000a4d6:	30 aa       	mov	r10,10
8000a4d8:	0e 9c       	mov	r12,r7
8000a4da:	2f f6       	sub	r6,-1
8000a4dc:	e0 a0 05 84 	rcall	8000afe4 <__multadd>
8000a4e0:	18 90       	mov	r0,r12
8000a4e2:	cf 0b       	rjmp	8000a4c2 <_dtoa_r+0xafa>
8000a4e4:	08 96       	mov	r6,r4
8000a4e6:	30 0b       	mov	r11,0
8000a4e8:	06 94       	mov	r4,r3
8000a4ea:	50 4b       	stdsp	sp[0x10],r11
8000a4ec:	00 93       	mov	r3,r0
8000a4ee:	18 90       	mov	r0,r12
8000a4f0:	c0 28       	rjmp	8000a4f4 <_dtoa_r+0xb2c>
8000a4f2:	40 26       	lddsp	r6,sp[0x8]
8000a4f4:	06 9b       	mov	r11,r3
8000a4f6:	30 1a       	mov	r10,1
8000a4f8:	0e 9c       	mov	r12,r7
8000a4fa:	e0 a0 04 a9 	rcall	8000ae4c <__lshift>
8000a4fe:	04 9b       	mov	r11,r2
8000a500:	18 93       	mov	r3,r12
8000a502:	e0 a0 03 81 	rcall	8000ac04 <__mcmp>
8000a506:	e0 89 00 12 	brgt	8000a52a <_dtoa_r+0xb62>
8000a50a:	c1 b1       	brne	8000a540 <_dtoa_r+0xb78>
8000a50c:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000a510:	c0 d1       	brne	8000a52a <_dtoa_r+0xb62>
8000a512:	c1 78       	rjmp	8000a540 <_dtoa_r+0xb78>
8000a514:	40 89       	lddsp	r9,sp[0x20]
8000a516:	12 38       	cp.w	r8,r9
8000a518:	c0 30       	breq	8000a51e <_dtoa_r+0xb56>
8000a51a:	10 95       	mov	r5,r8
8000a51c:	c0 88       	rjmp	8000a52c <_dtoa_r+0xb64>
8000a51e:	2f f6       	sub	r6,-1
8000a520:	50 66       	stdsp	sp[0x18],r6
8000a522:	33 18       	mov	r8,49
8000a524:	40 8c       	lddsp	r12,sp[0x20]
8000a526:	b8 88       	st.b	r12[0x0],r8
8000a528:	c1 38       	rjmp	8000a54e <_dtoa_r+0xb86>
8000a52a:	33 9a       	mov	r10,57
8000a52c:	0a 98       	mov	r8,r5
8000a52e:	11 79       	ld.ub	r9,--r8
8000a530:	f4 09 18 00 	cp.b	r9,r10
8000a534:	cf 00       	breq	8000a514 <_dtoa_r+0xb4c>
8000a536:	2f f9       	sub	r9,-1
8000a538:	b0 89       	st.b	r8[0x0],r9
8000a53a:	c0 98       	rjmp	8000a54c <_dtoa_r+0xb84>
8000a53c:	10 95       	mov	r5,r8
8000a53e:	c0 28       	rjmp	8000a542 <_dtoa_r+0xb7a>
8000a540:	33 09       	mov	r9,48
8000a542:	0a 98       	mov	r8,r5
8000a544:	11 7a       	ld.ub	r10,--r8
8000a546:	f2 0a 18 00 	cp.b	r10,r9
8000a54a:	cf 90       	breq	8000a53c <_dtoa_r+0xb74>
8000a54c:	50 66       	stdsp	sp[0x18],r6
8000a54e:	04 9b       	mov	r11,r2
8000a550:	0e 9c       	mov	r12,r7
8000a552:	e0 a0 03 73 	rcall	8000ac38 <_Bfree>
8000a556:	58 04       	cp.w	r4,0
8000a558:	c1 20       	breq	8000a57c <_dtoa_r+0xbb4>
8000a55a:	40 4b       	lddsp	r11,sp[0x10]
8000a55c:	08 3b       	cp.w	r11,r4
8000a55e:	5f 19       	srne	r9
8000a560:	58 0b       	cp.w	r11,0
8000a562:	5f 18       	srne	r8
8000a564:	f3 e8 00 08 	and	r8,r9,r8
8000a568:	c0 40       	breq	8000a570 <_dtoa_r+0xba8>
8000a56a:	0e 9c       	mov	r12,r7
8000a56c:	e0 a0 03 66 	rcall	8000ac38 <_Bfree>
8000a570:	08 9b       	mov	r11,r4
8000a572:	0e 9c       	mov	r12,r7
8000a574:	e0 a0 03 62 	rcall	8000ac38 <_Bfree>
8000a578:	c0 28       	rjmp	8000a57c <_dtoa_r+0xbb4>
8000a57a:	50 66       	stdsp	sp[0x18],r6
8000a57c:	0e 9c       	mov	r12,r7
8000a57e:	06 9b       	mov	r11,r3
8000a580:	e0 a0 03 5c 	rcall	8000ac38 <_Bfree>
8000a584:	30 08       	mov	r8,0
8000a586:	aa 88       	st.b	r5[0x0],r8
8000a588:	40 68       	lddsp	r8,sp[0x18]
8000a58a:	41 5a       	lddsp	r10,sp[0x54]
8000a58c:	2f f8       	sub	r8,-1
8000a58e:	41 29       	lddsp	r9,sp[0x48]
8000a590:	95 08       	st.w	r10[0x0],r8
8000a592:	40 8c       	lddsp	r12,sp[0x20]
8000a594:	58 09       	cp.w	r9,0
8000a596:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000a59a:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000a59e:	2e 6d       	sub	sp,-104
8000a5a0:	d8 32       	popm	r0-r7,pc
8000a5a2:	d7 03       	nop

8000a5a4 <_fclose_r>:
8000a5a4:	d4 21       	pushm	r4-r7,lr
8000a5a6:	18 96       	mov	r6,r12
8000a5a8:	16 97       	mov	r7,r11
8000a5aa:	58 0b       	cp.w	r11,0
8000a5ac:	c0 31       	brne	8000a5b2 <_fclose_r+0xe>
8000a5ae:	16 95       	mov	r5,r11
8000a5b0:	c5 28       	rjmp	8000a654 <_fclose_r+0xb0>
8000a5b2:	fe b0 e5 91 	rcall	800070d4 <__sfp_lock_acquire>
8000a5b6:	58 06       	cp.w	r6,0
8000a5b8:	c0 70       	breq	8000a5c6 <_fclose_r+0x22>
8000a5ba:	6c 68       	ld.w	r8,r6[0x18]
8000a5bc:	58 08       	cp.w	r8,0
8000a5be:	c0 41       	brne	8000a5c6 <_fclose_r+0x22>
8000a5c0:	0c 9c       	mov	r12,r6
8000a5c2:	fe b0 e5 db 	rcall	80007178 <__sinit>
8000a5c6:	fe c8 e4 8e 	sub	r8,pc,-7026
8000a5ca:	10 37       	cp.w	r7,r8
8000a5cc:	c0 31       	brne	8000a5d2 <_fclose_r+0x2e>
8000a5ce:	6c 07       	ld.w	r7,r6[0x0]
8000a5d0:	c0 c8       	rjmp	8000a5e8 <_fclose_r+0x44>
8000a5d2:	fe c8 e4 7a 	sub	r8,pc,-7046
8000a5d6:	10 37       	cp.w	r7,r8
8000a5d8:	c0 31       	brne	8000a5de <_fclose_r+0x3a>
8000a5da:	6c 17       	ld.w	r7,r6[0x4]
8000a5dc:	c0 68       	rjmp	8000a5e8 <_fclose_r+0x44>
8000a5de:	fe c8 e4 66 	sub	r8,pc,-7066
8000a5e2:	10 37       	cp.w	r7,r8
8000a5e4:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000a5e8:	8e 69       	ld.sh	r9,r7[0xc]
8000a5ea:	30 08       	mov	r8,0
8000a5ec:	f0 09 19 00 	cp.h	r9,r8
8000a5f0:	c0 51       	brne	8000a5fa <_fclose_r+0x56>
8000a5f2:	fe b0 e5 72 	rcall	800070d6 <__sfp_lock_release>
8000a5f6:	30 05       	mov	r5,0
8000a5f8:	c2 e8       	rjmp	8000a654 <_fclose_r+0xb0>
8000a5fa:	0e 9b       	mov	r11,r7
8000a5fc:	0c 9c       	mov	r12,r6
8000a5fe:	c3 5c       	rcall	8000a668 <_fflush_r>
8000a600:	6e c8       	ld.w	r8,r7[0x30]
8000a602:	18 95       	mov	r5,r12
8000a604:	58 08       	cp.w	r8,0
8000a606:	c0 60       	breq	8000a612 <_fclose_r+0x6e>
8000a608:	6e 8b       	ld.w	r11,r7[0x20]
8000a60a:	0c 9c       	mov	r12,r6
8000a60c:	5d 18       	icall	r8
8000a60e:	f9 b5 05 ff 	movlt	r5,-1
8000a612:	8e 68       	ld.sh	r8,r7[0xc]
8000a614:	ed b8 00 07 	bld	r8,0x7
8000a618:	c0 51       	brne	8000a622 <_fclose_r+0x7e>
8000a61a:	6e 4b       	ld.w	r11,r7[0x10]
8000a61c:	0c 9c       	mov	r12,r6
8000a61e:	fe b0 e6 47 	rcall	800072ac <_free_r>
8000a622:	6e db       	ld.w	r11,r7[0x34]
8000a624:	58 0b       	cp.w	r11,0
8000a626:	c0 a0       	breq	8000a63a <_fclose_r+0x96>
8000a628:	ee c8 ff bc 	sub	r8,r7,-68
8000a62c:	10 3b       	cp.w	r11,r8
8000a62e:	c0 40       	breq	8000a636 <_fclose_r+0x92>
8000a630:	0c 9c       	mov	r12,r6
8000a632:	fe b0 e6 3d 	rcall	800072ac <_free_r>
8000a636:	30 08       	mov	r8,0
8000a638:	8f d8       	st.w	r7[0x34],r8
8000a63a:	6f 2b       	ld.w	r11,r7[0x48]
8000a63c:	58 0b       	cp.w	r11,0
8000a63e:	c0 70       	breq	8000a64c <_fclose_r+0xa8>
8000a640:	0c 9c       	mov	r12,r6
8000a642:	fe b0 e6 35 	rcall	800072ac <_free_r>
8000a646:	30 08       	mov	r8,0
8000a648:	ef 48 00 48 	st.w	r7[72],r8
8000a64c:	30 08       	mov	r8,0
8000a64e:	ae 68       	st.h	r7[0xc],r8
8000a650:	fe b0 e5 43 	rcall	800070d6 <__sfp_lock_release>
8000a654:	0a 9c       	mov	r12,r5
8000a656:	d8 22       	popm	r4-r7,pc

8000a658 <fclose>:
8000a658:	d4 01       	pushm	lr
8000a65a:	e0 68 01 18 	mov	r8,280
8000a65e:	18 9b       	mov	r11,r12
8000a660:	70 0c       	ld.w	r12,r8[0x0]
8000a662:	ca 1f       	rcall	8000a5a4 <_fclose_r>
8000a664:	d8 02       	popm	pc
8000a666:	d7 03       	nop

8000a668 <_fflush_r>:
8000a668:	d4 21       	pushm	r4-r7,lr
8000a66a:	16 97       	mov	r7,r11
8000a66c:	18 96       	mov	r6,r12
8000a66e:	76 48       	ld.w	r8,r11[0x10]
8000a670:	58 08       	cp.w	r8,0
8000a672:	e0 80 00 81 	breq	8000a774 <_fflush_r+0x10c>
8000a676:	58 0c       	cp.w	r12,0
8000a678:	c0 60       	breq	8000a684 <_fflush_r+0x1c>
8000a67a:	78 68       	ld.w	r8,r12[0x18]
8000a67c:	58 08       	cp.w	r8,0
8000a67e:	c0 31       	brne	8000a684 <_fflush_r+0x1c>
8000a680:	fe b0 e5 7c 	rcall	80007178 <__sinit>
8000a684:	fe c8 e5 4c 	sub	r8,pc,-6836
8000a688:	10 37       	cp.w	r7,r8
8000a68a:	c0 31       	brne	8000a690 <_fflush_r+0x28>
8000a68c:	6c 07       	ld.w	r7,r6[0x0]
8000a68e:	c0 c8       	rjmp	8000a6a6 <_fflush_r+0x3e>
8000a690:	fe c8 e5 38 	sub	r8,pc,-6856
8000a694:	10 37       	cp.w	r7,r8
8000a696:	c0 31       	brne	8000a69c <_fflush_r+0x34>
8000a698:	6c 17       	ld.w	r7,r6[0x4]
8000a69a:	c0 68       	rjmp	8000a6a6 <_fflush_r+0x3e>
8000a69c:	fe c8 e5 24 	sub	r8,pc,-6876
8000a6a0:	10 37       	cp.w	r7,r8
8000a6a2:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000a6a6:	8e 6a       	ld.sh	r10,r7[0xc]
8000a6a8:	14 98       	mov	r8,r10
8000a6aa:	ed ba 00 03 	bld	r10,0x3
8000a6ae:	c4 20       	breq	8000a732 <_fflush_r+0xca>
8000a6b0:	ab ba       	sbr	r10,0xb
8000a6b2:	ae 6a       	st.h	r7[0xc],r10
8000a6b4:	6e 18       	ld.w	r8,r7[0x4]
8000a6b6:	58 08       	cp.w	r8,0
8000a6b8:	e0 89 00 06 	brgt	8000a6c4 <_fflush_r+0x5c>
8000a6bc:	6f 08       	ld.w	r8,r7[0x40]
8000a6be:	58 08       	cp.w	r8,0
8000a6c0:	e0 8a 00 5a 	brle	8000a774 <_fflush_r+0x10c>
8000a6c4:	6e b8       	ld.w	r8,r7[0x2c]
8000a6c6:	58 08       	cp.w	r8,0
8000a6c8:	c5 60       	breq	8000a774 <_fflush_r+0x10c>
8000a6ca:	e2 1a 10 00 	andl	r10,0x1000,COH
8000a6ce:	c0 30       	breq	8000a6d4 <_fflush_r+0x6c>
8000a6d0:	6f 55       	ld.w	r5,r7[0x54]
8000a6d2:	c0 f8       	rjmp	8000a6f0 <_fflush_r+0x88>
8000a6d4:	30 19       	mov	r9,1
8000a6d6:	6e 8b       	ld.w	r11,r7[0x20]
8000a6d8:	0c 9c       	mov	r12,r6
8000a6da:	5d 18       	icall	r8
8000a6dc:	18 95       	mov	r5,r12
8000a6de:	5b fc       	cp.w	r12,-1
8000a6e0:	c0 81       	brne	8000a6f0 <_fflush_r+0x88>
8000a6e2:	6c 38       	ld.w	r8,r6[0xc]
8000a6e4:	59 d8       	cp.w	r8,29
8000a6e6:	c4 70       	breq	8000a774 <_fflush_r+0x10c>
8000a6e8:	8e 68       	ld.sh	r8,r7[0xc]
8000a6ea:	a7 a8       	sbr	r8,0x6
8000a6ec:	ae 68       	st.h	r7[0xc],r8
8000a6ee:	d8 22       	popm	r4-r7,pc
8000a6f0:	8e 68       	ld.sh	r8,r7[0xc]
8000a6f2:	ed b8 00 02 	bld	r8,0x2
8000a6f6:	c0 91       	brne	8000a708 <_fflush_r+0xa0>
8000a6f8:	6e 18       	ld.w	r8,r7[0x4]
8000a6fa:	10 15       	sub	r5,r8
8000a6fc:	6e d8       	ld.w	r8,r7[0x34]
8000a6fe:	58 08       	cp.w	r8,0
8000a700:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000a704:	eb d8 e1 15 	subne	r5,r5,r8
8000a708:	6e b8       	ld.w	r8,r7[0x2c]
8000a70a:	0c 9c       	mov	r12,r6
8000a70c:	30 09       	mov	r9,0
8000a70e:	0a 9a       	mov	r10,r5
8000a710:	6e 8b       	ld.w	r11,r7[0x20]
8000a712:	5d 18       	icall	r8
8000a714:	8e 68       	ld.sh	r8,r7[0xc]
8000a716:	0a 3c       	cp.w	r12,r5
8000a718:	c2 61       	brne	8000a764 <_fflush_r+0xfc>
8000a71a:	ab d8       	cbr	r8,0xb
8000a71c:	30 0c       	mov	r12,0
8000a71e:	6e 49       	ld.w	r9,r7[0x10]
8000a720:	ae 68       	st.h	r7[0xc],r8
8000a722:	8f 1c       	st.w	r7[0x4],r12
8000a724:	8f 09       	st.w	r7[0x0],r9
8000a726:	ed b8 00 0c 	bld	r8,0xc
8000a72a:	c2 51       	brne	8000a774 <_fflush_r+0x10c>
8000a72c:	ef 45 00 54 	st.w	r7[84],r5
8000a730:	d8 22       	popm	r4-r7,pc
8000a732:	6e 45       	ld.w	r5,r7[0x10]
8000a734:	58 05       	cp.w	r5,0
8000a736:	c1 f0       	breq	8000a774 <_fflush_r+0x10c>
8000a738:	6e 04       	ld.w	r4,r7[0x0]
8000a73a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000a73e:	8f 05       	st.w	r7[0x0],r5
8000a740:	f9 b8 01 00 	movne	r8,0
8000a744:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000a748:	0a 14       	sub	r4,r5
8000a74a:	8f 28       	st.w	r7[0x8],r8
8000a74c:	c1 18       	rjmp	8000a76e <_fflush_r+0x106>
8000a74e:	08 99       	mov	r9,r4
8000a750:	0a 9a       	mov	r10,r5
8000a752:	6e a8       	ld.w	r8,r7[0x28]
8000a754:	6e 8b       	ld.w	r11,r7[0x20]
8000a756:	0c 9c       	mov	r12,r6
8000a758:	5d 18       	icall	r8
8000a75a:	18 14       	sub	r4,r12
8000a75c:	58 0c       	cp.w	r12,0
8000a75e:	e0 89 00 07 	brgt	8000a76c <_fflush_r+0x104>
8000a762:	8e 68       	ld.sh	r8,r7[0xc]
8000a764:	a7 a8       	sbr	r8,0x6
8000a766:	3f fc       	mov	r12,-1
8000a768:	ae 68       	st.h	r7[0xc],r8
8000a76a:	d8 22       	popm	r4-r7,pc
8000a76c:	18 05       	add	r5,r12
8000a76e:	58 04       	cp.w	r4,0
8000a770:	fe 99 ff ef 	brgt	8000a74e <_fflush_r+0xe6>
8000a774:	d8 2a       	popm	r4-r7,pc,r12=0
8000a776:	d7 03       	nop

8000a778 <__sfvwrite_r>:
8000a778:	d4 31       	pushm	r0-r7,lr
8000a77a:	20 3d       	sub	sp,12
8000a77c:	14 94       	mov	r4,r10
8000a77e:	18 95       	mov	r5,r12
8000a780:	16 97       	mov	r7,r11
8000a782:	74 28       	ld.w	r8,r10[0x8]
8000a784:	58 08       	cp.w	r8,0
8000a786:	e0 80 01 43 	breq	8000aa0c <__sfvwrite_r+0x294>
8000a78a:	96 68       	ld.sh	r8,r11[0xc]
8000a78c:	ed b8 00 03 	bld	r8,0x3
8000a790:	c0 41       	brne	8000a798 <__sfvwrite_r+0x20>
8000a792:	76 48       	ld.w	r8,r11[0x10]
8000a794:	58 08       	cp.w	r8,0
8000a796:	c0 c1       	brne	8000a7ae <__sfvwrite_r+0x36>
8000a798:	0e 9b       	mov	r11,r7
8000a79a:	0a 9c       	mov	r12,r5
8000a79c:	fe b0 f8 08 	rcall	800097ac <__swsetup_r>
8000a7a0:	c0 70       	breq	8000a7ae <__sfvwrite_r+0x36>
8000a7a2:	8e 68       	ld.sh	r8,r7[0xc]
8000a7a4:	a7 a8       	sbr	r8,0x6
8000a7a6:	ae 68       	st.h	r7[0xc],r8
8000a7a8:	30 98       	mov	r8,9
8000a7aa:	8b 38       	st.w	r5[0xc],r8
8000a7ac:	c2 e9       	rjmp	8000aa08 <__sfvwrite_r+0x290>
8000a7ae:	8e 63       	ld.sh	r3,r7[0xc]
8000a7b0:	68 00       	ld.w	r0,r4[0x0]
8000a7b2:	06 96       	mov	r6,r3
8000a7b4:	e2 16 00 02 	andl	r6,0x2,COH
8000a7b8:	c2 10       	breq	8000a7fa <__sfvwrite_r+0x82>
8000a7ba:	30 03       	mov	r3,0
8000a7bc:	e0 62 04 00 	mov	r2,1024
8000a7c0:	06 96       	mov	r6,r3
8000a7c2:	c0 48       	rjmp	8000a7ca <__sfvwrite_r+0x52>
8000a7c4:	60 03       	ld.w	r3,r0[0x0]
8000a7c6:	60 16       	ld.w	r6,r0[0x4]
8000a7c8:	2f 80       	sub	r0,-8
8000a7ca:	58 06       	cp.w	r6,0
8000a7cc:	cf c0       	breq	8000a7c4 <__sfvwrite_r+0x4c>
8000a7ce:	e0 46 04 00 	cp.w	r6,1024
8000a7d2:	ec 09 17 80 	movls	r9,r6
8000a7d6:	e4 09 17 b0 	movhi	r9,r2
8000a7da:	06 9a       	mov	r10,r3
8000a7dc:	6e a8       	ld.w	r8,r7[0x28]
8000a7de:	6e 8b       	ld.w	r11,r7[0x20]
8000a7e0:	0a 9c       	mov	r12,r5
8000a7e2:	5d 18       	icall	r8
8000a7e4:	18 16       	sub	r6,r12
8000a7e6:	58 0c       	cp.w	r12,0
8000a7e8:	e0 8a 01 0d 	brle	8000aa02 <__sfvwrite_r+0x28a>
8000a7ec:	68 28       	ld.w	r8,r4[0x8]
8000a7ee:	18 18       	sub	r8,r12
8000a7f0:	89 28       	st.w	r4[0x8],r8
8000a7f2:	e0 80 01 0d 	breq	8000aa0c <__sfvwrite_r+0x294>
8000a7f6:	18 03       	add	r3,r12
8000a7f8:	ce 9b       	rjmp	8000a7ca <__sfvwrite_r+0x52>
8000a7fa:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000a7fe:	c0 70       	breq	8000a80c <__sfvwrite_r+0x94>
8000a800:	50 06       	stdsp	sp[0x0],r6
8000a802:	0c 93       	mov	r3,r6
8000a804:	0c 91       	mov	r1,r6
8000a806:	50 15       	stdsp	sp[0x4],r5
8000a808:	08 92       	mov	r2,r4
8000a80a:	c9 f8       	rjmp	8000a948 <__sfvwrite_r+0x1d0>
8000a80c:	06 96       	mov	r6,r3
8000a80e:	08 91       	mov	r1,r4
8000a810:	c0 48       	rjmp	8000a818 <__sfvwrite_r+0xa0>
8000a812:	60 03       	ld.w	r3,r0[0x0]
8000a814:	60 16       	ld.w	r6,r0[0x4]
8000a816:	2f 80       	sub	r0,-8
8000a818:	58 06       	cp.w	r6,0
8000a81a:	cf c0       	breq	8000a812 <__sfvwrite_r+0x9a>
8000a81c:	8e 68       	ld.sh	r8,r7[0xc]
8000a81e:	6e 24       	ld.w	r4,r7[0x8]
8000a820:	10 99       	mov	r9,r8
8000a822:	e2 19 02 00 	andl	r9,0x200,COH
8000a826:	c5 70       	breq	8000a8d4 <__sfvwrite_r+0x15c>
8000a828:	08 36       	cp.w	r6,r4
8000a82a:	c4 53       	brcs	8000a8b4 <__sfvwrite_r+0x13c>
8000a82c:	10 99       	mov	r9,r8
8000a82e:	e2 19 04 80 	andl	r9,0x480,COH
8000a832:	c4 10       	breq	8000a8b4 <__sfvwrite_r+0x13c>
8000a834:	6e 4b       	ld.w	r11,r7[0x10]
8000a836:	6e 09       	ld.w	r9,r7[0x0]
8000a838:	16 19       	sub	r9,r11
8000a83a:	50 09       	stdsp	sp[0x0],r9
8000a83c:	6e 59       	ld.w	r9,r7[0x14]
8000a83e:	10 9c       	mov	r12,r8
8000a840:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000a844:	30 28       	mov	r8,2
8000a846:	f4 08 0c 08 	divs	r8,r10,r8
8000a84a:	fa e9 00 04 	st.d	sp[4],r8
8000a84e:	10 94       	mov	r4,r8
8000a850:	40 09       	lddsp	r9,sp[0x0]
8000a852:	e2 1c 04 00 	andl	r12,0x400,COH
8000a856:	2f f9       	sub	r9,-1
8000a858:	0c 09       	add	r9,r6
8000a85a:	12 38       	cp.w	r8,r9
8000a85c:	f2 04 17 30 	movlo	r4,r9
8000a860:	58 0c       	cp.w	r12,0
8000a862:	c1 10       	breq	8000a884 <__sfvwrite_r+0x10c>
8000a864:	08 9b       	mov	r11,r4
8000a866:	0a 9c       	mov	r12,r5
8000a868:	fe b0 de 9a 	rcall	8000659c <_malloc_r>
8000a86c:	18 92       	mov	r2,r12
8000a86e:	c1 50       	breq	8000a898 <__sfvwrite_r+0x120>
8000a870:	40 0a       	lddsp	r10,sp[0x0]
8000a872:	6e 4b       	ld.w	r11,r7[0x10]
8000a874:	fe b0 e0 b0 	rcall	800069d4 <memcpy>
8000a878:	8e 68       	ld.sh	r8,r7[0xc]
8000a87a:	e0 18 fb 7f 	andl	r8,0xfb7f
8000a87e:	a7 b8       	sbr	r8,0x7
8000a880:	ae 68       	st.h	r7[0xc],r8
8000a882:	c0 e8       	rjmp	8000a89e <__sfvwrite_r+0x126>
8000a884:	08 9a       	mov	r10,r4
8000a886:	0a 9c       	mov	r12,r5
8000a888:	fe b0 e1 52 	rcall	80006b2c <_realloc_r>
8000a88c:	18 92       	mov	r2,r12
8000a88e:	c0 81       	brne	8000a89e <__sfvwrite_r+0x126>
8000a890:	6e 4b       	ld.w	r11,r7[0x10]
8000a892:	0a 9c       	mov	r12,r5
8000a894:	fe b0 e5 0c 	rcall	800072ac <_free_r>
8000a898:	30 c8       	mov	r8,12
8000a89a:	8b 38       	st.w	r5[0xc],r8
8000a89c:	cb 38       	rjmp	8000aa02 <__sfvwrite_r+0x28a>
8000a89e:	40 0a       	lddsp	r10,sp[0x0]
8000a8a0:	40 09       	lddsp	r9,sp[0x0]
8000a8a2:	e8 0a 01 0a 	sub	r10,r4,r10
8000a8a6:	e4 09 00 08 	add	r8,r2,r9
8000a8aa:	8f 54       	st.w	r7[0x14],r4
8000a8ac:	8f 2a       	st.w	r7[0x8],r10
8000a8ae:	8f 08       	st.w	r7[0x0],r8
8000a8b0:	8f 42       	st.w	r7[0x10],r2
8000a8b2:	0c 94       	mov	r4,r6
8000a8b4:	08 36       	cp.w	r6,r4
8000a8b6:	ec 04 17 30 	movlo	r4,r6
8000a8ba:	06 9b       	mov	r11,r3
8000a8bc:	08 9a       	mov	r10,r4
8000a8be:	6e 0c       	ld.w	r12,r7[0x0]
8000a8c0:	fe b0 e5 e0 	rcall	80007480 <memmove>
8000a8c4:	6e 08       	ld.w	r8,r7[0x0]
8000a8c6:	08 08       	add	r8,r4
8000a8c8:	8f 08       	st.w	r7[0x0],r8
8000a8ca:	6e 28       	ld.w	r8,r7[0x8]
8000a8cc:	08 18       	sub	r8,r4
8000a8ce:	0c 94       	mov	r4,r6
8000a8d0:	8f 28       	st.w	r7[0x8],r8
8000a8d2:	c2 f8       	rjmp	8000a930 <__sfvwrite_r+0x1b8>
8000a8d4:	08 36       	cp.w	r6,r4
8000a8d6:	5f ba       	srhi	r10
8000a8d8:	6e 0c       	ld.w	r12,r7[0x0]
8000a8da:	6e 48       	ld.w	r8,r7[0x10]
8000a8dc:	10 3c       	cp.w	r12,r8
8000a8de:	5f b8       	srhi	r8
8000a8e0:	f5 e8 00 08 	and	r8,r10,r8
8000a8e4:	f2 08 18 00 	cp.b	r8,r9
8000a8e8:	c0 d0       	breq	8000a902 <__sfvwrite_r+0x18a>
8000a8ea:	06 9b       	mov	r11,r3
8000a8ec:	08 9a       	mov	r10,r4
8000a8ee:	fe b0 e5 c9 	rcall	80007480 <memmove>
8000a8f2:	6e 08       	ld.w	r8,r7[0x0]
8000a8f4:	08 08       	add	r8,r4
8000a8f6:	0e 9b       	mov	r11,r7
8000a8f8:	8f 08       	st.w	r7[0x0],r8
8000a8fa:	0a 9c       	mov	r12,r5
8000a8fc:	cb 6e       	rcall	8000a668 <_fflush_r>
8000a8fe:	c1 90       	breq	8000a930 <__sfvwrite_r+0x1b8>
8000a900:	c8 18       	rjmp	8000aa02 <__sfvwrite_r+0x28a>
8000a902:	6e 59       	ld.w	r9,r7[0x14]
8000a904:	12 36       	cp.w	r6,r9
8000a906:	c0 a3       	brcs	8000a91a <__sfvwrite_r+0x1a2>
8000a908:	6e a8       	ld.w	r8,r7[0x28]
8000a90a:	06 9a       	mov	r10,r3
8000a90c:	6e 8b       	ld.w	r11,r7[0x20]
8000a90e:	0a 9c       	mov	r12,r5
8000a910:	5d 18       	icall	r8
8000a912:	18 94       	mov	r4,r12
8000a914:	e0 89 00 0e 	brgt	8000a930 <__sfvwrite_r+0x1b8>
8000a918:	c7 58       	rjmp	8000aa02 <__sfvwrite_r+0x28a>
8000a91a:	0c 9a       	mov	r10,r6
8000a91c:	06 9b       	mov	r11,r3
8000a91e:	fe b0 e5 b1 	rcall	80007480 <memmove>
8000a922:	6e 08       	ld.w	r8,r7[0x0]
8000a924:	0c 08       	add	r8,r6
8000a926:	0c 94       	mov	r4,r6
8000a928:	8f 08       	st.w	r7[0x0],r8
8000a92a:	6e 28       	ld.w	r8,r7[0x8]
8000a92c:	0c 18       	sub	r8,r6
8000a92e:	8f 28       	st.w	r7[0x8],r8
8000a930:	62 28       	ld.w	r8,r1[0x8]
8000a932:	08 18       	sub	r8,r4
8000a934:	83 28       	st.w	r1[0x8],r8
8000a936:	c6 b0       	breq	8000aa0c <__sfvwrite_r+0x294>
8000a938:	08 16       	sub	r6,r4
8000a93a:	08 03       	add	r3,r4
8000a93c:	c6 eb       	rjmp	8000a818 <__sfvwrite_r+0xa0>
8000a93e:	60 03       	ld.w	r3,r0[0x0]
8000a940:	60 11       	ld.w	r1,r0[0x4]
8000a942:	30 08       	mov	r8,0
8000a944:	2f 80       	sub	r0,-8
8000a946:	50 08       	stdsp	sp[0x0],r8
8000a948:	58 01       	cp.w	r1,0
8000a94a:	cf a0       	breq	8000a93e <__sfvwrite_r+0x1c6>
8000a94c:	40 0a       	lddsp	r10,sp[0x0]
8000a94e:	58 0a       	cp.w	r10,0
8000a950:	c1 41       	brne	8000a978 <__sfvwrite_r+0x200>
8000a952:	e2 c6 ff ff 	sub	r6,r1,-1
8000a956:	02 9a       	mov	r10,r1
8000a958:	30 ab       	mov	r11,10
8000a95a:	06 9c       	mov	r12,r3
8000a95c:	cd 2c       	rcall	8000ab00 <memchr>
8000a95e:	f8 c8 ff ff 	sub	r8,r12,-1
8000a962:	58 0c       	cp.w	r12,0
8000a964:	f1 d3 e1 16 	subne	r6,r8,r3
8000a968:	f9 b9 01 01 	movne	r9,1
8000a96c:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000a970:	f9 b8 00 01 	moveq	r8,1
8000a974:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000a978:	02 36       	cp.w	r6,r1
8000a97a:	ec 04 17 80 	movls	r4,r6
8000a97e:	e2 04 17 b0 	movhi	r4,r1
8000a982:	6e 59       	ld.w	r9,r7[0x14]
8000a984:	6e 25       	ld.w	r5,r7[0x8]
8000a986:	f2 05 00 05 	add	r5,r9,r5
8000a98a:	0a 34       	cp.w	r4,r5
8000a98c:	5f 9a       	srgt	r10
8000a98e:	6e 0c       	ld.w	r12,r7[0x0]
8000a990:	6e 48       	ld.w	r8,r7[0x10]
8000a992:	10 3c       	cp.w	r12,r8
8000a994:	5f b8       	srhi	r8
8000a996:	f5 e8 00 08 	and	r8,r10,r8
8000a99a:	30 0a       	mov	r10,0
8000a99c:	f4 08 18 00 	cp.b	r8,r10
8000a9a0:	c0 d0       	breq	8000a9ba <__sfvwrite_r+0x242>
8000a9a2:	06 9b       	mov	r11,r3
8000a9a4:	0a 9a       	mov	r10,r5
8000a9a6:	fe b0 e5 6d 	rcall	80007480 <memmove>
8000a9aa:	6e 08       	ld.w	r8,r7[0x0]
8000a9ac:	0a 08       	add	r8,r5
8000a9ae:	0e 9b       	mov	r11,r7
8000a9b0:	8f 08       	st.w	r7[0x0],r8
8000a9b2:	40 1c       	lddsp	r12,sp[0x4]
8000a9b4:	c5 ae       	rcall	8000a668 <_fflush_r>
8000a9b6:	c1 80       	breq	8000a9e6 <__sfvwrite_r+0x26e>
8000a9b8:	c2 58       	rjmp	8000aa02 <__sfvwrite_r+0x28a>
8000a9ba:	12 34       	cp.w	r4,r9
8000a9bc:	c0 a5       	brlt	8000a9d0 <__sfvwrite_r+0x258>
8000a9be:	6e a8       	ld.w	r8,r7[0x28]
8000a9c0:	06 9a       	mov	r10,r3
8000a9c2:	6e 8b       	ld.w	r11,r7[0x20]
8000a9c4:	40 1c       	lddsp	r12,sp[0x4]
8000a9c6:	5d 18       	icall	r8
8000a9c8:	18 95       	mov	r5,r12
8000a9ca:	e0 89 00 0e 	brgt	8000a9e6 <__sfvwrite_r+0x26e>
8000a9ce:	c1 a8       	rjmp	8000aa02 <__sfvwrite_r+0x28a>
8000a9d0:	08 9a       	mov	r10,r4
8000a9d2:	06 9b       	mov	r11,r3
8000a9d4:	fe b0 e5 56 	rcall	80007480 <memmove>
8000a9d8:	6e 08       	ld.w	r8,r7[0x0]
8000a9da:	08 08       	add	r8,r4
8000a9dc:	08 95       	mov	r5,r4
8000a9de:	8f 08       	st.w	r7[0x0],r8
8000a9e0:	6e 28       	ld.w	r8,r7[0x8]
8000a9e2:	08 18       	sub	r8,r4
8000a9e4:	8f 28       	st.w	r7[0x8],r8
8000a9e6:	0a 16       	sub	r6,r5
8000a9e8:	c0 61       	brne	8000a9f4 <__sfvwrite_r+0x27c>
8000a9ea:	0e 9b       	mov	r11,r7
8000a9ec:	40 1c       	lddsp	r12,sp[0x4]
8000a9ee:	c3 de       	rcall	8000a668 <_fflush_r>
8000a9f0:	c0 91       	brne	8000aa02 <__sfvwrite_r+0x28a>
8000a9f2:	50 06       	stdsp	sp[0x0],r6
8000a9f4:	64 28       	ld.w	r8,r2[0x8]
8000a9f6:	0a 18       	sub	r8,r5
8000a9f8:	85 28       	st.w	r2[0x8],r8
8000a9fa:	c0 90       	breq	8000aa0c <__sfvwrite_r+0x294>
8000a9fc:	0a 11       	sub	r1,r5
8000a9fe:	0a 03       	add	r3,r5
8000aa00:	ca 4b       	rjmp	8000a948 <__sfvwrite_r+0x1d0>
8000aa02:	8e 68       	ld.sh	r8,r7[0xc]
8000aa04:	a7 a8       	sbr	r8,0x6
8000aa06:	ae 68       	st.h	r7[0xc],r8
8000aa08:	3f fc       	mov	r12,-1
8000aa0a:	c0 28       	rjmp	8000aa0e <__sfvwrite_r+0x296>
8000aa0c:	30 0c       	mov	r12,0
8000aa0e:	2f dd       	sub	sp,-12
8000aa10:	d8 32       	popm	r0-r7,pc
8000aa12:	d7 03       	nop

8000aa14 <_localeconv_r>:
8000aa14:	fe cc e4 98 	sub	r12,pc,-7016
8000aa18:	5e fc       	retal	r12
8000aa1a:	d7 03       	nop

8000aa1c <_lseek_r>:
8000aa1c:	d4 21       	pushm	r4-r7,lr
8000aa1e:	16 98       	mov	r8,r11
8000aa20:	18 97       	mov	r7,r12
8000aa22:	10 9c       	mov	r12,r8
8000aa24:	30 08       	mov	r8,0
8000aa26:	14 9b       	mov	r11,r10
8000aa28:	e0 66 07 fc 	mov	r6,2044
8000aa2c:	12 9a       	mov	r10,r9
8000aa2e:	8d 08       	st.w	r6[0x0],r8
8000aa30:	fe b0 e2 12 	rcall	80006e54 <_lseek>
8000aa34:	5b fc       	cp.w	r12,-1
8000aa36:	c0 51       	brne	8000aa40 <_lseek_r+0x24>
8000aa38:	6c 08       	ld.w	r8,r6[0x0]
8000aa3a:	58 08       	cp.w	r8,0
8000aa3c:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000aa40:	d8 22       	popm	r4-r7,pc
8000aa42:	d7 03       	nop

8000aa44 <__smakebuf_r>:
8000aa44:	d4 21       	pushm	r4-r7,lr
8000aa46:	20 fd       	sub	sp,60
8000aa48:	96 68       	ld.sh	r8,r11[0xc]
8000aa4a:	16 97       	mov	r7,r11
8000aa4c:	18 96       	mov	r6,r12
8000aa4e:	e2 18 00 02 	andl	r8,0x2,COH
8000aa52:	c3 d1       	brne	8000aacc <__smakebuf_r+0x88>
8000aa54:	96 7b       	ld.sh	r11,r11[0xe]
8000aa56:	f0 0b 19 00 	cp.h	r11,r8
8000aa5a:	c0 55       	brlt	8000aa64 <__smakebuf_r+0x20>
8000aa5c:	1a 9a       	mov	r10,sp
8000aa5e:	e0 a0 03 b5 	rcall	8000b1c8 <_fstat_r>
8000aa62:	c0 f4       	brge	8000aa80 <__smakebuf_r+0x3c>
8000aa64:	8e 65       	ld.sh	r5,r7[0xc]
8000aa66:	0a 98       	mov	r8,r5
8000aa68:	ab b8       	sbr	r8,0xb
8000aa6a:	e2 15 00 80 	andl	r5,0x80,COH
8000aa6e:	ae 68       	st.h	r7[0xc],r8
8000aa70:	30 04       	mov	r4,0
8000aa72:	e0 68 04 00 	mov	r8,1024
8000aa76:	f9 b5 01 40 	movne	r5,64
8000aa7a:	f0 05 17 00 	moveq	r5,r8
8000aa7e:	c1 c8       	rjmp	8000aab6 <__smakebuf_r+0x72>
8000aa80:	40 18       	lddsp	r8,sp[0x4]
8000aa82:	e2 18 f0 00 	andl	r8,0xf000,COH
8000aa86:	e0 48 20 00 	cp.w	r8,8192
8000aa8a:	5f 04       	sreq	r4
8000aa8c:	e0 48 80 00 	cp.w	r8,32768
8000aa90:	c0 e1       	brne	8000aaac <__smakebuf_r+0x68>
8000aa92:	6e b9       	ld.w	r9,r7[0x2c]
8000aa94:	fe c8 35 c8 	sub	r8,pc,13768
8000aa98:	10 39       	cp.w	r9,r8
8000aa9a:	c0 91       	brne	8000aaac <__smakebuf_r+0x68>
8000aa9c:	8e 68       	ld.sh	r8,r7[0xc]
8000aa9e:	e0 65 04 00 	mov	r5,1024
8000aaa2:	ab a8       	sbr	r8,0xa
8000aaa4:	ef 45 00 50 	st.w	r7[80],r5
8000aaa8:	ae 68       	st.h	r7[0xc],r8
8000aaaa:	c0 68       	rjmp	8000aab6 <__smakebuf_r+0x72>
8000aaac:	8e 68       	ld.sh	r8,r7[0xc]
8000aaae:	e0 65 04 00 	mov	r5,1024
8000aab2:	ab b8       	sbr	r8,0xb
8000aab4:	ae 68       	st.h	r7[0xc],r8
8000aab6:	0a 9b       	mov	r11,r5
8000aab8:	0c 9c       	mov	r12,r6
8000aaba:	fe b0 dd 71 	rcall	8000659c <_malloc_r>
8000aabe:	8e 68       	ld.sh	r8,r7[0xc]
8000aac0:	c0 d1       	brne	8000aada <__smakebuf_r+0x96>
8000aac2:	ed b8 00 09 	bld	r8,0x9
8000aac6:	c1 b0       	breq	8000aafc <__smakebuf_r+0xb8>
8000aac8:	a1 b8       	sbr	r8,0x1
8000aaca:	ae 68       	st.h	r7[0xc],r8
8000aacc:	ee c8 ff b9 	sub	r8,r7,-71
8000aad0:	8f 48       	st.w	r7[0x10],r8
8000aad2:	8f 08       	st.w	r7[0x0],r8
8000aad4:	30 18       	mov	r8,1
8000aad6:	8f 58       	st.w	r7[0x14],r8
8000aad8:	c1 28       	rjmp	8000aafc <__smakebuf_r+0xb8>
8000aada:	a7 b8       	sbr	r8,0x7
8000aadc:	8f 4c       	st.w	r7[0x10],r12
8000aade:	ae 68       	st.h	r7[0xc],r8
8000aae0:	8f 55       	st.w	r7[0x14],r5
8000aae2:	fe c8 3a 0a 	sub	r8,pc,14858
8000aae6:	8f 0c       	st.w	r7[0x0],r12
8000aae8:	8d a8       	st.w	r6[0x28],r8
8000aaea:	58 04       	cp.w	r4,0
8000aaec:	c0 80       	breq	8000aafc <__smakebuf_r+0xb8>
8000aaee:	8e 7c       	ld.sh	r12,r7[0xe]
8000aaf0:	fe b0 e1 bc 	rcall	80006e68 <isatty>
8000aaf4:	c0 40       	breq	8000aafc <__smakebuf_r+0xb8>
8000aaf6:	8e 68       	ld.sh	r8,r7[0xc]
8000aaf8:	a1 a8       	sbr	r8,0x0
8000aafa:	ae 68       	st.h	r7[0xc],r8
8000aafc:	2f 1d       	sub	sp,-60
8000aafe:	d8 22       	popm	r4-r7,pc

8000ab00 <memchr>:
8000ab00:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000ab04:	c0 68       	rjmp	8000ab10 <memchr+0x10>
8000ab06:	20 1a       	sub	r10,1
8000ab08:	19 88       	ld.ub	r8,r12[0x0]
8000ab0a:	16 38       	cp.w	r8,r11
8000ab0c:	5e 0c       	reteq	r12
8000ab0e:	2f fc       	sub	r12,-1
8000ab10:	58 0a       	cp.w	r10,0
8000ab12:	cf a1       	brne	8000ab06 <memchr+0x6>
8000ab14:	5e fa       	retal	r10

8000ab16 <__hi0bits>:
8000ab16:	18 98       	mov	r8,r12
8000ab18:	e0 1c 00 00 	andl	r12,0x0
8000ab1c:	f0 09 15 10 	lsl	r9,r8,0x10
8000ab20:	58 0c       	cp.w	r12,0
8000ab22:	f2 08 17 00 	moveq	r8,r9
8000ab26:	f9 bc 00 10 	moveq	r12,16
8000ab2a:	f9 bc 01 00 	movne	r12,0
8000ab2e:	10 9a       	mov	r10,r8
8000ab30:	f0 09 15 08 	lsl	r9,r8,0x8
8000ab34:	e6 1a ff 00 	andh	r10,0xff00,COH
8000ab38:	f7 bc 00 f8 	subeq	r12,-8
8000ab3c:	f2 08 17 00 	moveq	r8,r9
8000ab40:	10 9a       	mov	r10,r8
8000ab42:	f0 09 15 04 	lsl	r9,r8,0x4
8000ab46:	e6 1a f0 00 	andh	r10,0xf000,COH
8000ab4a:	f7 bc 00 fc 	subeq	r12,-4
8000ab4e:	f2 08 17 00 	moveq	r8,r9
8000ab52:	10 9a       	mov	r10,r8
8000ab54:	f0 09 15 02 	lsl	r9,r8,0x2
8000ab58:	e6 1a c0 00 	andh	r10,0xc000,COH
8000ab5c:	f7 bc 00 fe 	subeq	r12,-2
8000ab60:	f2 08 17 00 	moveq	r8,r9
8000ab64:	58 08       	cp.w	r8,0
8000ab66:	5e 5c       	retlt	r12
8000ab68:	ed b8 00 1e 	bld	r8,0x1e
8000ab6c:	f9 bc 01 20 	movne	r12,32
8000ab70:	f7 bc 00 ff 	subeq	r12,-1
8000ab74:	5e fc       	retal	r12

8000ab76 <__lo0bits>:
8000ab76:	18 99       	mov	r9,r12
8000ab78:	78 08       	ld.w	r8,r12[0x0]
8000ab7a:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000ab7e:	c1 50       	breq	8000aba8 <__lo0bits+0x32>
8000ab80:	ed b8 00 00 	bld	r8,0x0
8000ab84:	c0 21       	brne	8000ab88 <__lo0bits+0x12>
8000ab86:	5e fd       	retal	0
8000ab88:	10 9b       	mov	r11,r8
8000ab8a:	f0 0a 16 01 	lsr	r10,r8,0x1
8000ab8e:	e2 1b 00 02 	andl	r11,0x2,COH
8000ab92:	a3 88       	lsr	r8,0x2
8000ab94:	58 0b       	cp.w	r11,0
8000ab96:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000ab9a:	f9 bc 01 01 	movne	r12,1
8000ab9e:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000aba2:	f9 bc 00 02 	moveq	r12,2
8000aba6:	5e fc       	retal	r12
8000aba8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000abac:	f0 0b 16 10 	lsr	r11,r8,0x10
8000abb0:	58 0a       	cp.w	r10,0
8000abb2:	f6 08 17 00 	moveq	r8,r11
8000abb6:	f9 bc 00 10 	moveq	r12,16
8000abba:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000abbe:	f0 0a 16 08 	lsr	r10,r8,0x8
8000abc2:	58 0b       	cp.w	r11,0
8000abc4:	f7 bc 00 f8 	subeq	r12,-8
8000abc8:	f4 08 17 00 	moveq	r8,r10
8000abcc:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000abd0:	f0 0a 16 04 	lsr	r10,r8,0x4
8000abd4:	58 0b       	cp.w	r11,0
8000abd6:	f7 bc 00 fc 	subeq	r12,-4
8000abda:	f4 08 17 00 	moveq	r8,r10
8000abde:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000abe2:	f0 0a 16 02 	lsr	r10,r8,0x2
8000abe6:	58 0b       	cp.w	r11,0
8000abe8:	f7 bc 00 fe 	subeq	r12,-2
8000abec:	f4 08 17 00 	moveq	r8,r10
8000abf0:	ed b8 00 00 	bld	r8,0x0
8000abf4:	c0 60       	breq	8000ac00 <__lo0bits+0x8a>
8000abf6:	a1 98       	lsr	r8,0x1
8000abf8:	c0 31       	brne	8000abfe <__lo0bits+0x88>
8000abfa:	32 0c       	mov	r12,32
8000abfc:	5e fc       	retal	r12
8000abfe:	2f fc       	sub	r12,-1
8000ac00:	93 08       	st.w	r9[0x0],r8
8000ac02:	5e fc       	retal	r12

8000ac04 <__mcmp>:
8000ac04:	d4 01       	pushm	lr
8000ac06:	18 98       	mov	r8,r12
8000ac08:	76 49       	ld.w	r9,r11[0x10]
8000ac0a:	78 4c       	ld.w	r12,r12[0x10]
8000ac0c:	12 1c       	sub	r12,r9
8000ac0e:	c1 31       	brne	8000ac34 <__mcmp+0x30>
8000ac10:	2f b9       	sub	r9,-5
8000ac12:	a3 69       	lsl	r9,0x2
8000ac14:	12 0b       	add	r11,r9
8000ac16:	f0 09 00 09 	add	r9,r8,r9
8000ac1a:	2e c8       	sub	r8,-20
8000ac1c:	13 4e       	ld.w	lr,--r9
8000ac1e:	17 4a       	ld.w	r10,--r11
8000ac20:	14 3e       	cp.w	lr,r10
8000ac22:	c0 60       	breq	8000ac2e <__mcmp+0x2a>
8000ac24:	f9 bc 03 ff 	movlo	r12,-1
8000ac28:	f9 bc 02 01 	movhs	r12,1
8000ac2c:	d8 02       	popm	pc
8000ac2e:	10 39       	cp.w	r9,r8
8000ac30:	fe 9b ff f6 	brhi	8000ac1c <__mcmp+0x18>
8000ac34:	d8 02       	popm	pc
8000ac36:	d7 03       	nop

8000ac38 <_Bfree>:
8000ac38:	d4 21       	pushm	r4-r7,lr
8000ac3a:	18 97       	mov	r7,r12
8000ac3c:	16 95       	mov	r5,r11
8000ac3e:	78 96       	ld.w	r6,r12[0x24]
8000ac40:	58 06       	cp.w	r6,0
8000ac42:	c0 91       	brne	8000ac54 <_Bfree+0x1c>
8000ac44:	31 0c       	mov	r12,16
8000ac46:	fe b0 dc a3 	rcall	8000658c <malloc>
8000ac4a:	99 36       	st.w	r12[0xc],r6
8000ac4c:	8f 9c       	st.w	r7[0x24],r12
8000ac4e:	99 16       	st.w	r12[0x4],r6
8000ac50:	99 26       	st.w	r12[0x8],r6
8000ac52:	99 06       	st.w	r12[0x0],r6
8000ac54:	58 05       	cp.w	r5,0
8000ac56:	c0 90       	breq	8000ac68 <_Bfree+0x30>
8000ac58:	6a 19       	ld.w	r9,r5[0x4]
8000ac5a:	6e 98       	ld.w	r8,r7[0x24]
8000ac5c:	70 38       	ld.w	r8,r8[0xc]
8000ac5e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000ac62:	8b 0a       	st.w	r5[0x0],r10
8000ac64:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000ac68:	d8 22       	popm	r4-r7,pc
8000ac6a:	d7 03       	nop

8000ac6c <_Balloc>:
8000ac6c:	d4 21       	pushm	r4-r7,lr
8000ac6e:	18 97       	mov	r7,r12
8000ac70:	16 96       	mov	r6,r11
8000ac72:	78 95       	ld.w	r5,r12[0x24]
8000ac74:	58 05       	cp.w	r5,0
8000ac76:	c0 91       	brne	8000ac88 <_Balloc+0x1c>
8000ac78:	31 0c       	mov	r12,16
8000ac7a:	fe b0 dc 89 	rcall	8000658c <malloc>
8000ac7e:	99 35       	st.w	r12[0xc],r5
8000ac80:	8f 9c       	st.w	r7[0x24],r12
8000ac82:	99 15       	st.w	r12[0x4],r5
8000ac84:	99 25       	st.w	r12[0x8],r5
8000ac86:	99 05       	st.w	r12[0x0],r5
8000ac88:	6e 95       	ld.w	r5,r7[0x24]
8000ac8a:	6a 38       	ld.w	r8,r5[0xc]
8000ac8c:	58 08       	cp.w	r8,0
8000ac8e:	c0 b1       	brne	8000aca4 <_Balloc+0x38>
8000ac90:	31 0a       	mov	r10,16
8000ac92:	30 4b       	mov	r11,4
8000ac94:	0e 9c       	mov	r12,r7
8000ac96:	e0 a0 02 6d 	rcall	8000b170 <_calloc_r>
8000ac9a:	8b 3c       	st.w	r5[0xc],r12
8000ac9c:	6e 98       	ld.w	r8,r7[0x24]
8000ac9e:	70 3c       	ld.w	r12,r8[0xc]
8000aca0:	58 0c       	cp.w	r12,0
8000aca2:	c1 b0       	breq	8000acd8 <_Balloc+0x6c>
8000aca4:	6e 98       	ld.w	r8,r7[0x24]
8000aca6:	70 38       	ld.w	r8,r8[0xc]
8000aca8:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000acac:	70 0c       	ld.w	r12,r8[0x0]
8000acae:	58 0c       	cp.w	r12,0
8000acb0:	c0 40       	breq	8000acb8 <_Balloc+0x4c>
8000acb2:	78 09       	ld.w	r9,r12[0x0]
8000acb4:	91 09       	st.w	r8[0x0],r9
8000acb6:	c0 e8       	rjmp	8000acd2 <_Balloc+0x66>
8000acb8:	0e 9c       	mov	r12,r7
8000acba:	30 17       	mov	r7,1
8000acbc:	0e 9b       	mov	r11,r7
8000acbe:	ee 06 09 47 	lsl	r7,r7,r6
8000acc2:	ee ca ff fb 	sub	r10,r7,-5
8000acc6:	a3 6a       	lsl	r10,0x2
8000acc8:	e0 a0 02 54 	rcall	8000b170 <_calloc_r>
8000accc:	c0 60       	breq	8000acd8 <_Balloc+0x6c>
8000acce:	99 16       	st.w	r12[0x4],r6
8000acd0:	99 27       	st.w	r12[0x8],r7
8000acd2:	30 08       	mov	r8,0
8000acd4:	99 38       	st.w	r12[0xc],r8
8000acd6:	99 48       	st.w	r12[0x10],r8
8000acd8:	d8 22       	popm	r4-r7,pc
8000acda:	d7 03       	nop

8000acdc <__d2b>:
8000acdc:	d4 31       	pushm	r0-r7,lr
8000acde:	20 2d       	sub	sp,8
8000ace0:	16 93       	mov	r3,r11
8000ace2:	12 96       	mov	r6,r9
8000ace4:	10 95       	mov	r5,r8
8000ace6:	14 92       	mov	r2,r10
8000ace8:	30 1b       	mov	r11,1
8000acea:	cc 1f       	rcall	8000ac6c <_Balloc>
8000acec:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000acf0:	50 09       	stdsp	sp[0x0],r9
8000acf2:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000acf6:	b5 a9       	sbr	r9,0x14
8000acf8:	f0 01 16 14 	lsr	r1,r8,0x14
8000acfc:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000ad00:	18 94       	mov	r4,r12
8000ad02:	58 02       	cp.w	r2,0
8000ad04:	c1 d0       	breq	8000ad3e <__d2b+0x62>
8000ad06:	fa cc ff f8 	sub	r12,sp,-8
8000ad0a:	18 d2       	st.w	--r12,r2
8000ad0c:	c3 5f       	rcall	8000ab76 <__lo0bits>
8000ad0e:	40 18       	lddsp	r8,sp[0x4]
8000ad10:	c0 d0       	breq	8000ad2a <__d2b+0x4e>
8000ad12:	40 09       	lddsp	r9,sp[0x0]
8000ad14:	f8 0a 11 20 	rsub	r10,r12,32
8000ad18:	f2 0a 09 4a 	lsl	r10,r9,r10
8000ad1c:	f5 e8 10 08 	or	r8,r10,r8
8000ad20:	89 58       	st.w	r4[0x14],r8
8000ad22:	f2 0c 0a 49 	lsr	r9,r9,r12
8000ad26:	50 09       	stdsp	sp[0x0],r9
8000ad28:	c0 28       	rjmp	8000ad2c <__d2b+0x50>
8000ad2a:	89 58       	st.w	r4[0x14],r8
8000ad2c:	40 08       	lddsp	r8,sp[0x0]
8000ad2e:	58 08       	cp.w	r8,0
8000ad30:	f9 b3 01 02 	movne	r3,2
8000ad34:	f9 b3 00 01 	moveq	r3,1
8000ad38:	89 68       	st.w	r4[0x18],r8
8000ad3a:	89 43       	st.w	r4[0x10],r3
8000ad3c:	c0 88       	rjmp	8000ad4c <__d2b+0x70>
8000ad3e:	1a 9c       	mov	r12,sp
8000ad40:	c1 bf       	rcall	8000ab76 <__lo0bits>
8000ad42:	30 13       	mov	r3,1
8000ad44:	40 08       	lddsp	r8,sp[0x0]
8000ad46:	2e 0c       	sub	r12,-32
8000ad48:	89 43       	st.w	r4[0x10],r3
8000ad4a:	89 58       	st.w	r4[0x14],r8
8000ad4c:	58 01       	cp.w	r1,0
8000ad4e:	c0 90       	breq	8000ad60 <__d2b+0x84>
8000ad50:	e2 c1 04 33 	sub	r1,r1,1075
8000ad54:	18 01       	add	r1,r12
8000ad56:	8d 01       	st.w	r6[0x0],r1
8000ad58:	f8 0c 11 35 	rsub	r12,r12,53
8000ad5c:	8b 0c       	st.w	r5[0x0],r12
8000ad5e:	c0 c8       	rjmp	8000ad76 <__d2b+0x9a>
8000ad60:	e6 c8 ff fc 	sub	r8,r3,-4
8000ad64:	f8 cc 04 32 	sub	r12,r12,1074
8000ad68:	a5 73       	lsl	r3,0x5
8000ad6a:	8d 0c       	st.w	r6[0x0],r12
8000ad6c:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000ad70:	cd 3e       	rcall	8000ab16 <__hi0bits>
8000ad72:	18 13       	sub	r3,r12
8000ad74:	8b 03       	st.w	r5[0x0],r3
8000ad76:	08 9c       	mov	r12,r4
8000ad78:	2f ed       	sub	sp,-8
8000ad7a:	d8 32       	popm	r0-r7,pc

8000ad7c <__mdiff>:
8000ad7c:	d4 31       	pushm	r0-r7,lr
8000ad7e:	74 48       	ld.w	r8,r10[0x10]
8000ad80:	76 45       	ld.w	r5,r11[0x10]
8000ad82:	16 97       	mov	r7,r11
8000ad84:	14 96       	mov	r6,r10
8000ad86:	10 15       	sub	r5,r8
8000ad88:	c1 31       	brne	8000adae <__mdiff+0x32>
8000ad8a:	2f b8       	sub	r8,-5
8000ad8c:	ee ce ff ec 	sub	lr,r7,-20
8000ad90:	a3 68       	lsl	r8,0x2
8000ad92:	f4 08 00 0b 	add	r11,r10,r8
8000ad96:	ee 08 00 08 	add	r8,r7,r8
8000ad9a:	11 4a       	ld.w	r10,--r8
8000ad9c:	17 49       	ld.w	r9,--r11
8000ad9e:	12 3a       	cp.w	r10,r9
8000ada0:	c0 30       	breq	8000ada6 <__mdiff+0x2a>
8000ada2:	c0 e2       	brcc	8000adbe <__mdiff+0x42>
8000ada4:	c0 78       	rjmp	8000adb2 <__mdiff+0x36>
8000ada6:	1c 38       	cp.w	r8,lr
8000ada8:	fe 9b ff f9 	brhi	8000ad9a <__mdiff+0x1e>
8000adac:	c4 98       	rjmp	8000ae3e <__mdiff+0xc2>
8000adae:	58 05       	cp.w	r5,0
8000adb0:	c0 64       	brge	8000adbc <__mdiff+0x40>
8000adb2:	0e 98       	mov	r8,r7
8000adb4:	30 15       	mov	r5,1
8000adb6:	0c 97       	mov	r7,r6
8000adb8:	10 96       	mov	r6,r8
8000adba:	c0 28       	rjmp	8000adbe <__mdiff+0x42>
8000adbc:	30 05       	mov	r5,0
8000adbe:	6e 1b       	ld.w	r11,r7[0x4]
8000adc0:	c5 6f       	rcall	8000ac6c <_Balloc>
8000adc2:	6e 49       	ld.w	r9,r7[0x10]
8000adc4:	6c 44       	ld.w	r4,r6[0x10]
8000adc6:	99 35       	st.w	r12[0xc],r5
8000adc8:	2f b4       	sub	r4,-5
8000adca:	f2 c5 ff fb 	sub	r5,r9,-5
8000adce:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000add2:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000add6:	2e c6       	sub	r6,-20
8000add8:	2e c7       	sub	r7,-20
8000adda:	f8 c8 ff ec 	sub	r8,r12,-20
8000adde:	30 0a       	mov	r10,0
8000ade0:	0f 0e       	ld.w	lr,r7++
8000ade2:	0d 0b       	ld.w	r11,r6++
8000ade4:	fc 02 16 10 	lsr	r2,lr,0x10
8000ade8:	f6 03 16 10 	lsr	r3,r11,0x10
8000adec:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000adf0:	e4 03 01 03 	sub	r3,r2,r3
8000adf4:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000adf8:	fc 0b 01 0b 	sub	r11,lr,r11
8000adfc:	f6 0a 00 0a 	add	r10,r11,r10
8000ae00:	b0 1a       	st.h	r8[0x2],r10
8000ae02:	b1 4a       	asr	r10,0x10
8000ae04:	e6 0a 00 0a 	add	r10,r3,r10
8000ae08:	b0 0a       	st.h	r8[0x0],r10
8000ae0a:	2f c8       	sub	r8,-4
8000ae0c:	b1 4a       	asr	r10,0x10
8000ae0e:	08 36       	cp.w	r6,r4
8000ae10:	ce 83       	brcs	8000ade0 <__mdiff+0x64>
8000ae12:	c0 d8       	rjmp	8000ae2c <__mdiff+0xb0>
8000ae14:	0f 0b       	ld.w	r11,r7++
8000ae16:	f6 0e 16 10 	lsr	lr,r11,0x10
8000ae1a:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000ae1e:	16 0a       	add	r10,r11
8000ae20:	b0 1a       	st.h	r8[0x2],r10
8000ae22:	b1 4a       	asr	r10,0x10
8000ae24:	1c 0a       	add	r10,lr
8000ae26:	b0 0a       	st.h	r8[0x0],r10
8000ae28:	2f c8       	sub	r8,-4
8000ae2a:	b1 4a       	asr	r10,0x10
8000ae2c:	0a 37       	cp.w	r7,r5
8000ae2e:	cf 33       	brcs	8000ae14 <__mdiff+0x98>
8000ae30:	c0 28       	rjmp	8000ae34 <__mdiff+0xb8>
8000ae32:	20 19       	sub	r9,1
8000ae34:	11 4a       	ld.w	r10,--r8
8000ae36:	58 0a       	cp.w	r10,0
8000ae38:	cf d0       	breq	8000ae32 <__mdiff+0xb6>
8000ae3a:	99 49       	st.w	r12[0x10],r9
8000ae3c:	d8 32       	popm	r0-r7,pc
8000ae3e:	30 0b       	mov	r11,0
8000ae40:	c1 6f       	rcall	8000ac6c <_Balloc>
8000ae42:	30 18       	mov	r8,1
8000ae44:	99 48       	st.w	r12[0x10],r8
8000ae46:	30 08       	mov	r8,0
8000ae48:	99 58       	st.w	r12[0x14],r8
8000ae4a:	d8 32       	popm	r0-r7,pc

8000ae4c <__lshift>:
8000ae4c:	d4 31       	pushm	r0-r7,lr
8000ae4e:	16 97       	mov	r7,r11
8000ae50:	76 46       	ld.w	r6,r11[0x10]
8000ae52:	f4 02 14 05 	asr	r2,r10,0x5
8000ae56:	2f f6       	sub	r6,-1
8000ae58:	14 93       	mov	r3,r10
8000ae5a:	18 94       	mov	r4,r12
8000ae5c:	04 06       	add	r6,r2
8000ae5e:	76 1b       	ld.w	r11,r11[0x4]
8000ae60:	6e 28       	ld.w	r8,r7[0x8]
8000ae62:	c0 38       	rjmp	8000ae68 <__lshift+0x1c>
8000ae64:	2f fb       	sub	r11,-1
8000ae66:	a1 78       	lsl	r8,0x1
8000ae68:	10 36       	cp.w	r6,r8
8000ae6a:	fe 99 ff fd 	brgt	8000ae64 <__lshift+0x18>
8000ae6e:	08 9c       	mov	r12,r4
8000ae70:	cf ee       	rcall	8000ac6c <_Balloc>
8000ae72:	30 09       	mov	r9,0
8000ae74:	18 95       	mov	r5,r12
8000ae76:	f8 c8 ff ec 	sub	r8,r12,-20
8000ae7a:	12 9a       	mov	r10,r9
8000ae7c:	c0 38       	rjmp	8000ae82 <__lshift+0x36>
8000ae7e:	10 aa       	st.w	r8++,r10
8000ae80:	2f f9       	sub	r9,-1
8000ae82:	04 39       	cp.w	r9,r2
8000ae84:	cf d5       	brlt	8000ae7e <__lshift+0x32>
8000ae86:	6e 4b       	ld.w	r11,r7[0x10]
8000ae88:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000ae8c:	2f bb       	sub	r11,-5
8000ae8e:	ee c9 ff ec 	sub	r9,r7,-20
8000ae92:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000ae96:	58 03       	cp.w	r3,0
8000ae98:	c1 30       	breq	8000aebe <__lshift+0x72>
8000ae9a:	e6 0c 11 20 	rsub	r12,r3,32
8000ae9e:	30 0a       	mov	r10,0
8000aea0:	72 02       	ld.w	r2,r9[0x0]
8000aea2:	e4 03 09 42 	lsl	r2,r2,r3
8000aea6:	04 4a       	or	r10,r2
8000aea8:	10 aa       	st.w	r8++,r10
8000aeaa:	13 0a       	ld.w	r10,r9++
8000aeac:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000aeb0:	16 39       	cp.w	r9,r11
8000aeb2:	cf 73       	brcs	8000aea0 <__lshift+0x54>
8000aeb4:	91 0a       	st.w	r8[0x0],r10
8000aeb6:	58 0a       	cp.w	r10,0
8000aeb8:	c0 70       	breq	8000aec6 <__lshift+0x7a>
8000aeba:	2f f6       	sub	r6,-1
8000aebc:	c0 58       	rjmp	8000aec6 <__lshift+0x7a>
8000aebe:	13 0a       	ld.w	r10,r9++
8000aec0:	10 aa       	st.w	r8++,r10
8000aec2:	16 39       	cp.w	r9,r11
8000aec4:	cf d3       	brcs	8000aebe <__lshift+0x72>
8000aec6:	08 9c       	mov	r12,r4
8000aec8:	20 16       	sub	r6,1
8000aeca:	0e 9b       	mov	r11,r7
8000aecc:	8b 46       	st.w	r5[0x10],r6
8000aece:	cb 5e       	rcall	8000ac38 <_Bfree>
8000aed0:	0a 9c       	mov	r12,r5
8000aed2:	d8 32       	popm	r0-r7,pc

8000aed4 <__multiply>:
8000aed4:	d4 31       	pushm	r0-r7,lr
8000aed6:	20 2d       	sub	sp,8
8000aed8:	76 49       	ld.w	r9,r11[0x10]
8000aeda:	74 48       	ld.w	r8,r10[0x10]
8000aedc:	16 96       	mov	r6,r11
8000aede:	14 95       	mov	r5,r10
8000aee0:	10 39       	cp.w	r9,r8
8000aee2:	ec 08 17 50 	movlt	r8,r6
8000aee6:	ea 06 17 50 	movlt	r6,r5
8000aeea:	f0 05 17 50 	movlt	r5,r8
8000aeee:	6c 28       	ld.w	r8,r6[0x8]
8000aef0:	76 43       	ld.w	r3,r11[0x10]
8000aef2:	74 42       	ld.w	r2,r10[0x10]
8000aef4:	76 1b       	ld.w	r11,r11[0x4]
8000aef6:	e4 03 00 07 	add	r7,r2,r3
8000aefa:	10 37       	cp.w	r7,r8
8000aefc:	f7 bb 09 ff 	subgt	r11,-1
8000af00:	cb 6e       	rcall	8000ac6c <_Balloc>
8000af02:	ee c4 ff fb 	sub	r4,r7,-5
8000af06:	f8 c9 ff ec 	sub	r9,r12,-20
8000af0a:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000af0e:	30 0a       	mov	r10,0
8000af10:	12 98       	mov	r8,r9
8000af12:	c0 28       	rjmp	8000af16 <__multiply+0x42>
8000af14:	10 aa       	st.w	r8++,r10
8000af16:	08 38       	cp.w	r8,r4
8000af18:	cf e3       	brcs	8000af14 <__multiply+0x40>
8000af1a:	2f b3       	sub	r3,-5
8000af1c:	2f b2       	sub	r2,-5
8000af1e:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000af22:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000af26:	ec cb ff ec 	sub	r11,r6,-20
8000af2a:	50 12       	stdsp	sp[0x4],r2
8000af2c:	ea ca ff ec 	sub	r10,r5,-20
8000af30:	c4 48       	rjmp	8000afb8 <__multiply+0xe4>
8000af32:	94 95       	ld.uh	r5,r10[0x2]
8000af34:	58 05       	cp.w	r5,0
8000af36:	c2 00       	breq	8000af76 <__multiply+0xa2>
8000af38:	12 98       	mov	r8,r9
8000af3a:	16 96       	mov	r6,r11
8000af3c:	30 0e       	mov	lr,0
8000af3e:	50 09       	stdsp	sp[0x0],r9
8000af40:	0d 02       	ld.w	r2,r6++
8000af42:	e4 00 16 10 	lsr	r0,r2,0x10
8000af46:	70 01       	ld.w	r1,r8[0x0]
8000af48:	70 09       	ld.w	r9,r8[0x0]
8000af4a:	b1 81       	lsr	r1,0x10
8000af4c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000af50:	e0 05 03 41 	mac	r1,r0,r5
8000af54:	ab 32       	mul	r2,r5
8000af56:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000af5a:	00 02       	add	r2,r0
8000af5c:	e4 0e 00 0e 	add	lr,r2,lr
8000af60:	b0 1e       	st.h	r8[0x2],lr
8000af62:	b1 8e       	lsr	lr,0x10
8000af64:	1c 01       	add	r1,lr
8000af66:	b0 01       	st.h	r8[0x0],r1
8000af68:	e2 0e 16 10 	lsr	lr,r1,0x10
8000af6c:	2f c8       	sub	r8,-4
8000af6e:	06 36       	cp.w	r6,r3
8000af70:	ce 83       	brcs	8000af40 <__multiply+0x6c>
8000af72:	40 09       	lddsp	r9,sp[0x0]
8000af74:	91 0e       	st.w	r8[0x0],lr
8000af76:	94 86       	ld.uh	r6,r10[0x0]
8000af78:	58 06       	cp.w	r6,0
8000af7a:	c1 d0       	breq	8000afb4 <__multiply+0xe0>
8000af7c:	72 02       	ld.w	r2,r9[0x0]
8000af7e:	12 98       	mov	r8,r9
8000af80:	16 9e       	mov	lr,r11
8000af82:	30 05       	mov	r5,0
8000af84:	b0 12       	st.h	r8[0x2],r2
8000af86:	1d 01       	ld.w	r1,lr++
8000af88:	90 82       	ld.uh	r2,r8[0x0]
8000af8a:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000af8e:	ad 30       	mul	r0,r6
8000af90:	e0 02 00 02 	add	r2,r0,r2
8000af94:	e4 05 00 05 	add	r5,r2,r5
8000af98:	b0 05       	st.h	r8[0x0],r5
8000af9a:	b1 85       	lsr	r5,0x10
8000af9c:	b1 81       	lsr	r1,0x10
8000af9e:	2f c8       	sub	r8,-4
8000afa0:	ad 31       	mul	r1,r6
8000afa2:	90 92       	ld.uh	r2,r8[0x2]
8000afa4:	e2 02 00 02 	add	r2,r1,r2
8000afa8:	0a 02       	add	r2,r5
8000afaa:	e4 05 16 10 	lsr	r5,r2,0x10
8000afae:	06 3e       	cp.w	lr,r3
8000afb0:	ce a3       	brcs	8000af84 <__multiply+0xb0>
8000afb2:	91 02       	st.w	r8[0x0],r2
8000afb4:	2f ca       	sub	r10,-4
8000afb6:	2f c9       	sub	r9,-4
8000afb8:	40 18       	lddsp	r8,sp[0x4]
8000afba:	10 3a       	cp.w	r10,r8
8000afbc:	cb b3       	brcs	8000af32 <__multiply+0x5e>
8000afbe:	c0 28       	rjmp	8000afc2 <__multiply+0xee>
8000afc0:	20 17       	sub	r7,1
8000afc2:	58 07       	cp.w	r7,0
8000afc4:	e0 8a 00 05 	brle	8000afce <__multiply+0xfa>
8000afc8:	09 48       	ld.w	r8,--r4
8000afca:	58 08       	cp.w	r8,0
8000afcc:	cf a0       	breq	8000afc0 <__multiply+0xec>
8000afce:	99 47       	st.w	r12[0x10],r7
8000afd0:	2f ed       	sub	sp,-8
8000afd2:	d8 32       	popm	r0-r7,pc

8000afd4 <__i2b>:
8000afd4:	d4 21       	pushm	r4-r7,lr
8000afd6:	16 97       	mov	r7,r11
8000afd8:	30 1b       	mov	r11,1
8000afda:	c4 9e       	rcall	8000ac6c <_Balloc>
8000afdc:	30 19       	mov	r9,1
8000afde:	99 57       	st.w	r12[0x14],r7
8000afe0:	99 49       	st.w	r12[0x10],r9
8000afe2:	d8 22       	popm	r4-r7,pc

8000afe4 <__multadd>:
8000afe4:	d4 31       	pushm	r0-r7,lr
8000afe6:	30 08       	mov	r8,0
8000afe8:	12 95       	mov	r5,r9
8000afea:	16 97       	mov	r7,r11
8000afec:	18 96       	mov	r6,r12
8000afee:	76 44       	ld.w	r4,r11[0x10]
8000aff0:	f6 c9 ff ec 	sub	r9,r11,-20
8000aff4:	72 0b       	ld.w	r11,r9[0x0]
8000aff6:	f6 0c 16 10 	lsr	r12,r11,0x10
8000affa:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000affe:	f4 0c 02 4c 	mul	r12,r10,r12
8000b002:	f4 0b 03 45 	mac	r5,r10,r11
8000b006:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000b00a:	b1 85       	lsr	r5,0x10
8000b00c:	18 05       	add	r5,r12
8000b00e:	ea 0c 15 10 	lsl	r12,r5,0x10
8000b012:	f8 0b 00 0b 	add	r11,r12,r11
8000b016:	12 ab       	st.w	r9++,r11
8000b018:	2f f8       	sub	r8,-1
8000b01a:	b1 85       	lsr	r5,0x10
8000b01c:	08 38       	cp.w	r8,r4
8000b01e:	ce b5       	brlt	8000aff4 <__multadd+0x10>
8000b020:	58 05       	cp.w	r5,0
8000b022:	c1 c0       	breq	8000b05a <__multadd+0x76>
8000b024:	6e 28       	ld.w	r8,r7[0x8]
8000b026:	10 34       	cp.w	r4,r8
8000b028:	c1 35       	brlt	8000b04e <__multadd+0x6a>
8000b02a:	6e 1b       	ld.w	r11,r7[0x4]
8000b02c:	0c 9c       	mov	r12,r6
8000b02e:	2f fb       	sub	r11,-1
8000b030:	c1 ee       	rcall	8000ac6c <_Balloc>
8000b032:	6e 4a       	ld.w	r10,r7[0x10]
8000b034:	ee cb ff f4 	sub	r11,r7,-12
8000b038:	18 93       	mov	r3,r12
8000b03a:	2f ea       	sub	r10,-2
8000b03c:	2f 4c       	sub	r12,-12
8000b03e:	a3 6a       	lsl	r10,0x2
8000b040:	fe b0 dc ca 	rcall	800069d4 <memcpy>
8000b044:	0e 9b       	mov	r11,r7
8000b046:	0c 9c       	mov	r12,r6
8000b048:	fe b0 fd f8 	rcall	8000ac38 <_Bfree>
8000b04c:	06 97       	mov	r7,r3
8000b04e:	e8 c8 ff ff 	sub	r8,r4,-1
8000b052:	2f b4       	sub	r4,-5
8000b054:	8f 48       	st.w	r7[0x10],r8
8000b056:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000b05a:	0e 9c       	mov	r12,r7
8000b05c:	d8 32       	popm	r0-r7,pc
8000b05e:	d7 03       	nop

8000b060 <__pow5mult>:
8000b060:	d4 31       	pushm	r0-r7,lr
8000b062:	14 96       	mov	r6,r10
8000b064:	18 97       	mov	r7,r12
8000b066:	16 94       	mov	r4,r11
8000b068:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000b06c:	c0 90       	breq	8000b07e <__pow5mult+0x1e>
8000b06e:	20 18       	sub	r8,1
8000b070:	fe c9 ea b4 	sub	r9,pc,-5452
8000b074:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000b078:	30 09       	mov	r9,0
8000b07a:	cb 5f       	rcall	8000afe4 <__multadd>
8000b07c:	18 94       	mov	r4,r12
8000b07e:	a3 46       	asr	r6,0x2
8000b080:	c3 40       	breq	8000b0e8 <__pow5mult+0x88>
8000b082:	6e 95       	ld.w	r5,r7[0x24]
8000b084:	58 05       	cp.w	r5,0
8000b086:	c0 91       	brne	8000b098 <__pow5mult+0x38>
8000b088:	31 0c       	mov	r12,16
8000b08a:	fe b0 da 81 	rcall	8000658c <malloc>
8000b08e:	99 35       	st.w	r12[0xc],r5
8000b090:	8f 9c       	st.w	r7[0x24],r12
8000b092:	99 15       	st.w	r12[0x4],r5
8000b094:	99 25       	st.w	r12[0x8],r5
8000b096:	99 05       	st.w	r12[0x0],r5
8000b098:	6e 93       	ld.w	r3,r7[0x24]
8000b09a:	66 25       	ld.w	r5,r3[0x8]
8000b09c:	58 05       	cp.w	r5,0
8000b09e:	c0 c1       	brne	8000b0b6 <__pow5mult+0x56>
8000b0a0:	e0 6b 02 71 	mov	r11,625
8000b0a4:	0e 9c       	mov	r12,r7
8000b0a6:	c9 7f       	rcall	8000afd4 <__i2b>
8000b0a8:	87 2c       	st.w	r3[0x8],r12
8000b0aa:	30 08       	mov	r8,0
8000b0ac:	18 95       	mov	r5,r12
8000b0ae:	99 08       	st.w	r12[0x0],r8
8000b0b0:	c0 38       	rjmp	8000b0b6 <__pow5mult+0x56>
8000b0b2:	06 9c       	mov	r12,r3
8000b0b4:	18 95       	mov	r5,r12
8000b0b6:	ed b6 00 00 	bld	r6,0x0
8000b0ba:	c0 b1       	brne	8000b0d0 <__pow5mult+0x70>
8000b0bc:	08 9b       	mov	r11,r4
8000b0be:	0a 9a       	mov	r10,r5
8000b0c0:	0e 9c       	mov	r12,r7
8000b0c2:	c0 9f       	rcall	8000aed4 <__multiply>
8000b0c4:	08 9b       	mov	r11,r4
8000b0c6:	18 93       	mov	r3,r12
8000b0c8:	0e 9c       	mov	r12,r7
8000b0ca:	06 94       	mov	r4,r3
8000b0cc:	fe b0 fd b6 	rcall	8000ac38 <_Bfree>
8000b0d0:	a1 56       	asr	r6,0x1
8000b0d2:	c0 b0       	breq	8000b0e8 <__pow5mult+0x88>
8000b0d4:	6a 03       	ld.w	r3,r5[0x0]
8000b0d6:	58 03       	cp.w	r3,0
8000b0d8:	ce d1       	brne	8000b0b2 <__pow5mult+0x52>
8000b0da:	0a 9a       	mov	r10,r5
8000b0dc:	0a 9b       	mov	r11,r5
8000b0de:	0e 9c       	mov	r12,r7
8000b0e0:	cf ae       	rcall	8000aed4 <__multiply>
8000b0e2:	8b 0c       	st.w	r5[0x0],r12
8000b0e4:	99 03       	st.w	r12[0x0],r3
8000b0e6:	ce 7b       	rjmp	8000b0b4 <__pow5mult+0x54>
8000b0e8:	08 9c       	mov	r12,r4
8000b0ea:	d8 32       	popm	r0-r7,pc

8000b0ec <_read_r>:
8000b0ec:	d4 21       	pushm	r4-r7,lr
8000b0ee:	16 98       	mov	r8,r11
8000b0f0:	18 97       	mov	r7,r12
8000b0f2:	10 9c       	mov	r12,r8
8000b0f4:	30 08       	mov	r8,0
8000b0f6:	14 9b       	mov	r11,r10
8000b0f8:	e0 66 07 fc 	mov	r6,2044
8000b0fc:	12 9a       	mov	r10,r9
8000b0fe:	8d 08       	st.w	r6[0x0],r8
8000b100:	fe b0 ce ee 	rcall	80004edc <_read>
8000b104:	5b fc       	cp.w	r12,-1
8000b106:	c0 51       	brne	8000b110 <_read_r+0x24>
8000b108:	6c 08       	ld.w	r8,r6[0x0]
8000b10a:	58 08       	cp.w	r8,0
8000b10c:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b110:	d8 22       	popm	r4-r7,pc
8000b112:	d7 03       	nop

8000b114 <__isinfd>:
8000b114:	14 98       	mov	r8,r10
8000b116:	fc 19 7f f0 	movh	r9,0x7ff0
8000b11a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000b11e:	f0 0b 11 00 	rsub	r11,r8,0
8000b122:	f7 e8 10 08 	or	r8,r11,r8
8000b126:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000b12a:	f2 08 01 08 	sub	r8,r9,r8
8000b12e:	f0 0c 11 00 	rsub	r12,r8,0
8000b132:	f9 e8 10 08 	or	r8,r12,r8
8000b136:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000b13a:	2f fc       	sub	r12,-1
8000b13c:	5e fc       	retal	r12

8000b13e <__isnand>:
8000b13e:	14 98       	mov	r8,r10
8000b140:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000b144:	f0 0c 11 00 	rsub	r12,r8,0
8000b148:	10 4c       	or	r12,r8
8000b14a:	fc 18 7f f0 	movh	r8,0x7ff0
8000b14e:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000b152:	f0 0c 01 0c 	sub	r12,r8,r12
8000b156:	bf 9c       	lsr	r12,0x1f
8000b158:	5e fc       	retal	r12

8000b15a <strlen>:
8000b15a:	30 09       	mov	r9,0
8000b15c:	18 98       	mov	r8,r12
8000b15e:	c0 28       	rjmp	8000b162 <strlen+0x8>
8000b160:	2f f8       	sub	r8,-1
8000b162:	11 8a       	ld.ub	r10,r8[0x0]
8000b164:	f2 0a 18 00 	cp.b	r10,r9
8000b168:	cf c1       	brne	8000b160 <strlen+0x6>
8000b16a:	f0 0c 01 0c 	sub	r12,r8,r12
8000b16e:	5e fc       	retal	r12

8000b170 <_calloc_r>:
8000b170:	d4 21       	pushm	r4-r7,lr
8000b172:	f4 0b 02 4b 	mul	r11,r10,r11
8000b176:	fe b0 da 13 	rcall	8000659c <_malloc_r>
8000b17a:	18 97       	mov	r7,r12
8000b17c:	c2 30       	breq	8000b1c2 <_calloc_r+0x52>
8000b17e:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000b182:	e0 1a ff fc 	andl	r10,0xfffc
8000b186:	20 4a       	sub	r10,4
8000b188:	e0 4a 00 24 	cp.w	r10,36
8000b18c:	e0 8b 00 18 	brhi	8000b1bc <_calloc_r+0x4c>
8000b190:	18 98       	mov	r8,r12
8000b192:	59 3a       	cp.w	r10,19
8000b194:	e0 88 00 0f 	brls	8000b1b2 <_calloc_r+0x42>
8000b198:	30 09       	mov	r9,0
8000b19a:	10 a9       	st.w	r8++,r9
8000b19c:	10 a9       	st.w	r8++,r9
8000b19e:	59 ba       	cp.w	r10,27
8000b1a0:	e0 88 00 09 	brls	8000b1b2 <_calloc_r+0x42>
8000b1a4:	10 a9       	st.w	r8++,r9
8000b1a6:	10 a9       	st.w	r8++,r9
8000b1a8:	e0 4a 00 24 	cp.w	r10,36
8000b1ac:	c0 31       	brne	8000b1b2 <_calloc_r+0x42>
8000b1ae:	10 a9       	st.w	r8++,r9
8000b1b0:	10 a9       	st.w	r8++,r9
8000b1b2:	30 09       	mov	r9,0
8000b1b4:	10 a9       	st.w	r8++,r9
8000b1b6:	91 19       	st.w	r8[0x4],r9
8000b1b8:	91 09       	st.w	r8[0x0],r9
8000b1ba:	c0 48       	rjmp	8000b1c2 <_calloc_r+0x52>
8000b1bc:	30 0b       	mov	r11,0
8000b1be:	fe b0 dc af 	rcall	80006b1c <memset>
8000b1c2:	0e 9c       	mov	r12,r7
8000b1c4:	d8 22       	popm	r4-r7,pc
8000b1c6:	d7 03       	nop

8000b1c8 <_fstat_r>:
8000b1c8:	d4 21       	pushm	r4-r7,lr
8000b1ca:	16 98       	mov	r8,r11
8000b1cc:	18 97       	mov	r7,r12
8000b1ce:	10 9c       	mov	r12,r8
8000b1d0:	30 08       	mov	r8,0
8000b1d2:	e0 66 07 fc 	mov	r6,2044
8000b1d6:	14 9b       	mov	r11,r10
8000b1d8:	8d 08       	st.w	r6[0x0],r8
8000b1da:	fe b0 de 5b 	rcall	80006e90 <_fstat>
8000b1de:	5b fc       	cp.w	r12,-1
8000b1e0:	c0 51       	brne	8000b1ea <_fstat_r+0x22>
8000b1e2:	6c 08       	ld.w	r8,r6[0x0]
8000b1e4:	58 08       	cp.w	r8,0
8000b1e6:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b1ea:	d8 22       	popm	r4-r7,pc

8000b1ec <__avr32_f64_mul>:
8000b1ec:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000b1f0:	e0 80 00 dc 	breq	8000b3a8 <__avr32_f64_mul_op1_zero>
8000b1f4:	d4 21       	pushm	r4-r7,lr
8000b1f6:	f7 e9 20 0e 	eor	lr,r11,r9
8000b1fa:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000b1fe:	30 15       	mov	r5,1
8000b200:	c4 30       	breq	8000b286 <__avr32_f64_mul_op1_subnormal>
8000b202:	ab 6b       	lsl	r11,0xa
8000b204:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000b208:	ab 6a       	lsl	r10,0xa
8000b20a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000b20e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000b212:	c5 c0       	breq	8000b2ca <__avr32_f64_mul_op2_subnormal>
8000b214:	a1 78       	lsl	r8,0x1
8000b216:	5c f9       	rol	r9
8000b218:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000b21c:	e0 47 07 ff 	cp.w	r7,2047
8000b220:	c7 70       	breq	8000b30e <__avr32_f64_mul_op_nan_or_inf>
8000b222:	e0 46 07 ff 	cp.w	r6,2047
8000b226:	c7 40       	breq	8000b30e <__avr32_f64_mul_op_nan_or_inf>
8000b228:	ee 06 00 0c 	add	r12,r7,r6
8000b22c:	e0 2c 03 fe 	sub	r12,1022
8000b230:	f6 08 06 44 	mulu.d	r4,r11,r8
8000b234:	f4 09 07 44 	macu.d	r4,r10,r9
8000b238:	f4 08 06 46 	mulu.d	r6,r10,r8
8000b23c:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000b240:	08 07       	add	r7,r4
8000b242:	f4 05 00 4a 	adc	r10,r10,r5
8000b246:	5c 0b       	acr	r11
8000b248:	ed bb 00 14 	bld	r11,0x14
8000b24c:	c0 50       	breq	8000b256 <__avr32_f64_mul+0x6a>
8000b24e:	a1 77       	lsl	r7,0x1
8000b250:	5c fa       	rol	r10
8000b252:	5c fb       	rol	r11
8000b254:	20 1c       	sub	r12,1
8000b256:	58 0c       	cp.w	r12,0
8000b258:	e0 8a 00 6f 	brle	8000b336 <__avr32_f64_mul_res_subnormal>
8000b25c:	e0 4c 07 ff 	cp.w	r12,2047
8000b260:	e0 84 00 9c 	brge	8000b398 <__avr32_f64_mul_res_inf>
8000b264:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000b268:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000b26c:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000b270:	ee 17 80 00 	eorh	r7,0x8000
8000b274:	f1 b7 04 20 	satu	r7,0x1
8000b278:	0e 0a       	add	r10,r7
8000b27a:	5c 0b       	acr	r11
8000b27c:	ed be 00 1f 	bld	lr,0x1f
8000b280:	ef bb 00 1f 	bst	r11,0x1f
8000b284:	d8 22       	popm	r4-r7,pc

8000b286 <__avr32_f64_mul_op1_subnormal>:
8000b286:	e4 1b 00 0f 	andh	r11,0xf
8000b28a:	f4 0c 12 00 	clz	r12,r10
8000b28e:	f6 06 12 00 	clz	r6,r11
8000b292:	f7 bc 03 e1 	sublo	r12,-31
8000b296:	f8 06 17 30 	movlo	r6,r12
8000b29a:	f7 b6 02 01 	subhs	r6,1
8000b29e:	e0 46 00 20 	cp.w	r6,32
8000b2a2:	c0 d4       	brge	8000b2bc <__avr32_f64_mul_op1_subnormal+0x36>
8000b2a4:	ec 0c 11 20 	rsub	r12,r6,32
8000b2a8:	f6 06 09 4b 	lsl	r11,r11,r6
8000b2ac:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000b2b0:	18 4b       	or	r11,r12
8000b2b2:	f4 06 09 4a 	lsl	r10,r10,r6
8000b2b6:	20 b6       	sub	r6,11
8000b2b8:	0c 17       	sub	r7,r6
8000b2ba:	ca ab       	rjmp	8000b20e <__avr32_f64_mul+0x22>
8000b2bc:	f4 06 09 4b 	lsl	r11,r10,r6
8000b2c0:	c6 40       	breq	8000b388 <__avr32_f64_mul_res_zero>
8000b2c2:	30 0a       	mov	r10,0
8000b2c4:	20 b6       	sub	r6,11
8000b2c6:	0c 17       	sub	r7,r6
8000b2c8:	ca 3b       	rjmp	8000b20e <__avr32_f64_mul+0x22>

8000b2ca <__avr32_f64_mul_op2_subnormal>:
8000b2ca:	e4 19 00 0f 	andh	r9,0xf
8000b2ce:	f0 0c 12 00 	clz	r12,r8
8000b2d2:	f2 05 12 00 	clz	r5,r9
8000b2d6:	f7 bc 03 ea 	sublo	r12,-22
8000b2da:	f8 05 17 30 	movlo	r5,r12
8000b2de:	f7 b5 02 0a 	subhs	r5,10
8000b2e2:	e0 45 00 20 	cp.w	r5,32
8000b2e6:	c0 d4       	brge	8000b300 <__avr32_f64_mul_op2_subnormal+0x36>
8000b2e8:	ea 0c 11 20 	rsub	r12,r5,32
8000b2ec:	f2 05 09 49 	lsl	r9,r9,r5
8000b2f0:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000b2f4:	18 49       	or	r9,r12
8000b2f6:	f0 05 09 48 	lsl	r8,r8,r5
8000b2fa:	20 25       	sub	r5,2
8000b2fc:	0a 16       	sub	r6,r5
8000b2fe:	c8 fb       	rjmp	8000b21c <__avr32_f64_mul+0x30>
8000b300:	f0 05 09 49 	lsl	r9,r8,r5
8000b304:	c4 20       	breq	8000b388 <__avr32_f64_mul_res_zero>
8000b306:	30 08       	mov	r8,0
8000b308:	20 25       	sub	r5,2
8000b30a:	0a 16       	sub	r6,r5
8000b30c:	c8 8b       	rjmp	8000b21c <__avr32_f64_mul+0x30>

8000b30e <__avr32_f64_mul_op_nan_or_inf>:
8000b30e:	e4 19 00 0f 	andh	r9,0xf
8000b312:	e4 1b 00 0f 	andh	r11,0xf
8000b316:	14 4b       	or	r11,r10
8000b318:	10 49       	or	r9,r8
8000b31a:	e0 47 07 ff 	cp.w	r7,2047
8000b31e:	c0 91       	brne	8000b330 <__avr32_f64_mul_op1_not_naninf>
8000b320:	58 0b       	cp.w	r11,0
8000b322:	c3 81       	brne	8000b392 <__avr32_f64_mul_res_nan>
8000b324:	e0 46 07 ff 	cp.w	r6,2047
8000b328:	c3 81       	brne	8000b398 <__avr32_f64_mul_res_inf>
8000b32a:	58 09       	cp.w	r9,0
8000b32c:	c3 60       	breq	8000b398 <__avr32_f64_mul_res_inf>
8000b32e:	c3 28       	rjmp	8000b392 <__avr32_f64_mul_res_nan>

8000b330 <__avr32_f64_mul_op1_not_naninf>:
8000b330:	58 09       	cp.w	r9,0
8000b332:	c3 30       	breq	8000b398 <__avr32_f64_mul_res_inf>
8000b334:	c2 f8       	rjmp	8000b392 <__avr32_f64_mul_res_nan>

8000b336 <__avr32_f64_mul_res_subnormal>:
8000b336:	5c 3c       	neg	r12
8000b338:	2f fc       	sub	r12,-1
8000b33a:	f1 bc 04 c0 	satu	r12,0x6
8000b33e:	e0 4c 00 20 	cp.w	r12,32
8000b342:	c1 14       	brge	8000b364 <__avr32_f64_mul_res_subnormal+0x2e>
8000b344:	f8 08 11 20 	rsub	r8,r12,32
8000b348:	0e 46       	or	r6,r7
8000b34a:	ee 0c 0a 47 	lsr	r7,r7,r12
8000b34e:	f4 08 09 49 	lsl	r9,r10,r8
8000b352:	12 47       	or	r7,r9
8000b354:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b358:	f6 08 09 49 	lsl	r9,r11,r8
8000b35c:	12 4a       	or	r10,r9
8000b35e:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000b362:	c8 3b       	rjmp	8000b268 <__avr32_f64_mul+0x7c>
8000b364:	f8 08 11 20 	rsub	r8,r12,32
8000b368:	f9 b9 00 00 	moveq	r9,0
8000b36c:	c0 30       	breq	8000b372 <__avr32_f64_mul_res_subnormal+0x3c>
8000b36e:	f6 08 09 49 	lsl	r9,r11,r8
8000b372:	0e 46       	or	r6,r7
8000b374:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000b378:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b37c:	f3 ea 10 07 	or	r7,r9,r10
8000b380:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000b384:	30 0b       	mov	r11,0
8000b386:	c7 1b       	rjmp	8000b268 <__avr32_f64_mul+0x7c>

8000b388 <__avr32_f64_mul_res_zero>:
8000b388:	1c 9b       	mov	r11,lr
8000b38a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b38e:	30 0a       	mov	r10,0
8000b390:	d8 22       	popm	r4-r7,pc

8000b392 <__avr32_f64_mul_res_nan>:
8000b392:	3f fb       	mov	r11,-1
8000b394:	3f fa       	mov	r10,-1
8000b396:	d8 22       	popm	r4-r7,pc

8000b398 <__avr32_f64_mul_res_inf>:
8000b398:	f0 6b 00 00 	mov	r11,-1048576
8000b39c:	ed be 00 1f 	bld	lr,0x1f
8000b3a0:	ef bb 00 1f 	bst	r11,0x1f
8000b3a4:	30 0a       	mov	r10,0
8000b3a6:	d8 22       	popm	r4-r7,pc

8000b3a8 <__avr32_f64_mul_op1_zero>:
8000b3a8:	f7 e9 20 0b 	eor	r11,r11,r9
8000b3ac:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b3b0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000b3b4:	e0 4c 07 ff 	cp.w	r12,2047
8000b3b8:	5e 1c       	retne	r12
8000b3ba:	3f fa       	mov	r10,-1
8000b3bc:	3f fb       	mov	r11,-1
8000b3be:	5e fc       	retal	r12

8000b3c0 <__avr32_f64_sub_from_add>:
8000b3c0:	ee 19 80 00 	eorh	r9,0x8000

8000b3c4 <__avr32_f64_sub>:
8000b3c4:	f7 e9 20 0c 	eor	r12,r11,r9
8000b3c8:	e0 86 00 ca 	brmi	8000b55c <__avr32_f64_add_from_sub>
8000b3cc:	eb cd 40 e0 	pushm	r5-r7,lr
8000b3d0:	16 9c       	mov	r12,r11
8000b3d2:	e6 1c 80 00 	andh	r12,0x8000,COH
8000b3d6:	bf db       	cbr	r11,0x1f
8000b3d8:	bf d9       	cbr	r9,0x1f
8000b3da:	10 3a       	cp.w	r10,r8
8000b3dc:	f2 0b 13 00 	cpc	r11,r9
8000b3e0:	c0 92       	brcc	8000b3f2 <__avr32_f64_sub+0x2e>
8000b3e2:	16 97       	mov	r7,r11
8000b3e4:	12 9b       	mov	r11,r9
8000b3e6:	0e 99       	mov	r9,r7
8000b3e8:	14 97       	mov	r7,r10
8000b3ea:	10 9a       	mov	r10,r8
8000b3ec:	0e 98       	mov	r8,r7
8000b3ee:	ee 1c 80 00 	eorh	r12,0x8000
8000b3f2:	f6 07 16 14 	lsr	r7,r11,0x14
8000b3f6:	ab 7b       	lsl	r11,0xb
8000b3f8:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000b3fc:	ab 7a       	lsl	r10,0xb
8000b3fe:	bf bb       	sbr	r11,0x1f
8000b400:	f2 06 16 14 	lsr	r6,r9,0x14
8000b404:	c4 40       	breq	8000b48c <__avr32_f64_sub_opL_subnormal>
8000b406:	ab 79       	lsl	r9,0xb
8000b408:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000b40c:	ab 78       	lsl	r8,0xb
8000b40e:	bf b9       	sbr	r9,0x1f

8000b410 <__avr32_f64_sub_opL_subnormal_done>:
8000b410:	e0 47 07 ff 	cp.w	r7,2047
8000b414:	c4 f0       	breq	8000b4b2 <__avr32_f64_sub_opH_nan_or_inf>
8000b416:	0e 26       	rsub	r6,r7
8000b418:	c1 20       	breq	8000b43c <__avr32_f64_sub_shift_done>
8000b41a:	ec 05 11 20 	rsub	r5,r6,32
8000b41e:	e0 46 00 20 	cp.w	r6,32
8000b422:	c7 c2       	brcc	8000b51a <__avr32_f64_sub_longshift>
8000b424:	f0 05 09 4e 	lsl	lr,r8,r5
8000b428:	f2 05 09 45 	lsl	r5,r9,r5
8000b42c:	f0 06 0a 48 	lsr	r8,r8,r6
8000b430:	f2 06 0a 49 	lsr	r9,r9,r6
8000b434:	0a 48       	or	r8,r5
8000b436:	58 0e       	cp.w	lr,0
8000b438:	5f 1e       	srne	lr
8000b43a:	1c 48       	or	r8,lr

8000b43c <__avr32_f64_sub_shift_done>:
8000b43c:	10 1a       	sub	r10,r8
8000b43e:	f6 09 01 4b 	sbc	r11,r11,r9
8000b442:	f6 06 12 00 	clz	r6,r11
8000b446:	c0 e0       	breq	8000b462 <__avr32_f64_sub_longnormalize_done>
8000b448:	c7 83       	brcs	8000b538 <__avr32_f64_sub_longnormalize>
8000b44a:	ec 0e 11 20 	rsub	lr,r6,32
8000b44e:	f6 06 09 4b 	lsl	r11,r11,r6
8000b452:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000b456:	1c 4b       	or	r11,lr
8000b458:	f4 06 09 4a 	lsl	r10,r10,r6
8000b45c:	0c 17       	sub	r7,r6
8000b45e:	e0 8a 00 39 	brle	8000b4d0 <__avr32_f64_sub_subnormal_result>

8000b462 <__avr32_f64_sub_longnormalize_done>:
8000b462:	f4 09 15 15 	lsl	r9,r10,0x15
8000b466:	ab 9a       	lsr	r10,0xb
8000b468:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000b46c:	ab 9b       	lsr	r11,0xb
8000b46e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b472:	18 4b       	or	r11,r12

8000b474 <__avr32_f64_sub_round>:
8000b474:	fc 17 80 00 	movh	r7,0x8000
8000b478:	ed ba 00 00 	bld	r10,0x0
8000b47c:	f7 b7 01 ff 	subne	r7,-1
8000b480:	0e 39       	cp.w	r9,r7
8000b482:	5f 29       	srhs	r9
8000b484:	12 0a       	add	r10,r9
8000b486:	5c 0b       	acr	r11
8000b488:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b48c <__avr32_f64_sub_opL_subnormal>:
8000b48c:	ab 79       	lsl	r9,0xb
8000b48e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000b492:	ab 78       	lsl	r8,0xb
8000b494:	f3 e8 10 0e 	or	lr,r9,r8
8000b498:	f9 b6 01 01 	movne	r6,1
8000b49c:	ee 0e 11 00 	rsub	lr,r7,0
8000b4a0:	f9 b7 00 01 	moveq	r7,1
8000b4a4:	ef bb 00 1f 	bst	r11,0x1f
8000b4a8:	f7 ea 10 0e 	or	lr,r11,r10
8000b4ac:	f9 b7 00 00 	moveq	r7,0
8000b4b0:	cb 0b       	rjmp	8000b410 <__avr32_f64_sub_opL_subnormal_done>

8000b4b2 <__avr32_f64_sub_opH_nan_or_inf>:
8000b4b2:	bf db       	cbr	r11,0x1f
8000b4b4:	f7 ea 10 0e 	or	lr,r11,r10
8000b4b8:	c0 81       	brne	8000b4c8 <__avr32_f64_sub_return_nan>
8000b4ba:	e0 46 07 ff 	cp.w	r6,2047
8000b4be:	c0 50       	breq	8000b4c8 <__avr32_f64_sub_return_nan>
8000b4c0:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000b4c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b4c8 <__avr32_f64_sub_return_nan>:
8000b4c8:	3f fa       	mov	r10,-1
8000b4ca:	3f fb       	mov	r11,-1
8000b4cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b4d0 <__avr32_f64_sub_subnormal_result>:
8000b4d0:	5c 37       	neg	r7
8000b4d2:	2f f7       	sub	r7,-1
8000b4d4:	f1 b7 04 c0 	satu	r7,0x6
8000b4d8:	e0 47 00 20 	cp.w	r7,32
8000b4dc:	c1 14       	brge	8000b4fe <__avr32_f64_sub_subnormal_result+0x2e>
8000b4de:	ee 08 11 20 	rsub	r8,r7,32
8000b4e2:	f4 08 09 49 	lsl	r9,r10,r8
8000b4e6:	5f 16       	srne	r6
8000b4e8:	f4 07 0a 4a 	lsr	r10,r10,r7
8000b4ec:	0c 4a       	or	r10,r6
8000b4ee:	f6 08 09 49 	lsl	r9,r11,r8
8000b4f2:	f5 e9 10 0a 	or	r10,r10,r9
8000b4f6:	f4 07 0a 4b 	lsr	r11,r10,r7
8000b4fa:	30 07       	mov	r7,0
8000b4fc:	cb 3b       	rjmp	8000b462 <__avr32_f64_sub_longnormalize_done>
8000b4fe:	ee 08 11 40 	rsub	r8,r7,64
8000b502:	f6 08 09 49 	lsl	r9,r11,r8
8000b506:	14 49       	or	r9,r10
8000b508:	5f 16       	srne	r6
8000b50a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000b50e:	0c 4a       	or	r10,r6
8000b510:	30 0b       	mov	r11,0
8000b512:	30 07       	mov	r7,0
8000b514:	ca 7b       	rjmp	8000b462 <__avr32_f64_sub_longnormalize_done>
8000b516:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b51a <__avr32_f64_sub_longshift>:
8000b51a:	f1 b6 04 c0 	satu	r6,0x6
8000b51e:	f0 0e 17 00 	moveq	lr,r8
8000b522:	c0 40       	breq	8000b52a <__avr32_f64_sub_longshift+0x10>
8000b524:	f2 05 09 4e 	lsl	lr,r9,r5
8000b528:	10 4e       	or	lr,r8
8000b52a:	f2 06 0a 48 	lsr	r8,r9,r6
8000b52e:	30 09       	mov	r9,0
8000b530:	58 0e       	cp.w	lr,0
8000b532:	5f 1e       	srne	lr
8000b534:	1c 48       	or	r8,lr
8000b536:	c8 3b       	rjmp	8000b43c <__avr32_f64_sub_shift_done>

8000b538 <__avr32_f64_sub_longnormalize>:
8000b538:	f4 06 12 00 	clz	r6,r10
8000b53c:	f9 b7 03 00 	movlo	r7,0
8000b540:	f9 b6 03 00 	movlo	r6,0
8000b544:	f9 bc 03 00 	movlo	r12,0
8000b548:	f7 b6 02 e0 	subhs	r6,-32
8000b54c:	f4 06 09 4b 	lsl	r11,r10,r6
8000b550:	30 0a       	mov	r10,0
8000b552:	0c 17       	sub	r7,r6
8000b554:	fe 9a ff be 	brle	8000b4d0 <__avr32_f64_sub_subnormal_result>
8000b558:	c8 5b       	rjmp	8000b462 <__avr32_f64_sub_longnormalize_done>
8000b55a:	d7 03       	nop

8000b55c <__avr32_f64_add_from_sub>:
8000b55c:	ee 19 80 00 	eorh	r9,0x8000

8000b560 <__avr32_f64_add>:
8000b560:	f7 e9 20 0c 	eor	r12,r11,r9
8000b564:	fe 96 ff 2e 	brmi	8000b3c0 <__avr32_f64_sub_from_add>
8000b568:	eb cd 40 e0 	pushm	r5-r7,lr
8000b56c:	16 9c       	mov	r12,r11
8000b56e:	e6 1c 80 00 	andh	r12,0x8000,COH
8000b572:	bf db       	cbr	r11,0x1f
8000b574:	bf d9       	cbr	r9,0x1f
8000b576:	12 3b       	cp.w	r11,r9
8000b578:	c0 72       	brcc	8000b586 <__avr32_f64_add+0x26>
8000b57a:	16 97       	mov	r7,r11
8000b57c:	12 9b       	mov	r11,r9
8000b57e:	0e 99       	mov	r9,r7
8000b580:	14 97       	mov	r7,r10
8000b582:	10 9a       	mov	r10,r8
8000b584:	0e 98       	mov	r8,r7
8000b586:	30 0e       	mov	lr,0
8000b588:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000b58c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000b590:	b5 ab       	sbr	r11,0x14
8000b592:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000b596:	c6 20       	breq	8000b65a <__avr32_f64_add_op2_subnormal>
8000b598:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000b59c:	b5 a9       	sbr	r9,0x14
8000b59e:	e0 47 07 ff 	cp.w	r7,2047
8000b5a2:	c2 80       	breq	8000b5f2 <__avr32_f64_add_opH_nan_or_inf>
8000b5a4:	0e 26       	rsub	r6,r7
8000b5a6:	c1 20       	breq	8000b5ca <__avr32_f64_add_shift_done>
8000b5a8:	e0 46 00 36 	cp.w	r6,54
8000b5ac:	c1 52       	brcc	8000b5d6 <__avr32_f64_add_res_of_done>
8000b5ae:	ec 05 11 20 	rsub	r5,r6,32
8000b5b2:	e0 46 00 20 	cp.w	r6,32
8000b5b6:	c3 52       	brcc	8000b620 <__avr32_f64_add_longshift>
8000b5b8:	f0 05 09 4e 	lsl	lr,r8,r5
8000b5bc:	f2 05 09 45 	lsl	r5,r9,r5
8000b5c0:	f0 06 0a 48 	lsr	r8,r8,r6
8000b5c4:	f2 06 0a 49 	lsr	r9,r9,r6
8000b5c8:	0a 48       	or	r8,r5

8000b5ca <__avr32_f64_add_shift_done>:
8000b5ca:	10 0a       	add	r10,r8
8000b5cc:	f6 09 00 4b 	adc	r11,r11,r9
8000b5d0:	ed bb 00 15 	bld	r11,0x15
8000b5d4:	c3 40       	breq	8000b63c <__avr32_f64_add_res_of>

8000b5d6 <__avr32_f64_add_res_of_done>:
8000b5d6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b5da:	18 4b       	or	r11,r12

8000b5dc <__avr32_f64_add_round>:
8000b5dc:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000b5e0:	18 4e       	or	lr,r12
8000b5e2:	ee 1e 80 00 	eorh	lr,0x8000
8000b5e6:	f1 be 04 20 	satu	lr,0x1
8000b5ea:	1c 0a       	add	r10,lr
8000b5ec:	5c 0b       	acr	r11
8000b5ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b5f2 <__avr32_f64_add_opH_nan_or_inf>:
8000b5f2:	b5 cb       	cbr	r11,0x14
8000b5f4:	f7 ea 10 0e 	or	lr,r11,r10
8000b5f8:	c1 01       	brne	8000b618 <__avr32_f64_add_return_nan>
8000b5fa:	e0 46 07 ff 	cp.w	r6,2047
8000b5fe:	c0 30       	breq	8000b604 <__avr32_f64_add_opL_nan_or_inf>
8000b600:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b604 <__avr32_f64_add_opL_nan_or_inf>:
8000b604:	b5 c9       	cbr	r9,0x14
8000b606:	f3 e8 10 0e 	or	lr,r9,r8
8000b60a:	c0 71       	brne	8000b618 <__avr32_f64_add_return_nan>
8000b60c:	30 0a       	mov	r10,0
8000b60e:	fc 1b 7f f0 	movh	r11,0x7ff0
8000b612:	18 4b       	or	r11,r12
8000b614:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b618 <__avr32_f64_add_return_nan>:
8000b618:	3f fa       	mov	r10,-1
8000b61a:	3f fb       	mov	r11,-1
8000b61c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b620 <__avr32_f64_add_longshift>:
8000b620:	f1 b6 04 c0 	satu	r6,0x6
8000b624:	f0 0e 17 00 	moveq	lr,r8
8000b628:	c0 60       	breq	8000b634 <__avr32_f64_add_longshift+0x14>
8000b62a:	f2 05 09 4e 	lsl	lr,r9,r5
8000b62e:	58 08       	cp.w	r8,0
8000b630:	5f 18       	srne	r8
8000b632:	10 4e       	or	lr,r8
8000b634:	f2 06 0a 48 	lsr	r8,r9,r6
8000b638:	30 09       	mov	r9,0
8000b63a:	cc 8b       	rjmp	8000b5ca <__avr32_f64_add_shift_done>

8000b63c <__avr32_f64_add_res_of>:
8000b63c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000b640:	a1 9b       	lsr	r11,0x1
8000b642:	5d 0a       	ror	r10
8000b644:	5d 0e       	ror	lr
8000b646:	2f f7       	sub	r7,-1
8000b648:	e0 47 07 ff 	cp.w	r7,2047
8000b64c:	f9 ba 00 00 	moveq	r10,0
8000b650:	f9 bb 00 00 	moveq	r11,0
8000b654:	f9 be 00 00 	moveq	lr,0
8000b658:	cb fb       	rjmp	8000b5d6 <__avr32_f64_add_res_of_done>

8000b65a <__avr32_f64_add_op2_subnormal>:
8000b65a:	30 16       	mov	r6,1
8000b65c:	58 07       	cp.w	r7,0
8000b65e:	ca 01       	brne	8000b59e <__avr32_f64_add+0x3e>
8000b660:	b5 cb       	cbr	r11,0x14
8000b662:	10 0a       	add	r10,r8
8000b664:	f6 09 00 4b 	adc	r11,r11,r9
8000b668:	18 4b       	or	r11,r12
8000b66a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000b66e:	d7 03       	nop

8000b670 <__avr32_f64_to_u32>:
8000b670:	58 0b       	cp.w	r11,0
8000b672:	5e 6d       	retmi	0

8000b674 <__avr32_f64_to_s32>:
8000b674:	f6 0c 15 01 	lsl	r12,r11,0x1
8000b678:	b5 9c       	lsr	r12,0x15
8000b67a:	e0 2c 03 ff 	sub	r12,1023
8000b67e:	5e 3d       	retlo	0
8000b680:	f8 0c 11 1f 	rsub	r12,r12,31
8000b684:	16 99       	mov	r9,r11
8000b686:	ab 7b       	lsl	r11,0xb
8000b688:	bf bb       	sbr	r11,0x1f
8000b68a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000b68e:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000b692:	a1 79       	lsl	r9,0x1
8000b694:	5e 2b       	reths	r11
8000b696:	5c 3b       	neg	r11
8000b698:	5e fb       	retal	r11

8000b69a <__avr32_u32_to_f64>:
8000b69a:	f8 cb 00 00 	sub	r11,r12,0
8000b69e:	30 0c       	mov	r12,0
8000b6a0:	c0 38       	rjmp	8000b6a6 <__avr32_s32_to_f64+0x4>

8000b6a2 <__avr32_s32_to_f64>:
8000b6a2:	18 9b       	mov	r11,r12
8000b6a4:	5c 4b       	abs	r11
8000b6a6:	30 0a       	mov	r10,0
8000b6a8:	5e 0b       	reteq	r11
8000b6aa:	d4 01       	pushm	lr
8000b6ac:	e0 69 04 1e 	mov	r9,1054
8000b6b0:	f6 08 12 00 	clz	r8,r11
8000b6b4:	c1 70       	breq	8000b6e2 <__avr32_s32_to_f64+0x40>
8000b6b6:	c0 c3       	brcs	8000b6ce <__avr32_s32_to_f64+0x2c>
8000b6b8:	f0 0e 11 20 	rsub	lr,r8,32
8000b6bc:	f6 08 09 4b 	lsl	r11,r11,r8
8000b6c0:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000b6c4:	1c 4b       	or	r11,lr
8000b6c6:	f4 08 09 4a 	lsl	r10,r10,r8
8000b6ca:	10 19       	sub	r9,r8
8000b6cc:	c0 b8       	rjmp	8000b6e2 <__avr32_s32_to_f64+0x40>
8000b6ce:	f4 08 12 00 	clz	r8,r10
8000b6d2:	f9 b8 03 00 	movlo	r8,0
8000b6d6:	f7 b8 02 e0 	subhs	r8,-32
8000b6da:	f4 08 09 4b 	lsl	r11,r10,r8
8000b6de:	30 0a       	mov	r10,0
8000b6e0:	10 19       	sub	r9,r8
8000b6e2:	58 09       	cp.w	r9,0
8000b6e4:	e0 89 00 30 	brgt	8000b744 <__avr32_s32_to_f64+0xa2>
8000b6e8:	5c 39       	neg	r9
8000b6ea:	2f f9       	sub	r9,-1
8000b6ec:	e0 49 00 36 	cp.w	r9,54
8000b6f0:	c0 43       	brcs	8000b6f8 <__avr32_s32_to_f64+0x56>
8000b6f2:	30 0b       	mov	r11,0
8000b6f4:	30 0a       	mov	r10,0
8000b6f6:	c2 68       	rjmp	8000b742 <__avr32_s32_to_f64+0xa0>
8000b6f8:	2f 69       	sub	r9,-10
8000b6fa:	f2 08 11 20 	rsub	r8,r9,32
8000b6fe:	e0 49 00 20 	cp.w	r9,32
8000b702:	c0 b2       	brcc	8000b718 <__avr32_s32_to_f64+0x76>
8000b704:	f4 08 09 4e 	lsl	lr,r10,r8
8000b708:	f6 08 09 48 	lsl	r8,r11,r8
8000b70c:	f4 09 0a 4a 	lsr	r10,r10,r9
8000b710:	f6 09 0a 4b 	lsr	r11,r11,r9
8000b714:	10 4b       	or	r11,r8
8000b716:	c0 88       	rjmp	8000b726 <__avr32_s32_to_f64+0x84>
8000b718:	f6 08 09 4e 	lsl	lr,r11,r8
8000b71c:	14 4e       	or	lr,r10
8000b71e:	16 9a       	mov	r10,r11
8000b720:	30 0b       	mov	r11,0
8000b722:	f4 09 0a 4a 	lsr	r10,r10,r9
8000b726:	ed ba 00 00 	bld	r10,0x0
8000b72a:	c0 92       	brcc	8000b73c <__avr32_s32_to_f64+0x9a>
8000b72c:	1c 7e       	tst	lr,lr
8000b72e:	c0 41       	brne	8000b736 <__avr32_s32_to_f64+0x94>
8000b730:	ed ba 00 01 	bld	r10,0x1
8000b734:	c0 42       	brcc	8000b73c <__avr32_s32_to_f64+0x9a>
8000b736:	2f fa       	sub	r10,-1
8000b738:	f7 bb 02 ff 	subhs	r11,-1
8000b73c:	5c fc       	rol	r12
8000b73e:	5d 0b       	ror	r11
8000b740:	5d 0a       	ror	r10
8000b742:	d8 02       	popm	pc
8000b744:	e0 68 03 ff 	mov	r8,1023
8000b748:	ed ba 00 0b 	bld	r10,0xb
8000b74c:	f7 b8 00 ff 	subeq	r8,-1
8000b750:	10 0a       	add	r10,r8
8000b752:	5c 0b       	acr	r11
8000b754:	f7 b9 03 fe 	sublo	r9,-2
8000b758:	e0 49 07 ff 	cp.w	r9,2047
8000b75c:	c0 55       	brlt	8000b766 <__avr32_s32_to_f64+0xc4>
8000b75e:	30 0a       	mov	r10,0
8000b760:	fc 1b ff e0 	movh	r11,0xffe0
8000b764:	c0 c8       	rjmp	8000b77c <__floatsidf_return_op1>
8000b766:	ed bb 00 1f 	bld	r11,0x1f
8000b76a:	f7 b9 01 01 	subne	r9,1
8000b76e:	ab 9a       	lsr	r10,0xb
8000b770:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000b774:	a1 7b       	lsl	r11,0x1
8000b776:	ab 9b       	lsr	r11,0xb
8000b778:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000b77c <__floatsidf_return_op1>:
8000b77c:	a1 7c       	lsl	r12,0x1
8000b77e:	5d 0b       	ror	r11
8000b780:	d8 02       	popm	pc

8000b782 <__avr32_f64_cmp_eq>:
8000b782:	10 3a       	cp.w	r10,r8
8000b784:	f2 0b 13 00 	cpc	r11,r9
8000b788:	c0 80       	breq	8000b798 <__avr32_f64_cmp_eq+0x16>
8000b78a:	a1 7b       	lsl	r11,0x1
8000b78c:	a1 79       	lsl	r9,0x1
8000b78e:	14 4b       	or	r11,r10
8000b790:	12 4b       	or	r11,r9
8000b792:	10 4b       	or	r11,r8
8000b794:	5e 0f       	reteq	1
8000b796:	5e fd       	retal	0
8000b798:	a1 7b       	lsl	r11,0x1
8000b79a:	fc 1c ff e0 	movh	r12,0xffe0
8000b79e:	58 0a       	cp.w	r10,0
8000b7a0:	f8 0b 13 00 	cpc	r11,r12
8000b7a4:	5e 8f       	retls	1
8000b7a6:	5e fd       	retal	0

8000b7a8 <__avr32_f64_cmp_ge>:
8000b7a8:	1a de       	st.w	--sp,lr
8000b7aa:	1a d7       	st.w	--sp,r7
8000b7ac:	a1 7b       	lsl	r11,0x1
8000b7ae:	5f 3c       	srlo	r12
8000b7b0:	a1 79       	lsl	r9,0x1
8000b7b2:	5f 37       	srlo	r7
8000b7b4:	5c fc       	rol	r12
8000b7b6:	fc 1e ff e0 	movh	lr,0xffe0
8000b7ba:	58 0a       	cp.w	r10,0
8000b7bc:	fc 0b 13 00 	cpc	r11,lr
8000b7c0:	e0 8b 00 1d 	brhi	8000b7fa <__avr32_f64_cmp_ge+0x52>
8000b7c4:	58 08       	cp.w	r8,0
8000b7c6:	fc 09 13 00 	cpc	r9,lr
8000b7ca:	e0 8b 00 18 	brhi	8000b7fa <__avr32_f64_cmp_ge+0x52>
8000b7ce:	58 0b       	cp.w	r11,0
8000b7d0:	f5 ba 00 00 	subfeq	r10,0
8000b7d4:	c1 50       	breq	8000b7fe <__avr32_f64_cmp_ge+0x56>
8000b7d6:	1b 07       	ld.w	r7,sp++
8000b7d8:	1b 0e       	ld.w	lr,sp++
8000b7da:	58 3c       	cp.w	r12,3
8000b7dc:	c0 a0       	breq	8000b7f0 <__avr32_f64_cmp_ge+0x48>
8000b7de:	58 1c       	cp.w	r12,1
8000b7e0:	c0 33       	brcs	8000b7e6 <__avr32_f64_cmp_ge+0x3e>
8000b7e2:	5e 0f       	reteq	1
8000b7e4:	5e 1d       	retne	0
8000b7e6:	10 3a       	cp.w	r10,r8
8000b7e8:	f2 0b 13 00 	cpc	r11,r9
8000b7ec:	5e 2f       	reths	1
8000b7ee:	5e 3d       	retlo	0
8000b7f0:	14 38       	cp.w	r8,r10
8000b7f2:	f6 09 13 00 	cpc	r9,r11
8000b7f6:	5e 2f       	reths	1
8000b7f8:	5e 3d       	retlo	0
8000b7fa:	1b 07       	ld.w	r7,sp++
8000b7fc:	d8 0a       	popm	pc,r12=0
8000b7fe:	58 17       	cp.w	r7,1
8000b800:	5f 0c       	sreq	r12
8000b802:	58 09       	cp.w	r9,0
8000b804:	f5 b8 00 00 	subfeq	r8,0
8000b808:	1b 07       	ld.w	r7,sp++
8000b80a:	1b 0e       	ld.w	lr,sp++
8000b80c:	5e 0f       	reteq	1
8000b80e:	5e fc       	retal	r12

8000b810 <__avr32_f64_cmp_lt>:
8000b810:	1a de       	st.w	--sp,lr
8000b812:	1a d7       	st.w	--sp,r7
8000b814:	a1 7b       	lsl	r11,0x1
8000b816:	5f 3c       	srlo	r12
8000b818:	a1 79       	lsl	r9,0x1
8000b81a:	5f 37       	srlo	r7
8000b81c:	5c fc       	rol	r12
8000b81e:	fc 1e ff e0 	movh	lr,0xffe0
8000b822:	58 0a       	cp.w	r10,0
8000b824:	fc 0b 13 00 	cpc	r11,lr
8000b828:	e0 8b 00 1d 	brhi	8000b862 <__avr32_f64_cmp_lt+0x52>
8000b82c:	58 08       	cp.w	r8,0
8000b82e:	fc 09 13 00 	cpc	r9,lr
8000b832:	e0 8b 00 18 	brhi	8000b862 <__avr32_f64_cmp_lt+0x52>
8000b836:	58 0b       	cp.w	r11,0
8000b838:	f5 ba 00 00 	subfeq	r10,0
8000b83c:	c1 50       	breq	8000b866 <__avr32_f64_cmp_lt+0x56>
8000b83e:	1b 07       	ld.w	r7,sp++
8000b840:	1b 0e       	ld.w	lr,sp++
8000b842:	58 3c       	cp.w	r12,3
8000b844:	c0 a0       	breq	8000b858 <__avr32_f64_cmp_lt+0x48>
8000b846:	58 1c       	cp.w	r12,1
8000b848:	c0 33       	brcs	8000b84e <__avr32_f64_cmp_lt+0x3e>
8000b84a:	5e 0d       	reteq	0
8000b84c:	5e 1f       	retne	1
8000b84e:	10 3a       	cp.w	r10,r8
8000b850:	f2 0b 13 00 	cpc	r11,r9
8000b854:	5e 2d       	reths	0
8000b856:	5e 3f       	retlo	1
8000b858:	14 38       	cp.w	r8,r10
8000b85a:	f6 09 13 00 	cpc	r9,r11
8000b85e:	5e 2d       	reths	0
8000b860:	5e 3f       	retlo	1
8000b862:	1b 07       	ld.w	r7,sp++
8000b864:	d8 0a       	popm	pc,r12=0
8000b866:	58 17       	cp.w	r7,1
8000b868:	5f 1c       	srne	r12
8000b86a:	58 09       	cp.w	r9,0
8000b86c:	f5 b8 00 00 	subfeq	r8,0
8000b870:	1b 07       	ld.w	r7,sp++
8000b872:	1b 0e       	ld.w	lr,sp++
8000b874:	5e 0d       	reteq	0
8000b876:	5e fc       	retal	r12

8000b878 <__avr32_f64_div>:
8000b878:	eb cd 40 ff 	pushm	r0-r7,lr
8000b87c:	f7 e9 20 0e 	eor	lr,r11,r9
8000b880:	f6 07 16 14 	lsr	r7,r11,0x14
8000b884:	a9 7b       	lsl	r11,0x9
8000b886:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000b88a:	a9 7a       	lsl	r10,0x9
8000b88c:	bd bb       	sbr	r11,0x1d
8000b88e:	e4 1b 3f ff 	andh	r11,0x3fff
8000b892:	ab d7       	cbr	r7,0xb
8000b894:	e0 80 00 cc 	breq	8000ba2c <__avr32_f64_div_round_subnormal+0x54>
8000b898:	e0 47 07 ff 	cp.w	r7,2047
8000b89c:	e0 84 00 b5 	brge	8000ba06 <__avr32_f64_div_round_subnormal+0x2e>
8000b8a0:	f2 06 16 14 	lsr	r6,r9,0x14
8000b8a4:	a9 79       	lsl	r9,0x9
8000b8a6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000b8aa:	a9 78       	lsl	r8,0x9
8000b8ac:	bd b9       	sbr	r9,0x1d
8000b8ae:	e4 19 3f ff 	andh	r9,0x3fff
8000b8b2:	ab d6       	cbr	r6,0xb
8000b8b4:	e0 80 00 e2 	breq	8000ba78 <__avr32_f64_div_round_subnormal+0xa0>
8000b8b8:	e0 46 07 ff 	cp.w	r6,2047
8000b8bc:	e0 84 00 b2 	brge	8000ba20 <__avr32_f64_div_round_subnormal+0x48>
8000b8c0:	0c 17       	sub	r7,r6
8000b8c2:	fe 37 fc 01 	sub	r7,-1023
8000b8c6:	fc 1c 80 00 	movh	r12,0x8000
8000b8ca:	f8 03 16 01 	lsr	r3,r12,0x1
8000b8ce:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000b8d2:	5c d4       	com	r4
8000b8d4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000b8d8:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b8dc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b8e0:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b8e4:	ea 03 15 02 	lsl	r3,r5,0x2
8000b8e8:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b8ec:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b8f0:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b8f4:	ea 03 15 02 	lsl	r3,r5,0x2
8000b8f8:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b8fc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000b900:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b904:	ea 03 15 02 	lsl	r3,r5,0x2
8000b908:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b90c:	e4 09 07 40 	macu.d	r0,r2,r9
8000b910:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b914:	02 04       	add	r4,r1
8000b916:	5c 05       	acr	r5
8000b918:	a3 65       	lsl	r5,0x2
8000b91a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000b91e:	a3 64       	lsl	r4,0x2
8000b920:	5c 34       	neg	r4
8000b922:	f8 05 01 45 	sbc	r5,r12,r5
8000b926:	e6 04 06 40 	mulu.d	r0,r3,r4
8000b92a:	e4 05 07 40 	macu.d	r0,r2,r5
8000b92e:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b932:	02 04       	add	r4,r1
8000b934:	5c 05       	acr	r5
8000b936:	ea 03 15 02 	lsl	r3,r5,0x2
8000b93a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000b93e:	e8 02 15 02 	lsl	r2,r4,0x2
8000b942:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b946:	e4 09 07 40 	macu.d	r0,r2,r9
8000b94a:	e6 09 06 44 	mulu.d	r4,r3,r9
8000b94e:	02 04       	add	r4,r1
8000b950:	5c 05       	acr	r5
8000b952:	a3 65       	lsl	r5,0x2
8000b954:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000b958:	a3 64       	lsl	r4,0x2
8000b95a:	5c 34       	neg	r4
8000b95c:	f8 05 01 45 	sbc	r5,r12,r5
8000b960:	e6 04 06 40 	mulu.d	r0,r3,r4
8000b964:	e4 05 07 40 	macu.d	r0,r2,r5
8000b968:	e6 05 06 44 	mulu.d	r4,r3,r5
8000b96c:	02 04       	add	r4,r1
8000b96e:	5c 05       	acr	r5
8000b970:	ea 03 15 02 	lsl	r3,r5,0x2
8000b974:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000b978:	e8 02 15 02 	lsl	r2,r4,0x2
8000b97c:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000b980:	e4 0b 07 40 	macu.d	r0,r2,r11
8000b984:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000b988:	02 02       	add	r2,r1
8000b98a:	5c 03       	acr	r3
8000b98c:	ed b3 00 1c 	bld	r3,0x1c
8000b990:	c0 90       	breq	8000b9a2 <__avr32_f64_div+0x12a>
8000b992:	a1 72       	lsl	r2,0x1
8000b994:	5c f3       	rol	r3
8000b996:	20 17       	sub	r7,1
8000b998:	a3 9a       	lsr	r10,0x3
8000b99a:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000b99e:	a3 9b       	lsr	r11,0x3
8000b9a0:	c0 58       	rjmp	8000b9aa <__avr32_f64_div+0x132>
8000b9a2:	a5 8a       	lsr	r10,0x4
8000b9a4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000b9a8:	a5 8b       	lsr	r11,0x4
8000b9aa:	58 07       	cp.w	r7,0
8000b9ac:	e0 8a 00 8b 	brle	8000bac2 <__avr32_f64_div_res_subnormal>
8000b9b0:	e0 12 ff 00 	andl	r2,0xff00
8000b9b4:	e8 12 00 80 	orl	r2,0x80
8000b9b8:	e6 08 06 40 	mulu.d	r0,r3,r8
8000b9bc:	e4 09 07 40 	macu.d	r0,r2,r9
8000b9c0:	e4 08 06 44 	mulu.d	r4,r2,r8
8000b9c4:	e6 09 06 48 	mulu.d	r8,r3,r9
8000b9c8:	00 05       	add	r5,r0
8000b9ca:	f0 01 00 48 	adc	r8,r8,r1
8000b9ce:	5c 09       	acr	r9
8000b9d0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000b9d4:	58 04       	cp.w	r4,0
8000b9d6:	5c 25       	cpc	r5

8000b9d8 <__avr32_f64_div_round_subnormal>:
8000b9d8:	f4 08 13 00 	cpc	r8,r10
8000b9dc:	f6 09 13 00 	cpc	r9,r11
8000b9e0:	5f 36       	srlo	r6
8000b9e2:	f8 06 17 00 	moveq	r6,r12
8000b9e6:	e4 0a 16 08 	lsr	r10,r2,0x8
8000b9ea:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000b9ee:	e6 0b 16 08 	lsr	r11,r3,0x8
8000b9f2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b9f6:	ed be 00 1f 	bld	lr,0x1f
8000b9fa:	ef bb 00 1f 	bst	r11,0x1f
8000b9fe:	0c 0a       	add	r10,r6
8000ba00:	5c 0b       	acr	r11
8000ba02:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000ba06:	e4 1b 00 0f 	andh	r11,0xf
8000ba0a:	14 4b       	or	r11,r10
8000ba0c:	e0 81 00 a7 	brne	8000bb5a <__avr32_f64_div_res_subnormal+0x98>
8000ba10:	f2 06 16 14 	lsr	r6,r9,0x14
8000ba14:	ab d6       	cbr	r6,0xb
8000ba16:	e0 46 07 ff 	cp.w	r6,2047
8000ba1a:	e0 81 00 a4 	brne	8000bb62 <__avr32_f64_div_res_subnormal+0xa0>
8000ba1e:	c9 e8       	rjmp	8000bb5a <__avr32_f64_div_res_subnormal+0x98>
8000ba20:	e4 19 00 0f 	andh	r9,0xf
8000ba24:	10 49       	or	r9,r8
8000ba26:	e0 81 00 9a 	brne	8000bb5a <__avr32_f64_div_res_subnormal+0x98>
8000ba2a:	c9 28       	rjmp	8000bb4e <__avr32_f64_div_res_subnormal+0x8c>
8000ba2c:	a3 7b       	lsl	r11,0x3
8000ba2e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000ba32:	a3 7a       	lsl	r10,0x3
8000ba34:	f5 eb 10 04 	or	r4,r10,r11
8000ba38:	e0 80 00 a0 	breq	8000bb78 <__avr32_f64_div_op1_zero>
8000ba3c:	f6 04 12 00 	clz	r4,r11
8000ba40:	c1 70       	breq	8000ba6e <__avr32_f64_div_round_subnormal+0x96>
8000ba42:	c0 c3       	brcs	8000ba5a <__avr32_f64_div_round_subnormal+0x82>
8000ba44:	e8 05 11 20 	rsub	r5,r4,32
8000ba48:	f6 04 09 4b 	lsl	r11,r11,r4
8000ba4c:	f4 05 0a 45 	lsr	r5,r10,r5
8000ba50:	0a 4b       	or	r11,r5
8000ba52:	f4 04 09 4a 	lsl	r10,r10,r4
8000ba56:	08 17       	sub	r7,r4
8000ba58:	c0 b8       	rjmp	8000ba6e <__avr32_f64_div_round_subnormal+0x96>
8000ba5a:	f4 04 12 00 	clz	r4,r10
8000ba5e:	f9 b4 03 00 	movlo	r4,0
8000ba62:	f7 b4 02 e0 	subhs	r4,-32
8000ba66:	f4 04 09 4b 	lsl	r11,r10,r4
8000ba6a:	30 0a       	mov	r10,0
8000ba6c:	08 17       	sub	r7,r4
8000ba6e:	a3 8a       	lsr	r10,0x2
8000ba70:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000ba74:	a3 8b       	lsr	r11,0x2
8000ba76:	c1 1b       	rjmp	8000b898 <__avr32_f64_div+0x20>
8000ba78:	a3 79       	lsl	r9,0x3
8000ba7a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000ba7e:	a3 78       	lsl	r8,0x3
8000ba80:	f3 e8 10 04 	or	r4,r9,r8
8000ba84:	c6 f0       	breq	8000bb62 <__avr32_f64_div_res_subnormal+0xa0>
8000ba86:	f2 04 12 00 	clz	r4,r9
8000ba8a:	c1 70       	breq	8000bab8 <__avr32_f64_div_round_subnormal+0xe0>
8000ba8c:	c0 c3       	brcs	8000baa4 <__avr32_f64_div_round_subnormal+0xcc>
8000ba8e:	e8 05 11 20 	rsub	r5,r4,32
8000ba92:	f2 04 09 49 	lsl	r9,r9,r4
8000ba96:	f0 05 0a 45 	lsr	r5,r8,r5
8000ba9a:	0a 49       	or	r9,r5
8000ba9c:	f0 04 09 48 	lsl	r8,r8,r4
8000baa0:	08 16       	sub	r6,r4
8000baa2:	c0 b8       	rjmp	8000bab8 <__avr32_f64_div_round_subnormal+0xe0>
8000baa4:	f0 04 12 00 	clz	r4,r8
8000baa8:	f9 b4 03 00 	movlo	r4,0
8000baac:	f7 b4 02 e0 	subhs	r4,-32
8000bab0:	f0 04 09 49 	lsl	r9,r8,r4
8000bab4:	30 08       	mov	r8,0
8000bab6:	08 16       	sub	r6,r4
8000bab8:	a3 88       	lsr	r8,0x2
8000baba:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000babe:	a3 89       	lsr	r9,0x2
8000bac0:	cf ca       	rjmp	8000b8b8 <__avr32_f64_div+0x40>

8000bac2 <__avr32_f64_div_res_subnormal>:
8000bac2:	5c 37       	neg	r7
8000bac4:	2f f7       	sub	r7,-1
8000bac6:	f1 b7 04 c0 	satu	r7,0x6
8000baca:	e0 47 00 20 	cp.w	r7,32
8000bace:	c1 54       	brge	8000baf8 <__avr32_f64_div_res_subnormal+0x36>
8000bad0:	ee 06 11 20 	rsub	r6,r7,32
8000bad4:	e4 07 0a 42 	lsr	r2,r2,r7
8000bad8:	e6 06 09 4c 	lsl	r12,r3,r6
8000badc:	18 42       	or	r2,r12
8000bade:	e6 07 0a 43 	lsr	r3,r3,r7
8000bae2:	f4 06 09 41 	lsl	r1,r10,r6
8000bae6:	f4 07 0a 4a 	lsr	r10,r10,r7
8000baea:	f6 06 09 4c 	lsl	r12,r11,r6
8000baee:	18 4a       	or	r10,r12
8000baf0:	f6 07 0a 4b 	lsr	r11,r11,r7
8000baf4:	30 00       	mov	r0,0
8000baf6:	c1 58       	rjmp	8000bb20 <__avr32_f64_div_res_subnormal+0x5e>
8000baf8:	ee 06 11 20 	rsub	r6,r7,32
8000bafc:	f9 b0 00 00 	moveq	r0,0
8000bb00:	f9 bc 00 00 	moveq	r12,0
8000bb04:	c0 50       	breq	8000bb0e <__avr32_f64_div_res_subnormal+0x4c>
8000bb06:	f4 06 09 40 	lsl	r0,r10,r6
8000bb0a:	f6 06 09 4c 	lsl	r12,r11,r6
8000bb0e:	e6 07 0a 42 	lsr	r2,r3,r7
8000bb12:	30 03       	mov	r3,0
8000bb14:	f4 07 0a 41 	lsr	r1,r10,r7
8000bb18:	18 41       	or	r1,r12
8000bb1a:	f6 07 0a 4a 	lsr	r10,r11,r7
8000bb1e:	30 0b       	mov	r11,0
8000bb20:	e0 12 ff 00 	andl	r2,0xff00
8000bb24:	e8 12 00 80 	orl	r2,0x80
8000bb28:	e6 08 06 46 	mulu.d	r6,r3,r8
8000bb2c:	e4 09 07 46 	macu.d	r6,r2,r9
8000bb30:	e4 08 06 44 	mulu.d	r4,r2,r8
8000bb34:	e6 09 06 48 	mulu.d	r8,r3,r9
8000bb38:	0c 05       	add	r5,r6
8000bb3a:	f0 07 00 48 	adc	r8,r8,r7
8000bb3e:	5c 09       	acr	r9
8000bb40:	30 07       	mov	r7,0
8000bb42:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000bb46:	00 34       	cp.w	r4,r0
8000bb48:	e2 05 13 00 	cpc	r5,r1
8000bb4c:	c4 6b       	rjmp	8000b9d8 <__avr32_f64_div_round_subnormal>
8000bb4e:	1c 9b       	mov	r11,lr
8000bb50:	e6 1b 80 00 	andh	r11,0x8000,COH
8000bb54:	30 0a       	mov	r10,0
8000bb56:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000bb5a:	3f fb       	mov	r11,-1
8000bb5c:	30 0a       	mov	r10,0
8000bb5e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000bb62:	f5 eb 10 04 	or	r4,r10,r11
8000bb66:	c0 90       	breq	8000bb78 <__avr32_f64_div_op1_zero>
8000bb68:	1c 9b       	mov	r11,lr
8000bb6a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000bb6e:	ea 1b 7f f0 	orh	r11,0x7ff0
8000bb72:	30 0a       	mov	r10,0
8000bb74:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000bb78 <__avr32_f64_div_op1_zero>:
8000bb78:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000bb7c:	ce f0       	breq	8000bb5a <__avr32_f64_div_res_subnormal+0x98>
8000bb7e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000bb82:	e0 44 07 ff 	cp.w	r4,2047
8000bb86:	ce 41       	brne	8000bb4e <__avr32_f64_div_res_subnormal+0x8c>
8000bb88:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000bb8c:	ce 10       	breq	8000bb4e <__avr32_f64_div_res_subnormal+0x8c>
8000bb8e:	ce 6b       	rjmp	8000bb5a <__avr32_f64_div_res_subnormal+0x98>

8000bb90 <__avr32_umod64>:
8000bb90:	d4 31       	pushm	r0-r7,lr
8000bb92:	1a 97       	mov	r7,sp
8000bb94:	20 3d       	sub	sp,12
8000bb96:	10 9c       	mov	r12,r8
8000bb98:	12 95       	mov	r5,r9
8000bb9a:	14 9e       	mov	lr,r10
8000bb9c:	16 91       	mov	r1,r11
8000bb9e:	16 96       	mov	r6,r11
8000bba0:	58 09       	cp.w	r9,0
8000bba2:	e0 81 00 81 	brne	8000bca4 <__avr32_umod64+0x114>
8000bba6:	16 38       	cp.w	r8,r11
8000bba8:	e0 88 00 12 	brls	8000bbcc <__avr32_umod64+0x3c>
8000bbac:	f0 08 12 00 	clz	r8,r8
8000bbb0:	c4 e0       	breq	8000bc4c <__avr32_umod64+0xbc>
8000bbb2:	f6 08 09 46 	lsl	r6,r11,r8
8000bbb6:	f8 08 09 4c 	lsl	r12,r12,r8
8000bbba:	f0 0b 11 20 	rsub	r11,r8,32
8000bbbe:	f4 08 09 4e 	lsl	lr,r10,r8
8000bbc2:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000bbc6:	f7 e6 10 06 	or	r6,r11,r6
8000bbca:	c4 18       	rjmp	8000bc4c <__avr32_umod64+0xbc>
8000bbcc:	58 08       	cp.w	r8,0
8000bbce:	c0 51       	brne	8000bbd8 <__avr32_umod64+0x48>
8000bbd0:	30 19       	mov	r9,1
8000bbd2:	f2 08 0d 08 	divu	r8,r9,r8
8000bbd6:	10 9c       	mov	r12,r8
8000bbd8:	f8 08 12 00 	clz	r8,r12
8000bbdc:	c0 31       	brne	8000bbe2 <__avr32_umod64+0x52>
8000bbde:	18 16       	sub	r6,r12
8000bbe0:	c3 68       	rjmp	8000bc4c <__avr32_umod64+0xbc>
8000bbe2:	f0 03 11 20 	rsub	r3,r8,32
8000bbe6:	f4 03 0a 4b 	lsr	r11,r10,r3
8000bbea:	f8 08 09 4c 	lsl	r12,r12,r8
8000bbee:	ec 08 09 49 	lsl	r9,r6,r8
8000bbf2:	ec 03 0a 43 	lsr	r3,r6,r3
8000bbf6:	f7 e9 10 09 	or	r9,r11,r9
8000bbfa:	f8 05 16 10 	lsr	r5,r12,0x10
8000bbfe:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000bc02:	e6 05 0d 02 	divu	r2,r3,r5
8000bc06:	f2 0e 16 10 	lsr	lr,r9,0x10
8000bc0a:	ec 02 02 4b 	mul	r11,r6,r2
8000bc0e:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000bc12:	16 3e       	cp.w	lr,r11
8000bc14:	c0 72       	brcc	8000bc22 <__avr32_umod64+0x92>
8000bc16:	18 0e       	add	lr,r12
8000bc18:	18 3e       	cp.w	lr,r12
8000bc1a:	c0 43       	brcs	8000bc22 <__avr32_umod64+0x92>
8000bc1c:	16 3e       	cp.w	lr,r11
8000bc1e:	fd dc e3 0e 	addcs	lr,lr,r12
8000bc22:	fc 0b 01 03 	sub	r3,lr,r11
8000bc26:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000bc2a:	e6 05 0d 02 	divu	r2,r3,r5
8000bc2e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000bc32:	a5 36       	mul	r6,r2
8000bc34:	0c 39       	cp.w	r9,r6
8000bc36:	c0 72       	brcc	8000bc44 <__avr32_umod64+0xb4>
8000bc38:	18 09       	add	r9,r12
8000bc3a:	18 39       	cp.w	r9,r12
8000bc3c:	c0 43       	brcs	8000bc44 <__avr32_umod64+0xb4>
8000bc3e:	0c 39       	cp.w	r9,r6
8000bc40:	f3 dc e3 09 	addcs	r9,r9,r12
8000bc44:	f2 06 01 06 	sub	r6,r9,r6
8000bc48:	f4 08 09 4e 	lsl	lr,r10,r8
8000bc4c:	f8 0a 16 10 	lsr	r10,r12,0x10
8000bc50:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000bc54:	ec 0a 0d 02 	divu	r2,r6,r10
8000bc58:	fc 09 16 10 	lsr	r9,lr,0x10
8000bc5c:	ea 02 02 4b 	mul	r11,r5,r2
8000bc60:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000bc64:	16 39       	cp.w	r9,r11
8000bc66:	c0 72       	brcc	8000bc74 <__avr32_umod64+0xe4>
8000bc68:	18 09       	add	r9,r12
8000bc6a:	18 39       	cp.w	r9,r12
8000bc6c:	c0 43       	brcs	8000bc74 <__avr32_umod64+0xe4>
8000bc6e:	16 39       	cp.w	r9,r11
8000bc70:	f3 dc e3 09 	addcs	r9,r9,r12
8000bc74:	f2 0b 01 0b 	sub	r11,r9,r11
8000bc78:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000bc7c:	f6 0a 0d 0a 	divu	r10,r11,r10
8000bc80:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000bc84:	ea 0a 02 4a 	mul	r10,r5,r10
8000bc88:	14 3e       	cp.w	lr,r10
8000bc8a:	c0 72       	brcc	8000bc98 <__avr32_umod64+0x108>
8000bc8c:	18 0e       	add	lr,r12
8000bc8e:	18 3e       	cp.w	lr,r12
8000bc90:	c0 43       	brcs	8000bc98 <__avr32_umod64+0x108>
8000bc92:	14 3e       	cp.w	lr,r10
8000bc94:	fd dc e3 0e 	addcs	lr,lr,r12
8000bc98:	fc 0a 01 0a 	sub	r10,lr,r10
8000bc9c:	30 0b       	mov	r11,0
8000bc9e:	f4 08 0a 4a 	lsr	r10,r10,r8
8000bca2:	c7 b8       	rjmp	8000bd98 <__avr32_umod64+0x208>
8000bca4:	16 39       	cp.w	r9,r11
8000bca6:	e0 8b 00 79 	brhi	8000bd98 <__avr32_umod64+0x208>
8000bcaa:	f2 09 12 00 	clz	r9,r9
8000bcae:	c1 21       	brne	8000bcd2 <__avr32_umod64+0x142>
8000bcb0:	10 3a       	cp.w	r10,r8
8000bcb2:	5f 2b       	srhs	r11
8000bcb4:	0a 31       	cp.w	r1,r5
8000bcb6:	5f ba       	srhi	r10
8000bcb8:	f7 ea 10 0a 	or	r10,r11,r10
8000bcbc:	f2 0a 18 00 	cp.b	r10,r9
8000bcc0:	c0 60       	breq	8000bccc <__avr32_umod64+0x13c>
8000bcc2:	fc 08 01 0c 	sub	r12,lr,r8
8000bcc6:	e2 05 01 46 	sbc	r6,r1,r5
8000bcca:	18 9e       	mov	lr,r12
8000bccc:	0c 9b       	mov	r11,r6
8000bcce:	1c 9a       	mov	r10,lr
8000bcd0:	c6 48       	rjmp	8000bd98 <__avr32_umod64+0x208>
8000bcd2:	ea 09 09 4c 	lsl	r12,r5,r9
8000bcd6:	f2 06 11 20 	rsub	r6,r9,32
8000bcda:	f6 09 09 4b 	lsl	r11,r11,r9
8000bcde:	f0 09 09 42 	lsl	r2,r8,r9
8000bce2:	ef 46 ff f4 	st.w	r7[-12],r6
8000bce6:	f0 06 0a 48 	lsr	r8,r8,r6
8000bcea:	18 48       	or	r8,r12
8000bcec:	e2 06 0a 4c 	lsr	r12,r1,r6
8000bcf0:	f4 09 09 43 	lsl	r3,r10,r9
8000bcf4:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000bcf8:	f4 06 0a 4a 	lsr	r10,r10,r6
8000bcfc:	16 4a       	or	r10,r11
8000bcfe:	f0 0b 16 10 	lsr	r11,r8,0x10
8000bd02:	f8 0b 0d 04 	divu	r4,r12,r11
8000bd06:	f4 0c 16 10 	lsr	r12,r10,0x10
8000bd0a:	08 91       	mov	r1,r4
8000bd0c:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000bd10:	e8 0e 02 46 	mul	r6,r4,lr
8000bd14:	0c 3c       	cp.w	r12,r6
8000bd16:	c0 a2       	brcc	8000bd2a <__avr32_umod64+0x19a>
8000bd18:	20 11       	sub	r1,1
8000bd1a:	10 0c       	add	r12,r8
8000bd1c:	10 3c       	cp.w	r12,r8
8000bd1e:	c0 63       	brcs	8000bd2a <__avr32_umod64+0x19a>
8000bd20:	0c 3c       	cp.w	r12,r6
8000bd22:	f7 b1 03 01 	sublo	r1,1
8000bd26:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000bd2a:	0c 1c       	sub	r12,r6
8000bd2c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000bd30:	f8 0b 0d 04 	divu	r4,r12,r11
8000bd34:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000bd38:	08 96       	mov	r6,r4
8000bd3a:	e8 0e 02 4e 	mul	lr,r4,lr
8000bd3e:	1c 3b       	cp.w	r11,lr
8000bd40:	c0 a2       	brcc	8000bd54 <__avr32_umod64+0x1c4>
8000bd42:	20 16       	sub	r6,1
8000bd44:	10 0b       	add	r11,r8
8000bd46:	10 3b       	cp.w	r11,r8
8000bd48:	c0 63       	brcs	8000bd54 <__avr32_umod64+0x1c4>
8000bd4a:	1c 3b       	cp.w	r11,lr
8000bd4c:	f7 b6 03 01 	sublo	r6,1
8000bd50:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000bd54:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000bd58:	1c 1b       	sub	r11,lr
8000bd5a:	e2 02 06 40 	mulu.d	r0,r1,r2
8000bd5e:	00 9e       	mov	lr,r0
8000bd60:	02 9c       	mov	r12,r1
8000bd62:	16 3c       	cp.w	r12,r11
8000bd64:	e0 8b 00 08 	brhi	8000bd74 <__avr32_umod64+0x1e4>
8000bd68:	5f 06       	sreq	r6
8000bd6a:	06 30       	cp.w	r0,r3
8000bd6c:	5f ba       	srhi	r10
8000bd6e:	ed ea 00 0a 	and	r10,r6,r10
8000bd72:	c0 60       	breq	8000bd7e <__avr32_umod64+0x1ee>
8000bd74:	fc 02 01 04 	sub	r4,lr,r2
8000bd78:	f8 08 01 4c 	sbc	r12,r12,r8
8000bd7c:	08 9e       	mov	lr,r4
8000bd7e:	e6 0e 01 0a 	sub	r10,r3,lr
8000bd82:	f6 0c 01 4c 	sbc	r12,r11,r12
8000bd86:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000bd8a:	f8 09 0a 4b 	lsr	r11,r12,r9
8000bd8e:	f4 09 0a 4a 	lsr	r10,r10,r9
8000bd92:	f8 01 09 4c 	lsl	r12,r12,r1
8000bd96:	18 4a       	or	r10,r12
8000bd98:	2f dd       	sub	sp,-12
8000bd9a:	d8 32       	popm	r0-r7,pc

8000bd9c <__do_global_ctors_aux>:
8000bd9c:	d4 21       	pushm	r4-r7,lr
8000bd9e:	30 c7       	mov	r7,12
8000bda0:	c0 28       	rjmp	8000bda4 <__do_global_ctors_aux+0x8>
8000bda2:	5d 18       	icall	r8
8000bda4:	20 47       	sub	r7,4
8000bda6:	6e 08       	ld.w	r8,r7[0x0]
8000bda8:	5b f8       	cp.w	r8,-1
8000bdaa:	cf c1       	brne	8000bda2 <__do_global_ctors_aux+0x6>
8000bdac:	d8 22       	popm	r4-r7,pc
8000bdae:	d7 03       	nop

Disassembly of section .exception:

8000be00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000be00:	c0 08       	rjmp	8000be00 <_evba>
	...

8000be04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000be04:	c0 08       	rjmp	8000be04 <_handle_TLB_Multiple_Hit>
	...

8000be08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000be08:	c0 08       	rjmp	8000be08 <_handle_Bus_Error_Data_Fetch>
	...

8000be0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000be0c:	c0 08       	rjmp	8000be0c <_handle_Bus_Error_Instruction_Fetch>
	...

8000be10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000be10:	c0 08       	rjmp	8000be10 <_handle_NMI>
	...

8000be14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000be14:	c0 08       	rjmp	8000be14 <_handle_Instruction_Address>
	...

8000be18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000be18:	c0 08       	rjmp	8000be18 <_handle_ITLB_Protection>
	...

8000be1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000be1c:	c0 08       	rjmp	8000be1c <_handle_Breakpoint>
	...

8000be20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000be20:	c0 08       	rjmp	8000be20 <_handle_Illegal_Opcode>
	...

8000be24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000be24:	c0 08       	rjmp	8000be24 <_handle_Unimplemented_Instruction>
	...

8000be28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000be28:	c0 08       	rjmp	8000be28 <_handle_Privilege_Violation>
	...

8000be2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR UC3.
_handle_Floating_Point:
	rjmp $
8000be2c:	c0 08       	rjmp	8000be2c <_handle_Floating_Point>
	...

8000be30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR UC3.
_handle_Coprocessor_Absent:
	rjmp $
8000be30:	c0 08       	rjmp	8000be30 <_handle_Coprocessor_Absent>
	...

8000be34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000be34:	c0 08       	rjmp	8000be34 <_handle_Data_Address_Read>
	...

8000be38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000be38:	c0 08       	rjmp	8000be38 <_handle_Data_Address_Write>
	...

8000be3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000be3c:	c0 08       	rjmp	8000be3c <_handle_DTLB_Protection_Read>
	...

8000be40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000be40:	c0 08       	rjmp	8000be40 <_handle_DTLB_Protection_Write>
	...

8000be44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000be44:	c0 08       	rjmp	8000be44 <_handle_DTLB_Modified>
	...

8000be50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000be50:	c0 08       	rjmp	8000be50 <_handle_ITLB_Miss>
	...

8000be60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000be60:	c0 08       	rjmp	8000be60 <_handle_DTLB_Miss_Read>
	...

8000be70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000be70:	c0 08       	rjmp	8000be70 <_handle_DTLB_Miss_Write>
	...

8000bf00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	lda.w   pc, SCALLYield
8000bf00:	fe cf 73 48 	sub	pc,pc,29512

8000bf04 <_int0>:
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
	rete
.endr
8000bf04:	30 0c       	mov	r12,0
8000bf06:	fe b0 c0 e9 	rcall	800040d8 <_get_interrupt_handler>
8000bf0a:	58 0c       	cp.w	r12,0
8000bf0c:	f8 0f 17 10 	movne	pc,r12
8000bf10:	d6 03       	rete

8000bf12 <_int1>:
8000bf12:	30 1c       	mov	r12,1
8000bf14:	fe b0 c0 e2 	rcall	800040d8 <_get_interrupt_handler>
8000bf18:	58 0c       	cp.w	r12,0
8000bf1a:	f8 0f 17 10 	movne	pc,r12
8000bf1e:	d6 03       	rete

8000bf20 <_int2>:
8000bf20:	30 2c       	mov	r12,2
8000bf22:	fe b0 c0 db 	rcall	800040d8 <_get_interrupt_handler>
8000bf26:	58 0c       	cp.w	r12,0
8000bf28:	f8 0f 17 10 	movne	pc,r12
8000bf2c:	d6 03       	rete

8000bf2e <_int3>:
8000bf2e:	30 3c       	mov	r12,3
8000bf30:	fe b0 c0 d4 	rcall	800040d8 <_get_interrupt_handler>
8000bf34:	58 0c       	cp.w	r12,0
8000bf36:	f8 0f 17 10 	movne	pc,r12
8000bf3a:	d6 03       	rete
8000bf3c:	d7 03       	nop
8000bf3e:	d7 03       	nop
8000bf40:	d7 03       	nop
8000bf42:	d7 03       	nop
8000bf44:	d7 03       	nop
8000bf46:	d7 03       	nop
8000bf48:	d7 03       	nop
8000bf4a:	d7 03       	nop
8000bf4c:	d7 03       	nop
8000bf4e:	d7 03       	nop
8000bf50:	d7 03       	nop
8000bf52:	d7 03       	nop
8000bf54:	d7 03       	nop
8000bf56:	d7 03       	nop
8000bf58:	d7 03       	nop
8000bf5a:	d7 03       	nop
8000bf5c:	d7 03       	nop
8000bf5e:	d7 03       	nop
8000bf60:	d7 03       	nop
8000bf62:	d7 03       	nop
8000bf64:	d7 03       	nop
8000bf66:	d7 03       	nop
8000bf68:	d7 03       	nop
8000bf6a:	d7 03       	nop
8000bf6c:	d7 03       	nop
8000bf6e:	d7 03       	nop
8000bf70:	d7 03       	nop
8000bf72:	d7 03       	nop
8000bf74:	d7 03       	nop
8000bf76:	d7 03       	nop
8000bf78:	d7 03       	nop
8000bf7a:	d7 03       	nop
8000bf7c:	d7 03       	nop
8000bf7e:	d7 03       	nop
8000bf80:	d7 03       	nop
8000bf82:	d7 03       	nop
8000bf84:	d7 03       	nop
8000bf86:	d7 03       	nop
8000bf88:	d7 03       	nop
8000bf8a:	d7 03       	nop
8000bf8c:	d7 03       	nop
8000bf8e:	d7 03       	nop
8000bf90:	d7 03       	nop
8000bf92:	d7 03       	nop
8000bf94:	d7 03       	nop
8000bf96:	d7 03       	nop
8000bf98:	d7 03       	nop
8000bf9a:	d7 03       	nop
8000bf9c:	d7 03       	nop
8000bf9e:	d7 03       	nop
8000bfa0:	d7 03       	nop
8000bfa2:	d7 03       	nop
8000bfa4:	d7 03       	nop
8000bfa6:	d7 03       	nop
8000bfa8:	d7 03       	nop
8000bfaa:	d7 03       	nop
8000bfac:	d7 03       	nop
8000bfae:	d7 03       	nop
8000bfb0:	d7 03       	nop
8000bfb2:	d7 03       	nop
8000bfb4:	d7 03       	nop
8000bfb6:	d7 03       	nop
8000bfb8:	d7 03       	nop
8000bfba:	d7 03       	nop
8000bfbc:	d7 03       	nop
8000bfbe:	d7 03       	nop
8000bfc0:	d7 03       	nop
8000bfc2:	d7 03       	nop
8000bfc4:	d7 03       	nop
8000bfc6:	d7 03       	nop
8000bfc8:	d7 03       	nop
8000bfca:	d7 03       	nop
8000bfcc:	d7 03       	nop
8000bfce:	d7 03       	nop
8000bfd0:	d7 03       	nop
8000bfd2:	d7 03       	nop
8000bfd4:	d7 03       	nop
8000bfd6:	d7 03       	nop
8000bfd8:	d7 03       	nop
8000bfda:	d7 03       	nop
8000bfdc:	d7 03       	nop
8000bfde:	d7 03       	nop
8000bfe0:	d7 03       	nop
8000bfe2:	d7 03       	nop
8000bfe4:	d7 03       	nop
8000bfe6:	d7 03       	nop
8000bfe8:	d7 03       	nop
8000bfea:	d7 03       	nop
8000bfec:	d7 03       	nop
8000bfee:	d7 03       	nop
8000bff0:	d7 03       	nop
8000bff2:	d7 03       	nop
8000bff4:	d7 03       	nop
8000bff6:	d7 03       	nop
8000bff8:	d7 03       	nop
8000bffa:	d7 03       	nop
8000bffc:	d7 03       	nop
8000bffe:	d7 03       	nop

Disassembly of section .fini:

8000c000 <_fini>:
8000c000:	eb cd 40 40 	pushm	r6,lr
8000c004:	48 26       	lddpc	r6,8000c00c <_fini+0xc>
8000c006:	1e 26       	rsub	r6,pc
8000c008:	c0 48       	rjmp	8000c010 <_fini+0x10>
8000c00a:	d7 03       	nop
8000c00c:	80 00       	ld.sh	r0,r0[0x0]
8000c00e:	bf ea       	*unknown*
8000c010:	fe b0 b0 3e 	rcall	8000208c <__do_global_dtors_aux>
8000c014:	e3 cd 80 40 	ldm	sp++,r6,pc
