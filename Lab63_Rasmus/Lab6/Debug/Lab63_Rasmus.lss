
Lab63_Rasmus.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        0000200c  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001a  8000200c  8000200c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000a2bc  80002028  80002028  00002428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  8000c400  8000c400  0000c800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  8000c600  8000c600  0000ca00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000720  8000c618  8000c618  0000ca18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  8 .ctors        00000008  00000008  8000cd38  0000d408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtors        00000008  00000010  8000cd40  0000d410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .jcr          00000004  00000018  8000cd48  0000d418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .got          00000000  0000001c  8000cd4c  0000d41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000510  0000001c  8000cd4c  0000d41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000002b8  00000548  00000548  00000000  2**2
                  ALLOC
 14 .heap         0000e800  00000800  00000800  00000000  2**0
                  ALLOC
 15 .comment      00000030  00000000  00000000  0000d92c  2**0
                  CONTENTS, READONLY
 16 .debug_aranges 00001190  00000000  00000000  0000d960  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubnames 0000202a  00000000  00000000  0000eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   0002a3d8  00000000  00000000  00010b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00005f58  00000000  00000000  0003aef2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00013027  00000000  00000000  00040e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00003028  00000000  00000000  00053e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0000573a  00000000  00000000  00056e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    0000ab10  00000000  00000000  0005c5d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macinfo 011bdec6  00000000  00000000  000670e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 26 .debug_ranges 000011e8  00000000  00000000  01224fac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	d7 03       	nop
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	20 28       	sub	r8,2

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	fe cf ff e0 	sub	pc,pc,-32

Disassembly of section .init:

8000200c <_init>:
8000200c:	eb cd 40 40 	pushm	r6,lr
80002010:	48 26       	lddpc	r6,80002018 <_init+0xc>
80002012:	1e 26       	rsub	r6,pc
80002014:	c0 48       	rjmp	8000201c <_init+0x10>
80002016:	d7 03       	nop
80002018:	80 00       	ld.sh	r0,r0[0x0]
8000201a:	1f f6       	ld.ub	r6,pc[0x7]
8000201c:	c5 6c       	rcall	800020c8 <frame_dummy>
8000201e:	e0 a0 51 59 	rcall	8000c2d0 <__do_global_ctors_aux>
80002022:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002028 <_stext>:
80002028:	30 07       	mov	r7,0
8000202a:	e0 7a 00 00 	mov	r10,65536
8000202e:	5b fa       	cp.w	r10,-1
80002030:	f4 0d 17 10 	movne	sp,r10
80002034:	49 4b       	lddpc	r11,80002084 <_stext+0x5c>
80002036:	30 8c       	mov	r12,8
80002038:	18 3b       	cp.w	r11,r12
8000203a:	c0 70       	breq	80002048 <_stext+0x20>
8000203c:	e0 6a 05 30 	mov	r10,1328
80002040:	b7 09       	ld.d	r8,r11++
80002042:	b9 28       	st.d	r12++,r8
80002044:	14 3c       	cp.w	r12,r10
80002046:	cf d5       	brlt	80002040 <_stext+0x18>
80002048:	e0 6a 08 00 	mov	r10,2048
8000204c:	e0 6c 05 30 	mov	r12,1328
80002050:	30 08       	mov	r8,0
80002052:	30 09       	mov	r9,0
80002054:	b9 28       	st.d	r12++,r8
80002056:	14 3c       	cp.w	r12,r10
80002058:	cf e5       	brlt	80002054 <_stext+0x2c>
8000205a:	e0 a0 16 63 	rcall	80004d20 <_init_startup>
8000205e:	48 bc       	lddpc	r12,80002088 <_stext+0x60>
80002060:	e0 a0 25 10 	rcall	80006a80 <atexit>
80002064:	cd 4f       	rcall	8000200c <_init>
80002066:	1a 9c       	mov	r12,sp
80002068:	30 0b       	mov	r11,0
8000206a:	e0 a0 29 7b 	rcall	80007360 <_init_argv>
8000206e:	5b fc       	cp.w	r12,-1
80002070:	f9 bc 00 00 	moveq	r12,0
80002074:	f9 ba 00 00 	moveq	r10,0
80002078:	14 1d       	sub	sp,r10
8000207a:	e0 a0 0e c9 	rcall	80003e0c <main>
8000207e:	e0 a0 25 09 	rcall	80006a90 <exit>
80002082:	d7 03       	nop
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	cd 38       	rjmp	8000222c <dip204_init+0x124>
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	c6 00       	breq	8000214a <dip204_init+0x42>

8000208c <__do_global_dtors_aux>:
8000208c:	d4 21       	pushm	r4-r7,lr
8000208e:	e0 68 05 48 	mov	r8,1352
80002092:	11 89       	ld.ub	r9,r8[0x0]
80002094:	30 08       	mov	r8,0
80002096:	f0 09 18 00 	cp.b	r9,r8
8000209a:	c1 61       	brne	800020c6 <__do_global_dtors_aux+0x3a>
8000209c:	31 08       	mov	r8,16
8000209e:	31 46       	mov	r6,20
800020a0:	10 95       	mov	r5,r8
800020a2:	10 16       	sub	r6,r8
800020a4:	e0 67 05 4c 	mov	r7,1356
800020a8:	a3 46       	asr	r6,0x2
800020aa:	20 16       	sub	r6,1
800020ac:	c0 68       	rjmp	800020b8 <__do_global_dtors_aux+0x2c>
800020ae:	2f f8       	sub	r8,-1
800020b0:	8f 08       	st.w	r7[0x0],r8
800020b2:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
800020b6:	5d 18       	icall	r8
800020b8:	6e 08       	ld.w	r8,r7[0x0]
800020ba:	0c 38       	cp.w	r8,r6
800020bc:	cf 93       	brcs	800020ae <__do_global_dtors_aux+0x22>
800020be:	30 19       	mov	r9,1
800020c0:	e0 68 05 48 	mov	r8,1352
800020c4:	b0 89       	st.b	r8[0x0],r9
800020c6:	d8 22       	popm	r4-r7,pc

800020c8 <frame_dummy>:
800020c8:	d4 01       	pushm	lr
800020ca:	31 8c       	mov	r12,24
800020cc:	78 08       	ld.w	r8,r12[0x0]
800020ce:	58 08       	cp.w	r8,0
800020d0:	c0 50       	breq	800020da <frame_dummy+0x12>
800020d2:	48 38       	lddpc	r8,800020dc <frame_dummy+0x14>
800020d4:	58 08       	cp.w	r8,0
800020d6:	c0 20       	breq	800020da <frame_dummy+0x12>
800020d8:	5d 18       	icall	r8
800020da:	d8 02       	popm	pc
800020dc:	00 00       	add	r0,r0
	...

800020e0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800020e0:	eb cd 40 80 	pushm	r7,lr
800020e4:	1a 97       	mov	r7,sp
	}
#endif

	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RCSYS:
		return OSC_SLOW_NOMINAL_HZ;
800020e6:	e0 78 c2 00 	mov	r8,115200

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800020ea:	10 9c       	mov	r12,r8
800020ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800020f0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
800020f0:	eb cd 40 80 	pushm	r7,lr
800020f4:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
800020f6:	f0 1f 00 04 	mcall	80002104 <sysclk_get_cpu_hz+0x14>
800020fa:	18 98       	mov	r8,r12
}
800020fc:	10 9c       	mov	r12,r8
800020fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002102:	00 00       	add	r0,r0
80002104:	80 00       	ld.sh	r0,r0[0x0]
80002106:	20 e0       	sub	r0,14

80002108 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002108:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000210c:	1a 97       	mov	r7,sp
8000210e:	fa cd 01 ac 	sub	sp,sp,428
80002112:	ef 4c fe b8 	st.w	r7[-328],r12
80002116:	16 98       	mov	r8,r11
80002118:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
8000211c:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002120:	58 18       	cp.w	r8,1
80002122:	c6 41       	brne	800021ea <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002124:	fe f9 0a 84 	ld.w	r9,pc[2692]
80002128:	30 68       	mov	r8,6
8000212a:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000212c:	30 2b       	mov	r11,2
8000212e:	33 2c       	mov	r12,50
80002130:	f0 1f 02 9f 	mcall	80002bac <dip204_init+0xaa4>

    // PWM controller configuration
    pwm_opt.diva=0;
80002134:	30 08       	mov	r8,0
80002136:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
8000213a:	30 08       	mov	r8,0
8000213c:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
80002140:	30 08       	mov	r8,0
80002142:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
80002146:	30 08       	mov	r8,0
80002148:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
8000214c:	ee c8 00 f0 	sub	r8,r7,240
80002150:	10 9c       	mov	r12,r8
80002152:	f0 1f 02 98 	mcall	80002bb0 <dip204_init+0xaa8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002156:	ef 39 fe b4 	ld.ub	r9,r7[-332]
8000215a:	30 08       	mov	r8,0
8000215c:	f0 09 18 00 	cp.b	r9,r8
80002160:	c0 30       	breq	80002166 <dip204_init+0x5e>
80002162:	33 18       	mov	r8,49
80002164:	c0 28       	rjmp	80002168 <dip204_init+0x60>
80002166:	30 18       	mov	r8,1
80002168:	fe f9 0a 4c 	ld.w	r9,pc[2636]
8000216c:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
8000216e:	fe fa 0a 4a 	ld.w	r10,pc[2634]
80002172:	74 08       	ld.w	r8,r10[0x0]
80002174:	30 09       	mov	r9,0
80002176:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
8000217a:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
8000217c:	fe fa 0a 3c 	ld.w	r10,pc[2620]
80002180:	74 08       	ld.w	r8,r10[0x0]
80002182:	30 09       	mov	r9,0
80002184:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
80002188:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
8000218a:	fe fa 0a 2e 	ld.w	r10,pc[2606]
8000218e:	74 08       	ld.w	r8,r10[0x0]
80002190:	30 19       	mov	r9,1
80002192:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
80002196:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002198:	fe fa 0a 20 	ld.w	r10,pc[2592]
8000219c:	74 08       	ld.w	r8,r10[0x0]
8000219e:	30 89       	mov	r9,8
800021a0:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800021a4:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800021a6:	fe f8 0a 0e 	ld.w	r8,pc[2574]
800021aa:	90 08       	ld.sh	r8,r8[0x0]
800021ac:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800021b0:	fe f8 0a 08 	ld.w	r8,pc[2568]
800021b4:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800021b6:	fe f9 0a 02 	ld.w	r9,pc[2562]
800021ba:	33 28       	mov	r8,50
800021bc:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800021be:	fe f9 09 fa 	ld.w	r9,pc[2554]
800021c2:	30 08       	mov	r8,0
800021c4:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800021c6:	fe f8 09 e2 	ld.w	r8,pc[2530]
800021ca:	70 08       	ld.w	r8,r8[0x0]
800021cc:	fe fb 09 ec 	ld.w	r11,pc[2540]
800021d0:	10 9c       	mov	r12,r8
800021d2:	f0 1f 02 7b 	mcall	80002bbc <dip204_init+0xab4>
    // start PWM
    pwm_start_channels(1 << channel_id);
800021d6:	fe f8 09 d2 	ld.w	r8,pc[2514]
800021da:	70 09       	ld.w	r9,r8[0x0]
800021dc:	30 18       	mov	r8,1
800021de:	f0 09 09 48 	lsl	r8,r8,r9
800021e2:	10 9c       	mov	r12,r8
800021e4:	f0 1f 02 77 	mcall	80002bc0 <dip204_init+0xab8>
800021e8:	c0 e8       	rjmp	80002204 <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
800021ea:	ef 39 fe b4 	ld.ub	r9,r7[-332]
800021ee:	30 08       	mov	r8,0
800021f0:	f0 09 18 00 	cp.b	r9,r8
800021f4:	c0 50       	breq	800021fe <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800021f6:	33 2c       	mov	r12,50
800021f8:	f0 1f 02 73 	mcall	80002bc4 <dip204_init+0xabc>
800021fc:	c0 48       	rjmp	80002204 <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
800021fe:	33 2c       	mov	r12,50
80002200:	f0 1f 02 72 	mcall	80002bc8 <dip204_init+0xac0>
    }
  }
  // delay for power on
  delay_ms(20);
80002204:	f0 1f 02 72 	mcall	80002bcc <dip204_init+0xac4>
80002208:	18 99       	mov	r9,r12
8000220a:	31 48       	mov	r8,20
8000220c:	ef 48 ff 24 	st.w	r7[-220],r8
80002210:	ef 49 ff 20 	st.w	r7[-224],r9
80002214:	ee f8 ff 24 	ld.w	r8,r7[-220]
80002218:	ef 48 ff 2c 	st.w	r7[-212],r8
8000221c:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002220:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002224:	ee f0 ff 2c 	ld.w	r0,r7[-212]
80002228:	30 01       	mov	r1,0
8000222a:	ee f2 ff 28 	ld.w	r2,r7[-216]
8000222e:	30 03       	mov	r3,0
80002230:	e2 02 02 49 	mul	r9,r1,r2
80002234:	e6 00 02 48 	mul	r8,r3,r0
80002238:	10 09       	add	r9,r8
8000223a:	e0 02 06 4a 	mulu.d	r10,r0,r2
8000223e:	16 09       	add	r9,r11
80002240:	12 9b       	mov	r11,r9
80002242:	e0 68 03 e7 	mov	r8,999
80002246:	30 09       	mov	r9,0
80002248:	10 0a       	add	r10,r8
8000224a:	f6 09 00 4b 	adc	r11,r11,r9
8000224e:	e0 68 03 e8 	mov	r8,1000
80002252:	30 09       	mov	r9,0
80002254:	f0 1f 02 5f 	mcall	80002bd0 <dip204_init+0xac8>
80002258:	14 98       	mov	r8,r10
8000225a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000225c:	ef 48 ff 34 	st.w	r7[-204],r8
80002260:	ee c8 01 44 	sub	r8,r7,324
80002264:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002268:	e1 b8 00 42 	mfsr	r8,0x108
8000226c:	10 99       	mov	r9,r8
8000226e:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002272:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002274:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002278:	70 09       	ld.w	r9,r8[0x0]
8000227a:	ee f8 ff 34 	ld.w	r8,r7[-204]
8000227e:	10 09       	add	r9,r8
80002280:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002284:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002286:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000228a:	30 08       	mov	r8,0
8000228c:	f3 68 00 08 	st.b	r9[8],r8
80002290:	ee c8 01 44 	sub	r8,r7,324
80002294:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002298:	e1 b8 00 42 	mfsr	r8,0x108
8000229c:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800022a0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022a4:	f1 39 00 08 	ld.ub	r9,r8[8]
800022a8:	30 28       	mov	r8,2
800022aa:	f0 09 18 00 	cp.b	r9,r8
800022ae:	c0 31       	brne	800022b4 <dip204_init+0x1ac>
    return false;
800022b0:	30 08       	mov	r8,0
800022b2:	c4 38       	rjmp	80002338 <dip204_init+0x230>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800022b4:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022b8:	f1 39 00 08 	ld.ub	r9,r8[8]
800022bc:	30 18       	mov	r8,1
800022be:	f0 09 18 00 	cp.b	r9,r8
800022c2:	c0 31       	brne	800022c8 <dip204_init+0x1c0>
    return true;
800022c4:	30 18       	mov	r8,1
800022c6:	c3 98       	rjmp	80002338 <dip204_init+0x230>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800022c8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022cc:	70 09       	ld.w	r9,r8[0x0]
800022ce:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022d2:	70 18       	ld.w	r8,r8[0x4]
800022d4:	10 39       	cp.w	r9,r8
800022d6:	e0 88 00 1a 	brls	8000230a <dip204_init+0x202>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800022da:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022de:	70 09       	ld.w	r9,r8[0x0]
800022e0:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800022e4:	12 38       	cp.w	r8,r9
800022e6:	c1 02       	brcc	80002306 <dip204_init+0x1fe>
800022e8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800022ec:	70 19       	ld.w	r9,r8[0x4]
800022ee:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800022f2:	12 38       	cp.w	r8,r9
800022f4:	e0 88 00 09 	brls	80002306 <dip204_init+0x1fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800022f8:	ee f9 ff 38 	ld.w	r9,r7[-200]
800022fc:	30 18       	mov	r8,1
800022fe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002302:	30 18       	mov	r8,1
80002304:	c1 a8       	rjmp	80002338 <dip204_init+0x230>
    }
    return false;
80002306:	30 08       	mov	r8,0
80002308:	c1 88       	rjmp	80002338 <dip204_init+0x230>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000230a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000230e:	70 09       	ld.w	r9,r8[0x0]
80002310:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002314:	12 38       	cp.w	r8,r9
80002316:	c0 93       	brcs	80002328 <dip204_init+0x220>
80002318:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000231c:	70 19       	ld.w	r9,r8[0x4]
8000231e:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002322:	12 38       	cp.w	r8,r9
80002324:	e0 88 00 09 	brls	80002336 <dip204_init+0x22e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002328:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000232c:	30 18       	mov	r8,1
8000232e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002332:	30 18       	mov	r8,1
80002334:	c0 28       	rjmp	80002338 <dip204_init+0x230>
    }
    return false;
80002336:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002338:	58 08       	cp.w	r8,0
8000233a:	ca b0       	breq	80002290 <dip204_init+0x188>
  // select the LCD chip
  dip204_select();
8000233c:	f0 1f 02 26 	mcall	80002bd4 <dip204_init+0xacc>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002340:	e0 6c 00 f8 	mov	r12,248
80002344:	f0 1f 02 25 	mcall	80002bd8 <dip204_init+0xad0>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002348:	33 4c       	mov	r12,52
8000234a:	f0 1f 02 24 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
8000234e:	f0 1f 02 20 	mcall	80002bcc <dip204_init+0xac4>
80002352:	18 99       	mov	r9,r12
80002354:	30 18       	mov	r8,1
80002356:	ef 48 ff 44 	st.w	r7[-188],r8
8000235a:	ef 49 ff 40 	st.w	r7[-192],r9
8000235e:	ee f8 ff 44 	ld.w	r8,r7[-188]
80002362:	ef 48 ff 4c 	st.w	r7[-180],r8
80002366:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000236a:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000236e:	ee fc ff 4c 	ld.w	r12,r7[-180]
80002372:	ef 4c fe 60 	st.w	r7[-416],r12
80002376:	30 0b       	mov	r11,0
80002378:	ef 4b fe 5c 	st.w	r7[-420],r11
8000237c:	ee fa ff 48 	ld.w	r10,r7[-184]
80002380:	ef 4a fe 58 	st.w	r7[-424],r10
80002384:	30 09       	mov	r9,0
80002386:	ef 49 fe 54 	st.w	r7[-428],r9
8000238a:	ee f9 fe 5c 	ld.w	r9,r7[-420]
8000238e:	ee f8 fe 58 	ld.w	r8,r7[-424]
80002392:	b1 39       	mul	r9,r8
80002394:	ee f8 fe 54 	ld.w	r8,r7[-428]
80002398:	ee fc fe 60 	ld.w	r12,r7[-416]
8000239c:	b9 38       	mul	r8,r12
8000239e:	10 09       	add	r9,r8
800023a0:	ee f8 fe 60 	ld.w	r8,r7[-416]
800023a4:	ee fc fe 58 	ld.w	r12,r7[-424]
800023a8:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800023ac:	16 09       	add	r9,r11
800023ae:	12 9b       	mov	r11,r9
800023b0:	e0 68 03 e7 	mov	r8,999
800023b4:	30 09       	mov	r9,0
800023b6:	10 0a       	add	r10,r8
800023b8:	f6 09 00 4b 	adc	r11,r11,r9
800023bc:	e0 68 03 e8 	mov	r8,1000
800023c0:	30 09       	mov	r9,0
800023c2:	f0 1f 02 04 	mcall	80002bd0 <dip204_init+0xac8>
800023c6:	14 98       	mov	r8,r10
800023c8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800023ca:	ef 48 ff 54 	st.w	r7[-172],r8
800023ce:	ee c8 01 38 	sub	r8,r7,312
800023d2:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800023d6:	e1 b8 00 42 	mfsr	r8,0x108
800023da:	10 99       	mov	r9,r8
800023dc:	ee f8 ff 50 	ld.w	r8,r7[-176]
800023e0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800023e2:	ee f8 ff 50 	ld.w	r8,r7[-176]
800023e6:	70 09       	ld.w	r9,r8[0x0]
800023e8:	ee f8 ff 54 	ld.w	r8,r7[-172]
800023ec:	10 09       	add	r9,r8
800023ee:	ee f8 ff 50 	ld.w	r8,r7[-176]
800023f2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800023f4:	ee f9 ff 50 	ld.w	r9,r7[-176]
800023f8:	30 08       	mov	r8,0
800023fa:	f3 68 00 08 	st.b	r9[8],r8
800023fe:	ee c8 01 38 	sub	r8,r7,312
80002402:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002406:	e1 b8 00 42 	mfsr	r8,0x108
8000240a:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000240e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002412:	f1 39 00 08 	ld.ub	r9,r8[8]
80002416:	30 28       	mov	r8,2
80002418:	f0 09 18 00 	cp.b	r9,r8
8000241c:	c0 31       	brne	80002422 <dip204_init+0x31a>
    return false;
8000241e:	30 08       	mov	r8,0
80002420:	c4 38       	rjmp	800024a6 <dip204_init+0x39e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002422:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002426:	f1 39 00 08 	ld.ub	r9,r8[8]
8000242a:	30 18       	mov	r8,1
8000242c:	f0 09 18 00 	cp.b	r9,r8
80002430:	c0 31       	brne	80002436 <dip204_init+0x32e>
    return true;
80002432:	30 18       	mov	r8,1
80002434:	c3 98       	rjmp	800024a6 <dip204_init+0x39e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002436:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000243a:	70 09       	ld.w	r9,r8[0x0]
8000243c:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002440:	70 18       	ld.w	r8,r8[0x4]
80002442:	10 39       	cp.w	r9,r8
80002444:	e0 88 00 1a 	brls	80002478 <dip204_init+0x370>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002448:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000244c:	70 09       	ld.w	r9,r8[0x0]
8000244e:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002452:	12 38       	cp.w	r8,r9
80002454:	c1 02       	brcc	80002474 <dip204_init+0x36c>
80002456:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000245a:	70 19       	ld.w	r9,r8[0x4]
8000245c:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002460:	12 38       	cp.w	r8,r9
80002462:	e0 88 00 09 	brls	80002474 <dip204_init+0x36c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002466:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000246a:	30 18       	mov	r8,1
8000246c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002470:	30 18       	mov	r8,1
80002472:	c1 a8       	rjmp	800024a6 <dip204_init+0x39e>
    }
    return false;
80002474:	30 08       	mov	r8,0
80002476:	c1 88       	rjmp	800024a6 <dip204_init+0x39e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002478:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000247c:	70 09       	ld.w	r9,r8[0x0]
8000247e:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002482:	12 38       	cp.w	r8,r9
80002484:	c0 93       	brcs	80002496 <dip204_init+0x38e>
80002486:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000248a:	70 19       	ld.w	r9,r8[0x4]
8000248c:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002490:	12 38       	cp.w	r8,r9
80002492:	e0 88 00 09 	brls	800024a4 <dip204_init+0x39c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002496:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000249a:	30 18       	mov	r8,1
8000249c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024a0:	30 18       	mov	r8,1
800024a2:	c0 28       	rjmp	800024a6 <dip204_init+0x39e>
    }
    return false;
800024a4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800024a6:	58 08       	cp.w	r8,0
800024a8:	ca b0       	breq	800023fe <dip204_init+0x2f6>
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800024aa:	30 9c       	mov	r12,9
800024ac:	f0 1f 01 cb 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800024b0:	f0 1f 01 c7 	mcall	80002bcc <dip204_init+0xac4>
800024b4:	18 99       	mov	r9,r12
800024b6:	30 18       	mov	r8,1
800024b8:	ef 48 ff 64 	st.w	r7[-156],r8
800024bc:	ef 49 ff 60 	st.w	r7[-160],r9
800024c0:	ee f8 ff 64 	ld.w	r8,r7[-156]
800024c4:	ef 48 ff 6c 	st.w	r7[-148],r8
800024c8:	ee f8 ff 60 	ld.w	r8,r7[-160]
800024cc:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800024d0:	ee fb ff 6c 	ld.w	r11,r7[-148]
800024d4:	ef 4b fe 70 	st.w	r7[-400],r11
800024d8:	30 0a       	mov	r10,0
800024da:	ef 4a fe 6c 	st.w	r7[-404],r10
800024de:	ee f9 ff 68 	ld.w	r9,r7[-152]
800024e2:	ef 49 fe 68 	st.w	r7[-408],r9
800024e6:	30 08       	mov	r8,0
800024e8:	ef 48 fe 64 	st.w	r7[-412],r8
800024ec:	ee f9 fe 6c 	ld.w	r9,r7[-404]
800024f0:	ee fc fe 68 	ld.w	r12,r7[-408]
800024f4:	b9 39       	mul	r9,r12
800024f6:	ee f8 fe 64 	ld.w	r8,r7[-412]
800024fa:	ee fb fe 70 	ld.w	r11,r7[-400]
800024fe:	b7 38       	mul	r8,r11
80002500:	10 09       	add	r9,r8
80002502:	ee f8 fe 70 	ld.w	r8,r7[-400]
80002506:	ee fc fe 68 	ld.w	r12,r7[-408]
8000250a:	f0 0c 06 4a 	mulu.d	r10,r8,r12
8000250e:	16 09       	add	r9,r11
80002510:	12 9b       	mov	r11,r9
80002512:	e0 68 03 e7 	mov	r8,999
80002516:	30 09       	mov	r9,0
80002518:	10 0a       	add	r10,r8
8000251a:	f6 09 00 4b 	adc	r11,r11,r9
8000251e:	e0 68 03 e8 	mov	r8,1000
80002522:	30 09       	mov	r9,0
80002524:	f0 1f 01 ab 	mcall	80002bd0 <dip204_init+0xac8>
80002528:	14 98       	mov	r8,r10
8000252a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000252c:	ef 48 ff 74 	st.w	r7[-140],r8
80002530:	ee c8 01 2c 	sub	r8,r7,300
80002534:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002538:	e1 b8 00 42 	mfsr	r8,0x108
8000253c:	10 99       	mov	r9,r8
8000253e:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002542:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002544:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002548:	70 09       	ld.w	r9,r8[0x0]
8000254a:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000254e:	10 09       	add	r9,r8
80002550:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002554:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002556:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000255a:	30 08       	mov	r8,0
8000255c:	f3 68 00 08 	st.b	r9[8],r8
80002560:	ee c8 01 2c 	sub	r8,r7,300
80002564:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002568:	e1 b8 00 42 	mfsr	r8,0x108
8000256c:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002570:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002574:	f1 39 00 08 	ld.ub	r9,r8[8]
80002578:	30 28       	mov	r8,2
8000257a:	f0 09 18 00 	cp.b	r9,r8
8000257e:	c0 31       	brne	80002584 <dip204_init+0x47c>
    return false;
80002580:	30 08       	mov	r8,0
80002582:	c4 38       	rjmp	80002608 <dip204_init+0x500>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002584:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002588:	f1 39 00 08 	ld.ub	r9,r8[8]
8000258c:	30 18       	mov	r8,1
8000258e:	f0 09 18 00 	cp.b	r9,r8
80002592:	c0 31       	brne	80002598 <dip204_init+0x490>
    return true;
80002594:	30 18       	mov	r8,1
80002596:	c3 98       	rjmp	80002608 <dip204_init+0x500>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002598:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000259c:	70 09       	ld.w	r9,r8[0x0]
8000259e:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025a2:	70 18       	ld.w	r8,r8[0x4]
800025a4:	10 39       	cp.w	r9,r8
800025a6:	e0 88 00 1a 	brls	800025da <dip204_init+0x4d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800025aa:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025ae:	70 09       	ld.w	r9,r8[0x0]
800025b0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800025b4:	12 38       	cp.w	r8,r9
800025b6:	c1 02       	brcc	800025d6 <dip204_init+0x4ce>
800025b8:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025bc:	70 19       	ld.w	r9,r8[0x4]
800025be:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800025c2:	12 38       	cp.w	r8,r9
800025c4:	e0 88 00 09 	brls	800025d6 <dip204_init+0x4ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800025c8:	ee f9 ff 78 	ld.w	r9,r7[-136]
800025cc:	30 18       	mov	r8,1
800025ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800025d2:	30 18       	mov	r8,1
800025d4:	c1 a8       	rjmp	80002608 <dip204_init+0x500>
    }
    return false;
800025d6:	30 08       	mov	r8,0
800025d8:	c1 88       	rjmp	80002608 <dip204_init+0x500>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800025da:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025de:	70 09       	ld.w	r9,r8[0x0]
800025e0:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800025e4:	12 38       	cp.w	r8,r9
800025e6:	c0 93       	brcs	800025f8 <dip204_init+0x4f0>
800025e8:	ee f8 ff 78 	ld.w	r8,r7[-136]
800025ec:	70 19       	ld.w	r9,r8[0x4]
800025ee:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800025f2:	12 38       	cp.w	r8,r9
800025f4:	e0 88 00 09 	brls	80002606 <dip204_init+0x4fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800025f8:	ee f9 ff 78 	ld.w	r9,r7[-136]
800025fc:	30 18       	mov	r8,1
800025fe:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002602:	30 18       	mov	r8,1
80002604:	c0 28       	rjmp	80002608 <dip204_init+0x500>
    }
    return false;
80002606:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002608:	58 08       	cp.w	r8,0
8000260a:	ca b0       	breq	80002560 <dip204_init+0x458>
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
8000260c:	33 0c       	mov	r12,48
8000260e:	f0 1f 01 73 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002612:	f0 1f 01 6f 	mcall	80002bcc <dip204_init+0xac4>
80002616:	18 99       	mov	r9,r12
80002618:	30 18       	mov	r8,1
8000261a:	ef 48 ff 84 	st.w	r7[-124],r8
8000261e:	ef 49 ff 80 	st.w	r7[-128],r9
80002622:	ee f8 ff 84 	ld.w	r8,r7[-124]
80002626:	ef 48 ff 8c 	st.w	r7[-116],r8
8000262a:	ee f8 ff 80 	ld.w	r8,r7[-128]
8000262e:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002632:	ee fb ff 8c 	ld.w	r11,r7[-116]
80002636:	ef 4b fe 80 	st.w	r7[-384],r11
8000263a:	30 0a       	mov	r10,0
8000263c:	ef 4a fe 7c 	st.w	r7[-388],r10
80002640:	ee f9 ff 88 	ld.w	r9,r7[-120]
80002644:	ef 49 fe 78 	st.w	r7[-392],r9
80002648:	30 08       	mov	r8,0
8000264a:	ef 48 fe 74 	st.w	r7[-396],r8
8000264e:	ee f9 fe 7c 	ld.w	r9,r7[-388]
80002652:	ee fc fe 78 	ld.w	r12,r7[-392]
80002656:	b9 39       	mul	r9,r12
80002658:	ee f8 fe 74 	ld.w	r8,r7[-396]
8000265c:	ee fb fe 80 	ld.w	r11,r7[-384]
80002660:	b7 38       	mul	r8,r11
80002662:	10 09       	add	r9,r8
80002664:	ee f8 fe 80 	ld.w	r8,r7[-384]
80002668:	ee fc fe 78 	ld.w	r12,r7[-392]
8000266c:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002670:	16 09       	add	r9,r11
80002672:	12 9b       	mov	r11,r9
80002674:	e0 68 03 e7 	mov	r8,999
80002678:	30 09       	mov	r9,0
8000267a:	10 0a       	add	r10,r8
8000267c:	f6 09 00 4b 	adc	r11,r11,r9
80002680:	e0 68 03 e8 	mov	r8,1000
80002684:	30 09       	mov	r9,0
80002686:	f0 1f 01 53 	mcall	80002bd0 <dip204_init+0xac8>
8000268a:	14 98       	mov	r8,r10
8000268c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000268e:	ef 48 ff 94 	st.w	r7[-108],r8
80002692:	ee c8 01 20 	sub	r8,r7,288
80002696:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000269a:	e1 b8 00 42 	mfsr	r8,0x108
8000269e:	10 99       	mov	r9,r8
800026a0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800026a4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026a6:	ee f8 ff 90 	ld.w	r8,r7[-112]
800026aa:	70 09       	ld.w	r9,r8[0x0]
800026ac:	ee f8 ff 94 	ld.w	r8,r7[-108]
800026b0:	10 09       	add	r9,r8
800026b2:	ee f8 ff 90 	ld.w	r8,r7[-112]
800026b6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800026b8:	ee f9 ff 90 	ld.w	r9,r7[-112]
800026bc:	30 08       	mov	r8,0
800026be:	f3 68 00 08 	st.b	r9[8],r8
800026c2:	ee c8 01 20 	sub	r8,r7,288
800026c6:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026ca:	e1 b8 00 42 	mfsr	r8,0x108
800026ce:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800026d2:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026d6:	f1 39 00 08 	ld.ub	r9,r8[8]
800026da:	30 28       	mov	r8,2
800026dc:	f0 09 18 00 	cp.b	r9,r8
800026e0:	c0 31       	brne	800026e6 <dip204_init+0x5de>
    return false;
800026e2:	30 08       	mov	r8,0
800026e4:	c4 38       	rjmp	8000276a <dip204_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800026e6:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026ea:	f1 39 00 08 	ld.ub	r9,r8[8]
800026ee:	30 18       	mov	r8,1
800026f0:	f0 09 18 00 	cp.b	r9,r8
800026f4:	c0 31       	brne	800026fa <dip204_init+0x5f2>
    return true;
800026f6:	30 18       	mov	r8,1
800026f8:	c3 98       	rjmp	8000276a <dip204_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800026fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800026fe:	70 09       	ld.w	r9,r8[0x0]
80002700:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002704:	70 18       	ld.w	r8,r8[0x4]
80002706:	10 39       	cp.w	r9,r8
80002708:	e0 88 00 1a 	brls	8000273c <dip204_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000270c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002710:	70 08       	ld.w	r8,r8[0x0]
80002712:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002716:	10 39       	cp.w	r9,r8
80002718:	c1 02       	brcc	80002738 <dip204_init+0x630>
8000271a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000271e:	70 18       	ld.w	r8,r8[0x4]
80002720:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002724:	10 39       	cp.w	r9,r8
80002726:	e0 88 00 09 	brls	80002738 <dip204_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000272a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000272e:	30 18       	mov	r8,1
80002730:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002734:	30 18       	mov	r8,1
80002736:	c1 a8       	rjmp	8000276a <dip204_init+0x662>
    }
    return false;
80002738:	30 08       	mov	r8,0
8000273a:	c1 88       	rjmp	8000276a <dip204_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000273c:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002740:	70 08       	ld.w	r8,r8[0x0]
80002742:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002746:	10 39       	cp.w	r9,r8
80002748:	c0 93       	brcs	8000275a <dip204_init+0x652>
8000274a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000274e:	70 18       	ld.w	r8,r8[0x4]
80002750:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80002754:	10 39       	cp.w	r9,r8
80002756:	e0 88 00 09 	brls	80002768 <dip204_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000275a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000275e:	30 18       	mov	r8,1
80002760:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002764:	30 18       	mov	r8,1
80002766:	c0 28       	rjmp	8000276a <dip204_init+0x662>
    }
    return false;
80002768:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000276a:	58 08       	cp.w	r8,0
8000276c:	ca b0       	breq	800026c2 <dip204_init+0x5ba>
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
8000276e:	30 fc       	mov	r12,15
80002770:	f0 1f 01 1a 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002774:	f0 1f 01 16 	mcall	80002bcc <dip204_init+0xac4>
80002778:	18 98       	mov	r8,r12
8000277a:	30 19       	mov	r9,1
8000277c:	ef 49 ff a4 	st.w	r7[-92],r9
80002780:	ef 48 ff a0 	st.w	r7[-96],r8
80002784:	ee f8 ff a4 	ld.w	r8,r7[-92]
80002788:	ef 48 ff ac 	st.w	r7[-84],r8
8000278c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80002790:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002794:	ee fb ff ac 	ld.w	r11,r7[-84]
80002798:	ef 4b fe 90 	st.w	r7[-368],r11
8000279c:	30 0a       	mov	r10,0
8000279e:	ef 4a fe 8c 	st.w	r7[-372],r10
800027a2:	ee f9 ff a8 	ld.w	r9,r7[-88]
800027a6:	ef 49 fe 88 	st.w	r7[-376],r9
800027aa:	30 08       	mov	r8,0
800027ac:	ef 48 fe 84 	st.w	r7[-380],r8
800027b0:	ee fa fe 8c 	ld.w	r10,r7[-372]
800027b4:	ee fc fe 88 	ld.w	r12,r7[-376]
800027b8:	b9 3a       	mul	r10,r12
800027ba:	ee f8 fe 84 	ld.w	r8,r7[-380]
800027be:	ee fb fe 90 	ld.w	r11,r7[-368]
800027c2:	b7 38       	mul	r8,r11
800027c4:	10 0a       	add	r10,r8
800027c6:	ee fc fe 90 	ld.w	r12,r7[-368]
800027ca:	ee fb fe 88 	ld.w	r11,r7[-376]
800027ce:	f8 0b 06 48 	mulu.d	r8,r12,r11
800027d2:	12 0a       	add	r10,r9
800027d4:	14 99       	mov	r9,r10
800027d6:	e0 6a 03 e7 	mov	r10,999
800027da:	30 0b       	mov	r11,0
800027dc:	f0 0a 00 0a 	add	r10,r8,r10
800027e0:	f2 0b 00 4b 	adc	r11,r9,r11
800027e4:	e0 68 03 e8 	mov	r8,1000
800027e8:	30 09       	mov	r9,0
800027ea:	f0 1f 00 fa 	mcall	80002bd0 <dip204_init+0xac8>
800027ee:	14 98       	mov	r8,r10
800027f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800027f2:	ef 48 ff b4 	st.w	r7[-76],r8
800027f6:	ee c8 01 14 	sub	r8,r7,276
800027fa:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800027fe:	e1 b8 00 42 	mfsr	r8,0x108
80002802:	10 99       	mov	r9,r8
80002804:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002808:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000280a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000280e:	70 09       	ld.w	r9,r8[0x0]
80002810:	ee f8 ff b4 	ld.w	r8,r7[-76]
80002814:	10 09       	add	r9,r8
80002816:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000281a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000281c:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002820:	30 08       	mov	r8,0
80002822:	f3 68 00 08 	st.b	r9[8],r8
80002826:	ee c8 01 14 	sub	r8,r7,276
8000282a:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000282e:	e1 b8 00 42 	mfsr	r8,0x108
80002832:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002836:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000283a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000283e:	30 28       	mov	r8,2
80002840:	f0 09 18 00 	cp.b	r9,r8
80002844:	c0 31       	brne	8000284a <dip204_init+0x742>
    return false;
80002846:	30 08       	mov	r8,0
80002848:	c4 38       	rjmp	800028ce <dip204_init+0x7c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000284a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000284e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002852:	30 18       	mov	r8,1
80002854:	f0 09 18 00 	cp.b	r9,r8
80002858:	c0 31       	brne	8000285e <dip204_init+0x756>
    return true;
8000285a:	30 18       	mov	r8,1
8000285c:	c3 98       	rjmp	800028ce <dip204_init+0x7c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000285e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002862:	70 09       	ld.w	r9,r8[0x0]
80002864:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002868:	70 18       	ld.w	r8,r8[0x4]
8000286a:	10 39       	cp.w	r9,r8
8000286c:	e0 88 00 1a 	brls	800028a0 <dip204_init+0x798>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002870:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002874:	70 08       	ld.w	r8,r8[0x0]
80002876:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000287a:	10 39       	cp.w	r9,r8
8000287c:	c1 02       	brcc	8000289c <dip204_init+0x794>
8000287e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002882:	70 18       	ld.w	r8,r8[0x4]
80002884:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002888:	10 39       	cp.w	r9,r8
8000288a:	e0 88 00 09 	brls	8000289c <dip204_init+0x794>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000288e:	ee f9 ff b8 	ld.w	r9,r7[-72]
80002892:	30 18       	mov	r8,1
80002894:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002898:	30 18       	mov	r8,1
8000289a:	c1 a8       	rjmp	800028ce <dip204_init+0x7c6>
    }
    return false;
8000289c:	30 08       	mov	r8,0
8000289e:	c1 88       	rjmp	800028ce <dip204_init+0x7c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800028a0:	ee f8 ff b8 	ld.w	r8,r7[-72]
800028a4:	70 08       	ld.w	r8,r8[0x0]
800028a6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800028aa:	10 39       	cp.w	r9,r8
800028ac:	c0 93       	brcs	800028be <dip204_init+0x7b6>
800028ae:	ee f8 ff b8 	ld.w	r8,r7[-72]
800028b2:	70 18       	ld.w	r8,r8[0x4]
800028b4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800028b8:	10 39       	cp.w	r9,r8
800028ba:	e0 88 00 09 	brls	800028cc <dip204_init+0x7c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800028be:	ee f9 ff b8 	ld.w	r9,r7[-72]
800028c2:	30 18       	mov	r8,1
800028c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800028c8:	30 18       	mov	r8,1
800028ca:	c0 28       	rjmp	800028ce <dip204_init+0x7c6>
    }
    return false;
800028cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800028ce:	58 08       	cp.w	r8,0
800028d0:	ca b0       	breq	80002826 <dip204_init+0x71e>
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800028d2:	30 1c       	mov	r12,1
800028d4:	f0 1f 00 c1 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(5);
800028d8:	f0 1f 00 bd 	mcall	80002bcc <dip204_init+0xac4>
800028dc:	18 98       	mov	r8,r12
800028de:	30 59       	mov	r9,5
800028e0:	ef 49 ff c4 	st.w	r7[-60],r9
800028e4:	ef 48 ff c0 	st.w	r7[-64],r8
800028e8:	ee f8 ff c4 	ld.w	r8,r7[-60]
800028ec:	ef 48 ff cc 	st.w	r7[-52],r8
800028f0:	ee f8 ff c0 	ld.w	r8,r7[-64]
800028f4:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800028f8:	ee fa ff cc 	ld.w	r10,r7[-52]
800028fc:	ef 4a fe a0 	st.w	r7[-352],r10
80002900:	30 09       	mov	r9,0
80002902:	ef 49 fe 9c 	st.w	r7[-356],r9
80002906:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000290a:	ef 48 fe 98 	st.w	r7[-360],r8
8000290e:	30 0c       	mov	r12,0
80002910:	ef 4c fe 94 	st.w	r7[-364],r12
80002914:	ee fa fe 9c 	ld.w	r10,r7[-356]
80002918:	ee fb fe 98 	ld.w	r11,r7[-360]
8000291c:	b7 3a       	mul	r10,r11
8000291e:	ee f8 fe 94 	ld.w	r8,r7[-364]
80002922:	ee f9 fe a0 	ld.w	r9,r7[-352]
80002926:	b3 38       	mul	r8,r9
80002928:	10 0a       	add	r10,r8
8000292a:	ee fc fe a0 	ld.w	r12,r7[-352]
8000292e:	ee fb fe 98 	ld.w	r11,r7[-360]
80002932:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002936:	12 0a       	add	r10,r9
80002938:	14 99       	mov	r9,r10
8000293a:	e0 6a 03 e7 	mov	r10,999
8000293e:	30 0b       	mov	r11,0
80002940:	f0 0a 00 0a 	add	r10,r8,r10
80002944:	f2 0b 00 4b 	adc	r11,r9,r11
80002948:	e0 68 03 e8 	mov	r8,1000
8000294c:	30 09       	mov	r9,0
8000294e:	f0 1f 00 a1 	mcall	80002bd0 <dip204_init+0xac8>
80002952:	14 98       	mov	r8,r10
80002954:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002956:	ef 48 ff d4 	st.w	r7[-44],r8
8000295a:	ee c8 01 08 	sub	r8,r7,264
8000295e:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002962:	e1 b8 00 42 	mfsr	r8,0x108
80002966:	10 99       	mov	r9,r8
80002968:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000296c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000296e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002972:	70 09       	ld.w	r9,r8[0x0]
80002974:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002978:	10 09       	add	r9,r8
8000297a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000297e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002980:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002984:	30 08       	mov	r8,0
80002986:	f3 68 00 08 	st.b	r9[8],r8
8000298a:	ee c8 01 08 	sub	r8,r7,264
8000298e:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002992:	e1 b8 00 42 	mfsr	r8,0x108
80002996:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000299a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000299e:	f1 39 00 08 	ld.ub	r9,r8[8]
800029a2:	30 28       	mov	r8,2
800029a4:	f0 09 18 00 	cp.b	r9,r8
800029a8:	c0 31       	brne	800029ae <dip204_init+0x8a6>
    return false;
800029aa:	30 08       	mov	r8,0
800029ac:	c4 38       	rjmp	80002a32 <dip204_init+0x92a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800029ae:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029b2:	f1 39 00 08 	ld.ub	r9,r8[8]
800029b6:	30 18       	mov	r8,1
800029b8:	f0 09 18 00 	cp.b	r9,r8
800029bc:	c0 31       	brne	800029c2 <dip204_init+0x8ba>
    return true;
800029be:	30 18       	mov	r8,1
800029c0:	c3 98       	rjmp	80002a32 <dip204_init+0x92a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800029c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029c6:	70 09       	ld.w	r9,r8[0x0]
800029c8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029cc:	70 18       	ld.w	r8,r8[0x4]
800029ce:	10 39       	cp.w	r9,r8
800029d0:	e0 88 00 1a 	brls	80002a04 <dip204_init+0x8fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800029d4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029d8:	70 08       	ld.w	r8,r8[0x0]
800029da:	ee f9 ff dc 	ld.w	r9,r7[-36]
800029de:	10 39       	cp.w	r9,r8
800029e0:	c1 02       	brcc	80002a00 <dip204_init+0x8f8>
800029e2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800029e6:	70 18       	ld.w	r8,r8[0x4]
800029e8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800029ec:	10 39       	cp.w	r9,r8
800029ee:	e0 88 00 09 	brls	80002a00 <dip204_init+0x8f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800029f2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800029f6:	30 18       	mov	r8,1
800029f8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800029fc:	30 18       	mov	r8,1
800029fe:	c1 a8       	rjmp	80002a32 <dip204_init+0x92a>
    }
    return false;
80002a00:	30 08       	mov	r8,0
80002a02:	c1 88       	rjmp	80002a32 <dip204_init+0x92a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002a08:	70 08       	ld.w	r8,r8[0x0]
80002a0a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002a0e:	10 39       	cp.w	r9,r8
80002a10:	c0 93       	brcs	80002a22 <dip204_init+0x91a>
80002a12:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002a16:	70 18       	ld.w	r8,r8[0x4]
80002a18:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002a1c:	10 39       	cp.w	r9,r8
80002a1e:	e0 88 00 09 	brls	80002a30 <dip204_init+0x928>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a22:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002a26:	30 18       	mov	r8,1
80002a28:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a2c:	30 18       	mov	r8,1
80002a2e:	c0 28       	rjmp	80002a32 <dip204_init+0x92a>
    }
    return false;
80002a30:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002a32:	58 08       	cp.w	r8,0
80002a34:	ca b0       	breq	8000298a <dip204_init+0x882>
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002a36:	30 6c       	mov	r12,6
80002a38:	f0 1f 00 68 	mcall	80002bd8 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002a3c:	f0 1f 00 64 	mcall	80002bcc <dip204_init+0xac4>
80002a40:	18 98       	mov	r8,r12
80002a42:	30 19       	mov	r9,1
80002a44:	ef 49 ff e4 	st.w	r7[-28],r9
80002a48:	ef 48 ff e0 	st.w	r7[-32],r8
80002a4c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002a50:	ef 48 ff ec 	st.w	r7[-20],r8
80002a54:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002a58:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002a5c:	ee fa ff ec 	ld.w	r10,r7[-20]
80002a60:	ef 4a fe b0 	st.w	r7[-336],r10
80002a64:	30 09       	mov	r9,0
80002a66:	ef 49 fe ac 	st.w	r7[-340],r9
80002a6a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002a6e:	ef 48 fe a8 	st.w	r7[-344],r8
80002a72:	30 0c       	mov	r12,0
80002a74:	ef 4c fe a4 	st.w	r7[-348],r12
80002a78:	ee fa fe ac 	ld.w	r10,r7[-340]
80002a7c:	ee fb fe a8 	ld.w	r11,r7[-344]
80002a80:	b7 3a       	mul	r10,r11
80002a82:	ee f8 fe a4 	ld.w	r8,r7[-348]
80002a86:	ee f9 fe b0 	ld.w	r9,r7[-336]
80002a8a:	b3 38       	mul	r8,r9
80002a8c:	10 0a       	add	r10,r8
80002a8e:	ee fc fe b0 	ld.w	r12,r7[-336]
80002a92:	ee fb fe a8 	ld.w	r11,r7[-344]
80002a96:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002a9a:	12 0a       	add	r10,r9
80002a9c:	14 99       	mov	r9,r10
80002a9e:	e0 6a 03 e7 	mov	r10,999
80002aa2:	30 0b       	mov	r11,0
80002aa4:	f0 0a 00 0a 	add	r10,r8,r10
80002aa8:	f2 0b 00 4b 	adc	r11,r9,r11
80002aac:	e0 68 03 e8 	mov	r8,1000
80002ab0:	30 09       	mov	r9,0
80002ab2:	f0 1f 00 48 	mcall	80002bd0 <dip204_init+0xac8>
80002ab6:	14 98       	mov	r8,r10
80002ab8:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002aba:	ef 48 ff f4 	st.w	r7[-12],r8
80002abe:	ee c8 00 fc 	sub	r8,r7,252
80002ac2:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002ac6:	e1 b8 00 42 	mfsr	r8,0x108
80002aca:	10 99       	mov	r9,r8
80002acc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ad0:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002ad2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ad6:	70 09       	ld.w	r9,r8[0x0]
80002ad8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002adc:	10 09       	add	r9,r8
80002ade:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ae2:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002ae4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002ae8:	30 08       	mov	r8,0
80002aea:	f3 68 00 08 	st.b	r9[8],r8
80002aee:	ee c8 00 fc 	sub	r8,r7,252
80002af2:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002af6:	e1 b8 00 42 	mfsr	r8,0x108
80002afa:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002afe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b02:	f1 39 00 08 	ld.ub	r9,r8[8]
80002b06:	30 28       	mov	r8,2
80002b08:	f0 09 18 00 	cp.b	r9,r8
80002b0c:	c0 31       	brne	80002b12 <dip204_init+0xa0a>
    return false;
80002b0e:	30 08       	mov	r8,0
80002b10:	c4 38       	rjmp	80002b96 <dip204_init+0xa8e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002b12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b16:	f1 39 00 08 	ld.ub	r9,r8[8]
80002b1a:	30 18       	mov	r8,1
80002b1c:	f0 09 18 00 	cp.b	r9,r8
80002b20:	c0 31       	brne	80002b26 <dip204_init+0xa1e>
    return true;
80002b22:	30 18       	mov	r8,1
80002b24:	c3 98       	rjmp	80002b96 <dip204_init+0xa8e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002b26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b2a:	70 09       	ld.w	r9,r8[0x0]
80002b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b30:	70 18       	ld.w	r8,r8[0x4]
80002b32:	10 39       	cp.w	r9,r8
80002b34:	e0 88 00 1a 	brls	80002b68 <dip204_init+0xa60>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002b38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b3c:	70 08       	ld.w	r8,r8[0x0]
80002b3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b42:	10 39       	cp.w	r9,r8
80002b44:	c1 02       	brcc	80002b64 <dip204_init+0xa5c>
80002b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b4a:	70 18       	ld.w	r8,r8[0x4]
80002b4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b50:	10 39       	cp.w	r9,r8
80002b52:	e0 88 00 09 	brls	80002b64 <dip204_init+0xa5c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b5a:	30 18       	mov	r8,1
80002b5c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b60:	30 18       	mov	r8,1
80002b62:	c1 a8       	rjmp	80002b96 <dip204_init+0xa8e>
    }
    return false;
80002b64:	30 08       	mov	r8,0
80002b66:	c1 88       	rjmp	80002b96 <dip204_init+0xa8e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b6c:	70 08       	ld.w	r8,r8[0x0]
80002b6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b72:	10 39       	cp.w	r9,r8
80002b74:	c0 93       	brcs	80002b86 <dip204_init+0xa7e>
80002b76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b7a:	70 18       	ld.w	r8,r8[0x4]
80002b7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002b80:	10 39       	cp.w	r9,r8
80002b82:	e0 88 00 09 	brls	80002b94 <dip204_init+0xa8c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002b86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b8a:	30 18       	mov	r8,1
80002b8c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002b90:	30 18       	mov	r8,1
80002b92:	c0 28       	rjmp	80002b96 <dip204_init+0xa8e>
    }
    return false;
80002b94:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002b96:	58 08       	cp.w	r8,0
80002b98:	ca b0       	breq	80002aee <dip204_init+0x9e6>
  dip204_wait_busy();
80002b9a:	f0 1f 00 11 	mcall	80002bdc <dip204_init+0xad4>
  // unselect chip
  dip204_unselect();
80002b9e:	f0 1f 00 11 	mcall	80002be0 <dip204_init+0xad8>
}
80002ba2:	29 5d       	sub	sp,-428
80002ba4:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002ba8:	00 00       	add	r0,r0
80002baa:	00 1c       	sub	r12,r0
80002bac:	80 00       	ld.sh	r0,r0[0x0]
80002bae:	41 6c       	lddsp	r12,sp[0x58]
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	31 48       	mov	r8,20
80002bb4:	00 00       	add	r0,r0
80002bb6:	05 50       	ld.sh	r0,--r2
80002bb8:	00 00       	add	r0,r0
80002bba:	05 54       	ld.sh	r4,--r2
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	31 dc       	mov	r12,29
80002bc0:	80 00       	ld.sh	r0,r0[0x0]
80002bc2:	32 64       	mov	r4,38
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	42 e4       	lddsp	r4,sp[0xb8]
80002bc8:	80 00       	ld.sh	r0,r0[0x0]
80002bca:	42 7c       	lddsp	r12,sp[0x9c]
80002bcc:	80 00       	ld.sh	r0,r0[0x0]
80002bce:	20 f0       	sub	r0,15
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	68 1c       	ld.w	r12,r4[0x4]
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	2e e0       	sub	r0,-18
80002bd8:	80 00       	ld.sh	r0,r0[0x0]
80002bda:	2f 10       	sub	r0,-15
80002bdc:	80 00       	ld.sh	r0,r0[0x0]
80002bde:	2f f4       	sub	r4,-1
80002be0:	80 00       	ld.sh	r0,r0[0x0]
80002be2:	2e f8       	sub	r8,-17

80002be4 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002be4:	eb cd 40 80 	pushm	r7,lr
80002be8:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002bea:	f0 1f 00 08 	mcall	80002c08 <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002bee:	e0 6c 00 f8 	mov	r12,248
80002bf2:	f0 1f 00 07 	mcall	80002c0c <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002bf6:	30 cc       	mov	r12,12
80002bf8:	f0 1f 00 05 	mcall	80002c0c <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002bfc:	f0 1f 00 05 	mcall	80002c10 <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002c00:	f0 1f 00 05 	mcall	80002c14 <dip204_hide_cursor+0x30>
}
80002c04:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c08:	80 00       	ld.sh	r0,r0[0x0]
80002c0a:	2e e0       	sub	r0,-18
80002c0c:	80 00       	ld.sh	r0,r0[0x0]
80002c0e:	2f 10       	sub	r0,-15
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	2f f4       	sub	r4,-1
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	2e f8       	sub	r8,-17

80002c18 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002c18:	eb cd 40 80 	pushm	r7,lr
80002c1c:	1a 97       	mov	r7,sp
80002c1e:	20 3d       	sub	sp,12
80002c20:	18 99       	mov	r9,r12
80002c22:	16 98       	mov	r8,r11
80002c24:	ef 69 ff f8 	st.b	r7[-8],r9
80002c28:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002c2c:	30 08       	mov	r8,0
80002c2e:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002c32:	f0 1f 00 18 	mcall	80002c90 <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002c36:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002c3a:	31 48       	mov	r8,20
80002c3c:	f0 09 18 00 	cp.b	r9,r8
80002c40:	e0 8b 00 17 	brhi	80002c6e <dip204_set_cursor_position+0x56>
80002c44:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002c48:	30 48       	mov	r8,4
80002c4a:	f0 09 18 00 	cp.b	r9,r8
80002c4e:	e0 8b 00 10 	brhi	80002c6e <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002c52:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002c56:	20 18       	sub	r8,1
80002c58:	5c 58       	castu.b	r8
80002c5a:	a5 78       	lsl	r8,0x5
80002c5c:	5c 58       	castu.b	r8
80002c5e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002c62:	f2 08 00 08 	add	r8,r9,r8
80002c66:	5c 58       	castu.b	r8
80002c68:	28 18       	sub	r8,-127
80002c6a:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002c6e:	e0 6c 00 f8 	mov	r12,248
80002c72:	f0 1f 00 09 	mcall	80002c94 <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002c76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002c7a:	10 9c       	mov	r12,r8
80002c7c:	f0 1f 00 06 	mcall	80002c94 <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002c80:	f0 1f 00 06 	mcall	80002c98 <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002c84:	f0 1f 00 06 	mcall	80002c9c <dip204_set_cursor_position+0x84>
}
80002c88:	2f dd       	sub	sp,-12
80002c8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c8e:	00 00       	add	r0,r0
80002c90:	80 00       	ld.sh	r0,r0[0x0]
80002c92:	2e e0       	sub	r0,-18
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	2f 10       	sub	r0,-15
80002c98:	80 00       	ld.sh	r0,r0[0x0]
80002c9a:	2f f4       	sub	r4,-1
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	2e f8       	sub	r8,-17

80002ca0 <dip204_clear_display>:


void dip204_clear_display(void)
{
80002ca0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002ca4:	1a 97       	mov	r7,sp
80002ca6:	20 bd       	sub	sp,44
  dip204_select();
80002ca8:	f0 1f 00 57 	mcall	80002e04 <dip204_clear_display+0x164>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002cac:	e0 6c 00 f8 	mov	r12,248
80002cb0:	f0 1f 00 56 	mcall	80002e08 <dip204_clear_display+0x168>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002cb4:	30 1c       	mov	r12,1
80002cb6:	f0 1f 00 55 	mcall	80002e08 <dip204_clear_display+0x168>
  /* Wait for command execution */
  delay_ms(4);
80002cba:	f0 1f 00 55 	mcall	80002e0c <dip204_clear_display+0x16c>
80002cbe:	18 98       	mov	r8,r12
80002cc0:	30 49       	mov	r9,4
80002cc2:	ef 49 ff e4 	st.w	r7[-28],r9
80002cc6:	ef 48 ff e0 	st.w	r7[-32],r8
80002cca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002cce:	ef 48 ff ec 	st.w	r7[-20],r8
80002cd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002cd6:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002cda:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002cde:	30 01       	mov	r1,0
80002ce0:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002ce4:	30 03       	mov	r3,0
80002ce6:	e2 02 02 4a 	mul	r10,r1,r2
80002cea:	e6 00 02 48 	mul	r8,r3,r0
80002cee:	10 0a       	add	r10,r8
80002cf0:	e0 02 06 48 	mulu.d	r8,r0,r2
80002cf4:	12 0a       	add	r10,r9
80002cf6:	14 99       	mov	r9,r10
80002cf8:	e0 6a 03 e7 	mov	r10,999
80002cfc:	30 0b       	mov	r11,0
80002cfe:	f0 0a 00 0a 	add	r10,r8,r10
80002d02:	f2 0b 00 4b 	adc	r11,r9,r11
80002d06:	e0 68 03 e8 	mov	r8,1000
80002d0a:	30 09       	mov	r9,0
80002d0c:	f0 1f 00 41 	mcall	80002e10 <dip204_clear_display+0x170>
80002d10:	14 98       	mov	r8,r10
80002d12:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002d14:	ef 48 ff f4 	st.w	r7[-12],r8
80002d18:	ee c8 00 2c 	sub	r8,r7,44
80002d1c:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d20:	e1 b8 00 42 	mfsr	r8,0x108
80002d24:	10 99       	mov	r9,r8
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d30:	70 09       	ld.w	r9,r8[0x0]
80002d32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d36:	10 09       	add	r9,r8
80002d38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d3c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002d3e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002d42:	30 08       	mov	r8,0
80002d44:	f3 68 00 08 	st.b	r9[8],r8
80002d48:	ee c8 00 2c 	sub	r8,r7,44
80002d4c:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d50:	e1 b8 00 42 	mfsr	r8,0x108
80002d54:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002d58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d5c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d60:	30 28       	mov	r8,2
80002d62:	f0 09 18 00 	cp.b	r9,r8
80002d66:	c0 31       	brne	80002d6c <dip204_clear_display+0xcc>
    return false;
80002d68:	30 08       	mov	r8,0
80002d6a:	c4 38       	rjmp	80002df0 <dip204_clear_display+0x150>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d70:	f1 39 00 08 	ld.ub	r9,r8[8]
80002d74:	30 18       	mov	r8,1
80002d76:	f0 09 18 00 	cp.b	r9,r8
80002d7a:	c0 31       	brne	80002d80 <dip204_clear_display+0xe0>
    return true;
80002d7c:	30 18       	mov	r8,1
80002d7e:	c3 98       	rjmp	80002df0 <dip204_clear_display+0x150>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d84:	70 09       	ld.w	r9,r8[0x0]
80002d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d8a:	70 18       	ld.w	r8,r8[0x4]
80002d8c:	10 39       	cp.w	r9,r8
80002d8e:	e0 88 00 1a 	brls	80002dc2 <dip204_clear_display+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d96:	70 08       	ld.w	r8,r8[0x0]
80002d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d9c:	10 39       	cp.w	r9,r8
80002d9e:	c1 02       	brcc	80002dbe <dip204_clear_display+0x11e>
80002da0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002da4:	70 18       	ld.w	r8,r8[0x4]
80002da6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002daa:	10 39       	cp.w	r9,r8
80002dac:	e0 88 00 09 	brls	80002dbe <dip204_clear_display+0x11e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002db0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002db4:	30 18       	mov	r8,1
80002db6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dba:	30 18       	mov	r8,1
80002dbc:	c1 a8       	rjmp	80002df0 <dip204_clear_display+0x150>
    }
    return false;
80002dbe:	30 08       	mov	r8,0
80002dc0:	c1 88       	rjmp	80002df0 <dip204_clear_display+0x150>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dc6:	70 08       	ld.w	r8,r8[0x0]
80002dc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dcc:	10 39       	cp.w	r9,r8
80002dce:	c0 93       	brcs	80002de0 <dip204_clear_display+0x140>
80002dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002dd4:	70 18       	ld.w	r8,r8[0x4]
80002dd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002dda:	10 39       	cp.w	r9,r8
80002ddc:	e0 88 00 09 	brls	80002dee <dip204_clear_display+0x14e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002de0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002de4:	30 18       	mov	r8,1
80002de6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002dea:	30 18       	mov	r8,1
80002dec:	c0 28       	rjmp	80002df0 <dip204_clear_display+0x150>
    }
    return false;
80002dee:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002df0:	58 08       	cp.w	r8,0
80002df2:	ca b0       	breq	80002d48 <dip204_clear_display+0xa8>
  dip204_wait_busy();
80002df4:	f0 1f 00 08 	mcall	80002e14 <dip204_clear_display+0x174>
  dip204_unselect();
80002df8:	f0 1f 00 08 	mcall	80002e18 <dip204_clear_display+0x178>
}
80002dfc:	2f 5d       	sub	sp,-44
80002dfe:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002e02:	00 00       	add	r0,r0
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	2e e0       	sub	r0,-18
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	2f 10       	sub	r0,-15
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	20 f0       	sub	r0,15
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	68 1c       	ld.w	r12,r4[0x4]
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	2f f4       	sub	r4,-1
80002e18:	80 00       	ld.sh	r0,r0[0x0]
80002e1a:	2e f8       	sub	r8,-17

80002e1c <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002e1c:	eb cd 40 80 	pushm	r7,lr
80002e20:	1a 97       	mov	r7,sp
80002e22:	20 9d       	sub	sp,36
80002e24:	ee c9 ff f8 	sub	r9,r7,-8
80002e28:	ef 4c ff dc 	st.w	r7[-36],r12
  va_list arg;
  char string[21];
  unsigned char i=0;
80002e2c:	30 08       	mov	r8,0
80002e2e:	ef 68 ff ff 	st.b	r7[-1],r8

  va_start(arg, format);
80002e32:	f2 c8 00 00 	sub	r8,r9,0
80002e36:	ef 48 ff f8 	st.w	r7[-8],r8
  i = vsprintf(string, format, arg);
80002e3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e3e:	ee c8 00 20 	sub	r8,r7,32
80002e42:	12 9a       	mov	r10,r9
80002e44:	ee fb ff dc 	ld.w	r11,r7[-36]
80002e48:	10 9c       	mov	r12,r8
80002e4a:	f0 1f 00 21 	mcall	80002ecc <dip204_printf_string+0xb0>
80002e4e:	18 98       	mov	r8,r12
80002e50:	ef 68 ff ff 	st.b	r7[-1],r8
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002e54:	c0 d8       	rjmp	80002e6e <dip204_printf_string+0x52>
80002e56:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e5a:	ee 08 00 09 	add	r9,r7,r8
80002e5e:	30 08       	mov	r8,0
80002e60:	f3 68 ff e0 	st.b	r9[-32],r8
80002e64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e68:	2f f8       	sub	r8,-1
80002e6a:	ef 68 ff ff 	st.b	r7[-1],r8
80002e6e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002e72:	31 38       	mov	r8,19
80002e74:	f0 09 18 00 	cp.b	r9,r8
80002e78:	fe 98 ff ef 	brls	80002e56 <dip204_printf_string+0x3a>
  va_end(arg);
  dip204_select();
80002e7c:	f0 1f 00 15 	mcall	80002ed0 <dip204_printf_string+0xb4>
  /* for all chars in string */
  i = 0;
80002e80:	30 08       	mov	r8,0
80002e82:	ef 68 ff ff 	st.b	r7[-1],r8
  while(string[i]!='\0')
80002e86:	c1 58       	rjmp	80002eb0 <dip204_printf_string+0x94>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002e88:	e0 6c 00 fa 	mov	r12,250
80002e8c:	f0 1f 00 12 	mcall	80002ed4 <dip204_printf_string+0xb8>
    /* Send byte */
    dip204_write_byte(string[i]);
80002e90:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002e94:	ee 08 00 08 	add	r8,r7,r8
80002e98:	f1 38 ff e0 	ld.ub	r8,r8[-32]
80002e9c:	10 9c       	mov	r12,r8
80002e9e:	f0 1f 00 0e 	mcall	80002ed4 <dip204_printf_string+0xb8>
    /* go to next char */
    i++;
80002ea2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ea6:	2f f8       	sub	r8,-1
80002ea8:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002eac:	f0 1f 00 0b 	mcall	80002ed8 <dip204_printf_string+0xbc>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002eb0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002eb4:	ee 08 00 08 	add	r8,r7,r8
80002eb8:	f1 38 ff e0 	ld.ub	r8,r8[-32]
80002ebc:	58 08       	cp.w	r8,0
80002ebe:	ce 51       	brne	80002e88 <dip204_printf_string+0x6c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002ec0:	f0 1f 00 07 	mcall	80002edc <dip204_printf_string+0xc0>
}
80002ec4:	2f 7d       	sub	sp,-36
80002ec6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eca:	00 00       	add	r0,r0
80002ecc:	80 00       	ld.sh	r0,r0[0x0]
80002ece:	74 78       	ld.w	r8,r10[0x1c]
80002ed0:	80 00       	ld.sh	r0,r0[0x0]
80002ed2:	2e e0       	sub	r0,-18
80002ed4:	80 00       	ld.sh	r0,r0[0x0]
80002ed6:	2f 10       	sub	r0,-15
80002ed8:	80 00       	ld.sh	r0,r0[0x0]
80002eda:	2f f4       	sub	r4,-1
80002edc:	80 00       	ld.sh	r0,r0[0x0]
80002ede:	2e f8       	sub	r8,-17

80002ee0 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002ee0:	eb cd 40 80 	pushm	r7,lr
80002ee4:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002ee6:	30 2b       	mov	r11,2
80002ee8:	fe 7c 28 00 	mov	r12,-55296
80002eec:	f0 1f 00 02 	mcall	80002ef4 <dip204_select+0x14>
}
80002ef0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ef4:	80 00       	ld.sh	r0,r0[0x0]
80002ef6:	34 0a       	mov	r10,64

80002ef8 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002ef8:	eb cd 40 80 	pushm	r7,lr
80002efc:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002efe:	30 2b       	mov	r11,2
80002f00:	fe 7c 28 00 	mov	r12,-55296
80002f04:	f0 1f 00 02 	mcall	80002f0c <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002f08:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f0c:	80 00       	ld.sh	r0,r0[0x0]
80002f0e:	34 a2       	mov	r2,74

80002f10 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002f10:	eb cd 40 80 	pushm	r7,lr
80002f14:	1a 97       	mov	r7,sp
80002f16:	20 3d       	sub	sp,12
80002f18:	18 98       	mov	r8,r12
80002f1a:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002f1e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002f22:	f0 c8 00 f8 	sub	r8,r8,248
80002f26:	58 68       	cp.w	r8,6
80002f28:	e0 8b 00 10 	brhi	80002f48 <dip204_write_byte+0x38>
80002f2c:	30 19       	mov	r9,1
80002f2e:	f2 08 09 48 	lsl	r8,r9,r8
80002f32:	e2 18 00 55 	andl	r8,0x55,COH
80002f36:	c0 90       	breq	80002f48 <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002f38:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002f3c:	10 9b       	mov	r11,r8
80002f3e:	fe 7c 28 00 	mov	r12,-55296
80002f42:	f0 1f 00 15 	mcall	80002f94 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002f46:	c2 48       	rjmp	80002f8e <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002f48:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002f4c:	ef 48 ff fc 	st.w	r7[-4],r8
80002f50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f54:	5c 98       	brev	r8
80002f56:	ef 48 ff fc 	st.w	r7[-4],r8
80002f5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f5e:	b9 88       	lsr	r8,0x18
80002f60:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002f64:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f68:	e2 18 00 f0 	andl	r8,0xf0,COH
80002f6c:	10 9b       	mov	r11,r8
80002f6e:	fe 7c 28 00 	mov	r12,-55296
80002f72:	f0 1f 00 09 	mcall	80002f94 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002f76:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002f7a:	a5 68       	lsl	r8,0x4
80002f7c:	5c 88       	casts.h	r8
80002f7e:	5c 78       	castu.h	r8
80002f80:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002f84:	10 9b       	mov	r11,r8
80002f86:	fe 7c 28 00 	mov	r12,-55296
80002f8a:	f0 1f 00 03 	mcall	80002f94 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002f8e:	2f dd       	sub	sp,-12
80002f90:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f94:	80 00       	ld.sh	r0,r0[0x0]
80002f96:	36 aa       	mov	r10,106

80002f98 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002f98:	eb cd 40 80 	pushm	r7,lr
80002f9c:	1a 97       	mov	r7,sp
80002f9e:	20 3d       	sub	sp,12
80002fa0:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80002fa4:	30 08       	mov	r8,0
80002fa6:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002faa:	30 0b       	mov	r11,0
80002fac:	fe 7c 28 00 	mov	r12,-55296
80002fb0:	f0 1f 00 0f 	mcall	80002fec <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002fb4:	ee c8 00 06 	sub	r8,r7,6
80002fb8:	10 9b       	mov	r11,r8
80002fba:	fe 7c 28 00 	mov	r12,-55296
80002fbe:	f0 1f 00 0d 	mcall	80002ff0 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002fc2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002fc6:	5c 58       	castu.b	r8
80002fc8:	ef 48 ff fc 	st.w	r7[-4],r8
80002fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fd0:	5c 98       	brev	r8
80002fd2:	ef 48 ff fc 	st.w	r7[-4],r8
80002fd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fda:	b9 88       	lsr	r8,0x18
80002fdc:	5c 58       	castu.b	r8
80002fde:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002fe2:	b2 88       	st.b	r9[0x0],r8
}
80002fe4:	2f dd       	sub	sp,-12
80002fe6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fea:	00 00       	add	r0,r0
80002fec:	80 00       	ld.sh	r0,r0[0x0]
80002fee:	36 aa       	mov	r10,106
80002ff0:	80 00       	ld.sh	r0,r0[0x0]
80002ff2:	37 02       	mov	r2,112

80002ff4 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002ff4:	eb cd 40 80 	pushm	r7,lr
80002ff8:	1a 97       	mov	r7,sp
80002ffa:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002ffc:	30 08       	mov	r8,0
80002ffe:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80003002:	e0 6c 00 fc 	mov	r12,252
80003006:	f0 1f 00 09 	mcall	80003028 <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
8000300a:	ee c8 00 01 	sub	r8,r7,1
8000300e:	10 9c       	mov	r12,r8
80003010:	f0 1f 00 07 	mcall	8000302c <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80003014:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003018:	10 99       	mov	r9,r8
8000301a:	30 08       	mov	r8,0
8000301c:	f0 09 18 00 	cp.b	r9,r8
80003020:	cf 55       	brlt	8000300a <dip204_wait_busy+0x16>
}
80003022:	2f fd       	sub	sp,-4
80003024:	e3 cd 80 80 	ldm	sp++,r7,pc
80003028:	80 00       	ld.sh	r0,r0[0x0]
8000302a:	2f 10       	sub	r0,-15
8000302c:	80 00       	ld.sh	r0,r0[0x0]
8000302e:	2f 98       	sub	r8,-7

80003030 <adc_configure>:
 * If not called, ADC channels will have side effects
 *
 * \param *adc Base address of the ADC
 */
void adc_configure(volatile avr32_adc_t *adc)
{
80003030:	eb cd 40 80 	pushm	r7,lr
80003034:	1a 97       	mov	r7,sp
80003036:	20 1d       	sub	sp,4
80003038:	ef 4c ff fc 	st.w	r7[-4],r12
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
8000303c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003040:	70 18       	ld.w	r8,r8[0x4]
80003042:	10 99       	mov	r9,r8
80003044:	ea 19 0f 00 	orh	r9,0xf00
80003048:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000304c:	91 19       	st.w	r8[0x4],r9

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
8000304e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003052:	70 18       	ld.w	r8,r8[0x4]
80003054:	10 99       	mov	r9,r8
80003056:	ea 19 00 1f 	orh	r9,0x1f
8000305a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000305e:	91 19       	st.w	r8[0x4],r9
}
80003060:	2f fd       	sub	sp,-4
80003062:	e3 cd 80 80 	ldm	sp++,r7,pc

80003066 <adc_start>:

/** \brief Start analog to digital conversion
 * \param *adc Base address of the ADC
 */
void adc_start(volatile avr32_adc_t *adc)
{
80003066:	eb cd 40 80 	pushm	r7,lr
8000306a:	1a 97       	mov	r7,sp
8000306c:	20 1d       	sub	sp,4
8000306e:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
80003072:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003076:	30 29       	mov	r9,2
80003078:	91 09       	st.w	r8[0x0],r9
}
8000307a:	2f fd       	sub	sp,-4
8000307c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003080 <adc_enable>:
 *
 * \param *adc Base address of the ADC
 * \param  channel   channel to enable (0 to 7)
 */
void adc_enable(volatile avr32_adc_t *adc, uint16_t channel)
{
80003080:	eb cd 40 80 	pushm	r7,lr
80003084:	1a 97       	mov	r7,sp
80003086:	20 2d       	sub	sp,8
80003088:	ef 4c ff fc 	st.w	r7[-4],r12
8000308c:	16 98       	mov	r8,r11
8000308e:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80003092:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003096:	30 19       	mov	r9,1
80003098:	f2 08 09 48 	lsl	r8,r9,r8
8000309c:	10 99       	mov	r9,r8
8000309e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030a2:	91 49       	st.w	r8[0x10],r9
}
800030a4:	2f ed       	sub	sp,-8
800030a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800030aa <adc_check_eoc>:
 * \param  channel   channel to check (0 to 7)
 * \return bool      true if conversion not running
 *                   false if conversion running
 */
bool adc_check_eoc(volatile avr32_adc_t *adc, uint16_t channel)
{
800030aa:	eb cd 40 80 	pushm	r7,lr
800030ae:	1a 97       	mov	r7,sp
800030b0:	20 2d       	sub	sp,8
800030b2:	ef 4c ff fc 	st.w	r7[-4],r12
800030b6:	16 98       	mov	r8,r11
800030b8:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
800030bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030c0:	70 79       	ld.w	r9,r8[0x1c]
800030c2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800030c6:	30 1a       	mov	r10,1
800030c8:	f4 08 09 48 	lsl	r8,r10,r8
800030cc:	f3 e8 00 08 	and	r8,r9,r8
800030d0:	5f 18       	srne	r8
800030d2:	5c 58       	castu.b	r8
}
800030d4:	10 9c       	mov	r12,r8
800030d6:	2f ed       	sub	sp,-8
800030d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800030dc <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
800030dc:	eb cd 40 80 	pushm	r7,lr
800030e0:	1a 97       	mov	r7,sp
800030e2:	20 2d       	sub	sp,8
800030e4:	ef 4c ff fc 	st.w	r7[-4],r12
800030e8:	16 98       	mov	r8,r11
800030ea:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
800030ee:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800030f2:	10 9b       	mov	r11,r8
800030f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800030f8:	f0 1f 00 0b 	mcall	80003124 <adc_get_value+0x48>
800030fc:	18 98       	mov	r8,r12
800030fe:	ec 18 00 01 	eorl	r8,0x1
80003102:	5c 58       	castu.b	r8
80003104:	cf 51       	brne	800030ee <adc_get_value+0x12>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80003106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000310a:	f0 c9 ff d0 	sub	r9,r8,-48
8000310e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80003112:	a3 68       	lsl	r8,0x2
80003114:	f2 08 00 08 	add	r8,r9,r8
80003118:	70 08       	ld.w	r8,r8[0x0]
}
8000311a:	10 9c       	mov	r12,r8
8000311c:	2f ed       	sub	sp,-8
8000311e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003122:	00 00       	add	r0,r0
80003124:	80 00       	ld.sh	r0,r0[0x0]
80003126:	30 aa       	mov	r10,10

80003128 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003128:	eb cd 40 80 	pushm	r7,lr
8000312c:	1a 97       	mov	r7,sp
8000312e:	20 1d       	sub	sp,4
80003130:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003138:	e6 18 00 01 	andh	r8,0x1,COH
8000313c:	5f 08       	sreq	r8
8000313e:	5c 58       	castu.b	r8
}
80003140:	10 9c       	mov	r12,r8
80003142:	2f fd       	sub	sp,-4
80003144:	e3 cd 80 80 	ldm	sp++,r7,pc

80003148 <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
80003148:	eb cd 40 80 	pushm	r7,lr
8000314c:	1a 97       	mov	r7,sp
8000314e:	20 3d       	sub	sp,12
80003150:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003154:	fe 78 30 00 	mov	r8,-53248
80003158:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000315c:	e1 b8 00 00 	mfsr	r8,0x0
80003160:	10 9c       	mov	r12,r8
80003162:	f0 1f 00 1e 	mcall	800031d8 <pwm_init+0x90>
80003166:	18 98       	mov	r8,r12
80003168:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
8000316c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003170:	58 08       	cp.w	r8,0
80003172:	c0 31       	brne	80003178 <pwm_init+0x30>
    return PWM_INVALID_INPUT;
80003174:	30 18       	mov	r8,1
80003176:	c2 c8       	rjmp	800031ce <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003178:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000317c:	30 08       	mov	r8,0
8000317e:	f0 09 18 00 	cp.b	r9,r8
80003182:	c0 20       	breq	80003186 <pwm_init+0x3e>
80003184:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003186:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000318a:	37 f9       	mov	r9,127
8000318c:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000318e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003192:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003194:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003198:	30 08       	mov	r8,0
8000319a:	f0 09 18 00 	cp.b	r9,r8
8000319e:	c0 20       	breq	800031a2 <pwm_init+0x5a>
800031a0:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800031a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031a6:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
800031a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031ac:	70 08       	ld.w	r8,r8[0x0]
800031ae:	b1 68       	lsl	r8,0x10
800031b0:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
800031b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031b6:	70 38       	ld.w	r8,r8[0xc]
800031b8:	a9 68       	lsl	r8,0x8
800031ba:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
800031bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031c0:	70 28       	ld.w	r8,r8[0x8]
800031c2:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
800031c4:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
800031c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031ca:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
800031cc:	30 08       	mov	r8,0
}
800031ce:	10 9c       	mov	r12,r8
800031d0:	2f dd       	sub	sp,-12
800031d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800031d6:	00 00       	add	r0,r0
800031d8:	80 00       	ld.sh	r0,r0[0x0]
800031da:	31 28       	mov	r8,18

800031dc <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
800031dc:	eb cd 40 80 	pushm	r7,lr
800031e0:	1a 97       	mov	r7,sp
800031e2:	20 3d       	sub	sp,12
800031e4:	ef 4c ff f8 	st.w	r7[-8],r12
800031e8:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
800031ec:	fe 78 30 00 	mov	r8,-53248
800031f0:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
800031f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031f8:	58 08       	cp.w	r8,0
800031fa:	c0 31       	brne	80003200 <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
800031fc:	30 18       	mov	r8,1
800031fe:	c2 f8       	rjmp	8000325c <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003200:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003204:	58 68       	cp.w	r8,6
80003206:	e0 88 00 04 	brls	8000320e <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
8000320a:	30 18       	mov	r8,1
8000320c:	c2 88       	rjmp	8000325c <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000320e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003212:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003216:	72 09       	ld.w	r9,r9[0x0]
80003218:	ee fa ff fc 	ld.w	r10,r7[-4]
8000321c:	2f 08       	sub	r8,-16
8000321e:	a5 78       	lsl	r8,0x5
80003220:	f4 08 00 08 	add	r8,r10,r8
80003224:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
80003226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000322a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000322e:	72 19       	ld.w	r9,r9[0x4]
80003230:	ee fa ff fc 	ld.w	r10,r7[-4]
80003234:	a5 78       	lsl	r8,0x5
80003236:	f4 08 00 08 	add	r8,r10,r8
8000323a:	f0 c8 fd fc 	sub	r8,r8,-516
8000323e:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
80003240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003244:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003248:	72 29       	ld.w	r9,r9[0x8]
8000324a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000324e:	a5 78       	lsl	r8,0x5
80003250:	f4 08 00 08 	add	r8,r10,r8
80003254:	f0 c8 fd f8 	sub	r8,r8,-520
80003258:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
8000325a:	30 08       	mov	r8,0
}
8000325c:	10 9c       	mov	r12,r8
8000325e:	2f dd       	sub	sp,-12
80003260:	e3 cd 80 80 	ldm	sp++,r7,pc

80003264 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
80003264:	eb cd 40 80 	pushm	r7,lr
80003268:	1a 97       	mov	r7,sp
8000326a:	20 1d       	sub	sp,4
8000326c:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003270:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003274:	e0 18 ff 80 	andl	r8,0xff80
80003278:	c0 30       	breq	8000327e <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
8000327a:	30 18       	mov	r8,1
8000327c:	c0 78       	rjmp	8000328a <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000327e:	fe 78 30 00 	mov	r8,-53248
80003282:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003286:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
80003288:	30 08       	mov	r8,0
}
8000328a:	10 9c       	mov	r12,r8
8000328c:	2f fd       	sub	sp,-4
8000328e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003292 <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
80003292:	eb cd 40 80 	pushm	r7,lr
80003296:	1a 97       	mov	r7,sp
80003298:	20 3d       	sub	sp,12
8000329a:	ef 4c ff f8 	st.w	r7[-8],r12
8000329e:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800032a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800032a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032aa:	f2 08 00 08 	add	r8,r9,r8
800032ae:	20 18       	sub	r8,1
800032b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800032b4:	f0 09 0d 08 	divu	r8,r8,r9
800032b8:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
800032bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032c0:	58 08       	cp.w	r8,0
800032c2:	c0 70       	breq	800032d0 <getBaudDiv+0x3e>
800032c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032c8:	e0 48 00 ff 	cp.w	r8,255
800032cc:	e0 88 00 04 	brls	800032d4 <getBaudDiv+0x42>
		return -1;
800032d0:	3f f8       	mov	r8,-1
800032d2:	c0 48       	rjmp	800032da <getBaudDiv+0x48>
	}

	return baudDiv;
800032d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032d8:	5c 88       	casts.h	r8
}
800032da:	10 9c       	mov	r12,r8
800032dc:	2f dd       	sub	sp,-12
800032de:	e3 cd 80 80 	ldm	sp++,r7,pc

800032e2 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
800032e2:	eb cd 40 80 	pushm	r7,lr
800032e6:	1a 97       	mov	r7,sp
800032e8:	20 3d       	sub	sp,12
800032ea:	ef 4c ff f8 	st.w	r7[-8],r12
800032ee:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800032f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032f6:	f1 39 00 0d 	ld.ub	r9,r8[13]
800032fa:	30 18       	mov	r8,1
800032fc:	f0 09 18 00 	cp.b	r9,r8
80003300:	e0 88 00 04 	brls	80003308 <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
80003304:	30 28       	mov	r8,2
80003306:	c3 48       	rjmp	8000336e <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003308:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000330c:	e0 69 00 80 	mov	r9,128
80003310:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80003312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003316:	70 18       	ld.w	r8,r8[0x4]
80003318:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
8000331c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003320:	30 19       	mov	r9,1
80003322:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003326:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000332a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000332e:	f1 38 00 0d 	ld.ub	r8,r8[13]
80003332:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003336:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000333a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000333e:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80003342:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
80003346:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000334a:	30 09       	mov	r9,0
8000334c:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80003350:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003354:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003358:	30 f9       	mov	r9,15
8000335a:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
8000335e:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80003362:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003366:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000336a:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
8000336c:	30 08       	mov	r8,0
}
8000336e:	10 9c       	mov	r12,r8
80003370:	2f dd       	sub	sp,-12
80003372:	e3 cd 80 80 	ldm	sp++,r7,pc

80003376 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003376:	eb cd 40 80 	pushm	r7,lr
8000337a:	1a 97       	mov	r7,sp
8000337c:	20 5d       	sub	sp,20
8000337e:	ef 4c ff f8 	st.w	r7[-8],r12
80003382:	12 98       	mov	r8,r9
80003384:	16 99       	mov	r9,r11
80003386:	ef 69 ff f4 	st.b	r7[-12],r9
8000338a:	14 99       	mov	r9,r10
8000338c:	ef 69 ff f0 	st.b	r7[-16],r9
80003390:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003394:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003398:	30 18       	mov	r8,1
8000339a:	f0 09 18 00 	cp.b	r9,r8
8000339e:	e0 8b 00 09 	brhi	800033b0 <spi_selectionMode+0x3a>
800033a2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800033a6:	30 18       	mov	r8,1
800033a8:	f0 09 18 00 	cp.b	r9,r8
800033ac:	e0 88 00 04 	brls	800033b4 <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
800033b0:	30 28       	mov	r8,2
800033b2:	c2 88       	rjmp	80003402 <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
800033b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033b8:	70 18       	ld.w	r8,r8[0x4]
800033ba:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
800033be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800033c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800033c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800033ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033ce:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800033d2:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800033d6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800033da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800033de:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800033e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033e6:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
800033ea:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
800033ee:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800033f2:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
800033f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800033fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033fe:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003400:	30 08       	mov	r8,0
}
80003402:	10 9c       	mov	r12,r8
80003404:	2f bd       	sub	sp,-20
80003406:	e3 cd 80 80 	ldm	sp++,r7,pc

8000340a <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000340a:	eb cd 40 80 	pushm	r7,lr
8000340e:	1a 97       	mov	r7,sp
80003410:	20 2d       	sub	sp,8
80003412:	ef 4c ff fc 	st.w	r7[-4],r12
80003416:	16 98       	mov	r8,r11
80003418:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
8000341c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003420:	70 18       	ld.w	r8,r8[0x4]
80003422:	10 99       	mov	r9,r8
80003424:	ea 19 00 0f 	orh	r9,0xf
80003428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000342c:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000342e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003432:	70 18       	ld.w	r8,r8[0x4]
80003434:	e2 18 00 04 	andl	r8,0x4,COH
80003438:	c1 90       	breq	8000346a <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
8000343a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000343e:	30 e8       	mov	r8,14
80003440:	f0 09 18 00 	cp.b	r9,r8
80003444:	e0 88 00 04 	brls	8000344c <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
80003448:	30 28       	mov	r8,2
8000344a:	c2 88       	rjmp	8000349a <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000344c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003450:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
80003452:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003456:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003458:	ea 18 ff f0 	orh	r8,0xfff0
8000345c:	e8 18 ff ff 	orl	r8,0xffff
80003460:	10 69       	and	r9,r8
80003462:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003466:	91 19       	st.w	r8[0x4],r9
80003468:	c1 88       	rjmp	80003498 <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000346a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000346e:	30 38       	mov	r8,3
80003470:	f0 09 18 00 	cp.b	r9,r8
80003474:	e0 88 00 04 	brls	8000347c <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
80003478:	30 28       	mov	r8,2
8000347a:	c1 08       	rjmp	8000349a <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000347c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003480:	70 19       	ld.w	r9,r8[0x4]
80003482:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003486:	2f 08       	sub	r8,-16
80003488:	30 1a       	mov	r10,1
8000348a:	f4 08 09 48 	lsl	r8,r10,r8
8000348e:	5c d8       	com	r8
80003490:	10 69       	and	r9,r8
80003492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003496:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
80003498:	30 08       	mov	r8,0
}
8000349a:	10 9c       	mov	r12,r8
8000349c:	2f ed       	sub	sp,-8
8000349e:	e3 cd 80 80 	ldm	sp++,r7,pc

800034a2 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800034a2:	eb cd 40 80 	pushm	r7,lr
800034a6:	1a 97       	mov	r7,sp
800034a8:	20 3d       	sub	sp,12
800034aa:	ef 4c ff f8 	st.w	r7[-8],r12
800034ae:	16 98       	mov	r8,r11
800034b0:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
800034b4:	e0 68 3a 98 	mov	r8,15000
800034b8:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800034bc:	c0 f8       	rjmp	800034da <spi_unselectChip+0x38>
		if (!timeout--) {
800034be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034c2:	58 08       	cp.w	r8,0
800034c4:	5f 08       	sreq	r8
800034c6:	5c 58       	castu.b	r8
800034c8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800034cc:	20 19       	sub	r9,1
800034ce:	ef 49 ff fc 	st.w	r7[-4],r9
800034d2:	58 08       	cp.w	r8,0
800034d4:	c0 30       	breq	800034da <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
800034d6:	30 18       	mov	r8,1
800034d8:	c1 68       	rjmp	80003504 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800034da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034de:	70 48       	ld.w	r8,r8[0x10]
800034e0:	e2 18 02 00 	andl	r8,0x200,COH
800034e4:	ce d0       	breq	800034be <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800034e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034ea:	70 18       	ld.w	r8,r8[0x4]
800034ec:	10 99       	mov	r9,r8
800034ee:	ea 19 00 0f 	orh	r9,0xf
800034f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034f6:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800034f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034fc:	fc 19 01 00 	movh	r9,0x100
80003500:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
80003502:	30 08       	mov	r8,0
}
80003504:	10 9c       	mov	r12,r8
80003506:	2f dd       	sub	sp,-12
80003508:	e3 cd 80 80 	ldm	sp++,r7,pc

8000350c <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
8000350c:	eb cd 40 80 	pushm	r7,lr
80003510:	1a 97       	mov	r7,sp
80003512:	20 5d       	sub	sp,20
80003514:	ef 4c ff f4 	st.w	r7[-12],r12
80003518:	ef 4b ff f0 	st.w	r7[-16],r11
8000351c:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003520:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003524:	f1 39 00 0c 	ld.ub	r9,r8[12]
80003528:	30 38       	mov	r8,3
8000352a:	f0 09 18 00 	cp.b	r9,r8
8000352e:	e0 8b 00 1d 	brhi	80003568 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
80003532:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003536:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000353a:	30 18       	mov	r8,1
8000353c:	f0 09 18 00 	cp.b	r9,r8
80003540:	e0 8b 00 14 	brhi	80003568 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003544:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003548:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000354c:	30 78       	mov	r8,7
8000354e:	f0 09 18 00 	cp.b	r9,r8
80003552:	e0 88 00 0b 	brls	80003568 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003556:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000355a:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000355e:	31 08       	mov	r8,16
80003560:	f0 09 18 00 	cp.b	r9,r8
80003564:	e0 88 00 04 	brls	8000356c <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
80003568:	30 28       	mov	r8,2
8000356a:	c8 d8       	rjmp	80003684 <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
8000356c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003570:	70 18       	ld.w	r8,r8[0x4]
80003572:	ee fb ff ec 	ld.w	r11,r7[-20]
80003576:	10 9c       	mov	r12,r8
80003578:	f0 1f 00 45 	mcall	8000368c <spi_setupChipReg+0x180>
8000357c:	18 98       	mov	r8,r12
8000357e:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
80003582:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003586:	58 08       	cp.w	r8,0
80003588:	c0 34       	brge	8000358e <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
8000358a:	30 28       	mov	r8,2
8000358c:	c7 c8       	rjmp	80003684 <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000358e:	30 08       	mov	r8,0
80003590:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003594:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003598:	f1 38 00 0c 	ld.ub	r8,r8[12]
8000359c:	a1 98       	lsr	r8,0x1
8000359e:	5c 58       	castu.b	r8
800035a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800035a4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035ac:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800035b0:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800035b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035b8:	f1 38 00 0c 	ld.ub	r8,r8[12]
800035bc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800035c0:	5f 08       	sreq	r8
800035c2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035ca:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800035ce:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800035d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035d6:	f1 38 00 0b 	ld.ub	r8,r8[11]
800035da:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800035de:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035e6:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
800035ea:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
800035ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035f2:	f1 38 00 08 	ld.ub	r8,r8[8]
800035f6:	20 88       	sub	r8,8
800035f8:	5c 58       	castu.b	r8
800035fa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800035fe:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003606:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
8000360a:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000360e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003612:	5c 58       	castu.b	r8
80003614:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003618:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000361c:	f1 38 00 09 	ld.ub	r8,r8[9]
80003620:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003624:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003628:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000362c:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
80003630:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003634:	11 88       	ld.ub	r8,r8[0x0]
80003636:	58 18       	cp.w	r8,1
80003638:	c1 10       	breq	8000365a <spi_setupChipReg+0x14e>
8000363a:	e0 89 00 05 	brgt	80003644 <spi_setupChipReg+0x138>
8000363e:	58 08       	cp.w	r8,0
80003640:	c0 70       	breq	8000364e <spi_setupChipReg+0x142>
80003642:	c1 e8       	rjmp	8000367e <spi_setupChipReg+0x172>
80003644:	58 28       	cp.w	r8,2
80003646:	c1 00       	breq	80003666 <spi_setupChipReg+0x15a>
80003648:	58 38       	cp.w	r8,3
8000364a:	c1 40       	breq	80003672 <spi_setupChipReg+0x166>
8000364c:	c1 98       	rjmp	8000367e <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
8000364e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003652:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003656:	91 c9       	st.w	r8[0x30],r9
		break;
80003658:	c1 58       	rjmp	80003682 <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000365a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000365e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003662:	91 d9       	st.w	r8[0x34],r9
		break;
80003664:	c0 f8       	rjmp	80003682 <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003666:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000366a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000366e:	91 e9       	st.w	r8[0x38],r9
		break;
80003670:	c0 98       	rjmp	80003682 <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003672:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003676:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000367a:	91 f9       	st.w	r8[0x3c],r9
		break;
8000367c:	c0 38       	rjmp	80003682 <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
8000367e:	30 28       	mov	r8,2
80003680:	c0 28       	rjmp	80003684 <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
80003682:	30 08       	mov	r8,0
}
80003684:	10 9c       	mov	r12,r8
80003686:	2f bd       	sub	sp,-20
80003688:	e3 cd 80 80 	ldm	sp++,r7,pc
8000368c:	80 00       	ld.sh	r0,r0[0x0]
8000368e:	32 92       	mov	r2,41

80003690 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80003690:	eb cd 40 80 	pushm	r7,lr
80003694:	1a 97       	mov	r7,sp
80003696:	20 1d       	sub	sp,4
80003698:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000369c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036a0:	30 19       	mov	r9,1
800036a2:	91 09       	st.w	r8[0x0],r9
}
800036a4:	2f fd       	sub	sp,-4
800036a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800036aa <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800036aa:	eb cd 40 80 	pushm	r7,lr
800036ae:	1a 97       	mov	r7,sp
800036b0:	20 3d       	sub	sp,12
800036b2:	ef 4c ff f8 	st.w	r7[-8],r12
800036b6:	16 98       	mov	r8,r11
800036b8:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
800036bc:	e0 68 3a 98 	mov	r8,15000
800036c0:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800036c4:	c0 f8       	rjmp	800036e2 <spi_write+0x38>
		if (!timeout--) {
800036c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036ca:	58 08       	cp.w	r8,0
800036cc:	5f 08       	sreq	r8
800036ce:	5c 58       	castu.b	r8
800036d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800036d4:	20 19       	sub	r9,1
800036d6:	ef 49 ff fc 	st.w	r7[-4],r9
800036da:	58 08       	cp.w	r8,0
800036dc:	c0 30       	breq	800036e2 <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
800036de:	30 18       	mov	r8,1
800036e0:	c0 d8       	rjmp	800036fa <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800036e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036e6:	70 48       	ld.w	r8,r8[0x10]
800036e8:	e2 18 00 02 	andl	r8,0x2,COH
800036ec:	ce d0       	breq	800036c6 <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800036ee:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800036f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036f6:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
800036f8:	30 08       	mov	r8,0
}
800036fa:	10 9c       	mov	r12,r8
800036fc:	2f dd       	sub	sp,-12
800036fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80003702 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003702:	eb cd 40 80 	pushm	r7,lr
80003706:	1a 97       	mov	r7,sp
80003708:	20 3d       	sub	sp,12
8000370a:	ef 4c ff f8 	st.w	r7[-8],r12
8000370e:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
80003712:	e0 68 3a 98 	mov	r8,15000
80003716:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
8000371a:	c0 f8       	rjmp	80003738 <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
8000371c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003720:	58 08       	cp.w	r8,0
80003722:	5f 08       	sreq	r8
80003724:	5c 58       	castu.b	r8
80003726:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000372a:	20 19       	sub	r9,1
8000372c:	ef 49 ff fc 	st.w	r7[-4],r9
80003730:	58 08       	cp.w	r8,0
80003732:	c0 30       	breq	80003738 <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
80003734:	30 18       	mov	r8,1
80003736:	c1 18       	rjmp	80003758 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003738:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000373c:	70 48       	ld.w	r8,r8[0x10]
8000373e:	e2 18 02 01 	andl	r8,0x201,COH
80003742:	e0 48 02 01 	cp.w	r8,513
80003746:	ce b1       	brne	8000371c <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000374c:	70 28       	ld.w	r8,r8[0x8]
8000374e:	5c 88       	casts.h	r8
80003750:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003754:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
80003756:	30 08       	mov	r8,0
}
80003758:	10 9c       	mov	r12,r8
8000375a:	2f dd       	sub	sp,-12
8000375c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003760 <sysclk_get_main_hz>:
80003760:	eb cd 40 80 	pushm	r7,lr
80003764:	1a 97       	mov	r7,sp
80003766:	e0 78 c2 00 	mov	r8,115200
8000376a:	10 9c       	mov	r12,r8
8000376c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003770 <sysclk_get_cpu_hz>:
80003770:	eb cd 40 80 	pushm	r7,lr
80003774:	1a 97       	mov	r7,sp
80003776:	f0 1f 00 04 	mcall	80003784 <sysclk_get_cpu_hz+0x14>
8000377a:	18 98       	mov	r8,r12
8000377c:	10 9c       	mov	r12,r8
8000377e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003782:	00 00       	add	r0,r0
80003784:	80 00       	ld.sh	r0,r0[0x0]
80003786:	37 60       	mov	r0,118

80003788 <display_init>:
80003788:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000378c:	1a 97       	mov	r7,sp
8000378e:	21 0d       	sub	sp,64
80003790:	fe 78 0c 00 	mov	r8,-62464
80003794:	ef 48 ff dc 	st.w	r7[-36],r8
80003798:	4f 68       	lddpc	r8,80003970 <display_init+0x1e8>
8000379a:	ee ca 00 34 	sub	r10,r7,52
8000379e:	10 9b       	mov	r11,r8
800037a0:	f6 e8 00 00 	ld.d	r8,r11[0]
800037a4:	f4 e9 00 00 	st.d	r10[0],r8
800037a8:	f6 e8 00 08 	ld.d	r8,r11[8]
800037ac:	f4 e9 00 08 	st.d	r10[8],r8
800037b0:	e0 6b 1b 00 	mov	r11,6912
800037b4:	ea 1b 00 b7 	orh	r11,0xb7
800037b8:	ee fc ff dc 	ld.w	r12,r7[-36]
800037bc:	f0 1f 00 6e 	mcall	80003974 <display_init+0x1ec>
800037c0:	30 3b       	mov	r11,3
800037c2:	ee fc ff dc 	ld.w	r12,r7[-36]
800037c6:	f0 1f 00 6d 	mcall	80003978 <display_init+0x1f0>
800037ca:	30 1b       	mov	r11,1
800037cc:	ee fc ff dc 	ld.w	r12,r7[-36]
800037d0:	f0 1f 00 6b 	mcall	8000397c <display_init+0x1f4>
800037d4:	f0 1f 00 6b 	mcall	80003980 <display_init+0x1f8>
800037d8:	18 98       	mov	r8,r12
800037da:	30 19       	mov	r9,1
800037dc:	ef 49 ff e4 	st.w	r7[-28],r9
800037e0:	ef 48 ff e0 	st.w	r7[-32],r8
800037e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800037e8:	ef 48 ff ec 	st.w	r7[-20],r8
800037ec:	ee f8 ff e0 	ld.w	r8,r7[-32]
800037f0:	ef 48 ff e8 	st.w	r7[-24],r8
800037f4:	ee f0 ff ec 	ld.w	r0,r7[-20]
800037f8:	30 01       	mov	r1,0
800037fa:	ee f2 ff e8 	ld.w	r2,r7[-24]
800037fe:	30 03       	mov	r3,0
80003800:	e2 02 02 4a 	mul	r10,r1,r2
80003804:	e6 00 02 48 	mul	r8,r3,r0
80003808:	10 0a       	add	r10,r8
8000380a:	e0 02 06 48 	mulu.d	r8,r0,r2
8000380e:	12 0a       	add	r10,r9
80003810:	14 99       	mov	r9,r10
80003812:	e0 6a 03 e7 	mov	r10,999
80003816:	30 0b       	mov	r11,0
80003818:	f0 0a 00 0a 	add	r10,r8,r10
8000381c:	f2 0b 00 4b 	adc	r11,r9,r11
80003820:	e0 68 03 e8 	mov	r8,1000
80003824:	30 09       	mov	r9,0
80003826:	f0 1f 00 58 	mcall	80003984 <display_init+0x1fc>
8000382a:	14 98       	mov	r8,r10
8000382c:	16 99       	mov	r9,r11
8000382e:	ef 48 ff f4 	st.w	r7[-12],r8
80003832:	ee c8 00 40 	sub	r8,r7,64
80003836:	ef 48 ff f0 	st.w	r7[-16],r8
8000383a:	e1 b8 00 42 	mfsr	r8,0x108
8000383e:	10 99       	mov	r9,r8
80003840:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003844:	91 09       	st.w	r8[0x0],r9
80003846:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000384a:	70 09       	ld.w	r9,r8[0x0]
8000384c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003850:	10 09       	add	r9,r8
80003852:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003856:	91 19       	st.w	r8[0x4],r9
80003858:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000385c:	30 08       	mov	r8,0
8000385e:	f3 68 00 08 	st.b	r9[8],r8
80003862:	ee c8 00 40 	sub	r8,r7,64
80003866:	ef 48 ff f8 	st.w	r7[-8],r8
8000386a:	e1 b8 00 42 	mfsr	r8,0x108
8000386e:	ef 48 ff fc 	st.w	r7[-4],r8
80003872:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003876:	f1 39 00 08 	ld.ub	r9,r8[8]
8000387a:	30 28       	mov	r8,2
8000387c:	f0 09 18 00 	cp.b	r9,r8
80003880:	c0 31       	brne	80003886 <display_init+0xfe>
80003882:	30 08       	mov	r8,0
80003884:	c4 38       	rjmp	8000390a <display_init+0x182>
80003886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000388a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000388e:	30 18       	mov	r8,1
80003890:	f0 09 18 00 	cp.b	r9,r8
80003894:	c0 31       	brne	8000389a <display_init+0x112>
80003896:	30 18       	mov	r8,1
80003898:	c3 98       	rjmp	8000390a <display_init+0x182>
8000389a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000389e:	70 09       	ld.w	r9,r8[0x0]
800038a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038a4:	70 18       	ld.w	r8,r8[0x4]
800038a6:	10 39       	cp.w	r9,r8
800038a8:	e0 88 00 1a 	brls	800038dc <display_init+0x154>
800038ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038b0:	70 08       	ld.w	r8,r8[0x0]
800038b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800038b6:	10 39       	cp.w	r9,r8
800038b8:	c1 02       	brcc	800038d8 <display_init+0x150>
800038ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038be:	70 18       	ld.w	r8,r8[0x4]
800038c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800038c4:	10 39       	cp.w	r9,r8
800038c6:	e0 88 00 09 	brls	800038d8 <display_init+0x150>
800038ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800038ce:	30 18       	mov	r8,1
800038d0:	f3 68 00 08 	st.b	r9[8],r8
800038d4:	30 18       	mov	r8,1
800038d6:	c1 a8       	rjmp	8000390a <display_init+0x182>
800038d8:	30 08       	mov	r8,0
800038da:	c1 88       	rjmp	8000390a <display_init+0x182>
800038dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038e0:	70 08       	ld.w	r8,r8[0x0]
800038e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800038e6:	10 39       	cp.w	r9,r8
800038e8:	c0 93       	brcs	800038fa <display_init+0x172>
800038ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038ee:	70 18       	ld.w	r8,r8[0x4]
800038f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800038f4:	10 39       	cp.w	r9,r8
800038f6:	e0 88 00 09 	brls	80003908 <display_init+0x180>
800038fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800038fe:	30 18       	mov	r8,1
80003900:	f3 68 00 08 	st.b	r9[8],r8
80003904:	30 18       	mov	r8,1
80003906:	c0 28       	rjmp	8000390a <display_init+0x182>
80003908:	30 08       	mov	r8,0
8000390a:	58 08       	cp.w	r8,0
8000390c:	ca b0       	breq	80003862 <display_init+0xda>
8000390e:	30 4b       	mov	r11,4
80003910:	49 ec       	lddpc	r12,80003988 <display_init+0x200>
80003912:	f0 1f 00 1f 	mcall	8000398c <display_init+0x204>
80003916:	ee c8 00 34 	sub	r8,r7,52
8000391a:	10 9b       	mov	r11,r8
8000391c:	fe 7c 28 00 	mov	r12,-55296
80003920:	f0 1f 00 1c 	mcall	80003990 <display_init+0x208>
80003924:	30 09       	mov	r9,0
80003926:	30 0a       	mov	r10,0
80003928:	30 0b       	mov	r11,0
8000392a:	fe 7c 28 00 	mov	r12,-55296
8000392e:	f0 1f 00 1a 	mcall	80003994 <display_init+0x20c>
80003932:	fe 7c 28 00 	mov	r12,-55296
80003936:	f0 1f 00 19 	mcall	80003998 <display_init+0x210>
8000393a:	ee c8 00 34 	sub	r8,r7,52
8000393e:	e0 6a 1b 00 	mov	r10,6912
80003942:	ea 1a 00 b7 	orh	r10,0xb7
80003946:	10 9b       	mov	r11,r8
80003948:	fe 7c 28 00 	mov	r12,-55296
8000394c:	f0 1f 00 14 	mcall	8000399c <display_init+0x214>
80003950:	30 1b       	mov	r11,1
80003952:	30 0c       	mov	r12,0
80003954:	f0 1f 00 13 	mcall	800039a0 <display_init+0x218>
80003958:	f0 1f 00 13 	mcall	800039a4 <display_init+0x21c>
8000395c:	f0 1f 00 13 	mcall	800039a8 <display_init+0x220>
80003960:	30 1b       	mov	r11,1
80003962:	30 1c       	mov	r12,1
80003964:	f0 1f 00 12 	mcall	800039ac <display_init+0x224>
80003968:	2f 0d       	sub	sp,-64
8000396a:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
8000396e:	00 00       	add	r0,r0
80003970:	80 00       	ld.sh	r0,r0[0x0]
80003972:	c6 18       	rjmp	80003a34 <initLED+0x84>
80003974:	80 00       	ld.sh	r0,r0[0x0]
80003976:	45 90       	lddsp	r0,sp[0x164]
80003978:	80 00       	ld.sh	r0,r0[0x0]
8000397a:	45 f4       	lddsp	r4,sp[0x17c]
8000397c:	80 00       	ld.sh	r0,r0[0x0]
8000397e:	46 a0       	lddsp	r0,sp[0x1a8]
80003980:	80 00       	ld.sh	r0,r0[0x0]
80003982:	37 70       	mov	r0,119
80003984:	80 00       	ld.sh	r0,r0[0x0]
80003986:	68 1c       	ld.w	r12,r4[0x4]
80003988:	80 00       	ld.sh	r0,r0[0x0]
8000398a:	c6 28       	rjmp	80003a4e <initLED+0x9e>
8000398c:	80 00       	ld.sh	r0,r0[0x0]
8000398e:	40 fc       	lddsp	r12,sp[0x3c]
80003990:	80 00       	ld.sh	r0,r0[0x0]
80003992:	32 e2       	mov	r2,46
80003994:	80 00       	ld.sh	r0,r0[0x0]
80003996:	33 76       	mov	r6,55
80003998:	80 00       	ld.sh	r0,r0[0x0]
8000399a:	36 90       	mov	r0,105
8000399c:	80 00       	ld.sh	r0,r0[0x0]
8000399e:	35 0c       	mov	r12,80
800039a0:	80 00       	ld.sh	r0,r0[0x0]
800039a2:	21 08       	sub	r8,16
800039a4:	80 00       	ld.sh	r0,r0[0x0]
800039a6:	2c a0       	sub	r0,-54
800039a8:	80 00       	ld.sh	r0,r0[0x0]
800039aa:	2b e4       	sub	r4,-66
800039ac:	80 00       	ld.sh	r0,r0[0x0]
800039ae:	2c 18       	sub	r8,-63

800039b0 <initLED>:
800039b0:	eb cd 40 80 	pushm	r7,lr
800039b4:	1a 97       	mov	r7,sp
800039b6:	20 1d       	sub	sp,4
800039b8:	fe 78 11 00 	mov	r8,-61184
800039bc:	ef 48 ff fc 	st.w	r7[-4],r8
800039c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039c4:	fc 19 08 00 	movh	r9,0x800
800039c8:	91 19       	st.w	r8[0x4],r9
800039ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039ce:	fc 19 10 00 	movh	r9,0x1000
800039d2:	91 19       	st.w	r8[0x4],r9
800039d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039d8:	fc 19 20 00 	movh	r9,0x2000
800039dc:	91 19       	st.w	r8[0x4],r9
800039de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039e2:	fc 19 08 00 	movh	r9,0x800
800039e6:	f1 49 00 54 	st.w	r8[84],r9
800039ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039ee:	fc 19 10 00 	movh	r9,0x1000
800039f2:	f1 49 00 54 	st.w	r8[84],r9
800039f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039fa:	fc 19 20 00 	movh	r9,0x2000
800039fe:	f1 49 00 54 	st.w	r8[84],r9
80003a02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a06:	fc 19 08 00 	movh	r9,0x800
80003a0a:	f1 49 00 44 	st.w	r8[68],r9
80003a0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a12:	fc 19 10 00 	movh	r9,0x1000
80003a16:	f1 49 00 44 	st.w	r8[68],r9
80003a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a1e:	fc 19 20 00 	movh	r9,0x2000
80003a22:	f1 49 00 44 	st.w	r8[68],r9
80003a26:	2f fd       	sub	sp,-4
80003a28:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a2c:	50 6f       	stdsp	sp[0x18],pc
80003a2e:	74 65       	ld.w	r5,r10[0x18]
80003a30:	6e 74       	ld.w	r4,r7[0x1c]
80003a32:	69 6f       	ld.w	pc,r4[0x58]
80003a34:	6d 65       	ld.w	r5,r6[0x58]
80003a36:	74 65       	ld.w	r5,r10[0x18]
80003a38:	72 3a       	ld.w	r10,r9[0xc]
80003a3a:	20 25       	sub	r5,2
80003a3c:	30 33       	mov	r3,3
80003a3e:	64 00       	ld.w	r0,r2[0x0]
80003a40:	54 65       	stdsp	sp[0x118],r5
80003a42:	6d 70       	ld.w	r0,r6[0x5c]
80003a44:	65 72       	ld.w	r2,r2[0x5c]
80003a46:	61 74       	ld.w	r4,r0[0x5c]
80003a48:	75 72       	ld.w	r2,r10[0x5c]
80003a4a:	65 3a       	ld.w	r10,r2[0x4c]
80003a4c:	20 25       	sub	r5,2
80003a4e:	30 34       	mov	r4,3
80003a50:	64 00       	ld.w	r0,r2[0x0]
80003a52:	00 00       	add	r0,r0
80003a54:	4c 69       	lddpc	r9,80003b6c <vPotentiometer+0x70>
80003a56:	67 68       	ld.w	r8,r3[0x58]
80003a58:	74 3a       	ld.w	r10,r10[0xc]
80003a5a:	20 25       	sub	r5,2
80003a5c:	30 34       	mov	r4,3
80003a5e:	64 00       	ld.w	r0,r2[0x0]
80003a60:	76 50       	ld.w	r0,r11[0x14]
80003a62:	6f 74       	ld.w	r4,r7[0x5c]
80003a64:	65 6e       	ld.w	lr,r2[0x58]
80003a66:	74 69       	ld.w	r9,r10[0x18]
80003a68:	6f 6d       	ld.w	sp,r7[0x58]
80003a6a:	65 74       	ld.w	r4,r2[0x5c]
80003a6c:	65 72       	ld.w	r2,r2[0x5c]
80003a6e:	00 00       	add	r0,r0
80003a70:	76 54       	ld.w	r4,r11[0x14]
80003a72:	65 6d       	ld.w	sp,r2[0x58]
80003a74:	70 65       	ld.w	r5,r8[0x18]
80003a76:	72 61       	ld.w	r1,r9[0x18]
80003a78:	74 75       	ld.w	r5,r10[0x1c]
80003a7a:	72 65       	ld.w	r5,r9[0x18]
80003a7c:	00 00       	add	r0,r0
80003a7e:	00 00       	add	r0,r0
80003a80:	76 4c       	ld.w	r12,r11[0x10]
80003a82:	69 67       	ld.w	r7,r4[0x58]
80003a84:	68 74       	ld.w	r4,r4[0x1c]
80003a86:	00 00       	add	r0,r0
80003a88:	76 4c       	ld.w	r12,r11[0x10]
80003a8a:	43 44       	lddsp	r4,sp[0xd0]
80003a8c:	57 72       	stdsp	sp[0x1dc],r2
80003a8e:	69 74       	ld.w	r4,r4[0x5c]
80003a90:	00 00       	add	r0,r0
	...

80003a94 <init_usart>:
		volatile int sensor_value;
		volatile int ID;
		};

void init_usart ( void )
{
80003a94:	eb cd 40 80 	pushm	r7,lr
80003a98:	1a 97       	mov	r7,sp
		. charlength = 8,
		. paritytype = USART_NO_PARITY ,
		. stopbits = USART_1_STOPBIT ,
		. channelmode = USART_NORMAL_CHMODE
	};
	pm_switch_to_osc0 (& AVR32_PM , FOSC0 , OSC0_STARTUP );				// Switch to 12 MHz clock
80003a9a:	30 3a       	mov	r10,3
80003a9c:	e0 6b 1b 00 	mov	r11,6912
80003aa0:	ea 1b 00 b7 	orh	r11,0xb7
80003aa4:	fe 7c 0c 00 	mov	r12,-62464
80003aa8:	f0 1f 00 0f 	mcall	80003ae4 <init_usart+0x50>
	gpio_enable_module ( USART_SERIAL_GPIO_MAP , 2);					// Enable usart
80003aac:	30 2b       	mov	r11,2
80003aae:	48 fc       	lddpc	r12,80003ae8 <init_usart+0x54>
80003ab0:	f0 1f 00 0f 	mcall	80003aec <init_usart+0x58>
	gpio_enable_module ( USART_DEBUG_GPIO_MAP , 2);
80003ab4:	30 2b       	mov	r11,2
80003ab6:	48 fc       	lddpc	r12,80003af0 <init_usart+0x5c>
80003ab8:	f0 1f 00 0d 	mcall	80003aec <init_usart+0x58>
	usart_init_rs232 ( serialPORT_USART , & USART_OPTIONS , FOSC0 );	// Usart options
80003abc:	e0 6a 1b 00 	mov	r10,6912
80003ac0:	ea 1a 00 b7 	orh	r10,0xb7
80003ac4:	48 cb       	lddpc	r11,80003af4 <init_usart+0x60>
80003ac6:	fe 7c 18 00 	mov	r12,-59392
80003aca:	f0 1f 00 0c 	mcall	80003af8 <init_usart+0x64>
	usart_init_rs232 ( configDBG_USART , & USART_OPTIONS , FOSC0 );
80003ace:	e0 6a 1b 00 	mov	r10,6912
80003ad2:	ea 1a 00 b7 	orh	r10,0xb7
80003ad6:	48 8b       	lddpc	r11,80003af4 <init_usart+0x60>
80003ad8:	fe 7c 18 00 	mov	r12,-59392
80003adc:	f0 1f 00 07 	mcall	80003af8 <init_usart+0x64>
}
80003ae0:	e3 cd 80 80 	ldm	sp++,r7,pc
80003ae4:	80 00       	ld.sh	r0,r0[0x0]
80003ae6:	46 ec       	lddsp	r12,sp[0x1b8]
80003ae8:	80 00       	ld.sh	r0,r0[0x0]
80003aea:	c6 48       	rjmp	80003bb2 <vPotentiometer+0xb6>
80003aec:	80 00       	ld.sh	r0,r0[0x0]
80003aee:	40 fc       	lddsp	r12,sp[0x3c]
80003af0:	80 00       	ld.sh	r0,r0[0x0]
80003af2:	c6 58       	rjmp	80003bbc <vPotentiometer+0xc0>
80003af4:	80 00       	ld.sh	r0,r0[0x0]
80003af6:	c6 68       	rjmp	80003bc2 <vPotentiometer+0xc6>
80003af8:	80 00       	ld.sh	r0,r0[0x0]
80003afa:	48 9c       	lddpc	r12,80003b1c <vPotentiometer+0x20>

80003afc <vPotentiometer>:
	}
}
*/
// Potentiometer task which acts as a producer
void vPotentiometer( void *pvParameters )
{
80003afc:	eb cd 40 80 	pushm	r7,lr
80003b00:	1a 97       	mov	r7,sp
80003b02:	20 3d       	sub	sp,12
80003b04:	ef 4c ff f4 	st.w	r7[-12],r12
	volatile struct sensor_struct pot_struct;
	while(1)
	{
		// Start a ADC sampling of all active channels
		adc_start(&AVR32_ADC);
80003b08:	fe 7c 3c 00 	mov	r12,-50176
80003b0c:	f0 1f 00 27 	mcall	80003ba8 <vPotentiometer+0xac>
		// Get the potentiometer value
		pot_struct.sensor_value = adc_get_value(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
80003b10:	30 1b       	mov	r11,1
80003b12:	fe 7c 3c 00 	mov	r12,-50176
80003b16:	f0 1f 00 26 	mcall	80003bac <vPotentiometer+0xb0>
80003b1a:	18 98       	mov	r8,r12
80003b1c:	ef 48 ff f8 	st.w	r7[-8],r8
		// Convert the potentiometer value to a value btwn 0-255
		pot_struct.sensor_value = pot_struct.sensor_value * 255 / 1024;
80003b20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003b24:	12 98       	mov	r8,r9
80003b26:	a9 68       	lsl	r8,0x8
80003b28:	12 18       	sub	r8,r9
80003b2a:	f0 c9 fc 01 	sub	r9,r8,-1023
80003b2e:	58 08       	cp.w	r8,0
80003b30:	f2 08 17 50 	movlt	r8,r9
80003b34:	ab 48       	asr	r8,0xa
80003b36:	ef 48 ff f8 	st.w	r7[-8],r8
		pot_struct.ID = 0;
80003b3a:	30 08       	mov	r8,0
80003b3c:	ef 48 ff fc 	st.w	r7[-4],r8
		
		LED_Set_Intensity(LED5, pot_struct.sensor_value); //Green light
80003b40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b44:	5c 58       	castu.b	r8
80003b46:	10 9b       	mov	r11,r8
80003b48:	32 0c       	mov	r12,32
80003b4a:	f0 1f 00 1a 	mcall	80003bb0 <vPotentiometer+0xb4>
		
		
		// Polling for semaphore EmptyCount before getting access to queue (removes value from semaphore) 
		if(xSemaphoreTake(xEmptyCount, (portTickType)portMAX_DELAY) == pdTRUE)
80003b4e:	49 a8       	lddpc	r8,80003bb4 <vPotentiometer+0xb8>
80003b50:	70 08       	ld.w	r8,r8[0x0]
80003b52:	30 09       	mov	r9,0
80003b54:	3f fa       	mov	r10,-1
80003b56:	30 0b       	mov	r11,0
80003b58:	10 9c       	mov	r12,r8
80003b5a:	f0 1f 00 18 	mcall	80003bb8 <vPotentiometer+0xbc>
		{
			// Semaphore taken
		}
		if(xSemaphoreTake(xMutex,(portTickType)portMAX_DELAY) == pdTRUE)
80003b5e:	49 88       	lddpc	r8,80003bbc <vPotentiometer+0xc0>
80003b60:	70 08       	ld.w	r8,r8[0x0]
80003b62:	30 09       	mov	r9,0
80003b64:	3f fa       	mov	r10,-1
80003b66:	30 0b       	mov	r11,0
80003b68:	10 9c       	mov	r12,r8
80003b6a:	f0 1f 00 14 	mcall	80003bb8 <vPotentiometer+0xbc>
		{
			
		}
		// Put the value on the queue
		xQueueSendToBack(xQHandle, &pot_struct, (portTickType)10);
80003b6e:	49 58       	lddpc	r8,80003bc0 <vPotentiometer+0xc4>
80003b70:	70 08       	ld.w	r8,r8[0x0]
80003b72:	ee cb 00 08 	sub	r11,r7,8
80003b76:	30 09       	mov	r9,0
80003b78:	30 aa       	mov	r10,10
80003b7a:	10 9c       	mov	r12,r8
80003b7c:	f0 1f 00 12 	mcall	80003bc4 <vPotentiometer+0xc8>
		
		if(xSemaphoreGive(xMutex) == pdTRUE)
80003b80:	48 f8       	lddpc	r8,80003bbc <vPotentiometer+0xc0>
80003b82:	70 08       	ld.w	r8,r8[0x0]
80003b84:	30 09       	mov	r9,0
80003b86:	30 0a       	mov	r10,0
80003b88:	30 0b       	mov	r11,0
80003b8a:	10 9c       	mov	r12,r8
80003b8c:	f0 1f 00 0e 	mcall	80003bc4 <vPotentiometer+0xc8>
		{
			
		}
		// Give the semaphore FillCount (adds value to semaphore) 
		if(xSemaphoreGive(xFillCount) == pdTRUE)
80003b90:	48 e8       	lddpc	r8,80003bc8 <vPotentiometer+0xcc>
80003b92:	70 08       	ld.w	r8,r8[0x0]
80003b94:	30 09       	mov	r9,0
80003b96:	30 0a       	mov	r10,0
80003b98:	30 0b       	mov	r11,0
80003b9a:	10 9c       	mov	r12,r8
80003b9c:	f0 1f 00 0a 	mcall	80003bc4 <vPotentiometer+0xc8>
		{
			// Semaphore given
		}
		// Delay
		vTaskDelay(TASK_DELAY_MS(50));
80003ba0:	33 2c       	mov	r12,50
80003ba2:	f0 1f 00 0b 	mcall	80003bcc <vPotentiometer+0xd0>
	}
80003ba6:	cb 1b       	rjmp	80003b08 <vPotentiometer+0xc>
80003ba8:	80 00       	ld.sh	r0,r0[0x0]
80003baa:	30 66       	mov	r6,6
80003bac:	80 00       	ld.sh	r0,r0[0x0]
80003bae:	30 dc       	mov	r12,13
80003bb0:	80 00       	ld.sh	r0,r0[0x0]
80003bb2:	3f 94       	mov	r4,-7
80003bb4:	00 00       	add	r0,r0
80003bb6:	07 e4       	ld.ub	r4,r3[0x6]
80003bb8:	80 00       	ld.sh	r0,r0[0x0]
80003bba:	56 54       	stdsp	sp[0x194],r4
80003bbc:	00 00       	add	r0,r0
80003bbe:	07 e8       	ld.ub	r8,r3[0x6]
80003bc0:	00 00       	add	r0,r0
80003bc2:	07 e0       	ld.ub	r0,r3[0x6]
80003bc4:	80 00       	ld.sh	r0,r0[0x0]
80003bc6:	54 ec       	stdsp	sp[0x138],r12
80003bc8:	00 00       	add	r0,r0
80003bca:	07 dc       	ld.ub	r12,r3[0x5]
80003bcc:	80 00       	ld.sh	r0,r0[0x0]
80003bce:	5c c4       	swap.bh	r4

80003bd0 <vTemperature>:
}

// Temperature task which acts as a producer
void vTemperature( void *pvParameters )
{
80003bd0:	eb cd 40 80 	pushm	r7,lr
80003bd4:	1a 97       	mov	r7,sp
80003bd6:	20 3d       	sub	sp,12
80003bd8:	ef 4c ff f4 	st.w	r7[-12],r12
	volatile struct sensor_struct temp_struct;
	while (1)
	{
		// Start a ADC sampling of all active channels
		adc_start(&AVR32_ADC);
80003bdc:	fe 7c 3c 00 	mov	r12,-50176
80003be0:	f0 1f 00 1d 	mcall	80003c54 <vTemperature+0x84>
		//Get the temperature value
		temp_struct.sensor_value = adc_get_value(&AVR32_ADC, ADC_TEMPERATURE_CHANNEL);
80003be4:	30 0b       	mov	r11,0
80003be6:	fe 7c 3c 00 	mov	r12,-50176
80003bea:	f0 1f 00 1c 	mcall	80003c58 <vTemperature+0x88>
80003bee:	18 98       	mov	r8,r12
80003bf0:	ef 48 ff f8 	st.w	r7[-8],r8
		temp_struct.ID = 1;
80003bf4:	30 18       	mov	r8,1
80003bf6:	ef 48 ff fc 	st.w	r7[-4],r8
		
		// Polling for semaphore EmptyCount before getting access to queue (removes value from semaphore)
		if(xSemaphoreTake(xEmptyCount, (portTickType)portMAX_DELAY) == pdTRUE)
80003bfa:	49 98       	lddpc	r8,80003c5c <vTemperature+0x8c>
80003bfc:	70 08       	ld.w	r8,r8[0x0]
80003bfe:	30 09       	mov	r9,0
80003c00:	3f fa       	mov	r10,-1
80003c02:	30 0b       	mov	r11,0
80003c04:	10 9c       	mov	r12,r8
80003c06:	f0 1f 00 17 	mcall	80003c60 <vTemperature+0x90>
		{
			// Semaphore taken
		}
		if(xSemaphoreTake(xMutex,(portTickType)portMAX_DELAY) == pdTRUE)
80003c0a:	49 78       	lddpc	r8,80003c64 <vTemperature+0x94>
80003c0c:	70 08       	ld.w	r8,r8[0x0]
80003c0e:	30 09       	mov	r9,0
80003c10:	3f fa       	mov	r10,-1
80003c12:	30 0b       	mov	r11,0
80003c14:	10 9c       	mov	r12,r8
80003c16:	f0 1f 00 13 	mcall	80003c60 <vTemperature+0x90>
		{
			
		}
		
		// Put the value on the queue
		xQueueSendToBack(xQHandle, &temp_struct, (portTickType)10);
80003c1a:	49 48       	lddpc	r8,80003c68 <vTemperature+0x98>
80003c1c:	70 08       	ld.w	r8,r8[0x0]
80003c1e:	ee cb 00 08 	sub	r11,r7,8
80003c22:	30 09       	mov	r9,0
80003c24:	30 aa       	mov	r10,10
80003c26:	10 9c       	mov	r12,r8
80003c28:	f0 1f 00 11 	mcall	80003c6c <vTemperature+0x9c>
		
		if(xSemaphoreGive(xMutex) == pdTRUE)
80003c2c:	48 e8       	lddpc	r8,80003c64 <vTemperature+0x94>
80003c2e:	70 08       	ld.w	r8,r8[0x0]
80003c30:	30 09       	mov	r9,0
80003c32:	30 0a       	mov	r10,0
80003c34:	30 0b       	mov	r11,0
80003c36:	10 9c       	mov	r12,r8
80003c38:	f0 1f 00 0d 	mcall	80003c6c <vTemperature+0x9c>
		{
			
		}
		// Give the semaphore FillCount (adds value to semaphore)
		if(xSemaphoreGive(xFillCount) == pdTRUE)
80003c3c:	48 d8       	lddpc	r8,80003c70 <vTemperature+0xa0>
80003c3e:	70 08       	ld.w	r8,r8[0x0]
80003c40:	30 09       	mov	r9,0
80003c42:	30 0a       	mov	r10,0
80003c44:	30 0b       	mov	r11,0
80003c46:	10 9c       	mov	r12,r8
80003c48:	f0 1f 00 09 	mcall	80003c6c <vTemperature+0x9c>
		{
			// Semaphore given
		}
		// Delay
		vTaskDelay(TASK_DELAY_MS(50));
80003c4c:	33 2c       	mov	r12,50
80003c4e:	f0 1f 00 0a 	mcall	80003c74 <vTemperature+0xa4>
	}
80003c52:	cc 5b       	rjmp	80003bdc <vTemperature+0xc>
80003c54:	80 00       	ld.sh	r0,r0[0x0]
80003c56:	30 66       	mov	r6,6
80003c58:	80 00       	ld.sh	r0,r0[0x0]
80003c5a:	30 dc       	mov	r12,13
80003c5c:	00 00       	add	r0,r0
80003c5e:	07 e4       	ld.ub	r4,r3[0x6]
80003c60:	80 00       	ld.sh	r0,r0[0x0]
80003c62:	56 54       	stdsp	sp[0x194],r4
80003c64:	00 00       	add	r0,r0
80003c66:	07 e8       	ld.ub	r8,r3[0x6]
80003c68:	00 00       	add	r0,r0
80003c6a:	07 e0       	ld.ub	r0,r3[0x6]
80003c6c:	80 00       	ld.sh	r0,r0[0x0]
80003c6e:	54 ec       	stdsp	sp[0x138],r12
80003c70:	00 00       	add	r0,r0
80003c72:	07 dc       	ld.ub	r12,r3[0x5]
80003c74:	80 00       	ld.sh	r0,r0[0x0]
80003c76:	5c c4       	swap.bh	r4

80003c78 <vLight>:
	
}

// Light sensor task which acts as a producer
void vLight( void *pvParameters )
{
80003c78:	eb cd 40 80 	pushm	r7,lr
80003c7c:	1a 97       	mov	r7,sp
80003c7e:	20 3d       	sub	sp,12
80003c80:	ef 4c ff f4 	st.w	r7[-12],r12
	volatile struct sensor_struct light_struct;
	while (1)
	{
		// Start a ADC sampling of all active channels
		adc_start(&AVR32_ADC);
80003c84:	fe 7c 3c 00 	mov	r12,-50176
80003c88:	f0 1f 00 1d 	mcall	80003cfc <vLight+0x84>
		//Get the light sensor value
		light_struct.sensor_value = adc_get_value(&AVR32_ADC, ADC_LIGHT_CHANNEL);
80003c8c:	30 2b       	mov	r11,2
80003c8e:	fe 7c 3c 00 	mov	r12,-50176
80003c92:	f0 1f 00 1c 	mcall	80003d00 <vLight+0x88>
80003c96:	18 98       	mov	r8,r12
80003c98:	ef 48 ff f8 	st.w	r7[-8],r8
		light_struct.ID = 2;
80003c9c:	30 28       	mov	r8,2
80003c9e:	ef 48 ff fc 	st.w	r7[-4],r8
		
		// Polling for semaphore EmptyCount before getting access to queue (removes value from semaphore)
		if(xSemaphoreTake(xEmptyCount, (portTickType)portMAX_DELAY) == pdTRUE)
80003ca2:	49 98       	lddpc	r8,80003d04 <vLight+0x8c>
80003ca4:	70 08       	ld.w	r8,r8[0x0]
80003ca6:	30 09       	mov	r9,0
80003ca8:	3f fa       	mov	r10,-1
80003caa:	30 0b       	mov	r11,0
80003cac:	10 9c       	mov	r12,r8
80003cae:	f0 1f 00 17 	mcall	80003d08 <vLight+0x90>
		{
			// Semaphore taken
		}
		if(xSemaphoreTake(xMutex,(portTickType)portMAX_DELAY) == pdTRUE)
80003cb2:	49 78       	lddpc	r8,80003d0c <vLight+0x94>
80003cb4:	70 08       	ld.w	r8,r8[0x0]
80003cb6:	30 09       	mov	r9,0
80003cb8:	3f fa       	mov	r10,-1
80003cba:	30 0b       	mov	r11,0
80003cbc:	10 9c       	mov	r12,r8
80003cbe:	f0 1f 00 13 	mcall	80003d08 <vLight+0x90>
		{
			
		}
		
		// Put the value on the queue
		xQueueSendToBack(xQHandle, &light_struct, (portTickType)10);
80003cc2:	49 48       	lddpc	r8,80003d10 <vLight+0x98>
80003cc4:	70 08       	ld.w	r8,r8[0x0]
80003cc6:	ee cb 00 08 	sub	r11,r7,8
80003cca:	30 09       	mov	r9,0
80003ccc:	30 aa       	mov	r10,10
80003cce:	10 9c       	mov	r12,r8
80003cd0:	f0 1f 00 11 	mcall	80003d14 <vLight+0x9c>
		
		if(xSemaphoreGive(xMutex) == pdTRUE)
80003cd4:	48 e8       	lddpc	r8,80003d0c <vLight+0x94>
80003cd6:	70 08       	ld.w	r8,r8[0x0]
80003cd8:	30 09       	mov	r9,0
80003cda:	30 0a       	mov	r10,0
80003cdc:	30 0b       	mov	r11,0
80003cde:	10 9c       	mov	r12,r8
80003ce0:	f0 1f 00 0d 	mcall	80003d14 <vLight+0x9c>
		{
			
		}
		// Give the semaphore FillCount (adds value to semaphore)
		if(xSemaphoreGive(xFillCount) == pdTRUE)
80003ce4:	48 d8       	lddpc	r8,80003d18 <vLight+0xa0>
80003ce6:	70 08       	ld.w	r8,r8[0x0]
80003ce8:	30 09       	mov	r9,0
80003cea:	30 0a       	mov	r10,0
80003cec:	30 0b       	mov	r11,0
80003cee:	10 9c       	mov	r12,r8
80003cf0:	f0 1f 00 09 	mcall	80003d14 <vLight+0x9c>
		{
			// Semaphore given
		}
		// Delay
		vTaskDelay(TASK_DELAY_MS(50));
80003cf4:	33 2c       	mov	r12,50
80003cf6:	f0 1f 00 0a 	mcall	80003d1c <vLight+0xa4>
	}
80003cfa:	cc 5b       	rjmp	80003c84 <vLight+0xc>
80003cfc:	80 00       	ld.sh	r0,r0[0x0]
80003cfe:	30 66       	mov	r6,6
80003d00:	80 00       	ld.sh	r0,r0[0x0]
80003d02:	30 dc       	mov	r12,13
80003d04:	00 00       	add	r0,r0
80003d06:	07 e4       	ld.ub	r4,r3[0x6]
80003d08:	80 00       	ld.sh	r0,r0[0x0]
80003d0a:	56 54       	stdsp	sp[0x194],r4
80003d0c:	00 00       	add	r0,r0
80003d0e:	07 e8       	ld.ub	r8,r3[0x6]
80003d10:	00 00       	add	r0,r0
80003d12:	07 e0       	ld.ub	r0,r3[0x6]
80003d14:	80 00       	ld.sh	r0,r0[0x0]
80003d16:	54 ec       	stdsp	sp[0x138],r12
80003d18:	00 00       	add	r0,r0
80003d1a:	07 dc       	ld.ub	r12,r3[0x5]
80003d1c:	80 00       	ld.sh	r0,r0[0x0]
80003d1e:	5c c4       	swap.bh	r4

80003d20 <vLCDWrite>:
}

// Task which reads from queue and writes to LCD display. It acts as a consumer.
void vLCDWrite( void *pvParameters )
{
80003d20:	eb cd 40 80 	pushm	r7,lr
80003d24:	1a 97       	mov	r7,sp
80003d26:	20 3d       	sub	sp,12
80003d28:	ef 4c ff f4 	st.w	r7[-12],r12
	volatile struct sensor_struct sensor_struct1;
	while (1)
	{
		// Polling for semaphore FillCount before getting access to queue (removes value from semaphore)
		if(xSemaphoreTake(xFillCount, (portTickType)portMAX_DELAY) == pdTRUE)
80003d2c:	4a d8       	lddpc	r8,80003de0 <vLCDWrite+0xc0>
80003d2e:	70 08       	ld.w	r8,r8[0x0]
80003d30:	30 09       	mov	r9,0
80003d32:	3f fa       	mov	r10,-1
80003d34:	30 0b       	mov	r11,0
80003d36:	10 9c       	mov	r12,r8
80003d38:	f0 1f 00 2b 	mcall	80003de4 <vLCDWrite+0xc4>
		{
			// Semaphore taken
		}
		
		if(xSemaphoreTake(xMutex, (portTickType)portMAX_DELAY) == pdTRUE)
80003d3c:	4a b8       	lddpc	r8,80003de8 <vLCDWrite+0xc8>
80003d3e:	70 08       	ld.w	r8,r8[0x0]
80003d40:	30 09       	mov	r9,0
80003d42:	3f fa       	mov	r10,-1
80003d44:	30 0b       	mov	r11,0
80003d46:	10 9c       	mov	r12,r8
80003d48:	f0 1f 00 27 	mcall	80003de4 <vLCDWrite+0xc4>
		{
			
		}
		// Read value from queue
		xQueueReceive(xQHandle, &sensor_struct1, (portTickType)10);
80003d4c:	4a 88       	lddpc	r8,80003dec <vLCDWrite+0xcc>
80003d4e:	70 08       	ld.w	r8,r8[0x0]
80003d50:	ee cb 00 08 	sub	r11,r7,8
80003d54:	30 09       	mov	r9,0
80003d56:	30 aa       	mov	r10,10
80003d58:	10 9c       	mov	r12,r8
80003d5a:	f0 1f 00 23 	mcall	80003de4 <vLCDWrite+0xc4>
		if (sensor_struct1.ID == 0)	// Potentiometer sensor
80003d5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d62:	58 08       	cp.w	r8,0
80003d64:	c0 d1       	brne	80003d7e <vLCDWrite+0x5e>
		{
			dip204_set_cursor_position(1, 1);
80003d66:	30 1b       	mov	r11,1
80003d68:	30 1c       	mov	r12,1
80003d6a:	f0 1f 00 22 	mcall	80003df0 <vLCDWrite+0xd0>
			dip204_printf_string("Potentiometer: %03d", sensor_struct1.sensor_value); //print value
80003d6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d72:	1a d8       	st.w	--sp,r8
80003d74:	4a 0c       	lddpc	r12,80003df4 <vLCDWrite+0xd4>
80003d76:	f0 1f 00 21 	mcall	80003df8 <vLCDWrite+0xd8>
80003d7a:	2f fd       	sub	sp,-4
80003d7c:	c2 08       	rjmp	80003dbc <vLCDWrite+0x9c>
		}
		else if (sensor_struct1.ID == 1)	//Temperature sensor	
80003d7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d82:	58 18       	cp.w	r8,1
80003d84:	c0 d1       	brne	80003d9e <vLCDWrite+0x7e>
		{
			dip204_set_cursor_position(1, 2);
80003d86:	30 2b       	mov	r11,2
80003d88:	30 1c       	mov	r12,1
80003d8a:	f0 1f 00 1a 	mcall	80003df0 <vLCDWrite+0xd0>
			dip204_printf_string("Temperature: %04d", sensor_struct1.sensor_value); //print value
80003d8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d92:	1a d8       	st.w	--sp,r8
80003d94:	49 ac       	lddpc	r12,80003dfc <vLCDWrite+0xdc>
80003d96:	f0 1f 00 19 	mcall	80003df8 <vLCDWrite+0xd8>
80003d9a:	2f fd       	sub	sp,-4
80003d9c:	c1 08       	rjmp	80003dbc <vLCDWrite+0x9c>
		}
		else if (sensor_struct1.ID == 2)	// Light sensor
80003d9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003da2:	58 28       	cp.w	r8,2
80003da4:	c0 c1       	brne	80003dbc <vLCDWrite+0x9c>
		{
			dip204_set_cursor_position(1, 3);
80003da6:	30 3b       	mov	r11,3
80003da8:	30 1c       	mov	r12,1
80003daa:	f0 1f 00 12 	mcall	80003df0 <vLCDWrite+0xd0>
			dip204_printf_string("Light: %04d", sensor_struct1.sensor_value); //print value
80003dae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003db2:	1a d8       	st.w	--sp,r8
80003db4:	49 3c       	lddpc	r12,80003e00 <vLCDWrite+0xe0>
80003db6:	f0 1f 00 11 	mcall	80003df8 <vLCDWrite+0xd8>
80003dba:	2f fd       	sub	sp,-4
		}
		
		if(xSemaphoreGive(xMutex) == pdTRUE)
80003dbc:	48 b8       	lddpc	r8,80003de8 <vLCDWrite+0xc8>
80003dbe:	70 08       	ld.w	r8,r8[0x0]
80003dc0:	30 09       	mov	r9,0
80003dc2:	30 0a       	mov	r10,0
80003dc4:	30 0b       	mov	r11,0
80003dc6:	10 9c       	mov	r12,r8
80003dc8:	f0 1f 00 0f 	mcall	80003e04 <vLCDWrite+0xe4>
		{
			
		}
		// Give the semaphore EmptyCount (adds value to semaphore)
		if(xSemaphoreGive(xEmptyCount) == pdTRUE)
80003dcc:	48 f8       	lddpc	r8,80003e08 <vLCDWrite+0xe8>
80003dce:	70 08       	ld.w	r8,r8[0x0]
80003dd0:	30 09       	mov	r9,0
80003dd2:	30 0a       	mov	r10,0
80003dd4:	30 0b       	mov	r11,0
80003dd6:	10 9c       	mov	r12,r8
80003dd8:	f0 1f 00 0b 	mcall	80003e04 <vLCDWrite+0xe4>
		{
			// Semaphore given
		}
	}
80003ddc:	ca 8b       	rjmp	80003d2c <vLCDWrite+0xc>
80003dde:	00 00       	add	r0,r0
80003de0:	00 00       	add	r0,r0
80003de2:	07 dc       	ld.ub	r12,r3[0x5]
80003de4:	80 00       	ld.sh	r0,r0[0x0]
80003de6:	56 54       	stdsp	sp[0x194],r4
80003de8:	00 00       	add	r0,r0
80003dea:	07 e8       	ld.ub	r8,r3[0x6]
80003dec:	00 00       	add	r0,r0
80003dee:	07 e0       	ld.ub	r0,r3[0x6]
80003df0:	80 00       	ld.sh	r0,r0[0x0]
80003df2:	2c 18       	sub	r8,-63
80003df4:	80 00       	ld.sh	r0,r0[0x0]
80003df6:	3a 2c       	mov	r12,-94
80003df8:	80 00       	ld.sh	r0,r0[0x0]
80003dfa:	2e 1c       	sub	r12,-31
80003dfc:	80 00       	ld.sh	r0,r0[0x0]
80003dfe:	3a 40       	mov	r0,-92
80003e00:	80 00       	ld.sh	r0,r0[0x0]
80003e02:	3a 54       	mov	r4,-91
80003e04:	80 00       	ld.sh	r0,r0[0x0]
80003e06:	54 ec       	stdsp	sp[0x138],r12
80003e08:	00 00       	add	r0,r0
80003e0a:	07 e4       	ld.ub	r4,r3[0x6]

80003e0c <main>:
}
int main(void)
{
80003e0c:	eb cd 40 80 	pushm	r7,lr
80003e10:	1a 97       	mov	r7,sp
	initLED();
80003e12:	f0 1f 00 44 	mcall	80003f20 <main+0x114>
	init_usart();
80003e16:	f0 1f 00 44 	mcall	80003f24 <main+0x118>
	display_init();
80003e1a:	f0 1f 00 44 	mcall	80003f28 <main+0x11c>
	dip204_clear_display();
80003e1e:	f0 1f 00 44 	mcall	80003f2c <main+0x120>
	
	// Configure the ADC module and enable the potentiometer, temperature and light channel
	adc_configure(&AVR32_ADC);
80003e22:	fe 7c 3c 00 	mov	r12,-50176
80003e26:	f0 1f 00 43 	mcall	80003f30 <main+0x124>
	adc_enable(&AVR32_ADC, ADC_POTENTIOMETER_CHANNEL);
80003e2a:	30 1b       	mov	r11,1
80003e2c:	fe 7c 3c 00 	mov	r12,-50176
80003e30:	f0 1f 00 41 	mcall	80003f34 <main+0x128>
	adc_enable(&AVR32_ADC, ADC_TEMPERATURE_CHANNEL);
80003e34:	30 0b       	mov	r11,0
80003e36:	fe 7c 3c 00 	mov	r12,-50176
80003e3a:	f0 1f 00 3f 	mcall	80003f34 <main+0x128>
	adc_enable(&AVR32_ADC, ADC_LIGHT_CHANNEL);
80003e3e:	30 2b       	mov	r11,2
80003e40:	fe 7c 3c 00 	mov	r12,-50176
80003e44:	f0 1f 00 3c 	mcall	80003f34 <main+0x128>
	
	vSemaphoreCreateBinary(xLCDSemaphore);	// Semaphore - Display
80003e48:	30 0b       	mov	r11,0
80003e4a:	30 1c       	mov	r12,1
80003e4c:	f0 1f 00 3b 	mcall	80003f38 <main+0x12c>
80003e50:	18 99       	mov	r9,r12
80003e52:	4b b8       	lddpc	r8,80003f3c <main+0x130>
80003e54:	91 09       	st.w	r8[0x0],r9
80003e56:	4b a8       	lddpc	r8,80003f3c <main+0x130>
80003e58:	70 08       	ld.w	r8,r8[0x0]
80003e5a:	58 08       	cp.w	r8,0
80003e5c:	c0 90       	breq	80003e6e <main+0x62>
80003e5e:	4b 88       	lddpc	r8,80003f3c <main+0x130>
80003e60:	70 08       	ld.w	r8,r8[0x0]
80003e62:	30 09       	mov	r9,0
80003e64:	30 0a       	mov	r10,0
80003e66:	30 0b       	mov	r11,0
80003e68:	10 9c       	mov	r12,r8
80003e6a:	f0 1f 00 36 	mcall	80003f40 <main+0x134>
	xFillCount = xSemaphoreCreateCounting(BUFFER_SIZE, 0);
80003e6e:	30 0b       	mov	r11,0
80003e70:	30 ac       	mov	r12,10
80003e72:	f0 1f 00 35 	mcall	80003f44 <main+0x138>
80003e76:	18 99       	mov	r9,r12
80003e78:	4b 48       	lddpc	r8,80003f48 <main+0x13c>
80003e7a:	91 09       	st.w	r8[0x0],r9
	xEmptyCount = xSemaphoreCreateCounting(BUFFER_SIZE, BUFFER_SIZE);
80003e7c:	30 ab       	mov	r11,10
80003e7e:	30 ac       	mov	r12,10
80003e80:	f0 1f 00 31 	mcall	80003f44 <main+0x138>
80003e84:	18 99       	mov	r9,r12
80003e86:	4b 28       	lddpc	r8,80003f4c <main+0x140>
80003e88:	91 09       	st.w	r8[0x0],r9
	xMutex = xSemaphoreCreateMutex();
80003e8a:	f0 1f 00 32 	mcall	80003f50 <main+0x144>
80003e8e:	18 99       	mov	r9,r12
80003e90:	4b 18       	lddpc	r8,80003f54 <main+0x148>
80003e92:	91 09       	st.w	r8[0x0],r9
	
	xQHandle = xQueueCreate(10, sizeof(struct sensor_struct));		// Queue - 10 spots of char-pointer size
80003e94:	30 8b       	mov	r11,8
80003e96:	30 ac       	mov	r12,10
80003e98:	f0 1f 00 28 	mcall	80003f38 <main+0x12c>
80003e9c:	18 99       	mov	r9,r12
80003e9e:	4a f8       	lddpc	r8,80003f58 <main+0x14c>
80003ea0:	91 09       	st.w	r8[0x0],r9
		//ERROR!
	}
	
	
	// Create the task , store the handle .
	xTaskCreate(	vPotentiometer,
80003ea2:	4a fb       	lddpc	r11,80003f5c <main+0x150>
80003ea4:	30 08       	mov	r8,0
80003ea6:	1a d8       	st.w	--sp,r8
80003ea8:	30 08       	mov	r8,0
80003eaa:	1a d8       	st.w	--sp,r8
80003eac:	4a d8       	lddpc	r8,80003f60 <main+0x154>
80003eae:	1a d8       	st.w	--sp,r8
80003eb0:	30 18       	mov	r8,1
80003eb2:	30 09       	mov	r9,0
80003eb4:	e0 6a 01 00 	mov	r10,256
80003eb8:	4a bc       	lddpc	r12,80003f64 <main+0x158>
80003eba:	f0 1f 00 2c 	mcall	80003f68 <main+0x15c>
80003ebe:	2f dd       	sub	sp,-12
					"vPotentiometer",
					configMINIMAL_STACK_SIZE,
					NULL,
					1,
					&xHandlePotentiometer);
	xTaskCreate(	vTemperature, "vTemperature", configMINIMAL_STACK_SIZE, NULL, 1, &xHandleTemperature);
80003ec0:	4a bb       	lddpc	r11,80003f6c <main+0x160>
80003ec2:	30 08       	mov	r8,0
80003ec4:	1a d8       	st.w	--sp,r8
80003ec6:	30 08       	mov	r8,0
80003ec8:	1a d8       	st.w	--sp,r8
80003eca:	4a a8       	lddpc	r8,80003f70 <main+0x164>
80003ecc:	1a d8       	st.w	--sp,r8
80003ece:	30 18       	mov	r8,1
80003ed0:	30 09       	mov	r9,0
80003ed2:	e0 6a 01 00 	mov	r10,256
80003ed6:	4a 8c       	lddpc	r12,80003f74 <main+0x168>
80003ed8:	f0 1f 00 24 	mcall	80003f68 <main+0x15c>
80003edc:	2f dd       	sub	sp,-12
	
	xTaskCreate(	vLight, "vLight", configMINIMAL_STACK_SIZE, NULL, 1, &xHandleLight);
80003ede:	4a 7b       	lddpc	r11,80003f78 <main+0x16c>
80003ee0:	30 08       	mov	r8,0
80003ee2:	1a d8       	st.w	--sp,r8
80003ee4:	30 08       	mov	r8,0
80003ee6:	1a d8       	st.w	--sp,r8
80003ee8:	4a 58       	lddpc	r8,80003f7c <main+0x170>
80003eea:	1a d8       	st.w	--sp,r8
80003eec:	30 18       	mov	r8,1
80003eee:	30 09       	mov	r9,0
80003ef0:	e0 6a 01 00 	mov	r10,256
80003ef4:	4a 3c       	lddpc	r12,80003f80 <main+0x174>
80003ef6:	f0 1f 00 1d 	mcall	80003f68 <main+0x15c>
80003efa:	2f dd       	sub	sp,-12
	
	xTaskCreate(	vLCDWrite, "vLCDWrit", configMINIMAL_STACK_SIZE, NULL, 1, &xHandleLCDWrite);
80003efc:	4a 2b       	lddpc	r11,80003f84 <main+0x178>
80003efe:	30 08       	mov	r8,0
80003f00:	1a d8       	st.w	--sp,r8
80003f02:	30 08       	mov	r8,0
80003f04:	1a d8       	st.w	--sp,r8
80003f06:	4a 18       	lddpc	r8,80003f88 <main+0x17c>
80003f08:	1a d8       	st.w	--sp,r8
80003f0a:	30 18       	mov	r8,1
80003f0c:	30 09       	mov	r9,0
80003f0e:	e0 6a 01 00 	mov	r10,256
80003f12:	49 fc       	lddpc	r12,80003f8c <main+0x180>
80003f14:	f0 1f 00 15 	mcall	80003f68 <main+0x15c>
80003f18:	2f dd       	sub	sp,-12
	
	vTaskStartScheduler();		// Starts the scheduling
80003f1a:	f0 1f 00 1e 	mcall	80003f90 <main+0x184>

	
	for( ;; )
	{
		
	}
80003f1e:	c0 08       	rjmp	80003f1e <main+0x112>
80003f20:	80 00       	ld.sh	r0,r0[0x0]
80003f22:	39 b0       	mov	r0,-101
80003f24:	80 00       	ld.sh	r0,r0[0x0]
80003f26:	3a 94       	mov	r4,-87
80003f28:	80 00       	ld.sh	r0,r0[0x0]
80003f2a:	37 88       	mov	r8,120
80003f2c:	80 00       	ld.sh	r0,r0[0x0]
80003f2e:	2c a0       	sub	r0,-54
80003f30:	80 00       	ld.sh	r0,r0[0x0]
80003f32:	30 30       	mov	r0,3
80003f34:	80 00       	ld.sh	r0,r0[0x0]
80003f36:	30 80       	mov	r0,8
80003f38:	80 00       	ld.sh	r0,r0[0x0]
80003f3a:	52 e8       	stdsp	sp[0xb8],r8
80003f3c:	00 00       	add	r0,r0
80003f3e:	07 d8       	ld.ub	r8,r3[0x5]
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	54 ec       	stdsp	sp[0x138],r12
80003f44:	80 00       	ld.sh	r0,r0[0x0]
80003f46:	54 a8       	stdsp	sp[0x128],r8
80003f48:	00 00       	add	r0,r0
80003f4a:	07 dc       	ld.ub	r12,r3[0x5]
80003f4c:	00 00       	add	r0,r0
80003f4e:	07 e4       	ld.ub	r4,r3[0x6]
80003f50:	80 00       	ld.sh	r0,r0[0x0]
80003f52:	54 00       	stdsp	sp[0x100],r0
80003f54:	00 00       	add	r0,r0
80003f56:	07 e8       	ld.ub	r8,r3[0x6]
80003f58:	00 00       	add	r0,r0
80003f5a:	07 e0       	ld.ub	r0,r3[0x6]
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	3a 60       	mov	r0,-90
80003f60:	00 00       	add	r0,r0
80003f62:	07 f0       	ld.ub	r0,r3[0x7]
80003f64:	80 00       	ld.sh	r0,r0[0x0]
80003f66:	3a fc       	mov	r12,-81
80003f68:	80 00       	ld.sh	r0,r0[0x0]
80003f6a:	5a fc       	cp.w	r12,-17
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	3a 70       	mov	r0,-89
80003f70:	00 00       	add	r0,r0
80003f72:	07 d4       	ld.ub	r4,r3[0x5]
80003f74:	80 00       	ld.sh	r0,r0[0x0]
80003f76:	3b d0       	mov	r0,-67
80003f78:	80 00       	ld.sh	r0,r0[0x0]
80003f7a:	3a 80       	mov	r0,-88
80003f7c:	00 00       	add	r0,r0
80003f7e:	07 ec       	ld.ub	r12,r3[0x6]
80003f80:	80 00       	ld.sh	r0,r0[0x0]
80003f82:	3c 78       	mov	r8,-57
80003f84:	80 00       	ld.sh	r0,r0[0x0]
80003f86:	3a 88       	mov	r8,-88
80003f88:	00 00       	add	r0,r0
80003f8a:	07 f4       	ld.ub	r4,r3[0x7]
80003f8c:	80 00       	ld.sh	r0,r0[0x0]
80003f8e:	3d 20       	mov	r0,-46
80003f90:	80 00       	ld.sh	r0,r0[0x0]
80003f92:	5d 38       	musfr	r8

80003f94 <LED_Set_Intensity>:
           AVR32_PWM.channel[led_descriptor->PWM.CHANNEL].cdty : 0;
}


void LED_Set_Intensity(U32 leds, U8 intensity)
{
80003f94:	eb cd 40 80 	pushm	r7,lr
80003f98:	1a 97       	mov	r7,sp
80003f9a:	20 6d       	sub	sp,24
80003f9c:	ef 4c ff ec 	st.w	r7[-20],r12
80003fa0:	16 98       	mov	r8,r11
80003fa2:	ef 68 ff e8 	st.b	r7[-24],r8
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80003fa6:	4d 58       	lddpc	r8,800040f8 <LED_Set_Intensity+0x164>
80003fa8:	21 08       	sub	r8,16
80003faa:	ef 48 ff f0 	st.w	r7[-16],r8
  volatile avr32_pwm_channel_t *led_pwm_channel;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
80003fae:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003fb2:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80003fb6:	ef 48 ff ec 	st.w	r7[-20],r8
80003fba:	c9 78       	rjmp	800040e8 <LED_Set_Intensity+0x154>
  {
    // Select the next specified LED and check that it has a PWM channel.
    led_shift = 1 + ctz(leds);
80003fbc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003fc0:	5c 98       	brev	r8
80003fc2:	f0 08 12 00 	clz	r8,r8
80003fc6:	5c 58       	castu.b	r8
80003fc8:	2f f8       	sub	r8,-1
80003fca:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80003fce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003fd2:	a5 68       	lsl	r8,0x4
80003fd4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003fd8:	f2 08 00 08 	add	r8,r9,r8
80003fdc:	ef 48 ff f0 	st.w	r7[-16],r8
    if (led_descriptor->PWM.CHANNEL < 0) continue;
80003fe0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003fe4:	70 28       	ld.w	r8,r8[0x8]
80003fe6:	58 08       	cp.w	r8,0
80003fe8:	c7 75       	brlt	800040d6 <LED_Set_Intensity+0x142>

    // Initialize or update the LED PWM channel.
    led_pwm_channel = &AVR32_PWM.channel[led_descriptor->PWM.CHANNEL];
80003fea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003fee:	70 28       	ld.w	r8,r8[0x8]
80003ff0:	a5 78       	lsl	r8,0x5
80003ff2:	e0 28 ce 00 	sub	r8,52736
80003ff6:	ef 48 ff f4 	st.w	r7[-12],r8
    if (!(AVR32_PWM.sr & (1 << led_descriptor->PWM.CHANNEL)))
80003ffa:	fe 78 30 00 	mov	r8,-53248
80003ffe:	70 39       	ld.w	r9,r8[0xc]
80004000:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004004:	70 28       	ld.w	r8,r8[0x8]
80004006:	30 1a       	mov	r10,1
80004008:	f4 08 09 48 	lsl	r8,r10,r8
8000400c:	f3 e8 00 08 	and	r8,r9,r8
80004010:	c1 91       	brne	80004042 <LED_Set_Intensity+0xae>
    {
      led_pwm_channel->cmr = (AVR32_PWM_CPRE_MCK << AVR32_PWM_CPRE_OFFSET) &
80004012:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004016:	30 09       	mov	r9,0
80004018:	91 09       	st.w	r8[0x0],r9
                             ~(AVR32_PWM_CALG_MASK |
                               AVR32_PWM_CPOL_MASK |
                               AVR32_PWM_CPD_MASK);
      led_pwm_channel->cprd = 0x000000FF;
8000401a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000401e:	e0 69 00 ff 	mov	r9,255
80004022:	91 29       	st.w	r8[0x8],r9
      led_pwm_channel->cdty = intensity;
80004024:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80004028:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000402c:	91 19       	st.w	r8[0x4],r9
      AVR32_PWM.ena = 1 << led_descriptor->PWM.CHANNEL;
8000402e:	fe 78 30 00 	mov	r8,-53248
80004032:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004036:	72 29       	ld.w	r9,r9[0x8]
80004038:	30 1a       	mov	r10,1
8000403a:	f4 09 09 49 	lsl	r9,r10,r9
8000403e:	91 19       	st.w	r8[0x4],r9
80004040:	c1 58       	rjmp	8000406a <LED_Set_Intensity+0xd6>
    }
    else
    {
      AVR32_PWM.isr;
80004042:	fe 78 30 00 	mov	r8,-53248
80004046:	70 78       	ld.w	r8,r8[0x1c]
      while (!(AVR32_PWM.isr & (1 << led_descriptor->PWM.CHANNEL)));
80004048:	fe 78 30 00 	mov	r8,-53248
8000404c:	70 79       	ld.w	r9,r8[0x1c]
8000404e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004052:	70 28       	ld.w	r8,r8[0x8]
80004054:	30 1a       	mov	r10,1
80004056:	f4 08 09 48 	lsl	r8,r10,r8
8000405a:	f3 e8 00 08 	and	r8,r9,r8
8000405e:	cf 50       	breq	80004048 <LED_Set_Intensity+0xb4>
      led_pwm_channel->cupd = intensity;
80004060:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80004064:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004068:	91 49       	st.w	r8[0x10],r9
    }

    // Switch the LED pin to its PWM function.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000406a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000406e:	70 08       	ld.w	r8,r8[0x0]
80004070:	a9 68       	lsl	r8,0x8
80004072:	e0 28 f0 00 	sub	r8,61440
80004076:	ef 48 ff f8 	st.w	r7[-8],r8
    if (led_descriptor->PWM.FUNCTION & 0x1)
8000407a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000407e:	70 38       	ld.w	r8,r8[0xc]
80004080:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004084:	5c 58       	castu.b	r8
80004086:	c0 80       	breq	80004096 <LED_Set_Intensity+0x102>
    {
      led_gpio_port->pmr0s = led_descriptor->GPIO.PIN_MASK;
80004088:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000408c:	70 19       	ld.w	r9,r8[0x4]
8000408e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004092:	91 59       	st.w	r8[0x14],r9
80004094:	c0 78       	rjmp	800040a2 <LED_Set_Intensity+0x10e>
    }
    else
    {
      led_gpio_port->pmr0c = led_descriptor->GPIO.PIN_MASK;
80004096:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000409a:	70 19       	ld.w	r9,r8[0x4]
8000409c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040a0:	91 69       	st.w	r8[0x18],r9
    }
    if (led_descriptor->PWM.FUNCTION & 0x2)
800040a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800040a6:	70 38       	ld.w	r8,r8[0xc]
800040a8:	e2 18 00 02 	andl	r8,0x2,COH
800040ac:	c0 80       	breq	800040bc <LED_Set_Intensity+0x128>
    {
      led_gpio_port->pmr1s = led_descriptor->GPIO.PIN_MASK;
800040ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800040b2:	70 19       	ld.w	r9,r8[0x4]
800040b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040b8:	91 99       	st.w	r8[0x24],r9
800040ba:	c0 78       	rjmp	800040c8 <LED_Set_Intensity+0x134>
    }
    else
    {
      led_gpio_port->pmr1c = led_descriptor->GPIO.PIN_MASK;
800040bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800040c0:	70 19       	ld.w	r9,r8[0x4]
800040c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040c6:	91 a9       	st.w	r8[0x28],r9
    }
    led_gpio_port->gperc = led_descriptor->GPIO.PIN_MASK;
800040c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800040cc:	70 19       	ld.w	r9,r8[0x4]
800040ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040d2:	91 29       	st.w	r8[0x8],r9
800040d4:	c0 28       	rjmp	800040d8 <LED_Set_Intensity+0x144>
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
  {
    // Select the next specified LED and check that it has a PWM channel.
    led_shift = 1 + ctz(leds);
    led_descriptor += led_shift;
    if (led_descriptor->PWM.CHANNEL < 0) continue;
800040d6:	d7 03       	nop
  volatile avr32_pwm_channel_t *led_pwm_channel;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
800040d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800040dc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800040e0:	f2 08 0a 48 	lsr	r8,r9,r8
800040e4:	ef 48 ff ec 	st.w	r7[-20],r8
800040e8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800040ec:	58 08       	cp.w	r8,0
800040ee:	fe 91 ff 67 	brne	80003fbc <LED_Set_Intensity+0x28>
    {
      led_gpio_port->pmr1c = led_descriptor->GPIO.PIN_MASK;
    }
    led_gpio_port->gperc = led_descriptor->GPIO.PIN_MASK;
  }
}
800040f2:	2f ad       	sub	sp,-24
800040f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800040f8:	80 00       	ld.sh	r0,r0[0x0]
800040fa:	c6 74       	brge	800041c8 <gpio_enable_module_pin+0x5c>

800040fc <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800040fc:	eb cd 40 80 	pushm	r7,lr
80004100:	1a 97       	mov	r7,sp
80004102:	20 4d       	sub	sp,16
80004104:	ef 4c ff f4 	st.w	r7[-12],r12
80004108:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000410c:	30 08       	mov	r8,0
8000410e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80004112:	30 08       	mov	r8,0
80004114:	ef 48 ff fc 	st.w	r7[-4],r8
80004118:	c1 c8       	rjmp	80004150 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000411a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000411e:	70 19       	ld.w	r9,r8[0x4]
80004120:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004124:	70 08       	ld.w	r8,r8[0x0]
80004126:	12 9b       	mov	r11,r9
80004128:	10 9c       	mov	r12,r8
8000412a:	f0 1f 00 10 	mcall	80004168 <gpio_enable_module+0x6c>
8000412e:	18 98       	mov	r8,r12
80004130:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004134:	f3 e8 10 08 	or	r8,r9,r8
80004138:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000413c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004140:	2f 88       	sub	r8,-8
80004142:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000414a:	2f f8       	sub	r8,-1
8000414c:	ef 48 ff fc 	st.w	r7[-4],r8
80004150:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004154:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004158:	10 39       	cp.w	r9,r8
8000415a:	ce 03       	brcs	8000411a <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000415c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80004160:	10 9c       	mov	r12,r8
80004162:	2f cd       	sub	sp,-16
80004164:	e3 cd 80 80 	ldm	sp++,r7,pc
80004168:	80 00       	ld.sh	r0,r0[0x0]
8000416a:	41 6c       	lddsp	r12,sp[0x58]

8000416c <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
8000416c:	eb cd 40 80 	pushm	r7,lr
80004170:	1a 97       	mov	r7,sp
80004172:	20 3d       	sub	sp,12
80004174:	ef 4c ff f8 	st.w	r7[-8],r12
80004178:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000417c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004180:	a5 98       	lsr	r8,0x5
80004182:	a9 68       	lsl	r8,0x8
80004184:	e0 28 f0 00 	sub	r8,61440
80004188:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
8000418c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004190:	58 18       	cp.w	r8,1
80004192:	c1 e0       	breq	800041ce <gpio_enable_module_pin+0x62>
80004194:	c0 63       	brcs	800041a0 <gpio_enable_module_pin+0x34>
80004196:	58 28       	cp.w	r8,2
80004198:	c3 20       	breq	800041fc <gpio_enable_module_pin+0x90>
8000419a:	58 38       	cp.w	r8,3
8000419c:	c4 70       	breq	8000422a <gpio_enable_module_pin+0xbe>
8000419e:	c5 d8       	rjmp	80004258 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800041a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800041a8:	30 19       	mov	r9,1
800041aa:	f2 08 09 48 	lsl	r8,r9,r8
800041ae:	10 99       	mov	r9,r8
800041b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041b4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800041b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800041be:	30 19       	mov	r9,1
800041c0:	f2 08 09 48 	lsl	r8,r9,r8
800041c4:	10 99       	mov	r9,r8
800041c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041ca:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800041cc:	c4 88       	rjmp	8000425c <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800041ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800041d6:	30 19       	mov	r9,1
800041d8:	f2 08 09 48 	lsl	r8,r9,r8
800041dc:	10 99       	mov	r9,r8
800041de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041e2:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800041e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800041ec:	30 19       	mov	r9,1
800041ee:	f2 08 09 48 	lsl	r8,r9,r8
800041f2:	10 99       	mov	r9,r8
800041f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800041f8:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800041fa:	c3 18       	rjmp	8000425c <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800041fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004200:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004204:	30 19       	mov	r9,1
80004206:	f2 08 09 48 	lsl	r8,r9,r8
8000420a:	10 99       	mov	r9,r8
8000420c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004210:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004212:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004216:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000421a:	30 19       	mov	r9,1
8000421c:	f2 08 09 48 	lsl	r8,r9,r8
80004220:	10 99       	mov	r9,r8
80004222:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004226:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004228:	c1 a8       	rjmp	8000425c <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000422a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000422e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004232:	30 19       	mov	r9,1
80004234:	f2 08 09 48 	lsl	r8,r9,r8
80004238:	10 99       	mov	r9,r8
8000423a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000423e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004244:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004248:	30 19       	mov	r9,1
8000424a:	f2 08 09 48 	lsl	r8,r9,r8
8000424e:	10 99       	mov	r9,r8
80004250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004254:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004256:	c0 38       	rjmp	8000425c <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80004258:	30 18       	mov	r8,1
8000425a:	c0 d8       	rjmp	80004274 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000425c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004260:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004264:	30 19       	mov	r9,1
80004266:	f2 08 09 48 	lsl	r8,r9,r8
8000426a:	10 99       	mov	r9,r8
8000426c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004270:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80004272:	30 08       	mov	r8,0
}
80004274:	10 9c       	mov	r12,r8
80004276:	2f dd       	sub	sp,-12
80004278:	e3 cd 80 80 	ldm	sp++,r7,pc

8000427c <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
8000427c:	eb cd 40 80 	pushm	r7,lr
80004280:	1a 97       	mov	r7,sp
80004282:	20 2d       	sub	sp,8
80004284:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000428c:	a5 98       	lsr	r8,0x5
8000428e:	a9 68       	lsl	r8,0x8
80004290:	e0 28 f0 00 	sub	r8,61440
80004294:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004298:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000429c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800042a0:	30 19       	mov	r9,1
800042a2:	f2 08 09 48 	lsl	r8,r9,r8
800042a6:	10 99       	mov	r9,r8
800042a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042ac:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
800042b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800042b8:	30 19       	mov	r9,1
800042ba:	f2 08 09 48 	lsl	r8,r9,r8
800042be:	10 99       	mov	r9,r8
800042c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042c4:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
800042c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800042d0:	30 19       	mov	r9,1
800042d2:	f2 08 09 48 	lsl	r8,r9,r8
800042d6:	10 99       	mov	r9,r8
800042d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042dc:	91 19       	st.w	r8[0x4],r9
}
800042de:	2f ed       	sub	sp,-8
800042e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800042e4 <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
800042e4:	eb cd 40 80 	pushm	r7,lr
800042e8:	1a 97       	mov	r7,sp
800042ea:	20 2d       	sub	sp,8
800042ec:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800042f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042f4:	a5 98       	lsr	r8,0x5
800042f6:	a9 68       	lsl	r8,0x8
800042f8:	e0 28 f0 00 	sub	r8,61440
800042fc:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004300:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004304:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004308:	30 19       	mov	r9,1
8000430a:	f2 08 09 48 	lsl	r8,r9,r8
8000430e:	10 99       	mov	r9,r8
80004310:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004314:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80004318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000431c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004320:	30 19       	mov	r9,1
80004322:	f2 08 09 48 	lsl	r8,r9,r8
80004326:	10 99       	mov	r9,r8
80004328:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000432c:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004330:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004334:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004338:	30 19       	mov	r9,1
8000433a:	f2 08 09 48 	lsl	r8,r9,r8
8000433e:	10 99       	mov	r9,r8
80004340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004344:	91 19       	st.w	r8[0x4],r9
}
80004346:	2f ed       	sub	sp,-8
80004348:	e3 cd 80 80 	ldm	sp++,r7,pc

8000434c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000434c:	eb cd 40 80 	pushm	r7,lr
80004350:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004352:	c0 08       	rjmp	80004352 <_unhandled_interrupt+0x6>

80004354 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004354:	eb cd 40 80 	pushm	r7,lr
80004358:	1a 97       	mov	r7,sp
8000435a:	20 3d       	sub	sp,12
8000435c:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004360:	fe 78 08 00 	mov	r8,-63488
80004364:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004368:	f2 09 11 03 	rsub	r9,r9,3
8000436c:	28 09       	sub	r9,-128
8000436e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004372:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004376:	fe 78 08 00 	mov	r8,-63488
8000437a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000437e:	2c 09       	sub	r9,-64
80004380:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004384:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000438c:	58 08       	cp.w	r8,0
8000438e:	c1 30       	breq	800043b4 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004390:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004394:	48 b8       	lddpc	r8,800043c0 <_get_interrupt_handler+0x6c>
80004396:	a1 79       	lsl	r9,0x1
80004398:	2f f9       	sub	r9,-1
8000439a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000439e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043a2:	f0 08 12 00 	clz	r8,r8
800043a6:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800043aa:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800043ac:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800043b0:	70 08       	ld.w	r8,r8[0x0]
800043b2:	c0 28       	rjmp	800043b6 <_get_interrupt_handler+0x62>
800043b4:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800043b6:	10 9c       	mov	r12,r8
800043b8:	2f dd       	sub	sp,-12
800043ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800043be:	00 00       	add	r0,r0
800043c0:	80 00       	ld.sh	r0,r0[0x0]
800043c2:	c6 f4       	brge	800044a0 <INTC_register_interrupt+0x30>

800043c4 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
800043c4:	eb cd 40 80 	pushm	r7,lr
800043c8:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800043ca:	48 38       	lddpc	r8,800043d4 <INTC_init_evba+0x10>
800043cc:	e3 b8 00 01 	mtsr	0x4,r8
}
800043d0:	e3 cd 80 80 	ldm	sp++,r7,pc
800043d4:	80 00       	ld.sh	r0,r0[0x0]
800043d6:	c4 00       	breq	80004456 <INTC_init_interrupts+0x7e>

800043d8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800043d8:	eb cd 40 80 	pushm	r7,lr
800043dc:	1a 97       	mov	r7,sp
800043de:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
800043e0:	f0 1f 00 1f 	mcall	8000445c <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800043e4:	30 08       	mov	r8,0
800043e6:	ef 48 ff f8 	st.w	r7[-8],r8
800043ea:	c3 18       	rjmp	8000444c <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800043ec:	30 08       	mov	r8,0
800043ee:	ef 48 ff fc 	st.w	r7[-4],r8
800043f2:	c1 48       	rjmp	8000441a <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800043f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800043f8:	49 a8       	lddpc	r8,80004460 <INTC_init_interrupts+0x88>
800043fa:	a1 79       	lsl	r9,0x1
800043fc:	2f f9       	sub	r9,-1
800043fe:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004406:	a3 68       	lsl	r8,0x2
80004408:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000440c:	49 69       	lddpc	r9,80004464 <INTC_init_interrupts+0x8c>
8000440e:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004414:	2f f8       	sub	r8,-1
80004416:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000441a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000441e:	49 18       	lddpc	r8,80004460 <INTC_init_interrupts+0x88>
80004420:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004424:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004428:	10 39       	cp.w	r9,r8
8000442a:	fe 9b ff e5 	brhi	800043f4 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000442e:	fe 78 08 00 	mov	r8,-63488
80004432:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004436:	48 db       	lddpc	r11,80004468 <INTC_init_interrupts+0x90>
80004438:	48 da       	lddpc	r10,8000446c <INTC_init_interrupts+0x94>
8000443a:	f6 0a 01 0a 	sub	r10,r11,r10
8000443e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004442:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004446:	2f f8       	sub	r8,-1
80004448:	ef 48 ff f8 	st.w	r7[-8],r8
8000444c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004450:	59 38       	cp.w	r8,19
80004452:	fe 98 ff cd 	brls	800043ec <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80004456:	2f ed       	sub	sp,-8
80004458:	e3 cd 80 80 	ldm	sp++,r7,pc
8000445c:	80 00       	ld.sh	r0,r0[0x0]
8000445e:	43 c4       	lddsp	r4,sp[0xf0]
80004460:	80 00       	ld.sh	r0,r0[0x0]
80004462:	c6 f4       	brge	80004540 <INTC_register_interrupt+0xd0>
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	43 4c       	lddsp	r12,sp[0xd0]
80004468:	80 00       	ld.sh	r0,r0[0x0]
8000446a:	c5 04       	brge	8000450a <INTC_register_interrupt+0x9a>
8000446c:	80 00       	ld.sh	r0,r0[0x0]
8000446e:	c4 00       	breq	800044ee <INTC_register_interrupt+0x7e>

80004470 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80004470:	eb cd 40 80 	pushm	r7,lr
80004474:	1a 97       	mov	r7,sp
80004476:	20 4d       	sub	sp,16
80004478:	ef 4c ff f8 	st.w	r7[-8],r12
8000447c:	ef 4b ff f4 	st.w	r7[-12],r11
80004480:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004484:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004488:	a5 98       	lsr	r8,0x5
8000448a:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000448e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004492:	4a 78       	lddpc	r8,8000452c <INTC_register_interrupt+0xbc>
80004494:	a1 79       	lsl	r9,0x1
80004496:	2f f9       	sub	r9,-1
80004498:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000449c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800044a4:	a3 68       	lsl	r8,0x2
800044a6:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800044aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800044ae:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800044b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800044b4:	58 08       	cp.w	r8,0
800044b6:	c0 c1       	brne	800044ce <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800044b8:	fe 78 08 00 	mov	r8,-63488
800044bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800044c0:	49 cb       	lddpc	r11,80004530 <INTC_register_interrupt+0xc0>
800044c2:	49 da       	lddpc	r10,80004534 <INTC_register_interrupt+0xc4>
800044c4:	f6 0a 01 0a 	sub	r10,r11,r10
800044c8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800044cc:	c2 d8       	rjmp	80004526 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
800044ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800044d2:	58 18       	cp.w	r8,1
800044d4:	c0 d1       	brne	800044ee <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800044d6:	fe 78 08 00 	mov	r8,-63488
800044da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800044de:	49 7b       	lddpc	r11,80004538 <INTC_register_interrupt+0xc8>
800044e0:	49 5a       	lddpc	r10,80004534 <INTC_register_interrupt+0xc4>
800044e2:	f6 0a 01 0a 	sub	r10,r11,r10
800044e6:	bf aa       	sbr	r10,0x1e
800044e8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800044ec:	c1 d8       	rjmp	80004526 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
800044ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800044f2:	58 28       	cp.w	r8,2
800044f4:	c0 d1       	brne	8000450e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800044f6:	fe 78 08 00 	mov	r8,-63488
800044fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800044fe:	49 0b       	lddpc	r11,8000453c <INTC_register_interrupt+0xcc>
80004500:	48 da       	lddpc	r10,80004534 <INTC_register_interrupt+0xc4>
80004502:	f6 0a 01 0a 	sub	r10,r11,r10
80004506:	bf ba       	sbr	r10,0x1f
80004508:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000450c:	c0 d8       	rjmp	80004526 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000450e:	fe 78 08 00 	mov	r8,-63488
80004512:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004516:	48 bb       	lddpc	r11,80004540 <INTC_register_interrupt+0xd0>
80004518:	48 7a       	lddpc	r10,80004534 <INTC_register_interrupt+0xc4>
8000451a:	f6 0a 01 0a 	sub	r10,r11,r10
8000451e:	ea 1a c0 00 	orh	r10,0xc000
80004522:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80004526:	2f cd       	sub	sp,-16
80004528:	e3 cd 80 80 	ldm	sp++,r7,pc
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	c6 f4       	brge	8000460c <pm_enable_clk0+0x18>
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	c5 04       	brge	800045d2 <pm_enable_osc0_crystal+0x42>
80004534:	80 00       	ld.sh	r0,r0[0x0]
80004536:	c4 00       	breq	800045b6 <pm_enable_osc0_crystal+0x26>
80004538:	80 00       	ld.sh	r0,r0[0x0]
8000453a:	c5 12       	brcc	800045dc <pm_enable_osc0_crystal+0x4c>
8000453c:	80 00       	ld.sh	r0,r0[0x0]
8000453e:	c5 20       	breq	800045e2 <pm_enable_osc0_crystal+0x52>
80004540:	80 00       	ld.sh	r0,r0[0x0]
80004542:	c5 2e       	rcall	800041e6 <gpio_enable_module_pin+0x7a>

80004544 <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
80004544:	eb cd 40 80 	pushm	r7,lr
80004548:	1a 97       	mov	r7,sp
8000454a:	20 3d       	sub	sp,12
8000454c:	ef 4c ff f8 	st.w	r7[-8],r12
80004550:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80004554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004558:	70 a8       	ld.w	r8,r8[0x28]
8000455a:	30 09       	mov	r9,0
8000455c:	ef 49 ff fc 	st.w	r7[-4],r9
80004560:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80004564:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004568:	5c 58       	castu.b	r8
8000456a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000456e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004572:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004576:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
8000457a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000457e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004582:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004586:	91 a9       	st.w	r8[0x28],r9
}
80004588:	2f dd       	sub	sp,-12
8000458a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000458e:	d7 03       	nop

80004590 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80004590:	eb cd 40 80 	pushm	r7,lr
80004594:	1a 97       	mov	r7,sp
80004596:	20 2d       	sub	sp,8
80004598:	ef 4c ff fc 	st.w	r7[-4],r12
8000459c:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
800045a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045a4:	ec 58 bb 9f 	cp.w	r8,899999
800045a8:	e0 88 00 1a 	brls	800045dc <pm_enable_osc0_crystal+0x4c>
800045ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045b0:	e0 69 c6 bf 	mov	r9,50879
800045b4:	ea 19 00 2d 	orh	r9,0x2d
800045b8:	12 38       	cp.w	r8,r9
800045ba:	e0 88 00 0f 	brls	800045d8 <pm_enable_osc0_crystal+0x48>
800045be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045c2:	e0 69 11 ff 	mov	r9,4607
800045c6:	ea 19 00 7a 	orh	r9,0x7a
800045ca:	12 38       	cp.w	r8,r9
800045cc:	e0 8b 00 04 	brhi	800045d4 <pm_enable_osc0_crystal+0x44>
800045d0:	30 68       	mov	r8,6
800045d2:	c0 28       	rjmp	800045d6 <pm_enable_osc0_crystal+0x46>
800045d4:	30 78       	mov	r8,7
800045d6:	c0 28       	rjmp	800045da <pm_enable_osc0_crystal+0x4a>
800045d8:	30 58       	mov	r8,5
800045da:	c0 28       	rjmp	800045de <pm_enable_osc0_crystal+0x4e>
800045dc:	30 48       	mov	r8,4
800045de:	10 9b       	mov	r11,r8
800045e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800045e4:	f0 1f 00 03 	mcall	800045f0 <pm_enable_osc0_crystal+0x60>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800045e8:	2f ed       	sub	sp,-8
800045ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800045ee:	00 00       	add	r0,r0
800045f0:	80 00       	ld.sh	r0,r0[0x0]
800045f2:	45 44       	lddsp	r4,sp[0x150]

800045f4 <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800045f4:	eb cd 40 80 	pushm	r7,lr
800045f8:	1a 97       	mov	r7,sp
800045fa:	20 2d       	sub	sp,8
800045fc:	ef 4c ff fc 	st.w	r7[-4],r12
80004600:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
80004604:	ee fb ff f8 	ld.w	r11,r7[-8]
80004608:	ee fc ff fc 	ld.w	r12,r7[-4]
8000460c:	f0 1f 00 05 	mcall	80004620 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
80004610:	ee fc ff fc 	ld.w	r12,r7[-4]
80004614:	f0 1f 00 04 	mcall	80004624 <pm_enable_clk0+0x30>
}
80004618:	2f ed       	sub	sp,-8
8000461a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000461e:	00 00       	add	r0,r0
80004620:	80 00       	ld.sh	r0,r0[0x0]
80004622:	46 28       	lddsp	r8,sp[0x188]
80004624:	80 00       	ld.sh	r0,r0[0x0]
80004626:	46 82       	lddsp	r2,sp[0x1a0]

80004628 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
80004628:	eb cd 40 80 	pushm	r7,lr
8000462c:	1a 97       	mov	r7,sp
8000462e:	20 3d       	sub	sp,12
80004630:	ef 4c ff f8 	st.w	r7[-8],r12
80004634:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80004638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000463c:	70 a8       	ld.w	r8,r8[0x28]
8000463e:	30 09       	mov	r9,0
80004640:	ef 49 ff fc 	st.w	r7[-4],r9
80004644:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80004648:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000464c:	5c 58       	castu.b	r8
8000464e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004652:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000465a:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
8000465e:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80004662:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000466a:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
8000466c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004670:	70 08       	ld.w	r8,r8[0x0]
80004672:	10 99       	mov	r9,r8
80004674:	a3 a9       	sbr	r9,0x2
80004676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000467a:	91 09       	st.w	r8[0x0],r9
}
8000467c:	2f dd       	sub	sp,-12
8000467e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004682 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
80004682:	eb cd 40 80 	pushm	r7,lr
80004686:	1a 97       	mov	r7,sp
80004688:	20 1d       	sub	sp,4
8000468a:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000468e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004692:	71 58       	ld.w	r8,r8[0x54]
80004694:	e2 18 00 80 	andl	r8,0x80,COH
80004698:	cf b0       	breq	8000468e <pm_wait_for_clk0_ready+0xc>
}
8000469a:	2f fd       	sub	sp,-4
8000469c:	e3 cd 80 80 	ldm	sp++,r7,pc

800046a0 <pm_switch_to_clock>:
  return u_avr32_pm_mcctrl.MCCTRL.mcsel;
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
800046a0:	eb cd 40 80 	pushm	r7,lr
800046a4:	1a 97       	mov	r7,sp
800046a6:	20 3d       	sub	sp,12
800046a8:	ef 4c ff f8 	st.w	r7[-8],r12
800046ac:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
800046b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046b4:	70 08       	ld.w	r8,r8[0x0]
800046b6:	30 09       	mov	r9,0
800046b8:	ef 49 ff fc 	st.w	r7[-4],r9
800046bc:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
800046c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800046c4:	5c 58       	castu.b	r8
800046c6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800046ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800046ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046d2:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
800046d6:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
800046da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800046de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800046e2:	91 09       	st.w	r8[0x0],r9
}
800046e4:	2f dd       	sub	sp,-12
800046e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800046ea:	d7 03       	nop

800046ec <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
800046ec:	eb cd 40 80 	pushm	r7,lr
800046f0:	1a 97       	mov	r7,sp
800046f2:	20 3d       	sub	sp,12
800046f4:	ef 4c ff fc 	st.w	r7[-4],r12
800046f8:	ef 4b ff f8 	st.w	r7[-8],r11
800046fc:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80004700:	ee fb ff f8 	ld.w	r11,r7[-8]
80004704:	ee fc ff fc 	ld.w	r12,r7[-4]
80004708:	f0 1f 00 08 	mcall	80004728 <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
8000470c:	ee fb ff f4 	ld.w	r11,r7[-12]
80004710:	ee fc ff fc 	ld.w	r12,r7[-4]
80004714:	f0 1f 00 06 	mcall	8000472c <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80004718:	30 1b       	mov	r11,1
8000471a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000471e:	f0 1f 00 05 	mcall	80004730 <pm_switch_to_osc0+0x44>
}
80004722:	2f dd       	sub	sp,-12
80004724:	e3 cd 80 80 	ldm	sp++,r7,pc
80004728:	80 00       	ld.sh	r0,r0[0x0]
8000472a:	45 90       	lddsp	r0,sp[0x164]
8000472c:	80 00       	ld.sh	r0,r0[0x0]
8000472e:	45 f4       	lddsp	r4,sp[0x17c]
80004730:	80 00       	ld.sh	r0,r0[0x0]
80004732:	46 a0       	lddsp	r0,sp[0x1a8]

80004734 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80004734:	eb cd 40 80 	pushm	r7,lr
80004738:	1a 97       	mov	r7,sp
8000473a:	20 1d       	sub	sp,4
8000473c:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004740:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004744:	e6 18 00 01 	andh	r8,0x1,COH
80004748:	5f 08       	sreq	r8
8000474a:	5c 58       	castu.b	r8
}
8000474c:	10 9c       	mov	r12,r8
8000474e:	2f fd       	sub	sp,-4
80004750:	e3 cd 80 80 	ldm	sp++,r7,pc

80004754 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
80004754:	eb cd 40 80 	pushm	r7,lr
80004758:	1a 97       	mov	r7,sp
8000475a:	20 7d       	sub	sp,28
8000475c:	ef 4c ff ec 	st.w	r7[-20],r12
80004760:	ef 4b ff e8 	st.w	r7[-24],r11
80004764:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80004768:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000476c:	f0 09 15 04 	lsl	r9,r8,0x4
80004770:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004774:	10 39       	cp.w	r9,r8
80004776:	e0 8b 00 04 	brhi	8000477e <usart_set_async_baudrate+0x2a>
8000477a:	31 08       	mov	r8,16
8000477c:	c0 28       	rjmp	80004780 <usart_set_async_baudrate+0x2c>
8000477e:	30 88       	mov	r8,8
80004780:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80004784:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004788:	f0 09 15 03 	lsl	r9,r8,0x3
8000478c:	ee fa ff f0 	ld.w	r10,r7[-16]
80004790:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004794:	f4 08 02 48 	mul	r8,r10,r8
80004798:	a1 98       	lsr	r8,0x1
8000479a:	f2 08 00 08 	add	r8,r9,r8
8000479e:	ee fa ff f0 	ld.w	r10,r7[-16]
800047a2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800047a6:	f4 09 02 49 	mul	r9,r10,r9
800047aa:	f0 09 0d 08 	divu	r8,r8,r9
800047ae:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800047b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800047b6:	a3 98       	lsr	r8,0x3
800047b8:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
800047bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800047c0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800047c4:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800047c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047cc:	58 08       	cp.w	r8,0
800047ce:	c0 70       	breq	800047dc <usart_set_async_baudrate+0x88>
800047d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800047d4:	e0 48 ff ff 	cp.w	r8,65535
800047d8:	e0 88 00 04 	brls	800047e0 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
800047dc:	30 18       	mov	r8,1
800047de:	c2 08       	rjmp	8000481e <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800047e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800047e4:	70 18       	ld.w	r8,r8[0x4]
800047e6:	10 99       	mov	r9,r8
800047e8:	e4 19 ff f7 	andh	r9,0xfff7
800047ec:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800047f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800047f4:	59 08       	cp.w	r8,16
800047f6:	c0 40       	breq	800047fe <usart_set_async_baudrate+0xaa>
800047f8:	e8 68 00 00 	mov	r8,524288
800047fc:	c0 28       	rjmp	80004800 <usart_set_async_baudrate+0xac>
800047fe:	30 08       	mov	r8,0
80004800:	10 49       	or	r9,r8
80004802:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004806:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80004808:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000480c:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80004810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004814:	10 49       	or	r9,r8
80004816:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000481a:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8000481c:	30 08       	mov	r8,0
}
8000481e:	10 9c       	mov	r12,r8
80004820:	2f 9d       	sub	sp,-28
80004822:	e3 cd 80 80 	ldm	sp++,r7,pc
80004826:	d7 03       	nop

80004828 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80004828:	eb cd 40 80 	pushm	r7,lr
8000482c:	1a 97       	mov	r7,sp
8000482e:	20 2d       	sub	sp,8
80004830:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
80004834:	e1 b8 00 00 	mfsr	r8,0x0
80004838:	10 9c       	mov	r12,r8
8000483a:	f0 1f 00 18 	mcall	80004898 <usart_reset+0x70>
8000483e:	18 98       	mov	r8,r12
80004840:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80004844:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004848:	30 08       	mov	r8,0
8000484a:	f0 09 18 00 	cp.b	r9,r8
8000484e:	c0 20       	breq	80004852 <usart_reset+0x2a>
80004850:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80004852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004856:	3f f9       	mov	r9,-1
80004858:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8000485a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000485e:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80004860:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004864:	30 08       	mov	r8,0
80004866:	f0 09 18 00 	cp.b	r9,r8
8000486a:	c0 20       	breq	8000486e <usart_reset+0x46>
8000486c:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8000486e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004872:	30 09       	mov	r9,0
80004874:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80004876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000487a:	30 09       	mov	r9,0
8000487c:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8000487e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004882:	30 09       	mov	r9,0
80004884:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80004886:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000488a:	ea 69 61 0c 	mov	r9,680204
8000488e:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80004890:	2f ed       	sub	sp,-8
80004892:	e3 cd 80 80 	ldm	sp++,r7,pc
80004896:	00 00       	add	r0,r0
80004898:	80 00       	ld.sh	r0,r0[0x0]
8000489a:	47 34       	lddsp	r4,sp[0x1cc]

8000489c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8000489c:	eb cd 40 80 	pushm	r7,lr
800048a0:	1a 97       	mov	r7,sp
800048a2:	20 3d       	sub	sp,12
800048a4:	ef 4c ff fc 	st.w	r7[-4],r12
800048a8:	ef 4b ff f8 	st.w	r7[-8],r11
800048ac:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800048b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800048b4:	f0 1f 00 54 	mcall	80004a04 <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
800048b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048bc:	58 08       	cp.w	r8,0
800048be:	c3 90       	breq	80004930 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
800048c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048c4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800048c6:	30 48       	mov	r8,4
800048c8:	f0 09 18 00 	cp.b	r9,r8
800048cc:	e0 88 00 32 	brls	80004930 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
800048d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048d4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800048d6:	30 98       	mov	r8,9
800048d8:	f0 09 18 00 	cp.b	r9,r8
800048dc:	e0 8b 00 2a 	brhi	80004930 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
800048e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048e4:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800048e6:	30 78       	mov	r8,7
800048e8:	f0 09 18 00 	cp.b	r9,r8
800048ec:	e0 8b 00 22 	brhi	80004930 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
800048f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048f4:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800048f6:	e0 68 01 01 	mov	r8,257
800048fa:	f0 09 19 00 	cp.h	r9,r8
800048fe:	e0 8b 00 19 	brhi	80004930 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80004902:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004906:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000490a:	30 38       	mov	r8,3
8000490c:	f0 09 18 00 	cp.b	r9,r8
80004910:	e0 8b 00 10 	brhi	80004930 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80004914:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000491c:	70 08       	ld.w	r8,r8[0x0]
8000491e:	12 9a       	mov	r10,r9
80004920:	10 9b       	mov	r11,r8
80004922:	ee fc ff fc 	ld.w	r12,r7[-4]
80004926:	f0 1f 00 39 	mcall	80004a08 <usart_init_rs232+0x16c>
8000492a:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000492c:	58 18       	cp.w	r8,1
8000492e:	c0 31       	brne	80004934 <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80004930:	30 18       	mov	r8,1
80004932:	c6 48       	rjmp	800049fa <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80004934:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004938:	11 c9       	ld.ub	r9,r8[0x4]
8000493a:	30 98       	mov	r8,9
8000493c:	f0 09 18 00 	cp.b	r9,r8
80004940:	c0 a1       	brne	80004954 <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80004942:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004946:	70 18       	ld.w	r8,r8[0x4]
80004948:	10 99       	mov	r9,r8
8000494a:	b1 b9       	sbr	r9,0x11
8000494c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004950:	91 19       	st.w	r8[0x4],r9
80004952:	c0 d8       	rjmp	8000496c <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80004954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004958:	70 19       	ld.w	r9,r8[0x4]
8000495a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000495e:	11 c8       	ld.ub	r8,r8[0x4]
80004960:	20 58       	sub	r8,5
80004962:	a7 68       	lsl	r8,0x6
80004964:	10 49       	or	r9,r8
80004966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000496a:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000496c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004970:	70 19       	ld.w	r9,r8[0x4]
80004972:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004976:	11 d8       	ld.ub	r8,r8[0x5]
80004978:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8000497c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004980:	f1 38 00 08 	ld.ub	r8,r8[8]
80004984:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80004986:	f5 e8 10 08 	or	r8,r10,r8
8000498a:	10 49       	or	r9,r8
8000498c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004990:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80004992:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004996:	90 39       	ld.sh	r9,r8[0x6]
80004998:	30 28       	mov	r8,2
8000499a:	f0 09 19 00 	cp.h	r9,r8
8000499e:	e0 88 00 14 	brls	800049c6 <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800049a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049a6:	70 18       	ld.w	r8,r8[0x4]
800049a8:	10 99       	mov	r9,r8
800049aa:	ad b9       	sbr	r9,0xd
800049ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049b0:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800049b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049b6:	90 38       	ld.sh	r8,r8[0x6]
800049b8:	5c 78       	castu.h	r8
800049ba:	20 28       	sub	r8,2
800049bc:	10 99       	mov	r9,r8
800049be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049c2:	91 a9       	st.w	r8[0x28],r9
800049c4:	c0 d8       	rjmp	800049de <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800049c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049ca:	70 19       	ld.w	r9,r8[0x4]
800049cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049d0:	90 38       	ld.sh	r8,r8[0x6]
800049d2:	5c 78       	castu.h	r8
800049d4:	ad 68       	lsl	r8,0xc
800049d6:	10 49       	or	r9,r8
800049d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049dc:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800049de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049e2:	70 18       	ld.w	r8,r8[0x4]
800049e4:	10 99       	mov	r9,r8
800049e6:	e0 19 ff f0 	andl	r9,0xfff0
800049ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049ee:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800049f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800049f4:	35 09       	mov	r9,80
800049f6:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800049f8:	30 08       	mov	r8,0
}
800049fa:	10 9c       	mov	r12,r8
800049fc:	2f dd       	sub	sp,-12
800049fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a02:	00 00       	add	r0,r0
80004a04:	80 00       	ld.sh	r0,r0[0x0]
80004a06:	48 28       	lddpc	r8,80004a0c <usart_write_char>
80004a08:	80 00       	ld.sh	r0,r0[0x0]
80004a0a:	47 54       	lddsp	r4,sp[0x1d4]

80004a0c <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80004a0c:	eb cd 40 80 	pushm	r7,lr
80004a10:	1a 97       	mov	r7,sp
80004a12:	20 3d       	sub	sp,12
80004a14:	ef 4c ff f8 	st.w	r7[-8],r12
80004a18:	ef 4b ff f4 	st.w	r7[-12],r11
80004a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a20:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80004a24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a28:	70 58       	ld.w	r8,r8[0x14]
80004a2a:	e2 18 00 02 	andl	r8,0x2,COH
80004a2e:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80004a30:	58 08       	cp.w	r8,0
80004a32:	c0 a0       	breq	80004a46 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80004a34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a38:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80004a3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a40:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80004a42:	30 08       	mov	r8,0
80004a44:	c0 28       	rjmp	80004a48 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80004a46:	30 28       	mov	r8,2
}
80004a48:	10 9c       	mov	r12,r8
80004a4a:	2f dd       	sub	sp,-12
80004a4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004a50 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80004a50:	eb cd 40 80 	pushm	r7,lr
80004a54:	1a 97       	mov	r7,sp
80004a56:	20 3d       	sub	sp,12
80004a58:	ef 4c ff f8 	st.w	r7[-8],r12
80004a5c:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80004a60:	e0 68 27 10 	mov	r8,10000
80004a64:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80004a68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a6c:	58 08       	cp.w	r8,0
80004a6e:	5f 08       	sreq	r8
80004a70:	5c 58       	castu.b	r8
80004a72:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a76:	20 19       	sub	r9,1
80004a78:	ef 49 ff fc 	st.w	r7[-4],r9
80004a7c:	58 08       	cp.w	r8,0
80004a7e:	c0 30       	breq	80004a84 <usart_putchar+0x34>
80004a80:	3f f8       	mov	r8,-1
80004a82:	c0 b8       	rjmp	80004a98 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80004a84:	ee fb ff f4 	ld.w	r11,r7[-12]
80004a88:	ee fc ff f8 	ld.w	r12,r7[-8]
80004a8c:	f0 1f 00 05 	mcall	80004aa0 <usart_putchar+0x50>
80004a90:	18 98       	mov	r8,r12
80004a92:	58 08       	cp.w	r8,0
80004a94:	ce a1       	brne	80004a68 <usart_putchar+0x18>

  return USART_SUCCESS;
80004a96:	30 08       	mov	r8,0
}
80004a98:	10 9c       	mov	r12,r8
80004a9a:	2f dd       	sub	sp,-12
80004a9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004aa0:	80 00       	ld.sh	r0,r0[0x0]
80004aa2:	4a 0c       	lddpc	r12,80004b20 <usart_getchar+0x28>

80004aa4 <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
80004aa4:	eb cd 40 80 	pushm	r7,lr
80004aa8:	1a 97       	mov	r7,sp
80004aaa:	20 3d       	sub	sp,12
80004aac:	ef 4c ff f8 	st.w	r7[-8],r12
80004ab0:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
80004ab4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ab8:	70 58       	ld.w	r8,r8[0x14]
80004aba:	e2 18 00 e0 	andl	r8,0xe0,COH
80004abe:	c0 30       	breq	80004ac4 <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
80004ac0:	30 48       	mov	r8,4
80004ac2:	c1 68       	rjmp	80004aee <usart_read_char+0x4a>
80004ac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ac8:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Receive Holding Register is full, otherwise \c 0.
 */
__always_inline static int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
80004acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ad0:	70 58       	ld.w	r8,r8[0x14]
80004ad2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
80004ad6:	c0 b0       	breq	80004aec <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
80004ad8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004adc:	70 68       	ld.w	r8,r8[0x18]
80004ade:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80004ae2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ae6:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
80004ae8:	30 08       	mov	r8,0
80004aea:	c0 28       	rjmp	80004aee <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
80004aec:	30 38       	mov	r8,3
}
80004aee:	10 9c       	mov	r12,r8
80004af0:	2f dd       	sub	sp,-12
80004af2:	e3 cd 80 80 	ldm	sp++,r7,pc
80004af6:	d7 03       	nop

80004af8 <usart_getchar>:


int usart_getchar(volatile avr32_usart_t *usart)
{
80004af8:	eb cd 40 80 	pushm	r7,lr
80004afc:	1a 97       	mov	r7,sp
80004afe:	20 3d       	sub	sp,12
80004b00:	ef 4c ff f4 	st.w	r7[-12],r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
80004b04:	ee c8 00 08 	sub	r8,r7,8
80004b08:	10 9b       	mov	r11,r8
80004b0a:	ee fc ff f4 	ld.w	r12,r7[-12]
80004b0e:	f0 1f 00 0b 	mcall	80004b38 <usart_getchar+0x40>
80004b12:	18 98       	mov	r8,r12
80004b14:	ef 48 ff fc 	st.w	r7[-4],r8
80004b18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b1c:	58 38       	cp.w	r8,3
80004b1e:	cf 30       	breq	80004b04 <usart_getchar+0xc>

  if (ret == USART_RX_ERROR)
80004b20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b24:	58 48       	cp.w	r8,4
80004b26:	c0 31       	brne	80004b2c <usart_getchar+0x34>
    return USART_FAILURE;
80004b28:	3f f8       	mov	r8,-1
80004b2a:	c0 38       	rjmp	80004b30 <usart_getchar+0x38>

  return c;
80004b2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80004b30:	10 9c       	mov	r12,r8
80004b32:	2f dd       	sub	sp,-12
80004b34:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b38:	80 00       	ld.sh	r0,r0[0x0]
80004b3a:	4a a4       	lddpc	r4,80004be0 <vListInsertEnd+0x3e>

80004b3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
80004b3c:	eb cd 40 80 	pushm	r7,lr
80004b40:	1a 97       	mov	r7,sp
80004b42:	20 1d       	sub	sp,4
80004b44:	ef 4c ff fc 	st.w	r7[-4],r12
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
80004b48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b4c:	2f 88       	sub	r8,-8
80004b4e:	10 99       	mov	r9,r8
80004b50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b54:	91 19       	st.w	r8[0x4],r9

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80004b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b5a:	3f f9       	mov	r9,-1
80004b5c:	91 29       	st.w	r8[0x8],r9

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
80004b5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b62:	2f 88       	sub	r8,-8
80004b64:	10 99       	mov	r9,r8
80004b66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b6a:	91 39       	st.w	r8[0xc],r9
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
80004b6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b70:	2f 88       	sub	r8,-8
80004b72:	10 99       	mov	r9,r8
80004b74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b78:	91 49       	st.w	r8[0x10],r9

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
80004b7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b7e:	30 09       	mov	r9,0
80004b80:	91 09       	st.w	r8[0x0],r9
}
80004b82:	2f fd       	sub	sp,-4
80004b84:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
80004b88:	eb cd 40 80 	pushm	r7,lr
80004b8c:	1a 97       	mov	r7,sp
80004b8e:	20 1d       	sub	sp,4
80004b90:	ef 4c ff fc 	st.w	r7[-4],r12
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80004b94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b98:	30 09       	mov	r9,0
80004b9a:	91 49       	st.w	r8[0x10],r9
}
80004b9c:	2f fd       	sub	sp,-4
80004b9e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004ba2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
80004ba2:	eb cd 40 80 	pushm	r7,lr
80004ba6:	1a 97       	mov	r7,sp
80004ba8:	20 3d       	sub	sp,12
80004baa:	ef 4c ff f8 	st.w	r7[-8],r12
80004bae:	ef 4b ff f4 	st.w	r7[-12],r11

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
80004bb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bb6:	70 18       	ld.w	r8,r8[0x4]
80004bb8:	ef 48 ff fc 	st.w	r7[-4],r8

	pxNewListItem->pxNext = pxIndex->pxNext;
80004bbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bc0:	70 19       	ld.w	r9,r8[0x4]
80004bc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bc6:	91 19       	st.w	r8[0x4],r9
	pxNewListItem->pxPrevious = pxList->pxIndex;
80004bc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bcc:	70 19       	ld.w	r9,r8[0x4]
80004bce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bd2:	91 29       	st.w	r8[0x8],r9
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004bd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bd8:	70 18       	ld.w	r8,r8[0x4]
80004bda:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bde:	91 29       	st.w	r8[0x8],r9
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
80004be0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004be4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004be8:	91 19       	st.w	r8[0x4],r9
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
80004bea:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004bee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bf2:	91 19       	st.w	r8[0x4],r9

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004bf4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004bfc:	91 49       	st.w	r8[0x10],r9

	( pxList->uxNumberOfItems )++;
80004bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c02:	70 08       	ld.w	r8,r8[0x0]
80004c04:	f0 c9 ff ff 	sub	r9,r8,-1
80004c08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c0c:	91 09       	st.w	r8[0x0],r9
}
80004c0e:	2f dd       	sub	sp,-12
80004c10:	e3 cd 80 80 	ldm	sp++,r7,pc

80004c14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
80004c14:	eb cd 40 80 	pushm	r7,lr
80004c18:	1a 97       	mov	r7,sp
80004c1a:	20 4d       	sub	sp,16
80004c1c:	ef 4c ff f4 	st.w	r7[-12],r12
80004c20:	ef 4b ff f0 	st.w	r7[-16],r11
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
80004c24:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c28:	70 08       	ld.w	r8,r8[0x0]
80004c2a:	ef 48 ff fc 	st.w	r7[-4],r8
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80004c2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c32:	5b f8       	cp.w	r8,-1
80004c34:	c0 71       	brne	80004c42 <vListInsert+0x2e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80004c36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c3a:	70 48       	ld.w	r8,r8[0x10]
80004c3c:	ef 48 ff f8 	st.w	r7[-8],r8
80004c40:	c1 58       	rjmp	80004c6a <vListInsert+0x56>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
80004c42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c46:	2f 88       	sub	r8,-8
80004c48:	ef 48 ff f8 	st.w	r7[-8],r8
80004c4c:	c0 68       	rjmp	80004c58 <vListInsert+0x44>
80004c4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c52:	70 18       	ld.w	r8,r8[0x4]
80004c54:	ef 48 ff f8 	st.w	r7[-8],r8
80004c58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c5c:	70 18       	ld.w	r8,r8[0x4]
80004c5e:	70 09       	ld.w	r9,r8[0x0]
80004c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c64:	10 39       	cp.w	r9,r8
80004c66:	fe 98 ff f4 	brls	80004c4e <vListInsert+0x3a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80004c6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c6e:	70 19       	ld.w	r9,r8[0x4]
80004c70:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c74:	91 19       	st.w	r8[0x4],r9
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
80004c76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c7a:	70 18       	ld.w	r8,r8[0x4]
80004c7c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004c80:	91 29       	st.w	r8[0x8],r9
	pxNewListItem->pxPrevious = pxIterator;
80004c82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c8a:	91 29       	st.w	r8[0x8],r9
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
80004c8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004c90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c94:	91 19       	st.w	r8[0x4],r9

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80004c96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004c9a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004c9e:	91 49       	st.w	r8[0x10],r9

	( pxList->uxNumberOfItems )++;
80004ca0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004ca4:	70 08       	ld.w	r8,r8[0x0]
80004ca6:	f0 c9 ff ff 	sub	r9,r8,-1
80004caa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004cae:	91 09       	st.w	r8[0x0],r9
}
80004cb0:	2f cd       	sub	sp,-16
80004cb2:	e3 cd 80 80 	ldm	sp++,r7,pc

80004cb6 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
80004cb6:	eb cd 40 80 	pushm	r7,lr
80004cba:	1a 97       	mov	r7,sp
80004cbc:	20 2d       	sub	sp,8
80004cbe:	ef 4c ff f8 	st.w	r7[-8],r12
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80004cc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cc6:	70 18       	ld.w	r8,r8[0x4]
80004cc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ccc:	72 29       	ld.w	r9,r9[0x8]
80004cce:	91 29       	st.w	r8[0x8],r9
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80004cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cd4:	70 28       	ld.w	r8,r8[0x8]
80004cd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004cda:	72 19       	ld.w	r9,r9[0x4]
80004cdc:	91 19       	st.w	r8[0x4],r9

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
80004cde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ce2:	70 48       	ld.w	r8,r8[0x10]
80004ce4:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80004ce8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cec:	70 19       	ld.w	r9,r8[0x4]
80004cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cf2:	10 39       	cp.w	r9,r8
80004cf4:	c0 71       	brne	80004d02 <vListRemove+0x4c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80004cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cfa:	70 29       	ld.w	r9,r8[0x8]
80004cfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d00:	91 19       	st.w	r8[0x4],r9
	}

	pxItemToRemove->pvContainer = NULL;
80004d02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d06:	30 09       	mov	r9,0
80004d08:	91 49       	st.w	r8[0x10],r9
	( pxList->uxNumberOfItems )--;
80004d0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d0e:	70 08       	ld.w	r8,r8[0x0]
80004d10:	f0 c9 00 01 	sub	r9,r8,1
80004d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d18:	91 09       	st.w	r8[0x0],r9
}
80004d1a:	2f ed       	sub	sp,-8
80004d1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004d20 <_init_startup>:
 * exception vectors are not compatible with the SCALL management in the current
 * FreeRTOS port. More low-level initializations are besides added here.
 */
int _init_startup(void);
int _init_startup(void)
{
80004d20:	eb cd 40 80 	pushm	r7,lr
80004d24:	1a 97       	mov	r7,sp
		extern void __heap_end__;
		portBASE_TYPE *pxMem;
	#endif

	/* Load the Exception Vector Base Address in the corresponding system register. */
	Set_system_register( AVR32_EVBA, ( int ) &_evba );
80004d26:	48 e8       	lddpc	r8,80004d5c <_init_startup+0x3c>
80004d28:	e3 b8 00 01 	mtsr	0x4,r8

	/* Enable exceptions. */
	ENABLE_ALL_EXCEPTIONS();
80004d2c:	d5 53       	csrf	0x15

	/* Initialize interrupt handling. */
	INTC_init_interrupts();
80004d2e:	f0 1f 00 0d 	mcall	80004d60 <_init_startup+0x40>
			.channelmode = USART_NORMAL_CHMODE
		};

		/* Initialize the USART used for the debug trace with the configured parameters. */
		extern volatile avr32_usart_t *volatile stdio_usart_base;
		stdio_usart_base = configDBG_USART;
80004d32:	48 d8       	lddpc	r8,80004d64 <_init_startup+0x44>
80004d34:	fe 79 18 00 	mov	r9,-59392
80004d38:	91 09       	st.w	r8[0x0],r9
		gpio_enable_module( DBG_USART_GPIO_MAP,
80004d3a:	30 2b       	mov	r11,2
80004d3c:	48 bc       	lddpc	r12,80004d68 <_init_startup+0x48>
80004d3e:	f0 1f 00 0c 	mcall	80004d6c <_init_startup+0x4c>
		                    sizeof( DBG_USART_GPIO_MAP ) / sizeof( DBG_USART_GPIO_MAP[0] ) );
		usart_init_rs232(configDBG_USART, &DBG_USART_OPTIONS, configPBA_CLOCK_HZ);
80004d42:	e0 6a 1b 00 	mov	r10,6912
80004d46:	ea 1a 00 b7 	orh	r10,0xb7
80004d4a:	48 ab       	lddpc	r11,80004d70 <_init_startup+0x50>
80004d4c:	fe 7c 18 00 	mov	r12,-59392
80004d50:	f0 1f 00 09 	mcall	80004d74 <_init_startup+0x54>
	}
	#endif

  // Don't-care value for GCC.
  return 1;
80004d54:	30 18       	mov	r8,1
}
80004d56:	10 9c       	mov	r12,r8
80004d58:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d5c:	80 00       	ld.sh	r0,r0[0x0]
80004d5e:	c4 00       	breq	80004dde <LABEL_INT_SKIP_SAVE_CONTEXT_234+0x6>
80004d60:	80 00       	ld.sh	r0,r0[0x0]
80004d62:	43 d8       	lddsp	r8,sp[0xf4]
80004d64:	00 00       	add	r0,r0
80004d66:	07 f8       	ld.ub	r8,r3[0x7]
80004d68:	80 00       	ld.sh	r0,r0[0x0]
80004d6a:	c7 94       	brge	80004e5c <SCALLYield+0x28>
80004d6c:	80 00       	ld.sh	r0,r0[0x0]
80004d6e:	40 fc       	lddsp	r12,sp[0x3c]
80004d70:	80 00       	ld.sh	r0,r0[0x0]
80004d72:	c7 a4       	brge	80004e66 <SCALLYield+0x32>
80004d74:	80 00       	ld.sh	r0,r0[0x0]
80004d76:	48 9c       	lddpc	r12,80004d98 <__malloc_unlock+0x4>

80004d78 <__malloc_lock>:
 * safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_lock(struct _reent *ptr);
void __malloc_lock(struct _reent *ptr)
{
80004d78:	eb cd 40 80 	pushm	r7,lr
80004d7c:	1a 97       	mov	r7,sp
80004d7e:	20 1d       	sub	sp,4
80004d80:	ef 4c ff fc 	st.w	r7[-4],r12
	vTaskSuspendAll();
80004d84:	f0 1f 00 03 	mcall	80004d90 <__malloc_lock+0x18>
}
80004d88:	2f fd       	sub	sp,-4
80004d8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004d8e:	00 00       	add	r0,r0
80004d90:	80 00       	ld.sh	r0,r0[0x0]
80004d92:	5d 9c       	*unknown*

80004d94 <__malloc_unlock>:
 * a safe section as memory allocation management uses global data.
 * See the aforementioned details.
 */
void __malloc_unlock(struct _reent *ptr);
void __malloc_unlock(struct _reent *ptr)
{
80004d94:	eb cd 40 80 	pushm	r7,lr
80004d98:	1a 97       	mov	r7,sp
80004d9a:	20 1d       	sub	sp,4
80004d9c:	ef 4c ff fc 	st.w	r7[-4],r12
	xTaskResumeAll();
80004da0:	f0 1f 00 03 	mcall	80004dac <__malloc_unlock+0x18>
}
80004da4:	2f fd       	sub	sp,-4
80004da6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004daa:	00 00       	add	r0,r0
80004dac:	80 00       	ld.sh	r0,r0[0x0]
80004dae:	5d b8       	*unknown*

80004db0 <vTick>:
/* The preemptive scheduler is defined as "naked" as the full context is saved
on entry as part of the context switch. */
__attribute__((__naked__)) static void vTick( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_OS_INT();
80004db0:	eb cd 00 ff 	pushm	r0-r7
80004db4:	e0 68 00 20 	mov	r8,32
80004db8:	ea 18 00 00 	orh	r8,0x0
80004dbc:	70 00       	ld.w	r0,r8[0x0]
80004dbe:	1a d0       	st.w	--sp,r0
80004dc0:	7a 90       	ld.w	r0,sp[0x24]
80004dc2:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004dc6:	58 10       	cp.w	r0,1
80004dc8:	e0 8b 00 08 	brhi	80004dd8 <LABEL_INT_SKIP_SAVE_CONTEXT_234>
80004dcc:	e0 68 06 60 	mov	r8,1632
80004dd0:	ea 18 00 00 	orh	r8,0x0
80004dd4:	70 00       	ld.w	r0,r8[0x0]
80004dd6:	81 0d       	st.w	r0[0x0],sp

80004dd8 <LABEL_INT_SKIP_SAVE_CONTEXT_234>:
	#if( configTICK_USE_TC==1 )
		/* Clear the interrupt flag. */
		prvClearTcInt();
	#else
		/* Clear the interrupt flag. */
		prvClearCcInt();
80004dd8:	f0 1f 00 12 	mcall	80004e20 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x14>
	#endif

	/* Because FreeRTOS is not supposed to run with nested interrupts, put all OS
	calls in a critical section . */
	portENTER_CRITICAL();
80004ddc:	f0 1f 00 12 	mcall	80004e24 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x18>
		vTaskIncrementTick();
80004de0:	f0 1f 00 12 	mcall	80004e28 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x1c>
	portEXIT_CRITICAL();
80004de4:	f0 1f 00 12 	mcall	80004e2c <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x20>

	/* Restore the context of the "elected task". */
	portRESTORE_CONTEXT_OS_INT();
80004de8:	7a 90       	ld.w	r0,sp[0x24]
80004dea:	e1 d0 c2 c3 	bfextu	r0,r0,0x16,0x3
80004dee:	58 10       	cp.w	r0,1
80004df0:	e0 8b 00 0e 	brhi	80004e0c <LABEL_INT_SKIP_RESTORE_CONTEXT_251>
80004df4:	f0 1f 00 0c 	mcall	80004e24 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x18>
80004df8:	f0 1f 00 0e 	mcall	80004e30 <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x24>
80004dfc:	f0 1f 00 0c 	mcall	80004e2c <LABEL_INT_SKIP_RESTORE_CONTEXT_251+0x20>
80004e00:	e0 68 06 60 	mov	r8,1632
80004e04:	ea 18 00 00 	orh	r8,0x0
80004e08:	70 00       	ld.w	r0,r8[0x0]
80004e0a:	60 0d       	ld.w	sp,r0[0x0]

80004e0c <LABEL_INT_SKIP_RESTORE_CONTEXT_251>:
80004e0c:	1b 00       	ld.w	r0,sp++
80004e0e:	e0 68 00 20 	mov	r8,32
80004e12:	ea 18 00 00 	orh	r8,0x0
80004e16:	91 00       	st.w	r8[0x0],r0
80004e18:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004e1c:	d6 03       	rete
80004e1e:	00 00       	add	r0,r0
80004e20:	80 00       	ld.sh	r0,r0[0x0]
80004e22:	51 1c       	stdsp	sp[0x44],r12
80004e24:	80 00       	ld.sh	r0,r0[0x0]
80004e26:	4e cc       	lddpc	r12,80004fd4 <pxPortInitialiseStack+0xc0>
80004e28:	80 00       	ld.sh	r0,r0[0x0]
80004e2a:	5e e0       	retqs	r0
80004e2c:	80 00       	ld.sh	r0,r0[0x0]
80004e2e:	4e e8       	lddpc	r8,80004fe4 <pxPortInitialiseStack+0xd0>
80004e30:	80 00       	ld.sh	r0,r0[0x0]
80004e32:	60 40       	ld.w	r0,r0[0x10]

80004e34 <SCALLYield>:
/*-----------------------------------------------------------*/
__attribute__((__naked__)) void SCALLYield( void );
__attribute__((__naked__)) void SCALLYield( void )
{
	/* Save the context of the interrupted task. */
	portSAVE_CONTEXT_SCALL();
80004e34:	20 6d       	sub	sp,24
80004e36:	eb cd 00 ff 	pushm	r0-r7
80004e3a:	fa c7 ff c0 	sub	r7,sp,-64
80004e3e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80004e42:	ef 40 ff e0 	st.w	r7[-32],r0
80004e46:	ee f0 ff fc 	ld.w	r0,r7[-4]
80004e4a:	ef 40 ff e4 	st.w	r7[-28],r0
80004e4e:	eb c7 5f 00 	stm	--r7,r8-r12,lr
80004e52:	e0 68 00 20 	mov	r8,32
80004e56:	ea 18 00 00 	orh	r8,0x0
80004e5a:	70 00       	ld.w	r0,r8[0x0]
80004e5c:	1a d0       	st.w	--sp,r0
80004e5e:	f0 1f 00 1a 	mcall	80004ec4 <LABEL_RET_SCALL_260+0x14>
80004e62:	e0 68 06 60 	mov	r8,1632
80004e66:	ea 18 00 00 	orh	r8,0x0
80004e6a:	70 00       	ld.w	r0,r8[0x0]
80004e6c:	81 0d       	st.w	r0[0x0],sp
	vTaskSwitchContext();
80004e6e:	f0 1f 00 17 	mcall	80004ec8 <LABEL_RET_SCALL_260+0x18>
	portRESTORE_CONTEXT_SCALL();
80004e72:	e0 68 06 60 	mov	r8,1632
80004e76:	ea 18 00 00 	orh	r8,0x0
80004e7a:	70 00       	ld.w	r0,r8[0x0]
80004e7c:	60 0d       	ld.w	sp,r0[0x0]
80004e7e:	1b 00       	ld.w	r0,sp++
80004e80:	e0 68 00 20 	mov	r8,32
80004e84:	ea 18 00 00 	orh	r8,0x0
80004e88:	91 00       	st.w	r8[0x0],r0
80004e8a:	fa c7 ff d8 	sub	r7,sp,-40
80004e8e:	e3 c7 5f 00 	ldm	r7++,r8-r12,lr
80004e92:	ee f0 ff e0 	ld.w	r0,r7[-32]
80004e96:	e0 61 00 20 	mov	r1,32
80004e9a:	ea 11 00 00 	orh	r1,0x0
80004e9e:	62 02       	ld.w	r2,r1[0x0]
80004ea0:	58 02       	cp.w	r2,0
80004ea2:	c0 70       	breq	80004eb0 <LABEL_RET_SCALL_260>
80004ea4:	e4 c2 00 01 	sub	r2,r2,1
80004ea8:	83 02       	st.w	r1[0x0],r2
80004eaa:	58 02       	cp.w	r2,0
80004eac:	c0 21       	brne	80004eb0 <LABEL_RET_SCALL_260>
80004eae:	b1 c0       	cbr	r0,0x10

80004eb0 <LABEL_RET_SCALL_260>:
80004eb0:	ef 40 ff f8 	st.w	r7[-8],r0
80004eb4:	ee f0 ff e4 	ld.w	r0,r7[-28]
80004eb8:	ef 40 ff fc 	st.w	r7[-4],r0
80004ebc:	e3 cd 00 ff 	ldm	sp++,r0-r7
80004ec0:	2f ad       	sub	sp,-24
80004ec2:	d6 13       	rets
80004ec4:	80 00       	ld.sh	r0,r0[0x0]
80004ec6:	4e cc       	lddpc	r12,80005074 <pxPortInitialiseStack+0x160>
80004ec8:	80 00       	ld.sh	r0,r0[0x0]
80004eca:	60 40       	ld.w	r0,r0[0x10]

80004ecc <vPortEnterCritical>:
/* The code generated by the GCC compiler uses the stack in different ways at
different optimisation levels.  The interrupt flags can therefore not always
be saved to the stack.  Instead the critical section nesting level is stored
in a variable, which is then saved as part of the stack context. */
__attribute__((__noinline__)) void vPortEnterCritical( void )
{
80004ecc:	eb cd 40 80 	pushm	r7,lr
80004ed0:	1a 97       	mov	r7,sp
	/* Disable interrupts */
	portDISABLE_INTERRUPTS();
80004ed2:	d3 03       	ssrf	0x10

	/* Now interrupts are disabled ulCriticalNesting can be accessed
	 directly.  Increment ulCriticalNesting to keep a count of how many times
	 portENTER_CRITICAL() has been called. */
	ulCriticalNesting++;
80004ed4:	48 48       	lddpc	r8,80004ee4 <vPortEnterCritical+0x18>
80004ed6:	70 08       	ld.w	r8,r8[0x0]
80004ed8:	f0 c9 ff ff 	sub	r9,r8,-1
80004edc:	48 28       	lddpc	r8,80004ee4 <vPortEnterCritical+0x18>
80004ede:	91 09       	st.w	r8[0x0],r9
}
80004ee0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ee4:	00 00       	add	r0,r0
80004ee6:	00 20       	rsub	r0,r0

80004ee8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

__attribute__((__noinline__)) void vPortExitCritical( void )
{
80004ee8:	eb cd 40 80 	pushm	r7,lr
80004eec:	1a 97       	mov	r7,sp
	if(ulCriticalNesting > portNO_CRITICAL_NESTING)
80004eee:	48 98       	lddpc	r8,80004f10 <vPortExitCritical+0x28>
80004ef0:	70 08       	ld.w	r8,r8[0x0]
80004ef2:	58 08       	cp.w	r8,0
80004ef4:	c0 c0       	breq	80004f0c <vPortExitCritical+0x24>
	{
		ulCriticalNesting--;
80004ef6:	48 78       	lddpc	r8,80004f10 <vPortExitCritical+0x28>
80004ef8:	70 08       	ld.w	r8,r8[0x0]
80004efa:	f0 c9 00 01 	sub	r9,r8,1
80004efe:	48 58       	lddpc	r8,80004f10 <vPortExitCritical+0x28>
80004f00:	91 09       	st.w	r8[0x0],r9
		if( ulCriticalNesting == portNO_CRITICAL_NESTING )
80004f02:	48 48       	lddpc	r8,80004f10 <vPortExitCritical+0x28>
80004f04:	70 08       	ld.w	r8,r8[0x0]
80004f06:	58 08       	cp.w	r8,0
80004f08:	c0 21       	brne	80004f0c <vPortExitCritical+0x24>
		{
			/* Enable all interrupt/exception. */
			portENABLE_INTERRUPTS();
80004f0a:	d5 03       	csrf	0x10
		}
	}
}
80004f0c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f10:	00 00       	add	r0,r0
80004f12:	00 20       	rsub	r0,r0

80004f14 <pxPortInitialiseStack>:
 * portSAVE_CONTEXT had been called.
 *
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
80004f14:	eb cd 40 80 	pushm	r7,lr
80004f18:	1a 97       	mov	r7,sp
80004f1a:	20 3d       	sub	sp,12
80004f1c:	ef 4c ff fc 	st.w	r7[-4],r12
80004f20:	ef 4b ff f8 	st.w	r7[-8],r11
80004f24:	ef 4a ff f4 	st.w	r7[-12],r10
	/* Setup the initial stack of the task.  The stack is set exactly as
	expected by the portRESTORE_CONTEXT() macro. */

	/* When the task starts, it will expect to find the function parameter in R12. */
	pxTopOfStack--;
80004f28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f2c:	20 48       	sub	r8,4
80004f2e:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x08080808;					/* R8 */
80004f32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f36:	e0 69 08 08 	mov	r9,2056
80004f3a:	ea 19 08 08 	orh	r9,0x808
80004f3e:	91 09       	st.w	r8[0x0],r9
80004f40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f44:	20 48       	sub	r8,4
80004f46:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x09090909;					/* R9 */
80004f4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f4e:	e0 69 09 09 	mov	r9,2313
80004f52:	ea 19 09 09 	orh	r9,0x909
80004f56:	91 09       	st.w	r8[0x0],r9
80004f58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f5c:	20 48       	sub	r8,4
80004f5e:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0A0A0A0A;					/* R10 */
80004f62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f66:	e0 69 0a 0a 	mov	r9,2570
80004f6a:	ea 19 0a 0a 	orh	r9,0xa0a
80004f6e:	91 09       	st.w	r8[0x0],r9
80004f70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f74:	20 48       	sub	r8,4
80004f76:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x0B0B0B0B;					/* R11 */
80004f7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f7e:	e0 69 0b 0b 	mov	r9,2827
80004f82:	ea 19 0b 0b 	orh	r9,0xb0b
80004f86:	91 09       	st.w	r8[0x0],r9
80004f88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f8c:	20 48       	sub	r8,4
80004f8e:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pvParameters;					/* R12 */
80004f92:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004f96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f9a:	91 09       	st.w	r8[0x0],r9
80004f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fa0:	20 48       	sub	r8,4
80004fa2:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xDEADBEEF;					/* R14/LR */
80004fa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004faa:	e0 69 be ef 	mov	r9,48879
80004fae:	ea 19 de ad 	orh	r9,0xdead
80004fb2:	91 09       	st.w	r8[0x0],r9
80004fb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fb8:	20 48       	sub	r8,4
80004fba:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) pxCode + portINSTRUCTION_SIZE; /* R15/PC */
80004fbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004fc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fc6:	91 09       	st.w	r8[0x0],r9
80004fc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fcc:	20 48       	sub	r8,4
80004fce:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) portINITIAL_SR;				/* SR */
80004fd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fd6:	fc 19 00 40 	movh	r9,0x40
80004fda:	91 09       	st.w	r8[0x0],r9
80004fdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fe0:	20 48       	sub	r8,4
80004fe2:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0xFF0000FF;					/* R0 */
80004fe6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fea:	e0 69 00 ff 	mov	r9,255
80004fee:	ea 19 ff 00 	orh	r9,0xff00
80004ff2:	91 09       	st.w	r8[0x0],r9
80004ff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ff8:	20 48       	sub	r8,4
80004ffa:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x01010101;					/* R1 */
80004ffe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005002:	e0 69 01 01 	mov	r9,257
80005006:	ea 19 01 01 	orh	r9,0x101
8000500a:	91 09       	st.w	r8[0x0],r9
8000500c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005010:	20 48       	sub	r8,4
80005012:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x02020202;					/* R2 */
80005016:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000501a:	e0 69 02 02 	mov	r9,514
8000501e:	ea 19 02 02 	orh	r9,0x202
80005022:	91 09       	st.w	r8[0x0],r9
80005024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005028:	20 48       	sub	r8,4
8000502a:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x03030303;					/* R3 */
8000502e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005032:	e0 69 03 03 	mov	r9,771
80005036:	ea 19 03 03 	orh	r9,0x303
8000503a:	91 09       	st.w	r8[0x0],r9
8000503c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005040:	20 48       	sub	r8,4
80005042:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x04040404;					/* R4 */
80005046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000504a:	e0 69 04 04 	mov	r9,1028
8000504e:	ea 19 04 04 	orh	r9,0x404
80005052:	91 09       	st.w	r8[0x0],r9
80005054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005058:	20 48       	sub	r8,4
8000505a:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x05050505;					/* R5 */
8000505e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005062:	e0 69 05 05 	mov	r9,1285
80005066:	ea 19 05 05 	orh	r9,0x505
8000506a:	91 09       	st.w	r8[0x0],r9
8000506c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005070:	20 48       	sub	r8,4
80005072:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x06060606;					/* R6 */
80005076:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000507a:	e0 69 06 06 	mov	r9,1542
8000507e:	ea 19 06 06 	orh	r9,0x606
80005082:	91 09       	st.w	r8[0x0],r9
80005084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005088:	20 48       	sub	r8,4
8000508a:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack-- = ( portSTACK_TYPE ) 0x07070707;					/* R7 */
8000508e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005092:	e0 69 07 07 	mov	r9,1799
80005096:	ea 19 07 07 	orh	r9,0x707
8000509a:	91 09       	st.w	r8[0x0],r9
8000509c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050a0:	20 48       	sub	r8,4
800050a2:	ef 48 ff fc 	st.w	r7[-4],r8
	*pxTopOfStack = ( portSTACK_TYPE ) portNO_CRITICAL_NESTING;			/* ulCriticalNesting */
800050a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050aa:	30 09       	mov	r9,0
800050ac:	91 09       	st.w	r8[0x0],r9

	return pxTopOfStack;
800050ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800050b2:	10 9c       	mov	r12,r8
800050b4:	2f dd       	sub	sp,-12
800050b6:	e3 cd 80 80 	ldm	sp++,r7,pc
800050ba:	d7 03       	nop

800050bc <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
800050bc:	eb cd 40 80 	pushm	r7,lr
800050c0:	1a 97       	mov	r7,sp
	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
800050c2:	f0 1f 00 10 	mcall	80005100 <xPortStartScheduler+0x44>

	/* Start the first task. */
	portRESTORE_CONTEXT();
800050c6:	e0 68 06 60 	mov	r8,1632
800050ca:	ea 18 00 00 	orh	r8,0x0
800050ce:	70 00       	ld.w	r0,r8[0x0]
800050d0:	60 0d       	ld.w	sp,r0[0x0]
800050d2:	1b 00       	ld.w	r0,sp++
800050d4:	e0 68 00 20 	mov	r8,32
800050d8:	ea 18 00 00 	orh	r8,0x0
800050dc:	91 00       	st.w	r8[0x0],r0
800050de:	e3 cd 00 ff 	ldm	sp++,r0-r7
800050e2:	2f ed       	sub	sp,-8
800050e4:	e3 cd 5f 00 	ldm	sp++,r8-r12,lr
800050e8:	fa f0 ff e0 	ld.w	r0,sp[-32]
800050ec:	e3 b0 00 00 	mtsr	0x0,r0
800050f0:	fa f0 ff dc 	ld.w	r0,sp[-36]
800050f4:	fa ff ff e4 	ld.w	pc,sp[-28]

	/* Should not get here! */
	return 0;
800050f8:	30 08       	mov	r8,0
}
800050fa:	10 9c       	mov	r12,r8
800050fc:	e3 cd 80 80 	ldm	sp++,r7,pc
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	51 30       	stdsp	sp[0x4c],r0

80005104 <prvScheduleFirstTick>:

/* Schedule the COUNT&COMPARE match interrupt in (configCPU_CLOCK_HZ/configTICK_RATE_HZ)
clock cycles from now. */
#if( configTICK_USE_TC==0 )
	static void prvScheduleFirstTick(void)
	{
80005104:	eb cd 40 80 	pushm	r7,lr
80005108:	1a 97       	mov	r7,sp
		Set_system_register(AVR32_COMPARE, configCPU_CLOCK_HZ/configTICK_RATE_HZ);
8000510a:	e0 68 2e e0 	mov	r8,12000
8000510e:	e3 b8 00 43 	mtsr	0x10c,r8
		Set_system_register(AVR32_COUNT, 0);
80005112:	30 08       	mov	r8,0
80005114:	e3 b8 00 42 	mtsr	0x108,r8
	}
80005118:	e3 cd 80 80 	ldm	sp++,r7,pc

8000511c <prvClearCcInt>:

	__attribute__((__noinline__)) static void prvClearCcInt(void)
	{
8000511c:	eb cd 40 80 	pushm	r7,lr
80005120:	1a 97       	mov	r7,sp
		Set_system_register(AVR32_COMPARE, Get_system_register(AVR32_COMPARE));
80005122:	e1 b8 00 43 	mfsr	r8,0x10c
80005126:	e3 b8 00 43 	mtsr	0x10c,r8
	}
8000512a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000512e:	d7 03       	nop

80005130 <prvSetupTimerInterrupt>:
#endif
/*-----------------------------------------------------------*/

/* Setup the timer to generate the tick interrupts. */
static void prvSetupTimerInterrupt(void)
{
80005130:	eb cd 40 80 	pushm	r7,lr
80005134:	1a 97       	mov	r7,sp
	};

#endif

	/* Disable all interrupt/exception. */
	portDISABLE_INTERRUPTS();
80005136:	d3 03       	ssrf	0x10
		/* Start the timer/counter. */
		tc_start(tc, configTICK_TC_CHANNEL);
	}
	#else
	{
		INTC_register_interrupt(&vTick, AVR32_CORE_COMPARE_IRQ, AVR32_INTC_INT0);
80005138:	30 0a       	mov	r10,0
8000513a:	30 0b       	mov	r11,0
8000513c:	48 4c       	lddpc	r12,8000514c <prvSetupTimerInterrupt+0x1c>
8000513e:	f0 1f 00 05 	mcall	80005150 <prvSetupTimerInterrupt+0x20>
		prvScheduleFirstTick();
80005142:	f0 1f 00 05 	mcall	80005154 <prvSetupTimerInterrupt+0x24>
	}
	#endif
}
80005146:	e3 cd 80 80 	ldm	sp++,r7,pc
8000514a:	00 00       	add	r0,r0
8000514c:	80 00       	ld.sh	r0,r0[0x0]
8000514e:	4d b0       	lddpc	r0,800052b8 <vPortFree+0x8>
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	44 70       	lddsp	r0,sp[0x11c]
80005154:	80 00       	ld.sh	r0,r0[0x0]
80005156:	51 04       	stdsp	sp[0x40],r4

80005158 <_read>:
80005158:	eb cd 40 80 	pushm	r7,lr
8000515c:	1a 97       	mov	r7,sp
8000515e:	20 5d       	sub	sp,20
80005160:	ef 4c ff f4 	st.w	r7[-12],r12
80005164:	ef 4b ff f0 	st.w	r7[-16],r11
80005168:	ef 4a ff ec 	st.w	r7[-20],r10
8000516c:	30 08       	mov	r8,0
8000516e:	ef 48 ff f8 	st.w	r7[-8],r8
80005172:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005176:	58 08       	cp.w	r8,0
80005178:	c2 40       	breq	800051c0 <_read+0x68>
8000517a:	3f f8       	mov	r8,-1
8000517c:	c2 b8       	rjmp	800051d2 <_read+0x7a>
8000517e:	49 88       	lddpc	r8,800051dc <_read+0x84>
80005180:	70 08       	ld.w	r8,r8[0x0]
80005182:	10 9c       	mov	r12,r8
80005184:	f0 1f 00 17 	mcall	800051e0 <_read+0x88>
80005188:	18 98       	mov	r8,r12
8000518a:	ef 48 ff fc 	st.w	r7[-4],r8
8000518e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005192:	58 08       	cp.w	r8,0
80005194:	c1 c5       	brlt	800051cc <_read+0x74>
80005196:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000519a:	5c 58       	castu.b	r8
8000519c:	ee f9 ff f0 	ld.w	r9,r7[-16]
800051a0:	b2 88       	st.b	r9[0x0],r8
800051a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051a6:	2f f8       	sub	r8,-1
800051a8:	ef 48 ff f0 	st.w	r7[-16],r8
800051ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051b0:	2f f8       	sub	r8,-1
800051b2:	ef 48 ff f8 	st.w	r7[-8],r8
800051b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800051ba:	20 18       	sub	r8,1
800051bc:	ef 48 ff ec 	st.w	r7[-20],r8
800051c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800051c4:	58 08       	cp.w	r8,0
800051c6:	fe 99 ff dc 	brgt	8000517e <_read+0x26>
800051ca:	c0 28       	rjmp	800051ce <_read+0x76>
800051cc:	d7 03       	nop
800051ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800051d2:	10 9c       	mov	r12,r8
800051d4:	2f bd       	sub	sp,-20
800051d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800051da:	00 00       	add	r0,r0
800051dc:	00 00       	add	r0,r0
800051de:	07 f8       	ld.ub	r8,r3[0x7]
800051e0:	80 00       	ld.sh	r0,r0[0x0]
800051e2:	4a f8       	lddpc	r8,8000529c <pvPortMalloc+0x28>

800051e4 <_write>:
800051e4:	eb cd 40 80 	pushm	r7,lr
800051e8:	1a 97       	mov	r7,sp
800051ea:	20 4d       	sub	sp,16
800051ec:	ef 4c ff f8 	st.w	r7[-8],r12
800051f0:	ef 4b ff f4 	st.w	r7[-12],r11
800051f4:	ef 4a ff f0 	st.w	r7[-16],r10
800051f8:	30 08       	mov	r8,0
800051fa:	ef 48 ff fc 	st.w	r7[-4],r8
800051fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005202:	58 18       	cp.w	r8,1
80005204:	c2 90       	breq	80005256 <_write+0x72>
80005206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000520a:	58 28       	cp.w	r8,2
8000520c:	c2 50       	breq	80005256 <_write+0x72>
8000520e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005212:	58 38       	cp.w	r8,3
80005214:	c2 10       	breq	80005256 <_write+0x72>
80005216:	3f f8       	mov	r8,-1
80005218:	c2 58       	rjmp	80005262 <_write+0x7e>
8000521a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000521e:	11 88       	ld.ub	r8,r8[0x0]
80005220:	10 99       	mov	r9,r8
80005222:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005226:	2f f8       	sub	r8,-1
80005228:	ef 48 ff f4 	st.w	r7[-12],r8
8000522c:	49 08       	lddpc	r8,8000526c <_write+0x88>
8000522e:	70 08       	ld.w	r8,r8[0x0]
80005230:	12 9b       	mov	r11,r9
80005232:	10 9c       	mov	r12,r8
80005234:	f0 1f 00 0f 	mcall	80005270 <_write+0x8c>
80005238:	18 98       	mov	r8,r12
8000523a:	58 08       	cp.w	r8,0
8000523c:	c0 34       	brge	80005242 <_write+0x5e>
8000523e:	3f f8       	mov	r8,-1
80005240:	c1 18       	rjmp	80005262 <_write+0x7e>
80005242:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005246:	2f f8       	sub	r8,-1
80005248:	ef 48 ff fc 	st.w	r7[-4],r8
8000524c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005250:	20 18       	sub	r8,1
80005252:	ef 48 ff f0 	st.w	r7[-16],r8
80005256:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000525a:	58 08       	cp.w	r8,0
8000525c:	cd f1       	brne	8000521a <_write+0x36>
8000525e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005262:	10 9c       	mov	r12,r8
80005264:	2f cd       	sub	sp,-16
80005266:	e3 cd 80 80 	ldm	sp++,r7,pc
8000526a:	00 00       	add	r0,r0
8000526c:	00 00       	add	r0,r0
8000526e:	07 f8       	ld.ub	r8,r3[0x7]
80005270:	80 00       	ld.sh	r0,r0[0x0]
80005272:	4a 50       	lddpc	r0,80005304 <xQueueCreate+0x1c>

80005274 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
80005274:	eb cd 40 80 	pushm	r7,lr
80005278:	1a 97       	mov	r7,sp
8000527a:	20 2d       	sub	sp,8
8000527c:	ef 4c ff f8 	st.w	r7[-8],r12
void *pvReturn;

	vTaskSuspendAll();
80005280:	f0 1f 00 09 	mcall	800052a4 <pvPortMalloc+0x30>
	{
		pvReturn = malloc( xWantedSize );
80005284:	ee fc ff f8 	ld.w	r12,r7[-8]
80005288:	f0 1f 00 08 	mcall	800052a8 <pvPortMalloc+0x34>
8000528c:	18 98       	mov	r8,r12
8000528e:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	xTaskResumeAll();
80005292:	f0 1f 00 07 	mcall	800052ac <pvPortMalloc+0x38>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
80005296:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000529a:	10 9c       	mov	r12,r8
8000529c:	2f ed       	sub	sp,-8
8000529e:	e3 cd 80 80 	ldm	sp++,r7,pc
800052a2:	00 00       	add	r0,r0
800052a4:	80 00       	ld.sh	r0,r0[0x0]
800052a6:	5d 9c       	*unknown*
800052a8:	80 00       	ld.sh	r0,r0[0x0]
800052aa:	6a c0       	ld.w	r0,r5[0x30]
800052ac:	80 00       	ld.sh	r0,r0[0x0]
800052ae:	5d b8       	*unknown*

800052b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800052b0:	eb cd 40 80 	pushm	r7,lr
800052b4:	1a 97       	mov	r7,sp
800052b6:	20 1d       	sub	sp,4
800052b8:	ef 4c ff fc 	st.w	r7[-4],r12
	if( pv )
800052bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052c0:	58 08       	cp.w	r8,0
800052c2:	c0 90       	breq	800052d4 <vPortFree+0x24>
	{
		vTaskSuspendAll();
800052c4:	f0 1f 00 06 	mcall	800052dc <vPortFree+0x2c>
		{
			free( pv );
800052c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800052cc:	f0 1f 00 05 	mcall	800052e0 <vPortFree+0x30>
		}
		xTaskResumeAll();
800052d0:	f0 1f 00 05 	mcall	800052e4 <vPortFree+0x34>
	}
}
800052d4:	2f fd       	sub	sp,-4
800052d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800052da:	00 00       	add	r0,r0
800052dc:	80 00       	ld.sh	r0,r0[0x0]
800052de:	5d 9c       	*unknown*
800052e0:	80 00       	ld.sh	r0,r0[0x0]
800052e2:	6a b0       	ld.w	r0,r5[0x2c]
800052e4:	80 00       	ld.sh	r0,r0[0x0]
800052e6:	5d b8       	*unknown*

800052e8 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
800052e8:	eb cd 40 80 	pushm	r7,lr
800052ec:	1a 97       	mov	r7,sp
800052ee:	20 5d       	sub	sp,20
800052f0:	ef 4c ff f0 	st.w	r7[-16],r12
800052f4:	ef 4b ff ec 	st.w	r7[-20],r11
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
800052f8:	30 08       	mov	r8,0
800052fa:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
800052fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005302:	58 08       	cp.w	r8,0
80005304:	c7 20       	breq	800053e8 <xQueueCreate+0x100>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
80005306:	34 cc       	mov	r12,76
80005308:	f0 1f 00 3b 	mcall	800053f4 <xQueueCreate+0x10c>
8000530c:	18 98       	mov	r8,r12
8000530e:	ef 48 ff f4 	st.w	r7[-12],r8
		if( pxNewQueue != NULL )
80005312:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005316:	58 08       	cp.w	r8,0
80005318:	c6 80       	breq	800053e8 <xQueueCreate+0x100>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
8000531a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000531e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005322:	f2 08 02 48 	mul	r8,r9,r8
80005326:	2f f8       	sub	r8,-1
80005328:	ef 48 ff f8 	st.w	r7[-8],r8

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
8000532c:	ee fc ff f8 	ld.w	r12,r7[-8]
80005330:	f0 1f 00 31 	mcall	800053f4 <xQueueCreate+0x10c>
80005334:	18 98       	mov	r8,r12
80005336:	10 99       	mov	r9,r8
80005338:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000533c:	91 09       	st.w	r8[0x0],r9
			if( pxNewQueue->pcHead != NULL )
8000533e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005342:	70 08       	ld.w	r8,r8[0x0]
80005344:	58 08       	cp.w	r8,0
80005346:	c4 d0       	breq	800053e0 <xQueueCreate+0xf8>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
80005348:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000534c:	70 09       	ld.w	r9,r8[0x0]
8000534e:	ee fa ff f0 	ld.w	r10,r7[-16]
80005352:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005356:	f4 08 02 48 	mul	r8,r10,r8
8000535a:	10 09       	add	r9,r8
8000535c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005360:	91 19       	st.w	r8[0x4],r9
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
80005362:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005366:	30 09       	mov	r9,0
80005368:	91 e9       	st.w	r8[0x38],r9
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
8000536a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000536e:	70 09       	ld.w	r9,r8[0x0]
80005370:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005374:	91 29       	st.w	r8[0x8],r9
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
80005376:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000537a:	70 09       	ld.w	r9,r8[0x0]
8000537c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005380:	f0 ca 00 01 	sub	r10,r8,1
80005384:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005388:	f4 08 02 48 	mul	r8,r10,r8
8000538c:	10 09       	add	r9,r8
8000538e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005392:	91 39       	st.w	r8[0xc],r9
				pxNewQueue->uxLength = uxQueueLength;
80005394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005398:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000539c:	91 f9       	st.w	r8[0x3c],r9
				pxNewQueue->uxItemSize = uxItemSize;
8000539e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800053a2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800053a6:	f1 49 00 40 	st.w	r8[64],r9
				pxNewQueue->xRxLock = queueUNLOCKED;
800053aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800053ae:	3f f9       	mov	r9,-1
800053b0:	f1 49 00 44 	st.w	r8[68],r9
				pxNewQueue->xTxLock = queueUNLOCKED;
800053b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800053b8:	3f f9       	mov	r9,-1
800053ba:	f1 49 00 48 	st.w	r8[72],r9

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
800053be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800053c2:	2f 08       	sub	r8,-16
800053c4:	10 9c       	mov	r12,r8
800053c6:	f0 1f 00 0d 	mcall	800053f8 <xQueueCreate+0x110>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
800053ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800053ce:	2d c8       	sub	r8,-36
800053d0:	10 9c       	mov	r12,r8
800053d2:	f0 1f 00 0a 	mcall	800053f8 <xQueueCreate+0x110>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
800053d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800053da:	ef 48 ff fc 	st.w	r7[-4],r8
800053de:	c0 58       	rjmp	800053e8 <xQueueCreate+0x100>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
800053e0:	ee fc ff f4 	ld.w	r12,r7[-12]
800053e4:	f0 1f 00 06 	mcall	800053fc <xQueueCreate+0x114>
		}
	}

	configASSERT( xReturn );

	return xReturn;
800053e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800053ec:	10 9c       	mov	r12,r8
800053ee:	2f bd       	sub	sp,-20
800053f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800053f4:	80 00       	ld.sh	r0,r0[0x0]
800053f6:	52 74       	stdsp	sp[0x9c],r4
800053f8:	80 00       	ld.sh	r0,r0[0x0]
800053fa:	4b 3c       	lddpc	r12,800054c4 <xQueueCreateCountingSemaphore+0x1c>
800053fc:	80 00       	ld.sh	r0,r0[0x0]
800053fe:	52 b0       	stdsp	sp[0xac],r0

80005400 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
80005400:	eb cd 40 80 	pushm	r7,lr
80005404:	1a 97       	mov	r7,sp
80005406:	20 1d       	sub	sp,4
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
80005408:	34 cc       	mov	r12,76
8000540a:	f0 1f 00 25 	mcall	8000549c <xQueueCreateMutex+0x9c>
8000540e:	18 98       	mov	r8,r12
80005410:	ef 48 ff fc 	st.w	r7[-4],r8
		if( pxNewQueue != NULL )
80005414:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005418:	58 08       	cp.w	r8,0
8000541a:	c3 b0       	breq	80005490 <xQueueCreateMutex+0x90>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
8000541c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005420:	30 09       	mov	r9,0
80005422:	91 19       	st.w	r8[0x4],r9
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
80005424:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005428:	30 09       	mov	r9,0
8000542a:	91 09       	st.w	r8[0x0],r9

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
8000542c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005430:	30 09       	mov	r9,0
80005432:	91 29       	st.w	r8[0x8],r9
			pxNewQueue->pcReadFrom = NULL;
80005434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005438:	30 09       	mov	r9,0
8000543a:	91 39       	st.w	r8[0xc],r9

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
8000543c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005440:	30 09       	mov	r9,0
80005442:	91 e9       	st.w	r8[0x38],r9
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
80005444:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005448:	30 19       	mov	r9,1
8000544a:	91 f9       	st.w	r8[0x3c],r9
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
8000544c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005450:	30 09       	mov	r9,0
80005452:	f1 49 00 40 	st.w	r8[64],r9
			pxNewQueue->xRxLock = queueUNLOCKED;
80005456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000545a:	3f f9       	mov	r9,-1
8000545c:	f1 49 00 44 	st.w	r8[68],r9
			pxNewQueue->xTxLock = queueUNLOCKED;
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005464:	3f f9       	mov	r9,-1
80005466:	f1 49 00 48 	st.w	r8[72],r9

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
8000546a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000546e:	2f 08       	sub	r8,-16
80005470:	10 9c       	mov	r12,r8
80005472:	f0 1f 00 0c 	mcall	800054a0 <xQueueCreateMutex+0xa0>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
80005476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000547a:	2d c8       	sub	r8,-36
8000547c:	10 9c       	mov	r12,r8
8000547e:	f0 1f 00 09 	mcall	800054a0 <xQueueCreateMutex+0xa0>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
80005482:	30 09       	mov	r9,0
80005484:	30 0a       	mov	r10,0
80005486:	30 0b       	mov	r11,0
80005488:	ee fc ff fc 	ld.w	r12,r7[-4]
8000548c:	f0 1f 00 06 	mcall	800054a4 <xQueueCreateMutex+0xa4>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
80005490:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
80005494:	10 9c       	mov	r12,r8
80005496:	2f fd       	sub	sp,-4
80005498:	e3 cd 80 80 	ldm	sp++,r7,pc
8000549c:	80 00       	ld.sh	r0,r0[0x0]
8000549e:	52 74       	stdsp	sp[0x9c],r4
800054a0:	80 00       	ld.sh	r0,r0[0x0]
800054a2:	4b 3c       	lddpc	r12,8000556c <xQueueGenericSend+0x80>
800054a4:	80 00       	ld.sh	r0,r0[0x0]
800054a6:	54 ec       	stdsp	sp[0x138],r12

800054a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
800054a8:	eb cd 40 80 	pushm	r7,lr
800054ac:	1a 97       	mov	r7,sp
800054ae:	20 3d       	sub	sp,12
800054b0:	ef 4c ff f8 	st.w	r7[-8],r12
800054b4:	ef 4b ff f4 	st.w	r7[-12],r11
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
800054b8:	30 0b       	mov	r11,0
800054ba:	ee fc ff f8 	ld.w	r12,r7[-8]
800054be:	f0 1f 00 0b 	mcall	800054e8 <xQueueCreateCountingSemaphore+0x40>
800054c2:	18 98       	mov	r8,r12
800054c4:	ef 48 ff fc 	st.w	r7[-4],r8

		if( pxHandle != NULL )
800054c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054cc:	58 08       	cp.w	r8,0
800054ce:	c0 60       	breq	800054da <xQueueCreateCountingSemaphore+0x32>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
800054d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800054d8:	91 e9       	st.w	r8[0x38],r9
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
800054da:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
800054de:	10 9c       	mov	r12,r8
800054e0:	2f dd       	sub	sp,-12
800054e2:	e3 cd 80 80 	ldm	sp++,r7,pc
800054e6:	00 00       	add	r0,r0
800054e8:	80 00       	ld.sh	r0,r0[0x0]
800054ea:	52 e8       	stdsp	sp[0xb8],r8

800054ec <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
800054ec:	eb cd 40 80 	pushm	r7,lr
800054f0:	1a 97       	mov	r7,sp
800054f2:	20 7d       	sub	sp,28
800054f4:	ef 4c ff f0 	st.w	r7[-16],r12
800054f8:	ef 4b ff ec 	st.w	r7[-20],r11
800054fc:	ef 4a ff e8 	st.w	r7[-24],r10
80005500:	ef 49 ff e4 	st.w	r7[-28],r9
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
80005504:	30 08       	mov	r8,0
80005506:	ef 48 ff fc 	st.w	r7[-4],r8
8000550a:	c0 28       	rjmp	8000550e <xQueueGenericSend+0x22>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
8000550c:	d7 03       	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
8000550e:	f0 1f 00 47 	mcall	80005628 <xQueueGenericSend+0x13c>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
80005512:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005516:	70 e9       	ld.w	r9,r8[0x38]
80005518:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000551c:	70 f8       	ld.w	r8,r8[0x3c]
8000551e:	10 39       	cp.w	r9,r8
80005520:	c1 c2       	brcc	80005558 <xQueueGenericSend+0x6c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80005522:	ee fa ff e4 	ld.w	r10,r7[-28]
80005526:	ee fb ff ec 	ld.w	r11,r7[-20]
8000552a:	ee fc ff f0 	ld.w	r12,r7[-16]
8000552e:	f0 1f 00 40 	mcall	8000562c <xQueueGenericSend+0x140>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80005532:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005536:	70 98       	ld.w	r8,r8[0x24]
80005538:	58 08       	cp.w	r8,0
8000553a:	c0 b0       	breq	80005550 <xQueueGenericSend+0x64>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
8000553c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005540:	2d c8       	sub	r8,-36
80005542:	10 9c       	mov	r12,r8
80005544:	f0 1f 00 3b 	mcall	80005630 <xQueueGenericSend+0x144>
80005548:	18 98       	mov	r8,r12
8000554a:	58 18       	cp.w	r8,1
8000554c:	c0 21       	brne	80005550 <xQueueGenericSend+0x64>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
8000554e:	d7 33       	scall
					}
				}

				taskEXIT_CRITICAL();
80005550:	f0 1f 00 39 	mcall	80005634 <xQueueGenericSend+0x148>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
80005554:	30 18       	mov	r8,1
80005556:	c6 58       	rjmp	80005620 <xQueueGenericSend+0x134>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
80005558:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000555c:	58 08       	cp.w	r8,0
8000555e:	c0 51       	brne	80005568 <xQueueGenericSend+0x7c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80005560:	f0 1f 00 35 	mcall	80005634 <xQueueGenericSend+0x148>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
80005564:	30 08       	mov	r8,0
80005566:	c5 d8       	rjmp	80005620 <xQueueGenericSend+0x134>
				}
				else if( xEntryTimeSet == pdFALSE )
80005568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000556c:	58 08       	cp.w	r8,0
8000556e:	c0 91       	brne	80005580 <xQueueGenericSend+0x94>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80005570:	ee c8 00 0c 	sub	r8,r7,12
80005574:	10 9c       	mov	r12,r8
80005576:	f0 1f 00 31 	mcall	80005638 <xQueueGenericSend+0x14c>
					xEntryTimeSet = pdTRUE;
8000557a:	30 18       	mov	r8,1
8000557c:	ef 48 ff fc 	st.w	r7[-4],r8
				}
			}
		}
		taskEXIT_CRITICAL();
80005580:	f0 1f 00 2d 	mcall	80005634 <xQueueGenericSend+0x148>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80005584:	f0 1f 00 2e 	mcall	8000563c <xQueueGenericSend+0x150>
		prvLockQueue( pxQueue );
80005588:	f0 1f 00 28 	mcall	80005628 <xQueueGenericSend+0x13c>
8000558c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005590:	71 18       	ld.w	r8,r8[0x44]
80005592:	5b f8       	cp.w	r8,-1
80005594:	c0 61       	brne	800055a0 <xQueueGenericSend+0xb4>
80005596:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000559a:	30 09       	mov	r9,0
8000559c:	f1 49 00 44 	st.w	r8[68],r9
800055a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800055a4:	71 28       	ld.w	r8,r8[0x48]
800055a6:	5b f8       	cp.w	r8,-1
800055a8:	c0 61       	brne	800055b4 <xQueueGenericSend+0xc8>
800055aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800055ae:	30 09       	mov	r9,0
800055b0:	f1 49 00 48 	st.w	r8[72],r9
800055b4:	f0 1f 00 20 	mcall	80005634 <xQueueGenericSend+0x148>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
800055b8:	ee c9 00 18 	sub	r9,r7,24
800055bc:	ee c8 00 0c 	sub	r8,r7,12
800055c0:	12 9b       	mov	r11,r9
800055c2:	10 9c       	mov	r12,r8
800055c4:	f0 1f 00 1f 	mcall	80005640 <xQueueGenericSend+0x154>
800055c8:	18 98       	mov	r8,r12
800055ca:	58 08       	cp.w	r8,0
800055cc:	c2 31       	brne	80005612 <xQueueGenericSend+0x126>
		{
			if( prvIsQueueFull( pxQueue ) )
800055ce:	ee fc ff f0 	ld.w	r12,r7[-16]
800055d2:	f0 1f 00 1d 	mcall	80005644 <xQueueGenericSend+0x158>
800055d6:	18 98       	mov	r8,r12
800055d8:	58 08       	cp.w	r8,0
800055da:	c1 50       	breq	80005604 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
800055dc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800055e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800055e4:	2f 08       	sub	r8,-16
800055e6:	12 9b       	mov	r11,r9
800055e8:	10 9c       	mov	r12,r8
800055ea:	f0 1f 00 18 	mcall	80005648 <xQueueGenericSend+0x15c>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
800055ee:	ee fc ff f0 	ld.w	r12,r7[-16]
800055f2:	f0 1f 00 17 	mcall	8000564c <xQueueGenericSend+0x160>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( !xTaskResumeAll() )
800055f6:	f0 1f 00 17 	mcall	80005650 <xQueueGenericSend+0x164>
800055fa:	18 98       	mov	r8,r12
800055fc:	58 08       	cp.w	r8,0
800055fe:	c8 71       	brne	8000550c <xQueueGenericSend+0x20>
				{
					portYIELD_WITHIN_API();
80005600:	d7 33       	scall
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
80005602:	c8 6b       	rjmp	8000550e <xQueueGenericSend+0x22>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
80005604:	ee fc ff f0 	ld.w	r12,r7[-16]
80005608:	f0 1f 00 11 	mcall	8000564c <xQueueGenericSend+0x160>
				( void ) xTaskResumeAll();
8000560c:	f0 1f 00 11 	mcall	80005650 <xQueueGenericSend+0x164>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
80005610:	c7 fb       	rjmp	8000550e <xQueueGenericSend+0x22>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
80005612:	ee fc ff f0 	ld.w	r12,r7[-16]
80005616:	f0 1f 00 0e 	mcall	8000564c <xQueueGenericSend+0x160>
			( void ) xTaskResumeAll();
8000561a:	f0 1f 00 0e 	mcall	80005650 <xQueueGenericSend+0x164>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
8000561e:	30 08       	mov	r8,0
		}
	}
}
80005620:	10 9c       	mov	r12,r8
80005622:	2f 9d       	sub	sp,-28
80005624:	e3 cd 80 80 	ldm	sp++,r7,pc
80005628:	80 00       	ld.sh	r0,r0[0x0]
8000562a:	4e cc       	lddpc	r12,800057d8 <xQueueGenericReceive+0x184>
8000562c:	80 00       	ld.sh	r0,r0[0x0]
8000562e:	58 40       	cp.w	r0,4
80005630:	80 00       	ld.sh	r0,r0[0x0]
80005632:	61 70       	ld.w	r0,r0[0x5c]
80005634:	80 00       	ld.sh	r0,r0[0x0]
80005636:	4e e8       	lddpc	r8,800057ec <xQueueGenericReceive+0x198>
80005638:	80 00       	ld.sh	r0,r0[0x0]
8000563a:	62 40       	ld.w	r0,r1[0x10]
8000563c:	80 00       	ld.sh	r0,r0[0x0]
8000563e:	5d 9c       	*unknown*
80005640:	80 00       	ld.sh	r0,r0[0x0]
80005642:	62 70       	ld.w	r0,r1[0x1c]
80005644:	80 00       	ld.sh	r0,r0[0x0]
80005646:	5a b8       	cp.w	r8,-21
80005648:	80 00       	ld.sh	r0,r0[0x0]
8000564a:	60 f0       	ld.w	r0,r0[0x3c]
8000564c:	80 00       	ld.sh	r0,r0[0x0]
8000564e:	59 b0       	cp.w	r0,27
80005650:	80 00       	ld.sh	r0,r0[0x0]
80005652:	5d b8       	*unknown*

80005654 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
80005654:	eb cd 40 80 	pushm	r7,lr
80005658:	1a 97       	mov	r7,sp
8000565a:	20 8d       	sub	sp,32
8000565c:	ef 4c ff ec 	st.w	r7[-20],r12
80005660:	ef 4b ff e8 	st.w	r7[-24],r11
80005664:	ef 4a ff e4 	st.w	r7[-28],r10
80005668:	ef 49 ff e0 	st.w	r7[-32],r9
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
8000566c:	30 08       	mov	r8,0
8000566e:	ef 48 ff f8 	st.w	r7[-8],r8
80005672:	c0 28       	rjmp	80005676 <xQueueGenericReceive+0x22>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
80005674:	d7 03       	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
80005676:	f0 1f 00 66 	mcall	8000580c <xQueueGenericReceive+0x1b8>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
8000567a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000567e:	70 e8       	ld.w	r8,r8[0x38]
80005680:	58 08       	cp.w	r8,0
80005682:	c4 c0       	breq	8000571a <xQueueGenericReceive+0xc6>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
80005684:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005688:	70 38       	ld.w	r8,r8[0xc]
8000568a:	ef 48 ff fc 	st.w	r7[-4],r8

				prvCopyDataFromQueue( pxQueue, pvBuffer );
8000568e:	ee fb ff e8 	ld.w	r11,r7[-24]
80005692:	ee fc ff ec 	ld.w	r12,r7[-20]
80005696:	f0 1f 00 5f 	mcall	80005810 <xQueueGenericReceive+0x1bc>

				if( xJustPeeking == pdFALSE )
8000569a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000569e:	58 08       	cp.w	r8,0
800056a0:	c2 51       	brne	800056ea <xQueueGenericReceive+0x96>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
800056a2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056a6:	70 e8       	ld.w	r8,r8[0x38]
800056a8:	f0 c9 00 01 	sub	r9,r8,1
800056ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056b0:	91 e9       	st.w	r8[0x38],r9

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
800056b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056b6:	70 08       	ld.w	r8,r8[0x0]
800056b8:	58 08       	cp.w	r8,0
800056ba:	c0 81       	brne	800056ca <xQueueGenericReceive+0x76>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
800056bc:	f0 1f 00 56 	mcall	80005814 <xQueueGenericReceive+0x1c0>
800056c0:	18 98       	mov	r8,r12
800056c2:	10 99       	mov	r9,r8
800056c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056c8:	91 19       	st.w	r8[0x4],r9
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
800056ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056ce:	70 48       	ld.w	r8,r8[0x10]
800056d0:	58 08       	cp.w	r8,0
800056d2:	c2 00       	breq	80005712 <xQueueGenericReceive+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
800056d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056d8:	2f 08       	sub	r8,-16
800056da:	10 9c       	mov	r12,r8
800056dc:	f0 1f 00 4f 	mcall	80005818 <xQueueGenericReceive+0x1c4>
800056e0:	18 98       	mov	r8,r12
800056e2:	58 18       	cp.w	r8,1
800056e4:	c1 71       	brne	80005712 <xQueueGenericReceive+0xbe>
						{
							portYIELD_WITHIN_API();
800056e6:	d7 33       	scall
800056e8:	c1 58       	rjmp	80005712 <xQueueGenericReceive+0xbe>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
800056ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800056f2:	91 39       	st.w	r8[0xc],r9

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
800056f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800056f8:	70 98       	ld.w	r8,r8[0x24]
800056fa:	58 08       	cp.w	r8,0
800056fc:	c0 b0       	breq	80005712 <xQueueGenericReceive+0xbe>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
800056fe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005702:	2d c8       	sub	r8,-36
80005704:	10 9c       	mov	r12,r8
80005706:	f0 1f 00 45 	mcall	80005818 <xQueueGenericReceive+0x1c4>
8000570a:	18 98       	mov	r8,r12
8000570c:	58 08       	cp.w	r8,0
8000570e:	c0 20       	breq	80005712 <xQueueGenericReceive+0xbe>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
80005710:	d7 33       	scall
						}
					}

				}

				taskEXIT_CRITICAL();
80005712:	f0 1f 00 43 	mcall	8000581c <xQueueGenericReceive+0x1c8>
				return pdPASS;
80005716:	30 18       	mov	r8,1
80005718:	c7 58       	rjmp	80005802 <xQueueGenericReceive+0x1ae>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
8000571a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000571e:	58 08       	cp.w	r8,0
80005720:	c0 51       	brne	8000572a <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
80005722:	f0 1f 00 3f 	mcall	8000581c <xQueueGenericReceive+0x1c8>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
80005726:	30 08       	mov	r8,0
80005728:	c6 d8       	rjmp	80005802 <xQueueGenericReceive+0x1ae>
				}
				else if( xEntryTimeSet == pdFALSE )
8000572a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000572e:	58 08       	cp.w	r8,0
80005730:	c0 91       	brne	80005742 <xQueueGenericReceive+0xee>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
80005732:	ee c8 00 10 	sub	r8,r7,16
80005736:	10 9c       	mov	r12,r8
80005738:	f0 1f 00 3a 	mcall	80005820 <xQueueGenericReceive+0x1cc>
					xEntryTimeSet = pdTRUE;
8000573c:	30 18       	mov	r8,1
8000573e:	ef 48 ff f8 	st.w	r7[-8],r8
				}
			}
		}
		taskEXIT_CRITICAL();
80005742:	f0 1f 00 37 	mcall	8000581c <xQueueGenericReceive+0x1c8>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
80005746:	f0 1f 00 38 	mcall	80005824 <xQueueGenericReceive+0x1d0>
		prvLockQueue( pxQueue );
8000574a:	f0 1f 00 31 	mcall	8000580c <xQueueGenericReceive+0x1b8>
8000574e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005752:	71 18       	ld.w	r8,r8[0x44]
80005754:	5b f8       	cp.w	r8,-1
80005756:	c0 61       	brne	80005762 <xQueueGenericReceive+0x10e>
80005758:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000575c:	30 09       	mov	r9,0
8000575e:	f1 49 00 44 	st.w	r8[68],r9
80005762:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005766:	71 28       	ld.w	r8,r8[0x48]
80005768:	5b f8       	cp.w	r8,-1
8000576a:	c0 61       	brne	80005776 <xQueueGenericReceive+0x122>
8000576c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005770:	30 09       	mov	r9,0
80005772:	f1 49 00 48 	st.w	r8[72],r9
80005776:	f0 1f 00 2a 	mcall	8000581c <xQueueGenericReceive+0x1c8>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
8000577a:	ee c9 00 1c 	sub	r9,r7,28
8000577e:	ee c8 00 10 	sub	r8,r7,16
80005782:	12 9b       	mov	r11,r9
80005784:	10 9c       	mov	r12,r8
80005786:	f0 1f 00 29 	mcall	80005828 <xQueueGenericReceive+0x1d4>
8000578a:	18 98       	mov	r8,r12
8000578c:	58 08       	cp.w	r8,0
8000578e:	c3 31       	brne	800057f4 <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) )
80005790:	ee fc ff ec 	ld.w	r12,r7[-20]
80005794:	f0 1f 00 26 	mcall	8000582c <xQueueGenericReceive+0x1d8>
80005798:	18 98       	mov	r8,r12
8000579a:	58 08       	cp.w	r8,0
8000579c:	c2 50       	breq	800057e6 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
8000579e:	ee f8 ff ec 	ld.w	r8,r7[-20]
800057a2:	70 08       	ld.w	r8,r8[0x0]
800057a4:	58 08       	cp.w	r8,0
800057a6:	c0 b1       	brne	800057bc <xQueueGenericReceive+0x168>
					{
						portENTER_CRITICAL();
800057a8:	f0 1f 00 19 	mcall	8000580c <xQueueGenericReceive+0x1b8>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
800057ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800057b0:	70 18       	ld.w	r8,r8[0x4]
800057b2:	10 9c       	mov	r12,r8
800057b4:	f0 1f 00 1f 	mcall	80005830 <xQueueGenericReceive+0x1dc>
						}
						portEXIT_CRITICAL();
800057b8:	f0 1f 00 19 	mcall	8000581c <xQueueGenericReceive+0x1c8>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
800057bc:	ee f9 ff e4 	ld.w	r9,r7[-28]
800057c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800057c4:	2d c8       	sub	r8,-36
800057c6:	12 9b       	mov	r11,r9
800057c8:	10 9c       	mov	r12,r8
800057ca:	f0 1f 00 1b 	mcall	80005834 <xQueueGenericReceive+0x1e0>
				prvUnlockQueue( pxQueue );
800057ce:	ee fc ff ec 	ld.w	r12,r7[-20]
800057d2:	f0 1f 00 1a 	mcall	80005838 <xQueueGenericReceive+0x1e4>
				if( !xTaskResumeAll() )
800057d6:	f0 1f 00 1a 	mcall	8000583c <xQueueGenericReceive+0x1e8>
800057da:	18 98       	mov	r8,r12
800057dc:	58 08       	cp.w	r8,0
800057de:	fe 91 ff 4b 	brne	80005674 <xQueueGenericReceive+0x20>
				{
					portYIELD_WITHIN_API();
800057e2:	d7 33       	scall
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
800057e4:	c4 9b       	rjmp	80005676 <xQueueGenericReceive+0x22>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
800057e6:	ee fc ff ec 	ld.w	r12,r7[-20]
800057ea:	f0 1f 00 14 	mcall	80005838 <xQueueGenericReceive+0x1e4>
				( void ) xTaskResumeAll();
800057ee:	f0 1f 00 14 	mcall	8000583c <xQueueGenericReceive+0x1e8>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
800057f2:	c4 2b       	rjmp	80005676 <xQueueGenericReceive+0x22>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
800057f4:	ee fc ff ec 	ld.w	r12,r7[-20]
800057f8:	f0 1f 00 10 	mcall	80005838 <xQueueGenericReceive+0x1e4>
			( void ) xTaskResumeAll();
800057fc:	f0 1f 00 10 	mcall	8000583c <xQueueGenericReceive+0x1e8>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
80005800:	30 08       	mov	r8,0
		}
	}
}
80005802:	10 9c       	mov	r12,r8
80005804:	2f 8d       	sub	sp,-32
80005806:	e3 cd 80 80 	ldm	sp++,r7,pc
8000580a:	00 00       	add	r0,r0
8000580c:	80 00       	ld.sh	r0,r0[0x0]
8000580e:	4e cc       	lddpc	r12,800059bc <prvUnlockQueue+0xc>
80005810:	80 00       	ld.sh	r0,r0[0x0]
80005812:	59 44       	cp.w	r4,20
80005814:	80 00       	ld.sh	r0,r0[0x0]
80005816:	66 7c       	ld.w	r12,r3[0x1c]
80005818:	80 00       	ld.sh	r0,r0[0x0]
8000581a:	61 70       	ld.w	r0,r0[0x5c]
8000581c:	80 00       	ld.sh	r0,r0[0x0]
8000581e:	4e e8       	lddpc	r8,800059d4 <prvUnlockQueue+0x24>
80005820:	80 00       	ld.sh	r0,r0[0x0]
80005822:	62 40       	ld.w	r0,r1[0x10]
80005824:	80 00       	ld.sh	r0,r0[0x0]
80005826:	5d 9c       	*unknown*
80005828:	80 00       	ld.sh	r0,r0[0x0]
8000582a:	62 70       	ld.w	r0,r1[0x1c]
8000582c:	80 00       	ld.sh	r0,r0[0x0]
8000582e:	5a 80       	cp.w	r0,-24
80005830:	80 00       	ld.sh	r0,r0[0x0]
80005832:	66 9c       	ld.w	r12,r3[0x24]
80005834:	80 00       	ld.sh	r0,r0[0x0]
80005836:	60 f0       	ld.w	r0,r0[0x3c]
80005838:	80 00       	ld.sh	r0,r0[0x0]
8000583a:	59 b0       	cp.w	r0,27
8000583c:	80 00       	ld.sh	r0,r0[0x0]
8000583e:	5d b8       	*unknown*

80005840 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
80005840:	eb cd 40 80 	pushm	r7,lr
80005844:	1a 97       	mov	r7,sp
80005846:	20 3d       	sub	sp,12
80005848:	ef 4c ff fc 	st.w	r7[-4],r12
8000584c:	ef 4b ff f8 	st.w	r7[-8],r11
80005850:	ef 4a ff f4 	st.w	r7[-12],r10
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
80005854:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005858:	71 08       	ld.w	r8,r8[0x40]
8000585a:	58 08       	cp.w	r8,0
8000585c:	c1 11       	brne	8000587e <prvCopyDataToQueue+0x3e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
8000585e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005862:	70 08       	ld.w	r8,r8[0x0]
80005864:	58 08       	cp.w	r8,0
80005866:	c5 f1       	brne	80005924 <prvCopyDataToQueue+0xe4>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
80005868:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000586c:	70 18       	ld.w	r8,r8[0x4]
8000586e:	10 9c       	mov	r12,r8
80005870:	f0 1f 00 33 	mcall	8000593c <prvCopyDataToQueue+0xfc>
				pxQueue->pxMutexHolder = NULL;
80005874:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005878:	30 09       	mov	r9,0
8000587a:	91 19       	st.w	r8[0x4],r9
8000587c:	c5 48       	rjmp	80005924 <prvCopyDataToQueue+0xe4>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
8000587e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005882:	58 08       	cp.w	r8,0
80005884:	c2 61       	brne	800058d0 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
80005886:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000588a:	71 09       	ld.w	r9,r8[0x40]
8000588c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005890:	70 28       	ld.w	r8,r8[0x8]
80005892:	12 9a       	mov	r10,r9
80005894:	ee fb ff f8 	ld.w	r11,r7[-8]
80005898:	10 9c       	mov	r12,r8
8000589a:	f0 1f 00 2a 	mcall	80005940 <prvCopyDataToQueue+0x100>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
8000589e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058a2:	70 29       	ld.w	r9,r8[0x8]
800058a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058a8:	71 08       	ld.w	r8,r8[0x40]
800058aa:	10 09       	add	r9,r8
800058ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058b0:	91 29       	st.w	r8[0x8],r9
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
800058b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058b6:	70 29       	ld.w	r9,r8[0x8]
800058b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058bc:	70 18       	ld.w	r8,r8[0x4]
800058be:	10 39       	cp.w	r9,r8
800058c0:	c3 23       	brcs	80005924 <prvCopyDataToQueue+0xe4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
800058c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058c6:	70 09       	ld.w	r9,r8[0x0]
800058c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058cc:	91 29       	st.w	r8[0x8],r9
800058ce:	c2 b8       	rjmp	80005924 <prvCopyDataToQueue+0xe4>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
800058d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058d4:	71 09       	ld.w	r9,r8[0x40]
800058d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058da:	70 38       	ld.w	r8,r8[0xc]
800058dc:	12 9a       	mov	r10,r9
800058de:	ee fb ff f8 	ld.w	r11,r7[-8]
800058e2:	10 9c       	mov	r12,r8
800058e4:	f0 1f 00 17 	mcall	80005940 <prvCopyDataToQueue+0x100>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
800058e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058ec:	70 39       	ld.w	r9,r8[0xc]
800058ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058f2:	71 08       	ld.w	r8,r8[0x40]
800058f4:	5c 38       	neg	r8
800058f6:	10 09       	add	r9,r8
800058f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800058fc:	91 39       	st.w	r8[0xc],r9
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
800058fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005902:	70 39       	ld.w	r9,r8[0xc]
80005904:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005908:	70 08       	ld.w	r8,r8[0x0]
8000590a:	10 39       	cp.w	r9,r8
8000590c:	c0 c2       	brcc	80005924 <prvCopyDataToQueue+0xe4>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
8000590e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005912:	70 19       	ld.w	r9,r8[0x4]
80005914:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005918:	71 08       	ld.w	r8,r8[0x40]
8000591a:	5c 38       	neg	r8
8000591c:	10 09       	add	r9,r8
8000591e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005922:	91 39       	st.w	r8[0xc],r9
		}
	}

	++( pxQueue->uxMessagesWaiting );
80005924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005928:	70 e8       	ld.w	r8,r8[0x38]
8000592a:	f0 c9 ff ff 	sub	r9,r8,-1
8000592e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005932:	91 e9       	st.w	r8[0x38],r9
}
80005934:	2f dd       	sub	sp,-12
80005936:	e3 cd 80 80 	ldm	sp++,r7,pc
8000593a:	00 00       	add	r0,r0
8000593c:	80 00       	ld.sh	r0,r0[0x0]
8000593e:	67 70       	ld.w	r0,r3[0x5c]
80005940:	80 00       	ld.sh	r0,r0[0x0]
80005942:	6f 08       	ld.w	r8,r7[0x40]

80005944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
80005944:	eb cd 40 80 	pushm	r7,lr
80005948:	1a 97       	mov	r7,sp
8000594a:	20 2d       	sub	sp,8
8000594c:	ef 4c ff fc 	st.w	r7[-4],r12
80005950:	ef 4b ff f8 	st.w	r7[-8],r11
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
80005954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005958:	70 08       	ld.w	r8,r8[0x0]
8000595a:	58 08       	cp.w	r8,0
8000595c:	c2 50       	breq	800059a6 <prvCopyDataFromQueue+0x62>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
8000595e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005962:	70 39       	ld.w	r9,r8[0xc]
80005964:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005968:	71 08       	ld.w	r8,r8[0x40]
8000596a:	10 09       	add	r9,r8
8000596c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005970:	91 39       	st.w	r8[0xc],r9
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
80005972:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005976:	70 39       	ld.w	r9,r8[0xc]
80005978:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000597c:	70 18       	ld.w	r8,r8[0x4]
8000597e:	10 39       	cp.w	r9,r8
80005980:	c0 73       	brcs	8000598e <prvCopyDataFromQueue+0x4a>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
80005982:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005986:	70 09       	ld.w	r9,r8[0x0]
80005988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000598c:	91 39       	st.w	r8[0xc],r9
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
8000598e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005992:	71 09       	ld.w	r9,r8[0x40]
80005994:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005998:	70 38       	ld.w	r8,r8[0xc]
8000599a:	12 9a       	mov	r10,r9
8000599c:	10 9b       	mov	r11,r8
8000599e:	ee fc ff f8 	ld.w	r12,r7[-8]
800059a2:	f0 1f 00 03 	mcall	800059ac <prvCopyDataFromQueue+0x68>
	}
}
800059a6:	2f ed       	sub	sp,-8
800059a8:	e3 cd 80 80 	ldm	sp++,r7,pc
800059ac:	80 00       	ld.sh	r0,r0[0x0]
800059ae:	6f 08       	ld.w	r8,r7[0x40]

800059b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
800059b0:	eb cd 40 80 	pushm	r7,lr
800059b4:	1a 97       	mov	r7,sp
800059b6:	20 1d       	sub	sp,4
800059b8:	ef 4c ff fc 	st.w	r7[-4],r12

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
800059bc:	f0 1f 00 2d 	mcall	80005a70 <prvUnlockQueue+0xc0>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
800059c0:	c1 a8       	rjmp	800059f4 <prvUnlockQueue+0x44>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
800059c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059c6:	70 98       	ld.w	r8,r8[0x24]
800059c8:	58 08       	cp.w	r8,0
800059ca:	c1 c0       	breq	80005a02 <prvUnlockQueue+0x52>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
800059cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059d0:	2d c8       	sub	r8,-36
800059d2:	10 9c       	mov	r12,r8
800059d4:	f0 1f 00 28 	mcall	80005a74 <prvUnlockQueue+0xc4>
800059d8:	18 98       	mov	r8,r12
800059da:	58 08       	cp.w	r8,0
800059dc:	c0 30       	breq	800059e2 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
800059de:	f0 1f 00 27 	mcall	80005a78 <prvUnlockQueue+0xc8>
				}

				--( pxQueue->xTxLock );
800059e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059e6:	71 28       	ld.w	r8,r8[0x48]
800059e8:	f0 c9 00 01 	sub	r9,r8,1
800059ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059f0:	f1 49 00 48 	st.w	r8[72],r9
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
800059f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059f8:	71 28       	ld.w	r8,r8[0x48]
800059fa:	58 08       	cp.w	r8,0
800059fc:	fe 99 ff e3 	brgt	800059c2 <prvUnlockQueue+0x12>
80005a00:	c0 28       	rjmp	80005a04 <prvUnlockQueue+0x54>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
80005a02:	d7 03       	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
80005a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a08:	3f f9       	mov	r9,-1
80005a0a:	f1 49 00 48 	st.w	r8[72],r9
	}
	taskEXIT_CRITICAL();
80005a0e:	f0 1f 00 1c 	mcall	80005a7c <prvUnlockQueue+0xcc>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
80005a12:	f0 1f 00 18 	mcall	80005a70 <prvUnlockQueue+0xc0>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
80005a16:	c1 a8       	rjmp	80005a4a <prvUnlockQueue+0x9a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80005a18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a1c:	70 48       	ld.w	r8,r8[0x10]
80005a1e:	58 08       	cp.w	r8,0
80005a20:	c1 c0       	breq	80005a58 <prvUnlockQueue+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80005a22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a26:	2f 08       	sub	r8,-16
80005a28:	10 9c       	mov	r12,r8
80005a2a:	f0 1f 00 13 	mcall	80005a74 <prvUnlockQueue+0xc4>
80005a2e:	18 98       	mov	r8,r12
80005a30:	58 08       	cp.w	r8,0
80005a32:	c0 30       	breq	80005a38 <prvUnlockQueue+0x88>
				{
					vTaskMissedYield();
80005a34:	f0 1f 00 11 	mcall	80005a78 <prvUnlockQueue+0xc8>
				}

				--( pxQueue->xRxLock );
80005a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a3c:	71 18       	ld.w	r8,r8[0x44]
80005a3e:	f0 c9 00 01 	sub	r9,r8,1
80005a42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a46:	f1 49 00 44 	st.w	r8[68],r9
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
80005a4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a4e:	71 18       	ld.w	r8,r8[0x44]
80005a50:	58 08       	cp.w	r8,0
80005a52:	fe 99 ff e3 	brgt	80005a18 <prvUnlockQueue+0x68>
80005a56:	c0 28       	rjmp	80005a5a <prvUnlockQueue+0xaa>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
80005a58:	d7 03       	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
80005a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a5e:	3f f9       	mov	r9,-1
80005a60:	f1 49 00 44 	st.w	r8[68],r9
	}
	taskEXIT_CRITICAL();
80005a64:	f0 1f 00 06 	mcall	80005a7c <prvUnlockQueue+0xcc>
}
80005a68:	2f fd       	sub	sp,-4
80005a6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a6e:	00 00       	add	r0,r0
80005a70:	80 00       	ld.sh	r0,r0[0x0]
80005a72:	4e cc       	lddpc	r12,80005c20 <xTaskGenericCreate+0x124>
80005a74:	80 00       	ld.sh	r0,r0[0x0]
80005a76:	61 70       	ld.w	r0,r0[0x5c]
80005a78:	80 00       	ld.sh	r0,r0[0x0]
80005a7a:	63 28       	ld.w	r8,r1[0x48]
80005a7c:	80 00       	ld.sh	r0,r0[0x0]
80005a7e:	4e e8       	lddpc	r8,80005c34 <xTaskGenericCreate+0x138>

80005a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
80005a80:	eb cd 40 80 	pushm	r7,lr
80005a84:	1a 97       	mov	r7,sp
80005a86:	20 2d       	sub	sp,8
80005a88:	ef 4c ff f8 	st.w	r7[-8],r12
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
80005a8c:	f0 1f 00 09 	mcall	80005ab0 <prvIsQueueEmpty+0x30>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
80005a90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a94:	70 e8       	ld.w	r8,r8[0x38]
80005a96:	58 08       	cp.w	r8,0
80005a98:	5f 08       	sreq	r8
80005a9a:	ef 48 ff fc 	st.w	r7[-4],r8
	taskEXIT_CRITICAL();
80005a9e:	f0 1f 00 06 	mcall	80005ab4 <prvIsQueueEmpty+0x34>

	return xReturn;
80005aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005aa6:	10 9c       	mov	r12,r8
80005aa8:	2f ed       	sub	sp,-8
80005aaa:	e3 cd 80 80 	ldm	sp++,r7,pc
80005aae:	00 00       	add	r0,r0
80005ab0:	80 00       	ld.sh	r0,r0[0x0]
80005ab2:	4e cc       	lddpc	r12,80005c60 <xTaskGenericCreate+0x164>
80005ab4:	80 00       	ld.sh	r0,r0[0x0]
80005ab6:	4e e8       	lddpc	r8,80005c6c <xTaskGenericCreate+0x170>

80005ab8 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
80005ab8:	eb cd 40 80 	pushm	r7,lr
80005abc:	1a 97       	mov	r7,sp
80005abe:	20 2d       	sub	sp,8
80005ac0:	ef 4c ff f8 	st.w	r7[-8],r12
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
80005ac4:	f0 1f 00 0a 	mcall	80005aec <prvIsQueueFull+0x34>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
80005ac8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005acc:	70 e9       	ld.w	r9,r8[0x38]
80005ace:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ad2:	70 f8       	ld.w	r8,r8[0x3c]
80005ad4:	10 39       	cp.w	r9,r8
80005ad6:	5f 08       	sreq	r8
80005ad8:	ef 48 ff fc 	st.w	r7[-4],r8
	taskEXIT_CRITICAL();
80005adc:	f0 1f 00 05 	mcall	80005af0 <prvIsQueueFull+0x38>

	return xReturn;
80005ae0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005ae4:	10 9c       	mov	r12,r8
80005ae6:	2f ed       	sub	sp,-8
80005ae8:	e3 cd 80 80 	ldm	sp++,r7,pc
80005aec:	80 00       	ld.sh	r0,r0[0x0]
80005aee:	4e cc       	lddpc	r12,80005c9c <xTaskGenericCreate+0x1a0>
80005af0:	80 00       	ld.sh	r0,r0[0x0]
80005af2:	4e e8       	lddpc	r8,80005ca8 <xTaskGenericCreate+0x1ac>
80005af4:	49 44       	lddpc	r4,80005b44 <xTaskGenericCreate+0x48>
80005af6:	4c 45       	lddpc	r5,80005c04 <xTaskGenericCreate+0x108>
80005af8:	00 00       	add	r0,r0
	...

80005afc <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
80005afc:	eb cd 40 c0 	pushm	r6-r7,lr
80005b00:	1a 97       	mov	r7,sp
80005b02:	20 8d       	sub	sp,32
80005b04:	ee c6 ff f4 	sub	r6,r7,-12
80005b08:	ef 4c ff f0 	st.w	r7[-16],r12
80005b0c:	ef 4b ff ec 	st.w	r7[-20],r11
80005b10:	ef 49 ff e4 	st.w	r7[-28],r9
80005b14:	ef 48 ff e0 	st.w	r7[-32],r8
80005b18:	14 98       	mov	r8,r10
80005b1a:	ef 58 ff e8 	st.h	r7[-24],r8
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80005b1e:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80005b22:	6c 1b       	ld.w	r11,r6[0x4]
80005b24:	10 9c       	mov	r12,r8
80005b26:	f0 1f 00 5a 	mcall	80005c8c <xTaskGenericCreate+0x190>
80005b2a:	18 98       	mov	r8,r12
80005b2c:	ef 48 ff f8 	st.w	r7[-8],r8

	if( pxNewTCB != NULL )
80005b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b34:	58 08       	cp.w	r8,0
80005b36:	e0 80 00 92 	breq	80005c5a <xTaskGenericCreate+0x15e>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
80005b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b3e:	70 c9       	ld.w	r9,r8[0x30]
80005b40:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80005b44:	20 18       	sub	r8,1
80005b46:	a3 68       	lsl	r8,0x2
80005b48:	f2 08 00 08 	add	r8,r9,r8
80005b4c:	ef 48 ff fc 	st.w	r7[-4],r8
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( unsigned long ) pxTopOfStack ) & ( ( unsigned long ) ~portBYTE_ALIGNMENT_MASK  ) );
80005b50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b54:	e0 18 ff fc 	andl	r8,0xfffc
80005b58:	ef 48 ff fc 	st.w	r7[-4],r8
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80005b5c:	ef 18 ff e8 	ld.uh	r8,r7[-24]
80005b60:	6c 29       	ld.w	r9,r6[0x8]
80005b62:	ee fa ff e0 	ld.w	r10,r7[-32]
80005b66:	ee fb ff ec 	ld.w	r11,r7[-20]
80005b6a:	ee fc ff f8 	ld.w	r12,r7[-8]
80005b6e:	f0 1f 00 49 	mcall	80005c90 <xTaskGenericCreate+0x194>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80005b72:	ee fa ff e4 	ld.w	r10,r7[-28]
80005b76:	ee fb ff f0 	ld.w	r11,r7[-16]
80005b7a:	ee fc ff fc 	ld.w	r12,r7[-4]
80005b7e:	f0 1f 00 46 	mcall	80005c94 <xTaskGenericCreate+0x198>
80005b82:	18 98       	mov	r8,r12
80005b84:	10 99       	mov	r9,r8
80005b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b8a:	91 09       	st.w	r8[0x0],r9
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
80005b8c:	6c 08       	ld.w	r8,r6[0x0]
80005b8e:	58 08       	cp.w	r8,0
80005b90:	c0 50       	breq	80005b9a <xTaskGenericCreate+0x9e>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
80005b92:	6c 08       	ld.w	r8,r6[0x0]
80005b94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b98:	91 09       	st.w	r8[0x0],r9
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
80005b9a:	f0 1f 00 40 	mcall	80005c98 <xTaskGenericCreate+0x19c>
		{
			uxCurrentNumberOfTasks++;
80005b9e:	4c 08       	lddpc	r8,80005c9c <xTaskGenericCreate+0x1a0>
80005ba0:	70 08       	ld.w	r8,r8[0x0]
80005ba2:	f0 c9 ff ff 	sub	r9,r8,-1
80005ba6:	4b e8       	lddpc	r8,80005c9c <xTaskGenericCreate+0x1a0>
80005ba8:	91 09       	st.w	r8[0x0],r9
			if( pxCurrentTCB == NULL )
80005baa:	4b e8       	lddpc	r8,80005ca0 <xTaskGenericCreate+0x1a4>
80005bac:	70 08       	ld.w	r8,r8[0x0]
80005bae:	58 08       	cp.w	r8,0
80005bb0:	c0 c1       	brne	80005bc8 <xTaskGenericCreate+0xcc>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80005bb2:	4b c8       	lddpc	r8,80005ca0 <xTaskGenericCreate+0x1a4>
80005bb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005bb8:	91 09       	st.w	r8[0x0],r9

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
80005bba:	4b 98       	lddpc	r8,80005c9c <xTaskGenericCreate+0x1a0>
80005bbc:	70 08       	ld.w	r8,r8[0x0]
80005bbe:	58 18       	cp.w	r8,1
80005bc0:	c1 41       	brne	80005be8 <xTaskGenericCreate+0xec>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80005bc2:	f0 1f 00 39 	mcall	80005ca4 <xTaskGenericCreate+0x1a8>
80005bc6:	c1 18       	rjmp	80005be8 <xTaskGenericCreate+0xec>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80005bc8:	4b 88       	lddpc	r8,80005ca8 <xTaskGenericCreate+0x1ac>
80005bca:	70 08       	ld.w	r8,r8[0x0]
80005bcc:	58 08       	cp.w	r8,0
80005bce:	c0 d1       	brne	80005be8 <xTaskGenericCreate+0xec>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80005bd0:	4b 48       	lddpc	r8,80005ca0 <xTaskGenericCreate+0x1a4>
80005bd2:	70 08       	ld.w	r8,r8[0x0]
80005bd4:	70 b9       	ld.w	r9,r8[0x2c]
80005bd6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005bda:	10 39       	cp.w	r9,r8
80005bdc:	e0 8b 00 06 	brhi	80005be8 <xTaskGenericCreate+0xec>
					{
						pxCurrentTCB = pxNewTCB;
80005be0:	4b 08       	lddpc	r8,80005ca0 <xTaskGenericCreate+0x1a4>
80005be2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005be6:	91 09       	st.w	r8[0x0],r9
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
80005be8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005bec:	70 b9       	ld.w	r9,r8[0x2c]
80005bee:	4b 08       	lddpc	r8,80005cac <xTaskGenericCreate+0x1b0>
80005bf0:	70 08       	ld.w	r8,r8[0x0]
80005bf2:	10 39       	cp.w	r9,r8
80005bf4:	e0 88 00 07 	brls	80005c02 <xTaskGenericCreate+0x106>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
80005bf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005bfc:	70 b9       	ld.w	r9,r8[0x2c]
80005bfe:	4a c8       	lddpc	r8,80005cac <xTaskGenericCreate+0x1b0>
80005c00:	91 09       	st.w	r8[0x0],r9
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
80005c02:	4a c8       	lddpc	r8,80005cb0 <xTaskGenericCreate+0x1b4>
80005c04:	70 08       	ld.w	r8,r8[0x0]
80005c06:	f0 c9 ff ff 	sub	r9,r8,-1
80005c0a:	4a a8       	lddpc	r8,80005cb0 <xTaskGenericCreate+0x1b4>
80005c0c:	91 09       	st.w	r8[0x0],r9

			prvAddTaskToReadyQueue( pxNewTCB );
80005c0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c12:	70 b9       	ld.w	r9,r8[0x2c]
80005c14:	4a 88       	lddpc	r8,80005cb4 <xTaskGenericCreate+0x1b8>
80005c16:	70 08       	ld.w	r8,r8[0x0]
80005c18:	10 39       	cp.w	r9,r8
80005c1a:	e0 88 00 07 	brls	80005c28 <xTaskGenericCreate+0x12c>
80005c1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c22:	70 b9       	ld.w	r9,r8[0x2c]
80005c24:	4a 48       	lddpc	r8,80005cb4 <xTaskGenericCreate+0x1b8>
80005c26:	91 09       	st.w	r8[0x0],r9
80005c28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c2c:	f0 ca ff fc 	sub	r10,r8,-4
80005c30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005c34:	70 b9       	ld.w	r9,r8[0x2c]
80005c36:	12 98       	mov	r8,r9
80005c38:	a3 68       	lsl	r8,0x2
80005c3a:	12 08       	add	r8,r9
80005c3c:	a3 68       	lsl	r8,0x2
80005c3e:	10 99       	mov	r9,r8
80005c40:	49 e8       	lddpc	r8,80005cb8 <xTaskGenericCreate+0x1bc>
80005c42:	f2 08 00 08 	add	r8,r9,r8
80005c46:	14 9b       	mov	r11,r10
80005c48:	10 9c       	mov	r12,r8
80005c4a:	f0 1f 00 1d 	mcall	80005cbc <xTaskGenericCreate+0x1c0>

			xReturn = pdPASS;
80005c4e:	30 18       	mov	r8,1
80005c50:	ef 48 ff f4 	st.w	r7[-12],r8
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80005c54:	f0 1f 00 1b 	mcall	80005cc0 <xTaskGenericCreate+0x1c4>
80005c58:	c0 48       	rjmp	80005c60 <xTaskGenericCreate+0x164>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80005c5a:	3f f8       	mov	r8,-1
80005c5c:	ef 48 ff f4 	st.w	r7[-12],r8
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80005c60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005c64:	58 18       	cp.w	r8,1
80005c66:	c0 d1       	brne	80005c80 <xTaskGenericCreate+0x184>
	{
		if( xSchedulerRunning != pdFALSE )
80005c68:	49 08       	lddpc	r8,80005ca8 <xTaskGenericCreate+0x1ac>
80005c6a:	70 08       	ld.w	r8,r8[0x0]
80005c6c:	58 08       	cp.w	r8,0
80005c6e:	c0 90       	breq	80005c80 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80005c70:	48 c8       	lddpc	r8,80005ca0 <xTaskGenericCreate+0x1a4>
80005c72:	70 08       	ld.w	r8,r8[0x0]
80005c74:	70 b9       	ld.w	r9,r8[0x2c]
80005c76:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c7a:	10 39       	cp.w	r9,r8
80005c7c:	c0 22       	brcc	80005c80 <xTaskGenericCreate+0x184>
			{
				portYIELD_WITHIN_API();
80005c7e:	d7 33       	scall
			}
		}
	}

	return xReturn;
80005c80:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80005c84:	10 9c       	mov	r12,r8
80005c86:	2f 8d       	sub	sp,-32
80005c88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005c8c:	80 00       	ld.sh	r0,r0[0x0]
80005c8e:	65 bc       	ld.w	r12,r2[0x6c]
80005c90:	80 00       	ld.sh	r0,r0[0x0]
80005c92:	63 68       	ld.w	r8,r1[0x58]
80005c94:	80 00       	ld.sh	r0,r0[0x0]
80005c96:	4f 14       	lddpc	r4,80005e58 <xTaskResumeAll+0xa0>
80005c98:	80 00       	ld.sh	r0,r0[0x0]
80005c9a:	4e cc       	lddpc	r12,80005e48 <xTaskResumeAll+0x90>
80005c9c:	00 00       	add	r0,r0
80005c9e:	07 74       	ld.ub	r4,--r3
80005ca0:	00 00       	add	r0,r0
80005ca2:	06 60       	and	r0,r3
80005ca4:	80 00       	ld.sh	r0,r0[0x0]
80005ca6:	64 10       	ld.w	r0,r2[0x4]
80005ca8:	00 00       	add	r0,r0
80005caa:	07 84       	ld.ub	r4,r3[0x0]
80005cac:	00 00       	add	r0,r0
80005cae:	07 7c       	ld.ub	r12,--r3
80005cb0:	00 00       	add	r0,r0
80005cb2:	07 98       	ld.ub	r8,r3[0x1]
80005cb4:	00 00       	add	r0,r0
80005cb6:	07 80       	ld.ub	r0,r3[0x0]
80005cb8:	00 00       	add	r0,r0
80005cba:	06 64       	and	r4,r3
80005cbc:	80 00       	ld.sh	r0,r0[0x0]
80005cbe:	4b a2       	lddpc	r2,80005da4 <vTaskSuspendAll+0x8>
80005cc0:	80 00       	ld.sh	r0,r0[0x0]
80005cc2:	4e e8       	lddpc	r8,80005e78 <xTaskResumeAll+0xc0>

80005cc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
80005cc4:	eb cd 40 80 	pushm	r7,lr
80005cc8:	1a 97       	mov	r7,sp
80005cca:	20 3d       	sub	sp,12
80005ccc:	ef 4c ff f4 	st.w	r7[-12],r12
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
80005cd0:	30 08       	mov	r8,0
80005cd2:	ef 48 ff fc 	st.w	r7[-4],r8

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0 )
80005cd6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cda:	58 08       	cp.w	r8,0
80005cdc:	c1 a0       	breq	80005d10 <vTaskDelay+0x4c>
		{
			vTaskSuspendAll();
80005cde:	f0 1f 00 11 	mcall	80005d20 <vTaskDelay+0x5c>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80005ce2:	49 18       	lddpc	r8,80005d24 <vTaskDelay+0x60>
80005ce4:	70 09       	ld.w	r9,r8[0x0]
80005ce6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cea:	f2 08 00 08 	add	r8,r9,r8
80005cee:	ef 48 ff f8 	st.w	r7[-8],r8

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80005cf2:	48 e8       	lddpc	r8,80005d28 <vTaskDelay+0x64>
80005cf4:	70 08       	ld.w	r8,r8[0x0]
80005cf6:	2f c8       	sub	r8,-4
80005cf8:	10 9c       	mov	r12,r8
80005cfa:	f0 1f 00 0d 	mcall	80005d2c <vTaskDelay+0x68>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80005cfe:	ee fc ff f8 	ld.w	r12,r7[-8]
80005d02:	f0 1f 00 0c 	mcall	80005d30 <vTaskDelay+0x6c>
			}
			xAlreadyYielded = xTaskResumeAll();
80005d06:	f0 1f 00 0c 	mcall	80005d34 <vTaskDelay+0x70>
80005d0a:	18 98       	mov	r8,r12
80005d0c:	ef 48 ff fc 	st.w	r7[-4],r8
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( !xAlreadyYielded )
80005d10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d14:	58 08       	cp.w	r8,0
80005d16:	c0 21       	brne	80005d1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
80005d18:	d7 33       	scall
		}
	}
80005d1a:	2f dd       	sub	sp,-12
80005d1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d20:	80 00       	ld.sh	r0,r0[0x0]
80005d22:	5d 9c       	*unknown*
80005d24:	00 00       	add	r0,r0
80005d26:	07 78       	ld.ub	r8,--r3
80005d28:	00 00       	add	r0,r0
80005d2a:	06 60       	and	r0,r3
80005d2c:	80 00       	ld.sh	r0,r0[0x0]
80005d2e:	4c b6       	lddpc	r6,80005e58 <xTaskResumeAll+0xa0>
80005d30:	80 00       	ld.sh	r0,r0[0x0]
80005d32:	65 3c       	ld.w	r12,r2[0x4c]
80005d34:	80 00       	ld.sh	r0,r0[0x0]
80005d36:	5d b8       	*unknown*

80005d38 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
80005d38:	eb cd 40 80 	pushm	r7,lr
80005d3c:	1a 97       	mov	r7,sp
80005d3e:	20 1d       	sub	sp,4
portBASE_TYPE xReturn;

	/* Add the idle task at the lowest priority. */
	xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), ( xTaskHandle * ) NULL );
80005d40:	49 1b       	lddpc	r11,80005d84 <vTaskStartScheduler+0x4c>
80005d42:	30 08       	mov	r8,0
80005d44:	1a d8       	st.w	--sp,r8
80005d46:	30 08       	mov	r8,0
80005d48:	1a d8       	st.w	--sp,r8
80005d4a:	30 08       	mov	r8,0
80005d4c:	1a d8       	st.w	--sp,r8
80005d4e:	30 08       	mov	r8,0
80005d50:	30 09       	mov	r9,0
80005d52:	e0 6a 01 00 	mov	r10,256
80005d56:	48 dc       	lddpc	r12,80005d88 <vTaskStartScheduler+0x50>
80005d58:	f0 1f 00 0d 	mcall	80005d8c <vTaskStartScheduler+0x54>
80005d5c:	2f dd       	sub	sp,-12
80005d5e:	18 98       	mov	r8,r12
80005d60:	ef 48 ff fc 	st.w	r7[-4],r8
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
80005d64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005d68:	58 18       	cp.w	r8,1
80005d6a:	c0 a1       	brne	80005d7e <vTaskStartScheduler+0x46>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
80005d6c:	d3 03       	ssrf	0x10

		xSchedulerRunning = pdTRUE;
80005d6e:	48 98       	lddpc	r8,80005d90 <vTaskStartScheduler+0x58>
80005d70:	30 19       	mov	r9,1
80005d72:	91 09       	st.w	r8[0x0],r9
		xTickCount = ( portTickType ) 0;
80005d74:	48 88       	lddpc	r8,80005d94 <vTaskStartScheduler+0x5c>
80005d76:	30 09       	mov	r9,0
80005d78:	91 09       	st.w	r8[0x0],r9
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() )
80005d7a:	f0 1f 00 08 	mcall	80005d98 <vTaskStartScheduler+0x60>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
80005d7e:	2f fd       	sub	sp,-4
80005d80:	e3 cd 80 80 	ldm	sp++,r7,pc
80005d84:	80 00       	ld.sh	r0,r0[0x0]
80005d86:	5a f4       	cp.w	r4,-17
80005d88:	80 00       	ld.sh	r0,r0[0x0]
80005d8a:	63 3c       	ld.w	r12,r1[0x4c]
80005d8c:	80 00       	ld.sh	r0,r0[0x0]
80005d8e:	5a fc       	cp.w	r12,-17
80005d90:	00 00       	add	r0,r0
80005d92:	07 84       	ld.ub	r4,r3[0x0]
80005d94:	00 00       	add	r0,r0
80005d96:	07 78       	ld.ub	r8,--r3
80005d98:	80 00       	ld.sh	r0,r0[0x0]
80005d9a:	50 bc       	stdsp	sp[0x2c],r12

80005d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80005d9c:	eb cd 40 80 	pushm	r7,lr
80005da0:	1a 97       	mov	r7,sp
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
80005da2:	48 58       	lddpc	r8,80005db4 <vTaskSuspendAll+0x18>
80005da4:	70 08       	ld.w	r8,r8[0x0]
80005da6:	f0 c9 ff ff 	sub	r9,r8,-1
80005daa:	48 38       	lddpc	r8,80005db4 <vTaskSuspendAll+0x18>
80005dac:	91 09       	st.w	r8[0x0],r9
}
80005dae:	e3 cd 80 80 	ldm	sp++,r7,pc
80005db2:	00 00       	add	r0,r0
80005db4:	00 00       	add	r0,r0
80005db6:	07 88       	ld.ub	r8,r3[0x0]

80005db8 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
80005db8:	eb cd 40 c0 	pushm	r6-r7,lr
80005dbc:	1a 97       	mov	r7,sp
80005dbe:	20 2d       	sub	sp,8
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
80005dc0:	30 08       	mov	r8,0
80005dc2:	ef 48 ff f8 	st.w	r7[-8],r8
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80005dc6:	f0 1f 00 3a 	mcall	80005eac <xTaskResumeAll+0xf4>
	{
		--uxSchedulerSuspended;
80005dca:	4b a8       	lddpc	r8,80005eb0 <xTaskResumeAll+0xf8>
80005dcc:	70 08       	ld.w	r8,r8[0x0]
80005dce:	f0 c9 00 01 	sub	r9,r8,1
80005dd2:	4b 88       	lddpc	r8,80005eb0 <xTaskResumeAll+0xf8>
80005dd4:	91 09       	st.w	r8[0x0],r9

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80005dd6:	4b 78       	lddpc	r8,80005eb0 <xTaskResumeAll+0xf8>
80005dd8:	70 08       	ld.w	r8,r8[0x0]
80005dda:	58 08       	cp.w	r8,0
80005ddc:	c5 f1       	brne	80005e9a <xTaskResumeAll+0xe2>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0 )
80005dde:	4b 68       	lddpc	r8,80005eb4 <xTaskResumeAll+0xfc>
80005de0:	70 08       	ld.w	r8,r8[0x0]
80005de2:	58 08       	cp.w	r8,0
80005de4:	c5 b0       	breq	80005e9a <xTaskResumeAll+0xe2>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
80005de6:	30 08       	mov	r8,0
80005de8:	ef 48 ff fc 	st.w	r7[-4],r8

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80005dec:	c3 08       	rjmp	80005e4c <xTaskResumeAll+0x94>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
80005dee:	4b 38       	lddpc	r8,80005eb8 <xTaskResumeAll+0x100>
80005df0:	70 38       	ld.w	r8,r8[0xc]
80005df2:	70 38       	ld.w	r8,r8[0xc]
80005df4:	10 96       	mov	r6,r8
					vListRemove( &( pxTCB->xEventListItem ) );
80005df6:	ec c8 ff e8 	sub	r8,r6,-24
80005dfa:	10 9c       	mov	r12,r8
80005dfc:	f0 1f 00 30 	mcall	80005ebc <xTaskResumeAll+0x104>
					vListRemove( &( pxTCB->xGenericListItem ) );
80005e00:	ec c8 ff fc 	sub	r8,r6,-4
80005e04:	10 9c       	mov	r12,r8
80005e06:	f0 1f 00 2e 	mcall	80005ebc <xTaskResumeAll+0x104>
					prvAddTaskToReadyQueue( pxTCB );
80005e0a:	6c b9       	ld.w	r9,r6[0x2c]
80005e0c:	4a d8       	lddpc	r8,80005ec0 <xTaskResumeAll+0x108>
80005e0e:	70 08       	ld.w	r8,r8[0x0]
80005e10:	10 39       	cp.w	r9,r8
80005e12:	e0 88 00 05 	brls	80005e1c <xTaskResumeAll+0x64>
80005e16:	6c b9       	ld.w	r9,r6[0x2c]
80005e18:	4a a8       	lddpc	r8,80005ec0 <xTaskResumeAll+0x108>
80005e1a:	91 09       	st.w	r8[0x0],r9
80005e1c:	ec ca ff fc 	sub	r10,r6,-4
80005e20:	6c b9       	ld.w	r9,r6[0x2c]
80005e22:	12 98       	mov	r8,r9
80005e24:	a3 68       	lsl	r8,0x2
80005e26:	12 08       	add	r8,r9
80005e28:	a3 68       	lsl	r8,0x2
80005e2a:	10 99       	mov	r9,r8
80005e2c:	4a 68       	lddpc	r8,80005ec4 <xTaskResumeAll+0x10c>
80005e2e:	f2 08 00 08 	add	r8,r9,r8
80005e32:	14 9b       	mov	r11,r10
80005e34:	10 9c       	mov	r12,r8
80005e36:	f0 1f 00 25 	mcall	80005ec8 <xTaskResumeAll+0x110>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80005e3a:	6c b9       	ld.w	r9,r6[0x2c]
80005e3c:	4a 48       	lddpc	r8,80005ecc <xTaskResumeAll+0x114>
80005e3e:	70 08       	ld.w	r8,r8[0x0]
80005e40:	70 b8       	ld.w	r8,r8[0x2c]
80005e42:	10 39       	cp.w	r9,r8
80005e44:	c0 43       	brcs	80005e4c <xTaskResumeAll+0x94>
					{
						xYieldRequired = pdTRUE;
80005e46:	30 18       	mov	r8,1
80005e48:	ef 48 ff fc 	st.w	r7[-4],r8
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
80005e4c:	49 b8       	lddpc	r8,80005eb8 <xTaskResumeAll+0x100>
80005e4e:	70 08       	ld.w	r8,r8[0x0]
80005e50:	58 08       	cp.w	r8,0
80005e52:	cc e1       	brne	80005dee <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80005e54:	49 f8       	lddpc	r8,80005ed0 <xTaskResumeAll+0x118>
80005e56:	70 08       	ld.w	r8,r8[0x0]
80005e58:	58 08       	cp.w	r8,0
80005e5a:	c1 10       	breq	80005e7c <xTaskResumeAll+0xc4>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80005e5c:	c0 98       	rjmp	80005e6e <xTaskResumeAll+0xb6>
					{
						vTaskIncrementTick();
80005e5e:	f0 1f 00 1e 	mcall	80005ed4 <xTaskResumeAll+0x11c>
						--uxMissedTicks;
80005e62:	49 c8       	lddpc	r8,80005ed0 <xTaskResumeAll+0x118>
80005e64:	70 08       	ld.w	r8,r8[0x0]
80005e66:	f0 c9 00 01 	sub	r9,r8,1
80005e6a:	49 a8       	lddpc	r8,80005ed0 <xTaskResumeAll+0x118>
80005e6c:	91 09       	st.w	r8[0x0],r9
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0 )
80005e6e:	49 98       	lddpc	r8,80005ed0 <xTaskResumeAll+0x118>
80005e70:	70 08       	ld.w	r8,r8[0x0]
80005e72:	58 08       	cp.w	r8,0
80005e74:	cf 51       	brne	80005e5e <xTaskResumeAll+0xa6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
80005e76:	30 18       	mov	r8,1
80005e78:	ef 48 ff fc 	st.w	r7[-4],r8
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
80005e7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e80:	58 18       	cp.w	r8,1
80005e82:	c0 50       	breq	80005e8c <xTaskResumeAll+0xd4>
80005e84:	49 58       	lddpc	r8,80005ed8 <xTaskResumeAll+0x120>
80005e86:	70 08       	ld.w	r8,r8[0x0]
80005e88:	58 18       	cp.w	r8,1
80005e8a:	c0 81       	brne	80005e9a <xTaskResumeAll+0xe2>
				{
					xAlreadyYielded = pdTRUE;
80005e8c:	30 18       	mov	r8,1
80005e8e:	ef 48 ff f8 	st.w	r7[-8],r8
					xMissedYield = pdFALSE;
80005e92:	49 28       	lddpc	r8,80005ed8 <xTaskResumeAll+0x120>
80005e94:	30 09       	mov	r9,0
80005e96:	91 09       	st.w	r8[0x0],r9
					portYIELD_WITHIN_API();
80005e98:	d7 33       	scall
				}
			}
		}
	}
	taskEXIT_CRITICAL();
80005e9a:	f0 1f 00 11 	mcall	80005edc <xTaskResumeAll+0x124>

	return xAlreadyYielded;
80005e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80005ea2:	10 9c       	mov	r12,r8
80005ea4:	2f ed       	sub	sp,-8
80005ea6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005eaa:	00 00       	add	r0,r0
80005eac:	80 00       	ld.sh	r0,r0[0x0]
80005eae:	4e cc       	lddpc	r12,8000605c <vTaskSwitchContext+0x1c>
80005eb0:	00 00       	add	r0,r0
80005eb2:	07 88       	ld.ub	r8,r3[0x0]
80005eb4:	00 00       	add	r0,r0
80005eb6:	07 74       	ld.ub	r4,--r3
80005eb8:	00 00       	add	r0,r0
80005eba:	07 34       	ld.ub	r4,r3++
80005ebc:	80 00       	ld.sh	r0,r0[0x0]
80005ebe:	4c b6       	lddpc	r6,80005fe8 <vTaskIncrementTick+0x108>
80005ec0:	00 00       	add	r0,r0
80005ec2:	07 80       	ld.ub	r0,r3[0x0]
80005ec4:	00 00       	add	r0,r0
80005ec6:	06 64       	and	r4,r3
80005ec8:	80 00       	ld.sh	r0,r0[0x0]
80005eca:	4b a2       	lddpc	r2,80005fb0 <vTaskIncrementTick+0xd0>
80005ecc:	00 00       	add	r0,r0
80005ece:	06 60       	and	r0,r3
80005ed0:	00 00       	add	r0,r0
80005ed2:	07 8c       	ld.ub	r12,r3[0x0]
80005ed4:	80 00       	ld.sh	r0,r0[0x0]
80005ed6:	5e e0       	retqs	r0
80005ed8:	00 00       	add	r0,r0
80005eda:	07 90       	ld.ub	r0,r3[0x1]
80005edc:	80 00       	ld.sh	r0,r0[0x0]
80005ede:	4e e8       	lddpc	r8,80006094 <vTaskSwitchContext+0x54>

80005ee0 <vTaskIncrementTick>:
 * documented in task.h
 *----------------------------------------------------------*/


void vTaskIncrementTick( void )
{
80005ee0:	eb cd 40 80 	pushm	r7,lr
80005ee4:	1a 97       	mov	r7,sp
80005ee6:	20 3d       	sub	sp,12
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80005ee8:	4c b8       	lddpc	r8,80006014 <vTaskIncrementTick+0x134>
80005eea:	70 08       	ld.w	r8,r8[0x0]
80005eec:	58 08       	cp.w	r8,0
80005eee:	e0 81 00 89 	brne	80006000 <vTaskIncrementTick+0x120>
	{
		++xTickCount;
80005ef2:	4c a8       	lddpc	r8,80006018 <vTaskIncrementTick+0x138>
80005ef4:	70 08       	ld.w	r8,r8[0x0]
80005ef6:	f0 c9 ff ff 	sub	r9,r8,-1
80005efa:	4c 88       	lddpc	r8,80006018 <vTaskIncrementTick+0x138>
80005efc:	91 09       	st.w	r8[0x0],r9
		if( xTickCount == ( portTickType ) 0 )
80005efe:	4c 78       	lddpc	r8,80006018 <vTaskIncrementTick+0x138>
80005f00:	70 08       	ld.w	r8,r8[0x0]
80005f02:	58 08       	cp.w	r8,0
80005f04:	c2 71       	brne	80005f52 <vTaskIncrementTick+0x72>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );

			pxTemp = pxDelayedTaskList;
80005f06:	4c 68       	lddpc	r8,8000601c <vTaskIncrementTick+0x13c>
80005f08:	70 08       	ld.w	r8,r8[0x0]
80005f0a:	ef 48 ff f8 	st.w	r7[-8],r8
			pxDelayedTaskList = pxOverflowDelayedTaskList;
80005f0e:	4c 58       	lddpc	r8,80006020 <vTaskIncrementTick+0x140>
80005f10:	70 09       	ld.w	r9,r8[0x0]
80005f12:	4c 38       	lddpc	r8,8000601c <vTaskIncrementTick+0x13c>
80005f14:	91 09       	st.w	r8[0x0],r9
			pxOverflowDelayedTaskList = pxTemp;
80005f16:	4c 38       	lddpc	r8,80006020 <vTaskIncrementTick+0x140>
80005f18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005f1c:	91 09       	st.w	r8[0x0],r9
			xNumOfOverflows++;
80005f1e:	4c 28       	lddpc	r8,80006024 <vTaskIncrementTick+0x144>
80005f20:	70 08       	ld.w	r8,r8[0x0]
80005f22:	f0 c9 ff ff 	sub	r9,r8,-1
80005f26:	4c 08       	lddpc	r8,80006024 <vTaskIncrementTick+0x144>
80005f28:	91 09       	st.w	r8[0x0],r9

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80005f2a:	4b d8       	lddpc	r8,8000601c <vTaskIncrementTick+0x13c>
80005f2c:	70 08       	ld.w	r8,r8[0x0]
80005f2e:	70 08       	ld.w	r8,r8[0x0]
80005f30:	58 08       	cp.w	r8,0
80005f32:	c0 51       	brne	80005f3c <vTaskIncrementTick+0x5c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
80005f34:	4b d8       	lddpc	r8,80006028 <vTaskIncrementTick+0x148>
80005f36:	3f f9       	mov	r9,-1
80005f38:	91 09       	st.w	r8[0x0],r9
80005f3a:	c0 c8       	rjmp	80005f52 <vTaskIncrementTick+0x72>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80005f3c:	4b 88       	lddpc	r8,8000601c <vTaskIncrementTick+0x13c>
80005f3e:	70 08       	ld.w	r8,r8[0x0]
80005f40:	70 38       	ld.w	r8,r8[0xc]
80005f42:	70 38       	ld.w	r8,r8[0xc]
80005f44:	ef 48 ff f4 	st.w	r7[-12],r8
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80005f48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f4c:	70 19       	ld.w	r9,r8[0x4]
80005f4e:	4b 78       	lddpc	r8,80006028 <vTaskIncrementTick+0x148>
80005f50:	91 09       	st.w	r8[0x0],r9
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
80005f52:	4b 28       	lddpc	r8,80006018 <vTaskIncrementTick+0x138>
80005f54:	70 09       	ld.w	r9,r8[0x0]
80005f56:	4b 58       	lddpc	r8,80006028 <vTaskIncrementTick+0x148>
80005f58:	70 08       	ld.w	r8,r8[0x0]
80005f5a:	10 39       	cp.w	r9,r8
80005f5c:	c5 83       	brcs	8000600c <vTaskIncrementTick+0x12c>
80005f5e:	4b 08       	lddpc	r8,8000601c <vTaskIncrementTick+0x13c>
80005f60:	70 08       	ld.w	r8,r8[0x0]
80005f62:	70 08       	ld.w	r8,r8[0x0]
80005f64:	58 08       	cp.w	r8,0
80005f66:	c0 51       	brne	80005f70 <vTaskIncrementTick+0x90>
80005f68:	4b 08       	lddpc	r8,80006028 <vTaskIncrementTick+0x148>
80005f6a:	3f f9       	mov	r9,-1
80005f6c:	91 09       	st.w	r8[0x0],r9
80005f6e:	c4 f8       	rjmp	8000600c <vTaskIncrementTick+0x12c>
80005f70:	4a b8       	lddpc	r8,8000601c <vTaskIncrementTick+0x13c>
80005f72:	70 08       	ld.w	r8,r8[0x0]
80005f74:	70 38       	ld.w	r8,r8[0xc]
80005f76:	70 38       	ld.w	r8,r8[0xc]
80005f78:	ef 48 ff f4 	st.w	r7[-12],r8
80005f7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005f80:	70 18       	ld.w	r8,r8[0x4]
80005f82:	ef 48 ff fc 	st.w	r7[-4],r8
80005f86:	4a 58       	lddpc	r8,80006018 <vTaskIncrementTick+0x138>
80005f88:	70 09       	ld.w	r9,r8[0x0]
80005f8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f8e:	10 39       	cp.w	r9,r8
80005f90:	c0 62       	brcc	80005f9c <vTaskIncrementTick+0xbc>
80005f92:	4a 68       	lddpc	r8,80006028 <vTaskIncrementTick+0x148>
80005f94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005f98:	91 09       	st.w	r8[0x0],r9
80005f9a:	c3 98       	rjmp	8000600c <vTaskIncrementTick+0x12c>
80005f9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fa0:	2f c8       	sub	r8,-4
80005fa2:	10 9c       	mov	r12,r8
80005fa4:	f0 1f 00 22 	mcall	8000602c <vTaskIncrementTick+0x14c>
80005fa8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fac:	70 a8       	ld.w	r8,r8[0x28]
80005fae:	58 08       	cp.w	r8,0
80005fb0:	c0 70       	breq	80005fbe <vTaskIncrementTick+0xde>
80005fb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fb6:	2e 88       	sub	r8,-24
80005fb8:	10 9c       	mov	r12,r8
80005fba:	f0 1f 00 1d 	mcall	8000602c <vTaskIncrementTick+0x14c>
80005fbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fc2:	70 b9       	ld.w	r9,r8[0x2c]
80005fc4:	49 b8       	lddpc	r8,80006030 <vTaskIncrementTick+0x150>
80005fc6:	70 08       	ld.w	r8,r8[0x0]
80005fc8:	10 39       	cp.w	r9,r8
80005fca:	e0 88 00 07 	brls	80005fd8 <vTaskIncrementTick+0xf8>
80005fce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fd2:	70 b9       	ld.w	r9,r8[0x2c]
80005fd4:	49 78       	lddpc	r8,80006030 <vTaskIncrementTick+0x150>
80005fd6:	91 09       	st.w	r8[0x0],r9
80005fd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fdc:	f0 ca ff fc 	sub	r10,r8,-4
80005fe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005fe4:	70 b9       	ld.w	r9,r8[0x2c]
80005fe6:	12 98       	mov	r8,r9
80005fe8:	a3 68       	lsl	r8,0x2
80005fea:	12 08       	add	r8,r9
80005fec:	a3 68       	lsl	r8,0x2
80005fee:	10 99       	mov	r9,r8
80005ff0:	49 18       	lddpc	r8,80006034 <vTaskIncrementTick+0x154>
80005ff2:	f2 08 00 08 	add	r8,r9,r8
80005ff6:	14 9b       	mov	r11,r10
80005ff8:	10 9c       	mov	r12,r8
80005ffa:	f0 1f 00 10 	mcall	80006038 <vTaskIncrementTick+0x158>
80005ffe:	cb 0b       	rjmp	80005f5e <vTaskIncrementTick+0x7e>
	}
	else
	{
		++uxMissedTicks;
80006000:	48 f8       	lddpc	r8,8000603c <vTaskIncrementTick+0x15c>
80006002:	70 08       	ld.w	r8,r8[0x0]
80006004:	f0 c9 ff ff 	sub	r9,r8,-1
80006008:	48 d8       	lddpc	r8,8000603c <vTaskIncrementTick+0x15c>
8000600a:	91 09       	st.w	r8[0x0],r9
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
8000600c:	2f dd       	sub	sp,-12
8000600e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006012:	00 00       	add	r0,r0
80006014:	00 00       	add	r0,r0
80006016:	07 88       	ld.ub	r8,r3[0x0]
80006018:	00 00       	add	r0,r0
8000601a:	07 78       	ld.ub	r8,--r3
8000601c:	00 00       	add	r0,r0
8000601e:	07 2c       	ld.uh	r12,r3++
80006020:	00 00       	add	r0,r0
80006022:	07 30       	ld.ub	r0,r3++
80006024:	00 00       	add	r0,r0
80006026:	07 94       	ld.ub	r4,r3[0x1]
80006028:	00 00       	add	r0,r0
8000602a:	00 24       	rsub	r4,r0
8000602c:	80 00       	ld.sh	r0,r0[0x0]
8000602e:	4c b6       	lddpc	r6,80006158 <vTaskPlaceOnEventList+0x68>
80006030:	00 00       	add	r0,r0
80006032:	07 80       	ld.ub	r0,r3[0x0]
80006034:	00 00       	add	r0,r0
80006036:	06 64       	and	r4,r3
80006038:	80 00       	ld.sh	r0,r0[0x0]
8000603a:	4b a2       	lddpc	r2,80006120 <vTaskPlaceOnEventList+0x30>
8000603c:	00 00       	add	r0,r0
8000603e:	07 8c       	ld.ub	r12,r3[0x0]

80006040 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80006040:	eb cd 40 80 	pushm	r7,lr
80006044:	1a 97       	mov	r7,sp
80006046:	20 1d       	sub	sp,4
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
80006048:	4a 58       	lddpc	r8,800060dc <vTaskSwitchContext+0x9c>
8000604a:	70 08       	ld.w	r8,r8[0x0]
8000604c:	58 08       	cp.w	r8,0
8000604e:	c0 c0       	breq	80006066 <vTaskSwitchContext+0x26>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
80006050:	4a 48       	lddpc	r8,800060e0 <vTaskSwitchContext+0xa0>
80006052:	30 19       	mov	r9,1
80006054:	91 09       	st.w	r8[0x0],r9
80006056:	c3 f8       	rjmp	800060d4 <vTaskSwitchContext+0x94>

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
80006058:	4a 38       	lddpc	r8,800060e4 <vTaskSwitchContext+0xa4>
8000605a:	70 08       	ld.w	r8,r8[0x0]
8000605c:	f0 c9 00 01 	sub	r9,r8,1
80006060:	4a 18       	lddpc	r8,800060e4 <vTaskSwitchContext+0xa4>
80006062:	91 09       	st.w	r8[0x0],r9
80006064:	c0 28       	rjmp	80006068 <vTaskSwitchContext+0x28>

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
80006066:	d7 03       	nop
80006068:	49 f8       	lddpc	r8,800060e4 <vTaskSwitchContext+0xa4>
8000606a:	70 09       	ld.w	r9,r8[0x0]
8000606c:	12 98       	mov	r8,r9
8000606e:	a3 68       	lsl	r8,0x2
80006070:	12 08       	add	r8,r9
80006072:	a3 68       	lsl	r8,0x2
80006074:	10 99       	mov	r9,r8
80006076:	49 d8       	lddpc	r8,800060e8 <vTaskSwitchContext+0xa8>
80006078:	f2 08 00 08 	add	r8,r9,r8
8000607c:	70 08       	ld.w	r8,r8[0x0]
8000607e:	58 08       	cp.w	r8,0
80006080:	ce c0       	breq	80006058 <vTaskSwitchContext+0x18>
			--uxTopReadyPriority;
		}

		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
80006082:	49 98       	lddpc	r8,800060e4 <vTaskSwitchContext+0xa4>
80006084:	70 09       	ld.w	r9,r8[0x0]
80006086:	12 98       	mov	r8,r9
80006088:	a3 68       	lsl	r8,0x2
8000608a:	12 08       	add	r8,r9
8000608c:	a3 68       	lsl	r8,0x2
8000608e:	10 99       	mov	r9,r8
80006090:	49 68       	lddpc	r8,800060e8 <vTaskSwitchContext+0xa8>
80006092:	f2 08 00 08 	add	r8,r9,r8
80006096:	ef 48 ff fc 	st.w	r7[-4],r8
8000609a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000609e:	70 18       	ld.w	r8,r8[0x4]
800060a0:	70 19       	ld.w	r9,r8[0x4]
800060a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060a6:	91 19       	st.w	r8[0x4],r9
800060a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060ac:	70 19       	ld.w	r9,r8[0x4]
800060ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060b2:	2f 88       	sub	r8,-8
800060b4:	10 39       	cp.w	r9,r8
800060b6:	c0 81       	brne	800060c6 <vTaskSwitchContext+0x86>
800060b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060bc:	70 18       	ld.w	r8,r8[0x4]
800060be:	70 19       	ld.w	r9,r8[0x4]
800060c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060c4:	91 19       	st.w	r8[0x4],r9
800060c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060ca:	70 18       	ld.w	r8,r8[0x4]
800060cc:	70 38       	ld.w	r8,r8[0xc]
800060ce:	10 99       	mov	r9,r8
800060d0:	48 78       	lddpc	r8,800060ec <vTaskSwitchContext+0xac>
800060d2:	91 09       	st.w	r8[0x0],r9

		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
800060d4:	2f fd       	sub	sp,-4
800060d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800060da:	00 00       	add	r0,r0
800060dc:	00 00       	add	r0,r0
800060de:	07 88       	ld.ub	r8,r3[0x0]
800060e0:	00 00       	add	r0,r0
800060e2:	07 90       	ld.ub	r0,r3[0x1]
800060e4:	00 00       	add	r0,r0
800060e6:	07 80       	ld.ub	r0,r3[0x0]
800060e8:	00 00       	add	r0,r0
800060ea:	06 64       	and	r4,r3
800060ec:	00 00       	add	r0,r0
800060ee:	06 60       	and	r0,r3

800060f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
800060f0:	eb cd 40 80 	pushm	r7,lr
800060f4:	1a 97       	mov	r7,sp
800060f6:	20 3d       	sub	sp,12
800060f8:	ef 4c ff f8 	st.w	r7[-8],r12
800060fc:	ef 4b ff f4 	st.w	r7[-12],r11
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
80006100:	49 58       	lddpc	r8,80006154 <vTaskPlaceOnEventList+0x64>
80006102:	70 08       	ld.w	r8,r8[0x0]
80006104:	2e 88       	sub	r8,-24
80006106:	10 9b       	mov	r11,r8
80006108:	ee fc ff f8 	ld.w	r12,r7[-8]
8000610c:	f0 1f 00 13 	mcall	80006158 <vTaskPlaceOnEventList+0x68>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80006110:	49 18       	lddpc	r8,80006154 <vTaskPlaceOnEventList+0x64>
80006112:	70 08       	ld.w	r8,r8[0x0]
80006114:	2f c8       	sub	r8,-4
80006116:	10 9c       	mov	r12,r8
80006118:	f0 1f 00 11 	mcall	8000615c <vTaskPlaceOnEventList+0x6c>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
8000611c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006120:	5b f8       	cp.w	r8,-1
80006122:	c0 91       	brne	80006134 <vTaskPlaceOnEventList+0x44>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80006124:	48 c8       	lddpc	r8,80006154 <vTaskPlaceOnEventList+0x64>
80006126:	70 08       	ld.w	r8,r8[0x0]
80006128:	2f c8       	sub	r8,-4
8000612a:	10 9b       	mov	r11,r8
8000612c:	48 dc       	lddpc	r12,80006160 <vTaskPlaceOnEventList+0x70>
8000612e:	f0 1f 00 0e 	mcall	80006164 <vTaskPlaceOnEventList+0x74>
80006132:	c0 d8       	rjmp	8000614c <vTaskPlaceOnEventList+0x5c>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
80006134:	48 d8       	lddpc	r8,80006168 <vTaskPlaceOnEventList+0x78>
80006136:	70 09       	ld.w	r9,r8[0x0]
80006138:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000613c:	f2 08 00 08 	add	r8,r9,r8
80006140:	ef 48 ff fc 	st.w	r7[-4],r8
			prvAddCurrentTaskToDelayedList( xTimeToWake );
80006144:	ee fc ff fc 	ld.w	r12,r7[-4]
80006148:	f0 1f 00 09 	mcall	8000616c <vTaskPlaceOnEventList+0x7c>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
8000614c:	2f dd       	sub	sp,-12
8000614e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006152:	00 00       	add	r0,r0
80006154:	00 00       	add	r0,r0
80006156:	06 60       	and	r0,r3
80006158:	80 00       	ld.sh	r0,r0[0x0]
8000615a:	4c 14       	lddpc	r4,8000625c <vTaskSetTimeOutState+0x1c>
8000615c:	80 00       	ld.sh	r0,r0[0x0]
8000615e:	4c b6       	lddpc	r6,80006288 <xTaskCheckForTimeOut+0x18>
80006160:	00 00       	add	r0,r0
80006162:	07 60       	ld.uh	r0,--r3
80006164:	80 00       	ld.sh	r0,r0[0x0]
80006166:	4b a2       	lddpc	r2,8000624c <vTaskSetTimeOutState+0xc>
80006168:	00 00       	add	r0,r0
8000616a:	07 78       	ld.ub	r8,--r3
8000616c:	80 00       	ld.sh	r0,r0[0x0]
8000616e:	65 3c       	ld.w	r12,r2[0x4c]

80006170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
80006170:	eb cd 40 80 	pushm	r7,lr
80006174:	1a 97       	mov	r7,sp
80006176:	20 3d       	sub	sp,12
80006178:	ef 4c ff f4 	st.w	r7[-12],r12
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
8000617c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006180:	70 38       	ld.w	r8,r8[0xc]
80006182:	70 38       	ld.w	r8,r8[0xc]
80006184:	ef 48 ff f8 	st.w	r7[-8],r8
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
80006188:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000618c:	2e 88       	sub	r8,-24
8000618e:	10 9c       	mov	r12,r8
80006190:	f0 1f 00 25 	mcall	80006224 <xTaskRemoveFromEventList+0xb4>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
80006194:	4a 58       	lddpc	r8,80006228 <xTaskRemoveFromEventList+0xb8>
80006196:	70 08       	ld.w	r8,r8[0x0]
80006198:	58 08       	cp.w	r8,0
8000619a:	c2 81       	brne	800061ea <xTaskRemoveFromEventList+0x7a>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
8000619c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061a0:	2f c8       	sub	r8,-4
800061a2:	10 9c       	mov	r12,r8
800061a4:	f0 1f 00 20 	mcall	80006224 <xTaskRemoveFromEventList+0xb4>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
800061a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061ac:	70 b9       	ld.w	r9,r8[0x2c]
800061ae:	4a 08       	lddpc	r8,8000622c <xTaskRemoveFromEventList+0xbc>
800061b0:	70 08       	ld.w	r8,r8[0x0]
800061b2:	10 39       	cp.w	r9,r8
800061b4:	e0 88 00 07 	brls	800061c2 <xTaskRemoveFromEventList+0x52>
800061b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061bc:	70 b9       	ld.w	r9,r8[0x2c]
800061be:	49 c8       	lddpc	r8,8000622c <xTaskRemoveFromEventList+0xbc>
800061c0:	91 09       	st.w	r8[0x0],r9
800061c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061c6:	f0 ca ff fc 	sub	r10,r8,-4
800061ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061ce:	70 b9       	ld.w	r9,r8[0x2c]
800061d0:	12 98       	mov	r8,r9
800061d2:	a3 68       	lsl	r8,0x2
800061d4:	12 08       	add	r8,r9
800061d6:	a3 68       	lsl	r8,0x2
800061d8:	10 99       	mov	r9,r8
800061da:	49 68       	lddpc	r8,80006230 <xTaskRemoveFromEventList+0xc0>
800061dc:	f2 08 00 08 	add	r8,r9,r8
800061e0:	14 9b       	mov	r11,r10
800061e2:	10 9c       	mov	r12,r8
800061e4:	f0 1f 00 14 	mcall	80006234 <xTaskRemoveFromEventList+0xc4>
800061e8:	c0 88       	rjmp	800061f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
800061ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061ee:	2e 88       	sub	r8,-24
800061f0:	10 9b       	mov	r11,r8
800061f2:	49 2c       	lddpc	r12,80006238 <xTaskRemoveFromEventList+0xc8>
800061f4:	f0 1f 00 10 	mcall	80006234 <xTaskRemoveFromEventList+0xc4>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
800061f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061fc:	70 b9       	ld.w	r9,r8[0x2c]
800061fe:	49 08       	lddpc	r8,8000623c <xTaskRemoveFromEventList+0xcc>
80006200:	70 08       	ld.w	r8,r8[0x0]
80006202:	70 b8       	ld.w	r8,r8[0x2c]
80006204:	10 39       	cp.w	r9,r8
80006206:	c0 53       	brcs	80006210 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
80006208:	30 18       	mov	r8,1
8000620a:	ef 48 ff fc 	st.w	r7[-4],r8
8000620e:	c0 48       	rjmp	80006216 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
80006210:	30 08       	mov	r8,0
80006212:	ef 48 ff fc 	st.w	r7[-4],r8
	}

	return xReturn;
80006216:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000621a:	10 9c       	mov	r12,r8
8000621c:	2f dd       	sub	sp,-12
8000621e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006222:	00 00       	add	r0,r0
80006224:	80 00       	ld.sh	r0,r0[0x0]
80006226:	4c b6       	lddpc	r6,80006350 <prvIdleTask+0x14>
80006228:	00 00       	add	r0,r0
8000622a:	07 88       	ld.ub	r8,r3[0x0]
8000622c:	00 00       	add	r0,r0
8000622e:	07 80       	ld.ub	r0,r3[0x0]
80006230:	00 00       	add	r0,r0
80006232:	06 64       	and	r4,r3
80006234:	80 00       	ld.sh	r0,r0[0x0]
80006236:	4b a2       	lddpc	r2,8000631c <xTaskCheckForTimeOut+0xac>
80006238:	00 00       	add	r0,r0
8000623a:	07 34       	ld.ub	r4,r3++
8000623c:	00 00       	add	r0,r0
8000623e:	06 60       	and	r0,r3

80006240 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
80006240:	eb cd 40 80 	pushm	r7,lr
80006244:	1a 97       	mov	r7,sp
80006246:	20 1d       	sub	sp,4
80006248:	ef 4c ff fc 	st.w	r7[-4],r12
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
8000624c:	48 78       	lddpc	r8,80006268 <vTaskSetTimeOutState+0x28>
8000624e:	70 09       	ld.w	r9,r8[0x0]
80006250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006254:	91 09       	st.w	r8[0x0],r9
	pxTimeOut->xTimeOnEntering = xTickCount;
80006256:	48 68       	lddpc	r8,8000626c <vTaskSetTimeOutState+0x2c>
80006258:	70 09       	ld.w	r9,r8[0x0]
8000625a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000625e:	91 19       	st.w	r8[0x4],r9
}
80006260:	2f fd       	sub	sp,-4
80006262:	e3 cd 80 80 	ldm	sp++,r7,pc
80006266:	00 00       	add	r0,r0
80006268:	00 00       	add	r0,r0
8000626a:	07 94       	ld.ub	r4,r3[0x1]
8000626c:	00 00       	add	r0,r0
8000626e:	07 78       	ld.ub	r8,--r3

80006270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
80006270:	eb cd 40 80 	pushm	r7,lr
80006274:	1a 97       	mov	r7,sp
80006276:	20 3d       	sub	sp,12
80006278:	ef 4c ff f8 	st.w	r7[-8],r12
8000627c:	ef 4b ff f4 	st.w	r7[-12],r11
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
80006280:	f0 1f 00 25 	mcall	80006314 <xTaskCheckForTimeOut+0xa4>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
80006284:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006288:	70 08       	ld.w	r8,r8[0x0]
8000628a:	5b f8       	cp.w	r8,-1
8000628c:	c0 51       	brne	80006296 <xTaskCheckForTimeOut+0x26>
			{
				xReturn = pdFALSE;
8000628e:	30 08       	mov	r8,0
80006290:	ef 48 ff fc 	st.w	r7[-4],r8
80006294:	c3 88       	rjmp	80006304 <xTaskCheckForTimeOut+0x94>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
80006296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000629a:	70 09       	ld.w	r9,r8[0x0]
8000629c:	49 f8       	lddpc	r8,80006318 <xTaskCheckForTimeOut+0xa8>
8000629e:	70 08       	ld.w	r8,r8[0x0]
800062a0:	10 39       	cp.w	r9,r8
800062a2:	c0 d0       	breq	800062bc <xTaskCheckForTimeOut+0x4c>
800062a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800062a8:	70 19       	ld.w	r9,r8[0x4]
800062aa:	49 d8       	lddpc	r8,8000631c <xTaskCheckForTimeOut+0xac>
800062ac:	70 08       	ld.w	r8,r8[0x0]
800062ae:	10 39       	cp.w	r9,r8
800062b0:	e0 8b 00 06 	brhi	800062bc <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
800062b4:	30 18       	mov	r8,1
800062b6:	ef 48 ff fc 	st.w	r7[-4],r8
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
800062ba:	c2 58       	rjmp	80006304 <xTaskCheckForTimeOut+0x94>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
800062bc:	49 88       	lddpc	r8,8000631c <xTaskCheckForTimeOut+0xac>
800062be:	70 09       	ld.w	r9,r8[0x0]
800062c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800062c4:	70 18       	ld.w	r8,r8[0x4]
800062c6:	10 19       	sub	r9,r8
800062c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800062cc:	70 08       	ld.w	r8,r8[0x0]
800062ce:	10 39       	cp.w	r9,r8
800062d0:	c1 72       	brcc	800062fe <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
800062d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800062d6:	70 09       	ld.w	r9,r8[0x0]
800062d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800062dc:	70 1a       	ld.w	r10,r8[0x4]
800062de:	49 08       	lddpc	r8,8000631c <xTaskCheckForTimeOut+0xac>
800062e0:	70 08       	ld.w	r8,r8[0x0]
800062e2:	f4 08 01 08 	sub	r8,r10,r8
800062e6:	10 09       	add	r9,r8
800062e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800062ec:	91 09       	st.w	r8[0x0],r9
			vTaskSetTimeOutState( pxTimeOut );
800062ee:	ee fc ff f8 	ld.w	r12,r7[-8]
800062f2:	f0 1f 00 0c 	mcall	80006320 <xTaskCheckForTimeOut+0xb0>
			xReturn = pdFALSE;
800062f6:	30 08       	mov	r8,0
800062f8:	ef 48 ff fc 	st.w	r7[-4],r8
800062fc:	c0 48       	rjmp	80006304 <xTaskCheckForTimeOut+0x94>
		}
		else
		{
			xReturn = pdTRUE;
800062fe:	30 18       	mov	r8,1
80006300:	ef 48 ff fc 	st.w	r7[-4],r8
		}
	}
	taskEXIT_CRITICAL();
80006304:	f0 1f 00 08 	mcall	80006324 <xTaskCheckForTimeOut+0xb4>

	return xReturn;
80006308:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000630c:	10 9c       	mov	r12,r8
8000630e:	2f dd       	sub	sp,-12
80006310:	e3 cd 80 80 	ldm	sp++,r7,pc
80006314:	80 00       	ld.sh	r0,r0[0x0]
80006316:	4e cc       	lddpc	r12,800064c4 <prvCheckTasksWaitingTermination+0x20>
80006318:	00 00       	add	r0,r0
8000631a:	07 94       	ld.ub	r4,r3[0x1]
8000631c:	00 00       	add	r0,r0
8000631e:	07 78       	ld.ub	r8,--r3
80006320:	80 00       	ld.sh	r0,r0[0x0]
80006322:	62 40       	ld.w	r0,r1[0x10]
80006324:	80 00       	ld.sh	r0,r0[0x0]
80006326:	4e e8       	lddpc	r8,800064dc <prvCheckTasksWaitingTermination+0x38>

80006328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
80006328:	eb cd 40 80 	pushm	r7,lr
8000632c:	1a 97       	mov	r7,sp
	xMissedYield = pdTRUE;
8000632e:	48 38       	lddpc	r8,80006338 <vTaskMissedYield+0x10>
80006330:	30 19       	mov	r9,1
80006332:	91 09       	st.w	r8[0x0],r9
}
80006334:	e3 cd 80 80 	ldm	sp++,r7,pc
80006338:	00 00       	add	r0,r0
8000633a:	07 90       	ld.ub	r0,r3[0x1]

8000633c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
8000633c:	eb cd 40 80 	pushm	r7,lr
80006340:	1a 97       	mov	r7,sp
80006342:	20 1d       	sub	sp,4
80006344:	ef 4c ff fc 	st.w	r7[-4],r12
80006348:	c0 28       	rjmp	8000634c <prvIdleTask+0x10>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
8000634a:	d7 03       	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
8000634c:	f0 1f 00 05 	mcall	80006360 <prvIdleTask+0x24>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
80006350:	48 58       	lddpc	r8,80006364 <prvIdleTask+0x28>
80006352:	70 08       	ld.w	r8,r8[0x0]
80006354:	58 18       	cp.w	r8,1
80006356:	fe 98 ff fa 	brls	8000634a <prvIdleTask+0xe>
			{
				taskYIELD();
8000635a:	d7 33       	scall
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
8000635c:	cf 8b       	rjmp	8000634c <prvIdleTask+0x10>
8000635e:	00 00       	add	r0,r0
80006360:	80 00       	ld.sh	r0,r0[0x0]
80006362:	64 a4       	ld.w	r4,r2[0x28]
80006364:	00 00       	add	r0,r0
80006366:	06 64       	and	r4,r3

80006368 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
80006368:	eb cd 40 80 	pushm	r7,lr
8000636c:	1a 97       	mov	r7,sp
8000636e:	20 5d       	sub	sp,20
80006370:	ef 4c ff fc 	st.w	r7[-4],r12
80006374:	ef 4b ff f8 	st.w	r7[-8],r11
80006378:	ef 4a ff f4 	st.w	r7[-12],r10
8000637c:	ef 49 ff f0 	st.w	r7[-16],r9
80006380:	ef 58 ff ec 	st.h	r7[-20],r8
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
80006384:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000638c:	2c c8       	sub	r8,-52
8000638e:	31 0a       	mov	r10,16
80006390:	12 9b       	mov	r11,r9
80006392:	10 9c       	mov	r12,r8
80006394:	f0 1f 00 1d 	mcall	80006408 <prvInitialiseTCBVariables+0xa0>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
80006398:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000639c:	30 08       	mov	r8,0
8000639e:	f3 68 00 43 	st.b	r9[67],r8

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
800063a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800063a6:	58 78       	cp.w	r8,7
800063a8:	e0 88 00 05 	brls	800063b2 <prvInitialiseTCBVariables+0x4a>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
800063ac:	30 78       	mov	r8,7
800063ae:	ef 48 ff f4 	st.w	r7[-12],r8
	}

	pxTCB->uxPriority = uxPriority;
800063b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800063ba:	91 b9       	st.w	r8[0x2c],r9
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
800063bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800063c4:	f1 49 00 44 	st.w	r8[68],r9
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
800063c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063cc:	2f c8       	sub	r8,-4
800063ce:	10 9c       	mov	r12,r8
800063d0:	f0 1f 00 0f 	mcall	8000640c <prvInitialiseTCBVariables+0xa4>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800063d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063d8:	2e 88       	sub	r8,-24
800063da:	10 9c       	mov	r12,r8
800063dc:	f0 1f 00 0c 	mcall	8000640c <prvInitialiseTCBVariables+0xa4>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800063e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800063e8:	91 49       	st.w	r8[0x10],r9

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
800063ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800063ee:	f0 09 11 08 	rsub	r9,r8,8
800063f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063f6:	91 69       	st.w	r8[0x18],r9
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800063f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006400:	91 99       	st.w	r8[0x24],r9
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
80006402:	2f bd       	sub	sp,-20
80006404:	e3 cd 80 80 	ldm	sp++,r7,pc
80006408:	80 00       	ld.sh	r0,r0[0x0]
8000640a:	73 40       	ld.w	r0,r9[0x50]
8000640c:	80 00       	ld.sh	r0,r0[0x0]
8000640e:	4b 88       	lddpc	r8,800064ec <prvCheckTasksWaitingTermination+0x48>

80006410 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
80006410:	eb cd 40 80 	pushm	r7,lr
80006414:	1a 97       	mov	r7,sp
80006416:	20 1d       	sub	sp,4
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
80006418:	30 08       	mov	r8,0
8000641a:	ef 48 ff fc 	st.w	r7[-4],r8
8000641e:	c1 38       	rjmp	80006444 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
80006420:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006424:	12 98       	mov	r8,r9
80006426:	a3 68       	lsl	r8,0x2
80006428:	12 08       	add	r8,r9
8000642a:	a3 68       	lsl	r8,0x2
8000642c:	10 99       	mov	r9,r8
8000642e:	49 58       	lddpc	r8,80006480 <prvInitialiseTaskLists+0x70>
80006430:	f2 08 00 08 	add	r8,r9,r8
80006434:	10 9c       	mov	r12,r8
80006436:	f0 1f 00 14 	mcall	80006484 <prvInitialiseTaskLists+0x74>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
8000643a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000643e:	2f f8       	sub	r8,-1
80006440:	ef 48 ff fc 	st.w	r7[-4],r8
80006444:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006448:	58 78       	cp.w	r8,7
8000644a:	fe 98 ff eb 	brls	80006420 <prvInitialiseTaskLists+0x10>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
8000644e:	48 fc       	lddpc	r12,80006488 <prvInitialiseTaskLists+0x78>
80006450:	f0 1f 00 0d 	mcall	80006484 <prvInitialiseTaskLists+0x74>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
80006454:	48 ec       	lddpc	r12,8000648c <prvInitialiseTaskLists+0x7c>
80006456:	f0 1f 00 0c 	mcall	80006484 <prvInitialiseTaskLists+0x74>
	vListInitialise( ( xList * ) &xPendingReadyList );
8000645a:	48 ec       	lddpc	r12,80006490 <prvInitialiseTaskLists+0x80>
8000645c:	f0 1f 00 0a 	mcall	80006484 <prvInitialiseTaskLists+0x74>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
80006460:	48 dc       	lddpc	r12,80006494 <prvInitialiseTaskLists+0x84>
80006462:	f0 1f 00 09 	mcall	80006484 <prvInitialiseTaskLists+0x74>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
80006466:	48 dc       	lddpc	r12,80006498 <prvInitialiseTaskLists+0x88>
80006468:	f0 1f 00 07 	mcall	80006484 <prvInitialiseTaskLists+0x74>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
8000646c:	48 c8       	lddpc	r8,8000649c <prvInitialiseTaskLists+0x8c>
8000646e:	48 79       	lddpc	r9,80006488 <prvInitialiseTaskLists+0x78>
80006470:	91 09       	st.w	r8[0x0],r9
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80006472:	48 c8       	lddpc	r8,800064a0 <prvInitialiseTaskLists+0x90>
80006474:	48 69       	lddpc	r9,8000648c <prvInitialiseTaskLists+0x7c>
80006476:	91 09       	st.w	r8[0x0],r9
}
80006478:	2f fd       	sub	sp,-4
8000647a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000647e:	00 00       	add	r0,r0
80006480:	00 00       	add	r0,r0
80006482:	06 64       	and	r4,r3
80006484:	80 00       	ld.sh	r0,r0[0x0]
80006486:	4b 3c       	lddpc	r12,80006550 <prvAddCurrentTaskToDelayedList+0x14>
80006488:	00 00       	add	r0,r0
8000648a:	07 04       	ld.w	r4,r3++
8000648c:	00 00       	add	r0,r0
8000648e:	07 18       	ld.sh	r8,r3++
80006490:	00 00       	add	r0,r0
80006492:	07 34       	ld.ub	r4,r3++
80006494:	00 00       	add	r0,r0
80006496:	07 48       	ld.w	r8,--r3
80006498:	00 00       	add	r0,r0
8000649a:	07 60       	ld.uh	r0,--r3
8000649c:	00 00       	add	r0,r0
8000649e:	07 2c       	ld.uh	r12,r3++
800064a0:	00 00       	add	r0,r0
800064a2:	07 30       	ld.ub	r0,r3++

800064a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
800064a4:	eb cd 40 80 	pushm	r7,lr
800064a8:	1a 97       	mov	r7,sp
800064aa:	20 2d       	sub	sp,8
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0 )
800064ac:	49 b8       	lddpc	r8,80006518 <prvCheckTasksWaitingTermination+0x74>
800064ae:	70 08       	ld.w	r8,r8[0x0]
800064b0:	58 08       	cp.w	r8,0
800064b2:	c2 f0       	breq	80006510 <prvCheckTasksWaitingTermination+0x6c>
		{
			vTaskSuspendAll();
800064b4:	f0 1f 00 1a 	mcall	8000651c <prvCheckTasksWaitingTermination+0x78>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800064b8:	49 a8       	lddpc	r8,80006520 <prvCheckTasksWaitingTermination+0x7c>
800064ba:	70 08       	ld.w	r8,r8[0x0]
800064bc:	58 08       	cp.w	r8,0
800064be:	5f 08       	sreq	r8
800064c0:	ef 48 ff f8 	st.w	r7[-8],r8
			xTaskResumeAll();
800064c4:	f0 1f 00 18 	mcall	80006524 <prvCheckTasksWaitingTermination+0x80>

			if( xListIsEmpty == pdFALSE )
800064c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800064cc:	58 08       	cp.w	r8,0
800064ce:	c2 11       	brne	80006510 <prvCheckTasksWaitingTermination+0x6c>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
800064d0:	f0 1f 00 16 	mcall	80006528 <prvCheckTasksWaitingTermination+0x84>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
800064d4:	49 38       	lddpc	r8,80006520 <prvCheckTasksWaitingTermination+0x7c>
800064d6:	2f 88       	sub	r8,-8
800064d8:	70 18       	ld.w	r8,r8[0x4]
800064da:	70 38       	ld.w	r8,r8[0xc]
800064dc:	ef 48 ff fc 	st.w	r7[-4],r8
					vListRemove( &( pxTCB->xGenericListItem ) );
800064e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064e4:	2f c8       	sub	r8,-4
800064e6:	10 9c       	mov	r12,r8
800064e8:	f0 1f 00 11 	mcall	8000652c <prvCheckTasksWaitingTermination+0x88>
					--uxCurrentNumberOfTasks;
800064ec:	49 18       	lddpc	r8,80006530 <prvCheckTasksWaitingTermination+0x8c>
800064ee:	70 08       	ld.w	r8,r8[0x0]
800064f0:	f0 c9 00 01 	sub	r9,r8,1
800064f4:	48 f8       	lddpc	r8,80006530 <prvCheckTasksWaitingTermination+0x8c>
800064f6:	91 09       	st.w	r8[0x0],r9
					--uxTasksDeleted;
800064f8:	48 88       	lddpc	r8,80006518 <prvCheckTasksWaitingTermination+0x74>
800064fa:	70 08       	ld.w	r8,r8[0x0]
800064fc:	f0 c9 00 01 	sub	r9,r8,1
80006500:	48 68       	lddpc	r8,80006518 <prvCheckTasksWaitingTermination+0x74>
80006502:	91 09       	st.w	r8[0x0],r9
				}
				taskEXIT_CRITICAL();
80006504:	f0 1f 00 0c 	mcall	80006534 <prvCheckTasksWaitingTermination+0x90>

				prvDeleteTCB( pxTCB );
80006508:	ee fc ff fc 	ld.w	r12,r7[-4]
8000650c:	f0 1f 00 0b 	mcall	80006538 <prvCheckTasksWaitingTermination+0x94>
			}
		}
	}
	#endif
}
80006510:	2f ed       	sub	sp,-8
80006512:	e3 cd 80 80 	ldm	sp++,r7,pc
80006516:	00 00       	add	r0,r0
80006518:	00 00       	add	r0,r0
8000651a:	07 5c       	ld.sh	r12,--r3
8000651c:	80 00       	ld.sh	r0,r0[0x0]
8000651e:	5d 9c       	*unknown*
80006520:	00 00       	add	r0,r0
80006522:	07 48       	ld.w	r8,--r3
80006524:	80 00       	ld.sh	r0,r0[0x0]
80006526:	5d b8       	*unknown*
80006528:	80 00       	ld.sh	r0,r0[0x0]
8000652a:	4e cc       	lddpc	r12,800066d8 <vTaskPriorityInherit+0x3c>
8000652c:	80 00       	ld.sh	r0,r0[0x0]
8000652e:	4c b6       	lddpc	r6,80006658 <prvDeleteTCB+0x8>
80006530:	00 00       	add	r0,r0
80006532:	07 74       	ld.ub	r4,--r3
80006534:	80 00       	ld.sh	r0,r0[0x0]
80006536:	4e e8       	lddpc	r8,800066ec <vTaskPriorityInherit+0x50>
80006538:	80 00       	ld.sh	r0,r0[0x0]
8000653a:	66 50       	ld.w	r0,r3[0x14]

8000653c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
8000653c:	eb cd 40 80 	pushm	r7,lr
80006540:	1a 97       	mov	r7,sp
80006542:	20 1d       	sub	sp,4
80006544:	ef 4c ff fc 	st.w	r7[-4],r12
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80006548:	49 78       	lddpc	r8,800065a4 <prvAddCurrentTaskToDelayedList+0x68>
8000654a:	70 08       	ld.w	r8,r8[0x0]
8000654c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006550:	91 19       	st.w	r8[0x4],r9

	if( xTimeToWake < xTickCount )
80006552:	49 68       	lddpc	r8,800065a8 <prvAddCurrentTaskToDelayedList+0x6c>
80006554:	70 08       	ld.w	r8,r8[0x0]
80006556:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000655a:	10 39       	cp.w	r9,r8
8000655c:	c0 c2       	brcc	80006574 <prvAddCurrentTaskToDelayedList+0x38>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
8000655e:	49 28       	lddpc	r8,800065a4 <prvAddCurrentTaskToDelayedList+0x68>
80006560:	70 08       	ld.w	r8,r8[0x0]
80006562:	f0 c9 ff fc 	sub	r9,r8,-4
80006566:	49 28       	lddpc	r8,800065ac <prvAddCurrentTaskToDelayedList+0x70>
80006568:	70 08       	ld.w	r8,r8[0x0]
8000656a:	12 9b       	mov	r11,r9
8000656c:	10 9c       	mov	r12,r8
8000656e:	f0 1f 00 11 	mcall	800065b0 <prvAddCurrentTaskToDelayedList+0x74>
80006572:	c1 58       	rjmp	8000659c <prvAddCurrentTaskToDelayedList+0x60>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
80006574:	48 c8       	lddpc	r8,800065a4 <prvAddCurrentTaskToDelayedList+0x68>
80006576:	70 08       	ld.w	r8,r8[0x0]
80006578:	f0 c9 ff fc 	sub	r9,r8,-4
8000657c:	48 e8       	lddpc	r8,800065b4 <prvAddCurrentTaskToDelayedList+0x78>
8000657e:	70 08       	ld.w	r8,r8[0x0]
80006580:	12 9b       	mov	r11,r9
80006582:	10 9c       	mov	r12,r8
80006584:	f0 1f 00 0b 	mcall	800065b0 <prvAddCurrentTaskToDelayedList+0x74>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
80006588:	48 c8       	lddpc	r8,800065b8 <prvAddCurrentTaskToDelayedList+0x7c>
8000658a:	70 08       	ld.w	r8,r8[0x0]
8000658c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006590:	10 39       	cp.w	r9,r8
80006592:	c0 52       	brcc	8000659c <prvAddCurrentTaskToDelayedList+0x60>
		{
			xNextTaskUnblockTime = xTimeToWake;
80006594:	48 98       	lddpc	r8,800065b8 <prvAddCurrentTaskToDelayedList+0x7c>
80006596:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000659a:	91 09       	st.w	r8[0x0],r9
		}
	}
}
8000659c:	2f fd       	sub	sp,-4
8000659e:	e3 cd 80 80 	ldm	sp++,r7,pc
800065a2:	00 00       	add	r0,r0
800065a4:	00 00       	add	r0,r0
800065a6:	06 60       	and	r0,r3
800065a8:	00 00       	add	r0,r0
800065aa:	07 78       	ld.ub	r8,--r3
800065ac:	00 00       	add	r0,r0
800065ae:	07 30       	ld.ub	r0,r3++
800065b0:	80 00       	ld.sh	r0,r0[0x0]
800065b2:	4c 14       	lddpc	r4,800066b4 <vTaskPriorityInherit+0x18>
800065b4:	00 00       	add	r0,r0
800065b6:	07 2c       	ld.uh	r12,r3++
800065b8:	00 00       	add	r0,r0
800065ba:	00 24       	rsub	r4,r0

800065bc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
800065bc:	eb cd 40 80 	pushm	r7,lr
800065c0:	1a 97       	mov	r7,sp
800065c2:	20 3d       	sub	sp,12
800065c4:	18 98       	mov	r8,r12
800065c6:	ef 4b ff f4 	st.w	r7[-12],r11
800065ca:	ef 58 ff f8 	st.h	r7[-8],r8
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
800065ce:	34 8c       	mov	r12,72
800065d0:	f0 1f 00 1d 	mcall	80006644 <prvAllocateTCBAndStack+0x88>
800065d4:	18 98       	mov	r8,r12
800065d6:	ef 48 ff fc 	st.w	r7[-4],r8

	if( pxNewTCB != NULL )
800065da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065de:	58 08       	cp.w	r8,0
800065e0:	c2 c0       	breq	80006638 <prvAllocateTCBAndStack+0x7c>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
800065e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800065e6:	58 08       	cp.w	r8,0
800065e8:	c0 91       	brne	800065fa <prvAllocateTCBAndStack+0x3e>
800065ea:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800065ee:	a3 68       	lsl	r8,0x2
800065f0:	10 9c       	mov	r12,r8
800065f2:	f0 1f 00 15 	mcall	80006644 <prvAllocateTCBAndStack+0x88>
800065f6:	18 98       	mov	r8,r12
800065f8:	c0 38       	rjmp	800065fe <prvAllocateTCBAndStack+0x42>
800065fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800065fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006602:	93 c8       	st.w	r9[0x30],r8

		if( pxNewTCB->pxStack == NULL )
80006604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006608:	70 c8       	ld.w	r8,r8[0x30]
8000660a:	58 08       	cp.w	r8,0
8000660c:	c0 91       	brne	8000661e <prvAllocateTCBAndStack+0x62>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
8000660e:	ee fc ff fc 	ld.w	r12,r7[-4]
80006612:	f0 1f 00 0e 	mcall	80006648 <prvAllocateTCBAndStack+0x8c>
			pxNewTCB = NULL;
80006616:	30 08       	mov	r8,0
80006618:	ef 48 ff fc 	st.w	r7[-4],r8
8000661c:	c0 e8       	rjmp	80006638 <prvAllocateTCBAndStack+0x7c>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, tskSTACK_FILL_BYTE, usStackDepth * sizeof( portSTACK_TYPE ) );
8000661e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80006622:	f0 09 15 02 	lsl	r9,r8,0x2
80006626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000662a:	70 c8       	ld.w	r8,r8[0x30]
8000662c:	12 9a       	mov	r10,r9
8000662e:	e0 6b 00 a5 	mov	r11,165
80006632:	10 9c       	mov	r12,r8
80006634:	f0 1f 00 06 	mcall	8000664c <prvAllocateTCBAndStack+0x90>
		}
	}

	return pxNewTCB;
80006638:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000663c:	10 9c       	mov	r12,r8
8000663e:	2f dd       	sub	sp,-12
80006640:	e3 cd 80 80 	ldm	sp++,r7,pc
80006644:	80 00       	ld.sh	r0,r0[0x0]
80006646:	52 74       	stdsp	sp[0x9c],r4
80006648:	80 00       	ld.sh	r0,r0[0x0]
8000664a:	52 b0       	stdsp	sp[0xac],r0
8000664c:	80 00       	ld.sh	r0,r0[0x0]
8000664e:	70 50       	ld.w	r0,r8[0x14]

80006650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_vTaskDelete == 1 ) || ( INCLUDE_vTaskCleanUpResources == 1 ) )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
80006650:	eb cd 40 80 	pushm	r7,lr
80006654:	1a 97       	mov	r7,sp
80006656:	20 1d       	sub	sp,4
80006658:	ef 4c ff fc 	st.w	r7[-4],r12
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
8000665c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006660:	70 c8       	ld.w	r8,r8[0x30]
80006662:	10 9c       	mov	r12,r8
80006664:	f0 1f 00 05 	mcall	80006678 <prvDeleteTCB+0x28>
		vPortFree( pxTCB );
80006668:	ee fc ff fc 	ld.w	r12,r7[-4]
8000666c:	f0 1f 00 03 	mcall	80006678 <prvDeleteTCB+0x28>
	}
80006670:	2f fd       	sub	sp,-4
80006672:	e3 cd 80 80 	ldm	sp++,r7,pc
80006676:	00 00       	add	r0,r0
80006678:	80 00       	ld.sh	r0,r0[0x0]
8000667a:	52 b0       	stdsp	sp[0xac],r0

8000667c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
8000667c:	eb cd 40 80 	pushm	r7,lr
80006680:	1a 97       	mov	r7,sp
80006682:	20 1d       	sub	sp,4
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80006684:	48 58       	lddpc	r8,80006698 <xTaskGetCurrentTaskHandle+0x1c>
80006686:	70 08       	ld.w	r8,r8[0x0]
80006688:	ef 48 ff fc 	st.w	r7[-4],r8

		return xReturn;
8000668c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
80006690:	10 9c       	mov	r12,r8
80006692:	2f fd       	sub	sp,-4
80006694:	e3 cd 80 80 	ldm	sp++,r7,pc
80006698:	00 00       	add	r0,r0
8000669a:	06 60       	and	r0,r3

8000669c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
8000669c:	eb cd 40 80 	pushm	r7,lr
800066a0:	1a 97       	mov	r7,sp
800066a2:	20 2d       	sub	sp,8
800066a4:	ef 4c ff f8 	st.w	r7[-8],r12
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
800066a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800066ac:	ef 48 ff fc 	st.w	r7[-4],r8

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
800066b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066b4:	70 b9       	ld.w	r9,r8[0x2c]
800066b6:	4a a8       	lddpc	r8,8000675c <vTaskPriorityInherit+0xc0>
800066b8:	70 08       	ld.w	r8,r8[0x0]
800066ba:	70 b8       	ld.w	r8,r8[0x2c]
800066bc:	10 39       	cp.w	r9,r8
800066be:	c4 c2       	brcc	80006756 <vTaskPriorityInherit+0xba>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
800066c0:	4a 78       	lddpc	r8,8000675c <vTaskPriorityInherit+0xc0>
800066c2:	70 08       	ld.w	r8,r8[0x0]
800066c4:	70 b8       	ld.w	r8,r8[0x2c]
800066c6:	f0 09 11 08 	rsub	r9,r8,8
800066ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066ce:	91 69       	st.w	r8[0x18],r9

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) )
800066d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066d4:	70 5a       	ld.w	r10,r8[0x14]
800066d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066da:	70 b9       	ld.w	r9,r8[0x2c]
800066dc:	12 98       	mov	r8,r9
800066de:	a3 68       	lsl	r8,0x2
800066e0:	12 08       	add	r8,r9
800066e2:	a3 68       	lsl	r8,0x2
800066e4:	10 99       	mov	r9,r8
800066e6:	49 f8       	lddpc	r8,80006760 <vTaskPriorityInherit+0xc4>
800066e8:	f2 08 00 08 	add	r8,r9,r8
800066ec:	10 3a       	cp.w	r10,r8
800066ee:	c2 e1       	brne	8000674a <vTaskPriorityInherit+0xae>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
800066f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800066f4:	2f c8       	sub	r8,-4
800066f6:	10 9c       	mov	r12,r8
800066f8:	f0 1f 00 1b 	mcall	80006764 <vTaskPriorityInherit+0xc8>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
800066fc:	49 88       	lddpc	r8,8000675c <vTaskPriorityInherit+0xc0>
800066fe:	70 08       	ld.w	r8,r8[0x0]
80006700:	70 b9       	ld.w	r9,r8[0x2c]
80006702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006706:	91 b9       	st.w	r8[0x2c],r9
				prvAddTaskToReadyQueue( pxTCB );
80006708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000670c:	70 b9       	ld.w	r9,r8[0x2c]
8000670e:	49 78       	lddpc	r8,80006768 <vTaskPriorityInherit+0xcc>
80006710:	70 08       	ld.w	r8,r8[0x0]
80006712:	10 39       	cp.w	r9,r8
80006714:	e0 88 00 07 	brls	80006722 <vTaskPriorityInherit+0x86>
80006718:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000671c:	70 b9       	ld.w	r9,r8[0x2c]
8000671e:	49 38       	lddpc	r8,80006768 <vTaskPriorityInherit+0xcc>
80006720:	91 09       	st.w	r8[0x0],r9
80006722:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006726:	f0 ca ff fc 	sub	r10,r8,-4
8000672a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000672e:	70 b9       	ld.w	r9,r8[0x2c]
80006730:	12 98       	mov	r8,r9
80006732:	a3 68       	lsl	r8,0x2
80006734:	12 08       	add	r8,r9
80006736:	a3 68       	lsl	r8,0x2
80006738:	10 99       	mov	r9,r8
8000673a:	48 a8       	lddpc	r8,80006760 <vTaskPriorityInherit+0xc4>
8000673c:	f2 08 00 08 	add	r8,r9,r8
80006740:	14 9b       	mov	r11,r10
80006742:	10 9c       	mov	r12,r8
80006744:	f0 1f 00 0a 	mcall	8000676c <vTaskPriorityInherit+0xd0>
80006748:	c0 78       	rjmp	80006756 <vTaskPriorityInherit+0xba>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
8000674a:	48 58       	lddpc	r8,8000675c <vTaskPriorityInherit+0xc0>
8000674c:	70 08       	ld.w	r8,r8[0x0]
8000674e:	70 b9       	ld.w	r9,r8[0x2c]
80006750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006754:	91 b9       	st.w	r8[0x2c],r9
			}
		}
	}
80006756:	2f ed       	sub	sp,-8
80006758:	e3 cd 80 80 	ldm	sp++,r7,pc
8000675c:	00 00       	add	r0,r0
8000675e:	06 60       	and	r0,r3
80006760:	00 00       	add	r0,r0
80006762:	06 64       	and	r4,r3
80006764:	80 00       	ld.sh	r0,r0[0x0]
80006766:	4c b6       	lddpc	r6,80006890 <__avr32_udiv64+0x74>
80006768:	00 00       	add	r0,r0
8000676a:	07 80       	ld.ub	r0,r3[0x0]
8000676c:	80 00       	ld.sh	r0,r0[0x0]
8000676e:	4b a2       	lddpc	r2,80006854 <__avr32_udiv64+0x38>

80006770 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
80006770:	eb cd 40 80 	pushm	r7,lr
80006774:	1a 97       	mov	r7,sp
80006776:	20 2d       	sub	sp,8
80006778:	ef 4c ff f8 	st.w	r7[-8],r12
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
8000677c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006780:	ef 48 ff fc 	st.w	r7[-4],r8

		if( pxMutexHolder != NULL )
80006784:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006788:	58 08       	cp.w	r8,0
8000678a:	c3 d0       	breq	80006804 <vTaskPriorityDisinherit+0x94>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
8000678c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006790:	70 b9       	ld.w	r9,r8[0x2c]
80006792:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006796:	71 18       	ld.w	r8,r8[0x44]
80006798:	10 39       	cp.w	r9,r8
8000679a:	c3 50       	breq	80006804 <vTaskPriorityDisinherit+0x94>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
8000679c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067a0:	2f c8       	sub	r8,-4
800067a2:	10 9c       	mov	r12,r8
800067a4:	f0 1f 00 1a 	mcall	8000680c <vTaskPriorityDisinherit+0x9c>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
800067a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067ac:	71 19       	ld.w	r9,r8[0x44]
800067ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067b2:	91 b9       	st.w	r8[0x2c],r9
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
800067b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067b8:	70 b8       	ld.w	r8,r8[0x2c]
800067ba:	f0 09 11 08 	rsub	r9,r8,8
800067be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067c2:	91 69       	st.w	r8[0x18],r9
				prvAddTaskToReadyQueue( pxTCB );
800067c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067c8:	70 b9       	ld.w	r9,r8[0x2c]
800067ca:	49 28       	lddpc	r8,80006810 <vTaskPriorityDisinherit+0xa0>
800067cc:	70 08       	ld.w	r8,r8[0x0]
800067ce:	10 39       	cp.w	r9,r8
800067d0:	e0 88 00 07 	brls	800067de <vTaskPriorityDisinherit+0x6e>
800067d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067d8:	70 b9       	ld.w	r9,r8[0x2c]
800067da:	48 e8       	lddpc	r8,80006810 <vTaskPriorityDisinherit+0xa0>
800067dc:	91 09       	st.w	r8[0x0],r9
800067de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067e2:	f0 ca ff fc 	sub	r10,r8,-4
800067e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067ea:	70 b9       	ld.w	r9,r8[0x2c]
800067ec:	12 98       	mov	r8,r9
800067ee:	a3 68       	lsl	r8,0x2
800067f0:	12 08       	add	r8,r9
800067f2:	a3 68       	lsl	r8,0x2
800067f4:	10 99       	mov	r9,r8
800067f6:	48 88       	lddpc	r8,80006814 <vTaskPriorityDisinherit+0xa4>
800067f8:	f2 08 00 08 	add	r8,r9,r8
800067fc:	14 9b       	mov	r11,r10
800067fe:	10 9c       	mov	r12,r8
80006800:	f0 1f 00 06 	mcall	80006818 <vTaskPriorityDisinherit+0xa8>
			}
		}
	}
80006804:	2f ed       	sub	sp,-8
80006806:	e3 cd 80 80 	ldm	sp++,r7,pc
8000680a:	00 00       	add	r0,r0
8000680c:	80 00       	ld.sh	r0,r0[0x0]
8000680e:	4c b6       	lddpc	r6,80006938 <__avr32_udiv64+0x11c>
80006810:	00 00       	add	r0,r0
80006812:	07 80       	ld.ub	r0,r3[0x0]
80006814:	00 00       	add	r0,r0
80006816:	06 64       	and	r4,r3
80006818:	80 00       	ld.sh	r0,r0[0x0]
8000681a:	4b a2       	lddpc	r2,80006900 <__avr32_udiv64+0xe4>

8000681c <__avr32_udiv64>:
8000681c:	d4 31       	pushm	r0-r7,lr
8000681e:	1a 97       	mov	r7,sp
80006820:	20 3d       	sub	sp,12
80006822:	10 9c       	mov	r12,r8
80006824:	12 9e       	mov	lr,r9
80006826:	14 93       	mov	r3,r10
80006828:	58 09       	cp.w	r9,0
8000682a:	e0 81 00 bd 	brne	800069a4 <__avr32_udiv64+0x188>
8000682e:	16 38       	cp.w	r8,r11
80006830:	e0 88 00 40 	brls	800068b0 <__avr32_udiv64+0x94>
80006834:	f0 08 12 00 	clz	r8,r8
80006838:	c0 d0       	breq	80006852 <__avr32_udiv64+0x36>
8000683a:	f6 08 09 4b 	lsl	r11,r11,r8
8000683e:	f0 09 11 20 	rsub	r9,r8,32
80006842:	f8 08 09 4c 	lsl	r12,r12,r8
80006846:	f4 09 0a 49 	lsr	r9,r10,r9
8000684a:	f4 08 09 43 	lsl	r3,r10,r8
8000684e:	f3 eb 10 0b 	or	r11,r9,r11
80006852:	f8 0e 16 10 	lsr	lr,r12,0x10
80006856:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000685a:	f6 0e 0d 00 	divu	r0,r11,lr
8000685e:	e6 0b 16 10 	lsr	r11,r3,0x10
80006862:	00 99       	mov	r9,r0
80006864:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80006868:	e0 0a 02 48 	mul	r8,r0,r10
8000686c:	10 3b       	cp.w	r11,r8
8000686e:	c0 a2       	brcc	80006882 <__avr32_udiv64+0x66>
80006870:	20 19       	sub	r9,1
80006872:	18 0b       	add	r11,r12
80006874:	18 3b       	cp.w	r11,r12
80006876:	c0 63       	brcs	80006882 <__avr32_udiv64+0x66>
80006878:	10 3b       	cp.w	r11,r8
8000687a:	f7 b9 03 01 	sublo	r9,1
8000687e:	f7 dc e3 0b 	addcs	r11,r11,r12
80006882:	f6 08 01 01 	sub	r1,r11,r8
80006886:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000688a:	e2 0e 0d 00 	divu	r0,r1,lr
8000688e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80006892:	00 98       	mov	r8,r0
80006894:	e0 0a 02 4a 	mul	r10,r0,r10
80006898:	14 33       	cp.w	r3,r10
8000689a:	c0 82       	brcc	800068aa <__avr32_udiv64+0x8e>
8000689c:	20 18       	sub	r8,1
8000689e:	18 03       	add	r3,r12
800068a0:	18 33       	cp.w	r3,r12
800068a2:	c0 43       	brcs	800068aa <__avr32_udiv64+0x8e>
800068a4:	14 33       	cp.w	r3,r10
800068a6:	f7 b8 03 01 	sublo	r8,1
800068aa:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800068ae:	cd f8       	rjmp	80006a6c <__avr32_udiv64+0x250>
800068b0:	58 08       	cp.w	r8,0
800068b2:	c0 51       	brne	800068bc <__avr32_udiv64+0xa0>
800068b4:	30 19       	mov	r9,1
800068b6:	f2 08 0d 08 	divu	r8,r9,r8
800068ba:	10 9c       	mov	r12,r8
800068bc:	f8 06 12 00 	clz	r6,r12
800068c0:	c0 41       	brne	800068c8 <__avr32_udiv64+0xac>
800068c2:	18 1b       	sub	r11,r12
800068c4:	30 19       	mov	r9,1
800068c6:	c4 08       	rjmp	80006946 <__avr32_udiv64+0x12a>
800068c8:	ec 01 11 20 	rsub	r1,r6,32
800068cc:	f4 01 0a 49 	lsr	r9,r10,r1
800068d0:	f8 06 09 4c 	lsl	r12,r12,r6
800068d4:	f6 06 09 48 	lsl	r8,r11,r6
800068d8:	f6 01 0a 41 	lsr	r1,r11,r1
800068dc:	f3 e8 10 08 	or	r8,r9,r8
800068e0:	f8 03 16 10 	lsr	r3,r12,0x10
800068e4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800068e8:	e2 03 0d 00 	divu	r0,r1,r3
800068ec:	f0 0b 16 10 	lsr	r11,r8,0x10
800068f0:	00 9e       	mov	lr,r0
800068f2:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800068f6:	e0 05 02 49 	mul	r9,r0,r5
800068fa:	12 3b       	cp.w	r11,r9
800068fc:	c0 a2       	brcc	80006910 <__avr32_udiv64+0xf4>
800068fe:	20 1e       	sub	lr,1
80006900:	18 0b       	add	r11,r12
80006902:	18 3b       	cp.w	r11,r12
80006904:	c0 63       	brcs	80006910 <__avr32_udiv64+0xf4>
80006906:	12 3b       	cp.w	r11,r9
80006908:	f7 be 03 01 	sublo	lr,1
8000690c:	f7 dc e3 0b 	addcs	r11,r11,r12
80006910:	12 1b       	sub	r11,r9
80006912:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80006916:	f6 03 0d 02 	divu	r2,r11,r3
8000691a:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000691e:	04 99       	mov	r9,r2
80006920:	e4 05 02 4b 	mul	r11,r2,r5
80006924:	16 38       	cp.w	r8,r11
80006926:	c0 a2       	brcc	8000693a <__avr32_udiv64+0x11e>
80006928:	20 19       	sub	r9,1
8000692a:	18 08       	add	r8,r12
8000692c:	18 38       	cp.w	r8,r12
8000692e:	c0 63       	brcs	8000693a <__avr32_udiv64+0x11e>
80006930:	16 38       	cp.w	r8,r11
80006932:	f7 b9 03 01 	sublo	r9,1
80006936:	f1 dc e3 08 	addcs	r8,r8,r12
8000693a:	f4 06 09 43 	lsl	r3,r10,r6
8000693e:	f0 0b 01 0b 	sub	r11,r8,r11
80006942:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80006946:	f8 06 16 10 	lsr	r6,r12,0x10
8000694a:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000694e:	f6 06 0d 00 	divu	r0,r11,r6
80006952:	e6 0b 16 10 	lsr	r11,r3,0x10
80006956:	00 9a       	mov	r10,r0
80006958:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000695c:	e0 0e 02 48 	mul	r8,r0,lr
80006960:	10 3b       	cp.w	r11,r8
80006962:	c0 a2       	brcc	80006976 <__avr32_udiv64+0x15a>
80006964:	20 1a       	sub	r10,1
80006966:	18 0b       	add	r11,r12
80006968:	18 3b       	cp.w	r11,r12
8000696a:	c0 63       	brcs	80006976 <__avr32_udiv64+0x15a>
8000696c:	10 3b       	cp.w	r11,r8
8000696e:	f7 ba 03 01 	sublo	r10,1
80006972:	f7 dc e3 0b 	addcs	r11,r11,r12
80006976:	f6 08 01 01 	sub	r1,r11,r8
8000697a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000697e:	e2 06 0d 00 	divu	r0,r1,r6
80006982:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80006986:	00 98       	mov	r8,r0
80006988:	e0 0e 02 4b 	mul	r11,r0,lr
8000698c:	16 33       	cp.w	r3,r11
8000698e:	c0 82       	brcc	8000699e <__avr32_udiv64+0x182>
80006990:	20 18       	sub	r8,1
80006992:	18 03       	add	r3,r12
80006994:	18 33       	cp.w	r3,r12
80006996:	c0 43       	brcs	8000699e <__avr32_udiv64+0x182>
80006998:	16 33       	cp.w	r3,r11
8000699a:	f7 b8 03 01 	sublo	r8,1
8000699e:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800069a2:	c6 98       	rjmp	80006a74 <__avr32_udiv64+0x258>
800069a4:	16 39       	cp.w	r9,r11
800069a6:	e0 8b 00 65 	brhi	80006a70 <__avr32_udiv64+0x254>
800069aa:	f2 09 12 00 	clz	r9,r9
800069ae:	c0 b1       	brne	800069c4 <__avr32_udiv64+0x1a8>
800069b0:	10 3a       	cp.w	r10,r8
800069b2:	5f 2a       	srhs	r10
800069b4:	1c 3b       	cp.w	r11,lr
800069b6:	5f b8       	srhi	r8
800069b8:	10 4a       	or	r10,r8
800069ba:	f2 0a 18 00 	cp.b	r10,r9
800069be:	c5 90       	breq	80006a70 <__avr32_udiv64+0x254>
800069c0:	30 18       	mov	r8,1
800069c2:	c5 98       	rjmp	80006a74 <__avr32_udiv64+0x258>
800069c4:	f0 09 09 46 	lsl	r6,r8,r9
800069c8:	f2 03 11 20 	rsub	r3,r9,32
800069cc:	fc 09 09 4e 	lsl	lr,lr,r9
800069d0:	f0 03 0a 48 	lsr	r8,r8,r3
800069d4:	f6 09 09 4c 	lsl	r12,r11,r9
800069d8:	f4 03 0a 42 	lsr	r2,r10,r3
800069dc:	ef 46 ff f4 	st.w	r7[-12],r6
800069e0:	f6 03 0a 43 	lsr	r3,r11,r3
800069e4:	18 42       	or	r2,r12
800069e6:	f1 ee 10 0c 	or	r12,r8,lr
800069ea:	f8 01 16 10 	lsr	r1,r12,0x10
800069ee:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800069f2:	e6 01 0d 04 	divu	r4,r3,r1
800069f6:	e4 03 16 10 	lsr	r3,r2,0x10
800069fa:	08 9e       	mov	lr,r4
800069fc:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80006a00:	e8 06 02 48 	mul	r8,r4,r6
80006a04:	10 33       	cp.w	r3,r8
80006a06:	c0 a2       	brcc	80006a1a <__avr32_udiv64+0x1fe>
80006a08:	20 1e       	sub	lr,1
80006a0a:	18 03       	add	r3,r12
80006a0c:	18 33       	cp.w	r3,r12
80006a0e:	c0 63       	brcs	80006a1a <__avr32_udiv64+0x1fe>
80006a10:	10 33       	cp.w	r3,r8
80006a12:	f7 be 03 01 	sublo	lr,1
80006a16:	e7 dc e3 03 	addcs	r3,r3,r12
80006a1a:	10 13       	sub	r3,r8
80006a1c:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80006a20:	e6 01 0d 00 	divu	r0,r3,r1
80006a24:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80006a28:	00 98       	mov	r8,r0
80006a2a:	e0 06 02 46 	mul	r6,r0,r6
80006a2e:	0c 3b       	cp.w	r11,r6
80006a30:	c0 a2       	brcc	80006a44 <__avr32_udiv64+0x228>
80006a32:	20 18       	sub	r8,1
80006a34:	18 0b       	add	r11,r12
80006a36:	18 3b       	cp.w	r11,r12
80006a38:	c0 63       	brcs	80006a44 <__avr32_udiv64+0x228>
80006a3a:	0c 3b       	cp.w	r11,r6
80006a3c:	f7 dc e3 0b 	addcs	r11,r11,r12
80006a40:	f7 b8 03 01 	sublo	r8,1
80006a44:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80006a48:	ee f4 ff f4 	ld.w	r4,r7[-12]
80006a4c:	0c 1b       	sub	r11,r6
80006a4e:	f0 04 06 42 	mulu.d	r2,r8,r4
80006a52:	06 95       	mov	r5,r3
80006a54:	16 35       	cp.w	r5,r11
80006a56:	e0 8b 00 0a 	brhi	80006a6a <__avr32_udiv64+0x24e>
80006a5a:	5f 0b       	sreq	r11
80006a5c:	f4 09 09 49 	lsl	r9,r10,r9
80006a60:	12 32       	cp.w	r2,r9
80006a62:	5f b9       	srhi	r9
80006a64:	f7 e9 00 09 	and	r9,r11,r9
80006a68:	c0 60       	breq	80006a74 <__avr32_udiv64+0x258>
80006a6a:	20 18       	sub	r8,1
80006a6c:	30 09       	mov	r9,0
80006a6e:	c0 38       	rjmp	80006a74 <__avr32_udiv64+0x258>
80006a70:	30 09       	mov	r9,0
80006a72:	12 98       	mov	r8,r9
80006a74:	10 9a       	mov	r10,r8
80006a76:	12 93       	mov	r3,r9
80006a78:	10 92       	mov	r2,r8
80006a7a:	12 9b       	mov	r11,r9
80006a7c:	2f dd       	sub	sp,-12
80006a7e:	d8 32       	popm	r0-r7,pc

80006a80 <atexit>:
80006a80:	d4 01       	pushm	lr
80006a82:	30 09       	mov	r9,0
80006a84:	18 9b       	mov	r11,r12
80006a86:	12 9a       	mov	r10,r9
80006a88:	12 9c       	mov	r12,r9
80006a8a:	e0 a0 05 01 	rcall	8000748c <__register_exitproc>
80006a8e:	d8 02       	popm	pc

80006a90 <exit>:
80006a90:	d4 21       	pushm	r4-r7,lr
80006a92:	30 0b       	mov	r11,0
80006a94:	18 97       	mov	r7,r12
80006a96:	e0 a0 05 4d 	rcall	80007530 <__call_exitprocs>
80006a9a:	fe c8 a2 e6 	sub	r8,pc,-23834
80006a9e:	70 0c       	ld.w	r12,r8[0x0]
80006aa0:	78 a8       	ld.w	r8,r12[0x28]
80006aa2:	58 08       	cp.w	r8,0
80006aa4:	c0 20       	breq	80006aa8 <exit+0x18>
80006aa6:	5d 18       	icall	r8
80006aa8:	0e 9c       	mov	r12,r7
80006aaa:	e0 a0 04 60 	rcall	8000736a <_exit>
80006aae:	d7 03       	nop

80006ab0 <free>:
80006ab0:	d4 01       	pushm	lr
80006ab2:	e0 68 01 18 	mov	r8,280
80006ab6:	18 9b       	mov	r11,r12
80006ab8:	70 0c       	ld.w	r12,r8[0x0]
80006aba:	e0 a0 06 93 	rcall	800077e0 <_free_r>
80006abe:	d8 02       	popm	pc

80006ac0 <malloc>:
80006ac0:	d4 01       	pushm	lr
80006ac2:	e0 68 01 18 	mov	r8,280
80006ac6:	18 9b       	mov	r11,r12
80006ac8:	70 0c       	ld.w	r12,r8[0x0]
80006aca:	c0 3c       	rcall	80006ad0 <_malloc_r>
80006acc:	d8 02       	popm	pc
80006ace:	d7 03       	nop

80006ad0 <_malloc_r>:
80006ad0:	d4 31       	pushm	r0-r7,lr
80006ad2:	f6 c8 ff f5 	sub	r8,r11,-11
80006ad6:	18 95       	mov	r5,r12
80006ad8:	10 97       	mov	r7,r8
80006ada:	e0 17 ff f8 	andl	r7,0xfff8
80006ade:	59 68       	cp.w	r8,22
80006ae0:	f9 b7 08 10 	movls	r7,16
80006ae4:	16 37       	cp.w	r7,r11
80006ae6:	5f 38       	srlo	r8
80006ae8:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006aec:	c0 50       	breq	80006af6 <_malloc_r+0x26>
80006aee:	30 c8       	mov	r8,12
80006af0:	99 38       	st.w	r12[0xc],r8
80006af2:	e0 8f 01 fa 	bral	80006ee6 <_malloc_r+0x416>
80006af6:	fe b0 f1 41 	rcall	80004d78 <__malloc_lock>
80006afa:	e0 47 01 f7 	cp.w	r7,503
80006afe:	e0 8b 00 1d 	brhi	80006b38 <_malloc_r+0x68>
80006b02:	ee 03 16 03 	lsr	r3,r7,0x3
80006b06:	e0 68 01 1c 	mov	r8,284
80006b0a:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006b0e:	70 36       	ld.w	r6,r8[0xc]
80006b10:	10 36       	cp.w	r6,r8
80006b12:	c0 61       	brne	80006b1e <_malloc_r+0x4e>
80006b14:	ec c8 ff f8 	sub	r8,r6,-8
80006b18:	70 36       	ld.w	r6,r8[0xc]
80006b1a:	10 36       	cp.w	r6,r8
80006b1c:	c0 c0       	breq	80006b34 <_malloc_r+0x64>
80006b1e:	6c 18       	ld.w	r8,r6[0x4]
80006b20:	e0 18 ff fc 	andl	r8,0xfffc
80006b24:	6c 3a       	ld.w	r10,r6[0xc]
80006b26:	ec 08 00 09 	add	r9,r6,r8
80006b2a:	0a 9c       	mov	r12,r5
80006b2c:	6c 28       	ld.w	r8,r6[0x8]
80006b2e:	95 28       	st.w	r10[0x8],r8
80006b30:	91 3a       	st.w	r8[0xc],r10
80006b32:	c4 78       	rjmp	80006bc0 <_malloc_r+0xf0>
80006b34:	2f e3       	sub	r3,-2
80006b36:	c4 d8       	rjmp	80006bd0 <_malloc_r+0x100>
80006b38:	ee 03 16 09 	lsr	r3,r7,0x9
80006b3c:	c0 41       	brne	80006b44 <_malloc_r+0x74>
80006b3e:	ee 03 16 03 	lsr	r3,r7,0x3
80006b42:	c2 68       	rjmp	80006b8e <_malloc_r+0xbe>
80006b44:	58 43       	cp.w	r3,4
80006b46:	e0 8b 00 06 	brhi	80006b52 <_malloc_r+0x82>
80006b4a:	ee 03 16 06 	lsr	r3,r7,0x6
80006b4e:	2c 83       	sub	r3,-56
80006b50:	c1 f8       	rjmp	80006b8e <_malloc_r+0xbe>
80006b52:	59 43       	cp.w	r3,20
80006b54:	e0 8b 00 04 	brhi	80006b5c <_malloc_r+0x8c>
80006b58:	2a 53       	sub	r3,-91
80006b5a:	c1 a8       	rjmp	80006b8e <_malloc_r+0xbe>
80006b5c:	e0 43 00 54 	cp.w	r3,84
80006b60:	e0 8b 00 06 	brhi	80006b6c <_malloc_r+0x9c>
80006b64:	ee 03 16 0c 	lsr	r3,r7,0xc
80006b68:	29 23       	sub	r3,-110
80006b6a:	c1 28       	rjmp	80006b8e <_malloc_r+0xbe>
80006b6c:	e0 43 01 54 	cp.w	r3,340
80006b70:	e0 8b 00 06 	brhi	80006b7c <_malloc_r+0xac>
80006b74:	ee 03 16 0f 	lsr	r3,r7,0xf
80006b78:	28 93       	sub	r3,-119
80006b7a:	c0 a8       	rjmp	80006b8e <_malloc_r+0xbe>
80006b7c:	e0 43 05 54 	cp.w	r3,1364
80006b80:	e0 88 00 04 	brls	80006b88 <_malloc_r+0xb8>
80006b84:	37 e3       	mov	r3,126
80006b86:	c0 48       	rjmp	80006b8e <_malloc_r+0xbe>
80006b88:	ee 03 16 12 	lsr	r3,r7,0x12
80006b8c:	28 43       	sub	r3,-124
80006b8e:	e0 6a 01 1c 	mov	r10,284
80006b92:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006b96:	74 36       	ld.w	r6,r10[0xc]
80006b98:	c1 98       	rjmp	80006bca <_malloc_r+0xfa>
80006b9a:	6c 19       	ld.w	r9,r6[0x4]
80006b9c:	e0 19 ff fc 	andl	r9,0xfffc
80006ba0:	f2 07 01 0b 	sub	r11,r9,r7
80006ba4:	58 fb       	cp.w	r11,15
80006ba6:	e0 8a 00 04 	brle	80006bae <_malloc_r+0xde>
80006baa:	20 13       	sub	r3,1
80006bac:	c1 18       	rjmp	80006bce <_malloc_r+0xfe>
80006bae:	6c 38       	ld.w	r8,r6[0xc]
80006bb0:	58 0b       	cp.w	r11,0
80006bb2:	c0 b5       	brlt	80006bc8 <_malloc_r+0xf8>
80006bb4:	6c 2a       	ld.w	r10,r6[0x8]
80006bb6:	ec 09 00 09 	add	r9,r6,r9
80006bba:	0a 9c       	mov	r12,r5
80006bbc:	91 2a       	st.w	r8[0x8],r10
80006bbe:	95 38       	st.w	r10[0xc],r8
80006bc0:	72 18       	ld.w	r8,r9[0x4]
80006bc2:	a1 a8       	sbr	r8,0x0
80006bc4:	93 18       	st.w	r9[0x4],r8
80006bc6:	cb c8       	rjmp	80006d3e <_malloc_r+0x26e>
80006bc8:	10 96       	mov	r6,r8
80006bca:	14 36       	cp.w	r6,r10
80006bcc:	ce 71       	brne	80006b9a <_malloc_r+0xca>
80006bce:	2f f3       	sub	r3,-1
80006bd0:	e0 6a 01 1c 	mov	r10,284
80006bd4:	f4 cc ff f8 	sub	r12,r10,-8
80006bd8:	78 26       	ld.w	r6,r12[0x8]
80006bda:	18 36       	cp.w	r6,r12
80006bdc:	c6 c0       	breq	80006cb4 <_malloc_r+0x1e4>
80006bde:	6c 19       	ld.w	r9,r6[0x4]
80006be0:	e0 19 ff fc 	andl	r9,0xfffc
80006be4:	f2 07 01 08 	sub	r8,r9,r7
80006be8:	58 f8       	cp.w	r8,15
80006bea:	e0 89 00 8f 	brgt	80006d08 <_malloc_r+0x238>
80006bee:	99 3c       	st.w	r12[0xc],r12
80006bf0:	99 2c       	st.w	r12[0x8],r12
80006bf2:	58 08       	cp.w	r8,0
80006bf4:	c0 55       	brlt	80006bfe <_malloc_r+0x12e>
80006bf6:	ec 09 00 09 	add	r9,r6,r9
80006bfa:	0a 9c       	mov	r12,r5
80006bfc:	ce 2b       	rjmp	80006bc0 <_malloc_r+0xf0>
80006bfe:	e0 49 01 ff 	cp.w	r9,511
80006c02:	e0 8b 00 13 	brhi	80006c28 <_malloc_r+0x158>
80006c06:	a3 99       	lsr	r9,0x3
80006c08:	f4 09 00 38 	add	r8,r10,r9<<0x3
80006c0c:	70 2b       	ld.w	r11,r8[0x8]
80006c0e:	8d 38       	st.w	r6[0xc],r8
80006c10:	8d 2b       	st.w	r6[0x8],r11
80006c12:	97 36       	st.w	r11[0xc],r6
80006c14:	91 26       	st.w	r8[0x8],r6
80006c16:	a3 49       	asr	r9,0x2
80006c18:	74 18       	ld.w	r8,r10[0x4]
80006c1a:	30 1b       	mov	r11,1
80006c1c:	f6 09 09 49 	lsl	r9,r11,r9
80006c20:	f1 e9 10 09 	or	r9,r8,r9
80006c24:	95 19       	st.w	r10[0x4],r9
80006c26:	c4 78       	rjmp	80006cb4 <_malloc_r+0x1e4>
80006c28:	f2 0a 16 09 	lsr	r10,r9,0x9
80006c2c:	58 4a       	cp.w	r10,4
80006c2e:	e0 8b 00 07 	brhi	80006c3c <_malloc_r+0x16c>
80006c32:	f2 0a 16 06 	lsr	r10,r9,0x6
80006c36:	2c 8a       	sub	r10,-56
80006c38:	c2 08       	rjmp	80006c78 <_malloc_r+0x1a8>
80006c3a:	d7 03       	nop
80006c3c:	59 4a       	cp.w	r10,20
80006c3e:	e0 8b 00 04 	brhi	80006c46 <_malloc_r+0x176>
80006c42:	2a 5a       	sub	r10,-91
80006c44:	c1 a8       	rjmp	80006c78 <_malloc_r+0x1a8>
80006c46:	e0 4a 00 54 	cp.w	r10,84
80006c4a:	e0 8b 00 06 	brhi	80006c56 <_malloc_r+0x186>
80006c4e:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006c52:	29 2a       	sub	r10,-110
80006c54:	c1 28       	rjmp	80006c78 <_malloc_r+0x1a8>
80006c56:	e0 4a 01 54 	cp.w	r10,340
80006c5a:	e0 8b 00 06 	brhi	80006c66 <_malloc_r+0x196>
80006c5e:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006c62:	28 9a       	sub	r10,-119
80006c64:	c0 a8       	rjmp	80006c78 <_malloc_r+0x1a8>
80006c66:	e0 4a 05 54 	cp.w	r10,1364
80006c6a:	e0 88 00 04 	brls	80006c72 <_malloc_r+0x1a2>
80006c6e:	37 ea       	mov	r10,126
80006c70:	c0 48       	rjmp	80006c78 <_malloc_r+0x1a8>
80006c72:	f2 0a 16 12 	lsr	r10,r9,0x12
80006c76:	28 4a       	sub	r10,-124
80006c78:	e0 6b 01 1c 	mov	r11,284
80006c7c:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80006c80:	68 28       	ld.w	r8,r4[0x8]
80006c82:	08 38       	cp.w	r8,r4
80006c84:	c0 e1       	brne	80006ca0 <_malloc_r+0x1d0>
80006c86:	76 19       	ld.w	r9,r11[0x4]
80006c88:	a3 4a       	asr	r10,0x2
80006c8a:	30 1e       	mov	lr,1
80006c8c:	fc 0a 09 4a 	lsl	r10,lr,r10
80006c90:	f3 ea 10 0a 	or	r10,r9,r10
80006c94:	10 99       	mov	r9,r8
80006c96:	97 1a       	st.w	r11[0x4],r10
80006c98:	c0 a8       	rjmp	80006cac <_malloc_r+0x1dc>
80006c9a:	70 28       	ld.w	r8,r8[0x8]
80006c9c:	08 38       	cp.w	r8,r4
80006c9e:	c0 60       	breq	80006caa <_malloc_r+0x1da>
80006ca0:	70 1a       	ld.w	r10,r8[0x4]
80006ca2:	e0 1a ff fc 	andl	r10,0xfffc
80006ca6:	14 39       	cp.w	r9,r10
80006ca8:	cf 93       	brcs	80006c9a <_malloc_r+0x1ca>
80006caa:	70 39       	ld.w	r9,r8[0xc]
80006cac:	8d 39       	st.w	r6[0xc],r9
80006cae:	8d 28       	st.w	r6[0x8],r8
80006cb0:	91 36       	st.w	r8[0xc],r6
80006cb2:	93 26       	st.w	r9[0x8],r6
80006cb4:	e6 08 14 02 	asr	r8,r3,0x2
80006cb8:	30 1b       	mov	r11,1
80006cba:	e0 64 01 1c 	mov	r4,284
80006cbe:	f6 08 09 4b 	lsl	r11,r11,r8
80006cc2:	68 18       	ld.w	r8,r4[0x4]
80006cc4:	10 3b       	cp.w	r11,r8
80006cc6:	e0 8b 00 6b 	brhi	80006d9c <_malloc_r+0x2cc>
80006cca:	f7 e8 00 09 	and	r9,r11,r8
80006cce:	c0 b1       	brne	80006ce4 <_malloc_r+0x214>
80006cd0:	e0 13 ff fc 	andl	r3,0xfffc
80006cd4:	a1 7b       	lsl	r11,0x1
80006cd6:	2f c3       	sub	r3,-4
80006cd8:	c0 38       	rjmp	80006cde <_malloc_r+0x20e>
80006cda:	2f c3       	sub	r3,-4
80006cdc:	a1 7b       	lsl	r11,0x1
80006cde:	f7 e8 00 09 	and	r9,r11,r8
80006ce2:	cf c0       	breq	80006cda <_malloc_r+0x20a>
80006ce4:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80006ce8:	06 92       	mov	r2,r3
80006cea:	1c 91       	mov	r1,lr
80006cec:	62 36       	ld.w	r6,r1[0xc]
80006cee:	c2 e8       	rjmp	80006d4a <_malloc_r+0x27a>
80006cf0:	6c 1a       	ld.w	r10,r6[0x4]
80006cf2:	e0 1a ff fc 	andl	r10,0xfffc
80006cf6:	f4 07 01 08 	sub	r8,r10,r7
80006cfa:	58 f8       	cp.w	r8,15
80006cfc:	e0 8a 00 15 	brle	80006d26 <_malloc_r+0x256>
80006d00:	6c 3a       	ld.w	r10,r6[0xc]
80006d02:	6c 29       	ld.w	r9,r6[0x8]
80006d04:	95 29       	st.w	r10[0x8],r9
80006d06:	93 3a       	st.w	r9[0xc],r10
80006d08:	0e 99       	mov	r9,r7
80006d0a:	ec 07 00 07 	add	r7,r6,r7
80006d0e:	a1 a9       	sbr	r9,0x0
80006d10:	99 37       	st.w	r12[0xc],r7
80006d12:	99 27       	st.w	r12[0x8],r7
80006d14:	8d 19       	st.w	r6[0x4],r9
80006d16:	ee 08 09 08 	st.w	r7[r8],r8
80006d1a:	8f 2c       	st.w	r7[0x8],r12
80006d1c:	8f 3c       	st.w	r7[0xc],r12
80006d1e:	a1 a8       	sbr	r8,0x0
80006d20:	0a 9c       	mov	r12,r5
80006d22:	8f 18       	st.w	r7[0x4],r8
80006d24:	c0 d8       	rjmp	80006d3e <_malloc_r+0x26e>
80006d26:	6c 39       	ld.w	r9,r6[0xc]
80006d28:	58 08       	cp.w	r8,0
80006d2a:	c0 f5       	brlt	80006d48 <_malloc_r+0x278>
80006d2c:	ec 0a 00 0a 	add	r10,r6,r10
80006d30:	74 18       	ld.w	r8,r10[0x4]
80006d32:	a1 a8       	sbr	r8,0x0
80006d34:	0a 9c       	mov	r12,r5
80006d36:	95 18       	st.w	r10[0x4],r8
80006d38:	6c 28       	ld.w	r8,r6[0x8]
80006d3a:	93 28       	st.w	r9[0x8],r8
80006d3c:	91 39       	st.w	r8[0xc],r9
80006d3e:	fe b0 f0 2b 	rcall	80004d94 <__malloc_unlock>
80006d42:	ec cc ff f8 	sub	r12,r6,-8
80006d46:	d8 32       	popm	r0-r7,pc
80006d48:	12 96       	mov	r6,r9
80006d4a:	02 36       	cp.w	r6,r1
80006d4c:	cd 21       	brne	80006cf0 <_malloc_r+0x220>
80006d4e:	2f f2       	sub	r2,-1
80006d50:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80006d54:	c0 30       	breq	80006d5a <_malloc_r+0x28a>
80006d56:	2f 81       	sub	r1,-8
80006d58:	cc ab       	rjmp	80006cec <_malloc_r+0x21c>
80006d5a:	1c 98       	mov	r8,lr
80006d5c:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80006d60:	c0 81       	brne	80006d70 <_malloc_r+0x2a0>
80006d62:	68 19       	ld.w	r9,r4[0x4]
80006d64:	f6 08 11 ff 	rsub	r8,r11,-1
80006d68:	f3 e8 00 08 	and	r8,r9,r8
80006d6c:	89 18       	st.w	r4[0x4],r8
80006d6e:	c0 78       	rjmp	80006d7c <_malloc_r+0x2ac>
80006d70:	f0 c9 00 08 	sub	r9,r8,8
80006d74:	20 13       	sub	r3,1
80006d76:	70 08       	ld.w	r8,r8[0x0]
80006d78:	12 38       	cp.w	r8,r9
80006d7a:	cf 10       	breq	80006d5c <_malloc_r+0x28c>
80006d7c:	a1 7b       	lsl	r11,0x1
80006d7e:	68 18       	ld.w	r8,r4[0x4]
80006d80:	10 3b       	cp.w	r11,r8
80006d82:	e0 8b 00 0d 	brhi	80006d9c <_malloc_r+0x2cc>
80006d86:	58 0b       	cp.w	r11,0
80006d88:	c0 a0       	breq	80006d9c <_malloc_r+0x2cc>
80006d8a:	04 93       	mov	r3,r2
80006d8c:	c0 38       	rjmp	80006d92 <_malloc_r+0x2c2>
80006d8e:	2f c3       	sub	r3,-4
80006d90:	a1 7b       	lsl	r11,0x1
80006d92:	f7 e8 00 09 	and	r9,r11,r8
80006d96:	ca 71       	brne	80006ce4 <_malloc_r+0x214>
80006d98:	cf bb       	rjmp	80006d8e <_malloc_r+0x2be>
80006d9a:	d7 03       	nop
80006d9c:	68 23       	ld.w	r3,r4[0x8]
80006d9e:	66 12       	ld.w	r2,r3[0x4]
80006da0:	e0 12 ff fc 	andl	r2,0xfffc
80006da4:	0e 32       	cp.w	r2,r7
80006da6:	5f 39       	srlo	r9
80006da8:	e4 07 01 08 	sub	r8,r2,r7
80006dac:	58 f8       	cp.w	r8,15
80006dae:	5f aa       	srle	r10
80006db0:	f5 e9 10 09 	or	r9,r10,r9
80006db4:	e0 80 00 9a 	breq	80006ee8 <_malloc_r+0x418>
80006db8:	e0 68 07 a4 	mov	r8,1956
80006dbc:	70 01       	ld.w	r1,r8[0x0]
80006dbe:	e0 68 05 28 	mov	r8,1320
80006dc2:	2f 01       	sub	r1,-16
80006dc4:	70 08       	ld.w	r8,r8[0x0]
80006dc6:	0e 01       	add	r1,r7
80006dc8:	5b f8       	cp.w	r8,-1
80006dca:	c0 40       	breq	80006dd2 <_malloc_r+0x302>
80006dcc:	28 11       	sub	r1,-127
80006dce:	e0 11 ff 80 	andl	r1,0xff80
80006dd2:	02 9b       	mov	r11,r1
80006dd4:	0a 9c       	mov	r12,r5
80006dd6:	e0 a0 02 a5 	rcall	80007320 <_sbrk_r>
80006dda:	18 96       	mov	r6,r12
80006ddc:	5b fc       	cp.w	r12,-1
80006dde:	c7 50       	breq	80006ec8 <_malloc_r+0x3f8>
80006de0:	e6 02 00 08 	add	r8,r3,r2
80006de4:	10 3c       	cp.w	r12,r8
80006de6:	c0 32       	brcc	80006dec <_malloc_r+0x31c>
80006de8:	08 33       	cp.w	r3,r4
80006dea:	c6 f1       	brne	80006ec8 <_malloc_r+0x3f8>
80006dec:	e0 6a 07 a8 	mov	r10,1960
80006df0:	74 09       	ld.w	r9,r10[0x0]
80006df2:	e2 09 00 09 	add	r9,r1,r9
80006df6:	95 09       	st.w	r10[0x0],r9
80006df8:	10 36       	cp.w	r6,r8
80006dfa:	c0 a1       	brne	80006e0e <_malloc_r+0x33e>
80006dfc:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80006e00:	c0 71       	brne	80006e0e <_malloc_r+0x33e>
80006e02:	e2 02 00 02 	add	r2,r1,r2
80006e06:	68 28       	ld.w	r8,r4[0x8]
80006e08:	a1 a2       	sbr	r2,0x0
80006e0a:	91 12       	st.w	r8[0x4],r2
80006e0c:	c4 f8       	rjmp	80006eaa <_malloc_r+0x3da>
80006e0e:	e0 6a 05 28 	mov	r10,1320
80006e12:	74 0b       	ld.w	r11,r10[0x0]
80006e14:	5b fb       	cp.w	r11,-1
80006e16:	c0 31       	brne	80006e1c <_malloc_r+0x34c>
80006e18:	95 06       	st.w	r10[0x0],r6
80006e1a:	c0 78       	rjmp	80006e28 <_malloc_r+0x358>
80006e1c:	ec 09 00 09 	add	r9,r6,r9
80006e20:	e0 6a 07 a8 	mov	r10,1960
80006e24:	10 19       	sub	r9,r8
80006e26:	95 09       	st.w	r10[0x0],r9
80006e28:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80006e2c:	f0 09 11 08 	rsub	r9,r8,8
80006e30:	58 08       	cp.w	r8,0
80006e32:	f2 08 17 10 	movne	r8,r9
80006e36:	ed d8 e1 06 	addne	r6,r6,r8
80006e3a:	28 08       	sub	r8,-128
80006e3c:	ec 01 00 01 	add	r1,r6,r1
80006e40:	0a 9c       	mov	r12,r5
80006e42:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80006e46:	f0 01 01 01 	sub	r1,r8,r1
80006e4a:	02 9b       	mov	r11,r1
80006e4c:	e0 a0 02 6a 	rcall	80007320 <_sbrk_r>
80006e50:	e0 68 07 a8 	mov	r8,1960
80006e54:	5b fc       	cp.w	r12,-1
80006e56:	ec 0c 17 00 	moveq	r12,r6
80006e5a:	f9 b1 00 00 	moveq	r1,0
80006e5e:	70 09       	ld.w	r9,r8[0x0]
80006e60:	0c 1c       	sub	r12,r6
80006e62:	89 26       	st.w	r4[0x8],r6
80006e64:	02 0c       	add	r12,r1
80006e66:	12 01       	add	r1,r9
80006e68:	a1 ac       	sbr	r12,0x0
80006e6a:	91 01       	st.w	r8[0x0],r1
80006e6c:	8d 1c       	st.w	r6[0x4],r12
80006e6e:	08 33       	cp.w	r3,r4
80006e70:	c1 d0       	breq	80006eaa <_malloc_r+0x3da>
80006e72:	58 f2       	cp.w	r2,15
80006e74:	e0 8b 00 05 	brhi	80006e7e <_malloc_r+0x3ae>
80006e78:	30 18       	mov	r8,1
80006e7a:	8d 18       	st.w	r6[0x4],r8
80006e7c:	c2 68       	rjmp	80006ec8 <_malloc_r+0x3f8>
80006e7e:	30 59       	mov	r9,5
80006e80:	20 c2       	sub	r2,12
80006e82:	e0 12 ff f8 	andl	r2,0xfff8
80006e86:	e6 02 00 08 	add	r8,r3,r2
80006e8a:	91 29       	st.w	r8[0x8],r9
80006e8c:	91 19       	st.w	r8[0x4],r9
80006e8e:	66 18       	ld.w	r8,r3[0x4]
80006e90:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006e94:	e5 e8 10 08 	or	r8,r2,r8
80006e98:	87 18       	st.w	r3[0x4],r8
80006e9a:	58 f2       	cp.w	r2,15
80006e9c:	e0 88 00 07 	brls	80006eaa <_malloc_r+0x3da>
80006ea0:	e6 cb ff f8 	sub	r11,r3,-8
80006ea4:	0a 9c       	mov	r12,r5
80006ea6:	e0 a0 04 9d 	rcall	800077e0 <_free_r>
80006eaa:	e0 69 07 a0 	mov	r9,1952
80006eae:	72 0a       	ld.w	r10,r9[0x0]
80006eb0:	e0 68 07 a8 	mov	r8,1960
80006eb4:	70 08       	ld.w	r8,r8[0x0]
80006eb6:	14 38       	cp.w	r8,r10
80006eb8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80006ebc:	e0 69 07 9c 	mov	r9,1948
80006ec0:	72 0a       	ld.w	r10,r9[0x0]
80006ec2:	14 38       	cp.w	r8,r10
80006ec4:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80006ec8:	68 28       	ld.w	r8,r4[0x8]
80006eca:	70 18       	ld.w	r8,r8[0x4]
80006ecc:	e0 18 ff fc 	andl	r8,0xfffc
80006ed0:	0e 38       	cp.w	r8,r7
80006ed2:	5f 39       	srlo	r9
80006ed4:	0e 18       	sub	r8,r7
80006ed6:	58 f8       	cp.w	r8,15
80006ed8:	5f aa       	srle	r10
80006eda:	f5 e9 10 09 	or	r9,r10,r9
80006ede:	c0 50       	breq	80006ee8 <_malloc_r+0x418>
80006ee0:	0a 9c       	mov	r12,r5
80006ee2:	fe b0 ef 59 	rcall	80004d94 <__malloc_unlock>
80006ee6:	d8 3a       	popm	r0-r7,pc,r12=0
80006ee8:	68 26       	ld.w	r6,r4[0x8]
80006eea:	a1 a8       	sbr	r8,0x0
80006eec:	0e 99       	mov	r9,r7
80006eee:	a1 a9       	sbr	r9,0x0
80006ef0:	8d 19       	st.w	r6[0x4],r9
80006ef2:	ec 07 00 07 	add	r7,r6,r7
80006ef6:	0a 9c       	mov	r12,r5
80006ef8:	89 27       	st.w	r4[0x8],r7
80006efa:	8f 18       	st.w	r7[0x4],r8
80006efc:	fe b0 ef 4c 	rcall	80004d94 <__malloc_unlock>
80006f00:	ec cc ff f8 	sub	r12,r6,-8
80006f04:	d8 32       	popm	r0-r7,pc
80006f06:	d7 03       	nop

80006f08 <memcpy>:
80006f08:	58 8a       	cp.w	r10,8
80006f0a:	c2 f5       	brlt	80006f68 <memcpy+0x60>
80006f0c:	f9 eb 10 09 	or	r9,r12,r11
80006f10:	e2 19 00 03 	andl	r9,0x3,COH
80006f14:	e0 81 00 97 	brne	80007042 <memcpy+0x13a>
80006f18:	e0 4a 00 20 	cp.w	r10,32
80006f1c:	c3 b4       	brge	80006f92 <memcpy+0x8a>
80006f1e:	f4 08 14 02 	asr	r8,r10,0x2
80006f22:	f0 09 11 08 	rsub	r9,r8,8
80006f26:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80006f2a:	76 69       	ld.w	r9,r11[0x18]
80006f2c:	99 69       	st.w	r12[0x18],r9
80006f2e:	76 59       	ld.w	r9,r11[0x14]
80006f30:	99 59       	st.w	r12[0x14],r9
80006f32:	76 49       	ld.w	r9,r11[0x10]
80006f34:	99 49       	st.w	r12[0x10],r9
80006f36:	76 39       	ld.w	r9,r11[0xc]
80006f38:	99 39       	st.w	r12[0xc],r9
80006f3a:	76 29       	ld.w	r9,r11[0x8]
80006f3c:	99 29       	st.w	r12[0x8],r9
80006f3e:	76 19       	ld.w	r9,r11[0x4]
80006f40:	99 19       	st.w	r12[0x4],r9
80006f42:	76 09       	ld.w	r9,r11[0x0]
80006f44:	99 09       	st.w	r12[0x0],r9
80006f46:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80006f4a:	f8 08 00 28 	add	r8,r12,r8<<0x2
80006f4e:	e0 1a 00 03 	andl	r10,0x3
80006f52:	f4 0a 11 04 	rsub	r10,r10,4
80006f56:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80006f5a:	17 a9       	ld.ub	r9,r11[0x2]
80006f5c:	b0 a9       	st.b	r8[0x2],r9
80006f5e:	17 99       	ld.ub	r9,r11[0x1]
80006f60:	b0 99       	st.b	r8[0x1],r9
80006f62:	17 89       	ld.ub	r9,r11[0x0]
80006f64:	b0 89       	st.b	r8[0x0],r9
80006f66:	5e fc       	retal	r12
80006f68:	f4 0a 11 09 	rsub	r10,r10,9
80006f6c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80006f70:	17 f9       	ld.ub	r9,r11[0x7]
80006f72:	b8 f9       	st.b	r12[0x7],r9
80006f74:	17 e9       	ld.ub	r9,r11[0x6]
80006f76:	b8 e9       	st.b	r12[0x6],r9
80006f78:	17 d9       	ld.ub	r9,r11[0x5]
80006f7a:	b8 d9       	st.b	r12[0x5],r9
80006f7c:	17 c9       	ld.ub	r9,r11[0x4]
80006f7e:	b8 c9       	st.b	r12[0x4],r9
80006f80:	17 b9       	ld.ub	r9,r11[0x3]
80006f82:	b8 b9       	st.b	r12[0x3],r9
80006f84:	17 a9       	ld.ub	r9,r11[0x2]
80006f86:	b8 a9       	st.b	r12[0x2],r9
80006f88:	17 99       	ld.ub	r9,r11[0x1]
80006f8a:	b8 99       	st.b	r12[0x1],r9
80006f8c:	17 89       	ld.ub	r9,r11[0x0]
80006f8e:	b8 89       	st.b	r12[0x0],r9
80006f90:	5e fc       	retal	r12
80006f92:	eb cd 40 c0 	pushm	r6-r7,lr
80006f96:	18 99       	mov	r9,r12
80006f98:	22 0a       	sub	r10,32
80006f9a:	b7 07       	ld.d	r6,r11++
80006f9c:	b3 26       	st.d	r9++,r6
80006f9e:	b7 07       	ld.d	r6,r11++
80006fa0:	b3 26       	st.d	r9++,r6
80006fa2:	b7 07       	ld.d	r6,r11++
80006fa4:	b3 26       	st.d	r9++,r6
80006fa6:	b7 07       	ld.d	r6,r11++
80006fa8:	b3 26       	st.d	r9++,r6
80006faa:	22 0a       	sub	r10,32
80006fac:	cf 74       	brge	80006f9a <memcpy+0x92>
80006fae:	2f 0a       	sub	r10,-16
80006fb0:	c0 65       	brlt	80006fbc <memcpy+0xb4>
80006fb2:	b7 07       	ld.d	r6,r11++
80006fb4:	b3 26       	st.d	r9++,r6
80006fb6:	b7 07       	ld.d	r6,r11++
80006fb8:	b3 26       	st.d	r9++,r6
80006fba:	21 0a       	sub	r10,16
80006fbc:	5c 3a       	neg	r10
80006fbe:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80006fc2:	d7 03       	nop
80006fc4:	d7 03       	nop
80006fc6:	f7 36 00 0e 	ld.ub	r6,r11[14]
80006fca:	f3 66 00 0e 	st.b	r9[14],r6
80006fce:	f7 36 00 0d 	ld.ub	r6,r11[13]
80006fd2:	f3 66 00 0d 	st.b	r9[13],r6
80006fd6:	f7 36 00 0c 	ld.ub	r6,r11[12]
80006fda:	f3 66 00 0c 	st.b	r9[12],r6
80006fde:	f7 36 00 0b 	ld.ub	r6,r11[11]
80006fe2:	f3 66 00 0b 	st.b	r9[11],r6
80006fe6:	f7 36 00 0a 	ld.ub	r6,r11[10]
80006fea:	f3 66 00 0a 	st.b	r9[10],r6
80006fee:	f7 36 00 09 	ld.ub	r6,r11[9]
80006ff2:	f3 66 00 09 	st.b	r9[9],r6
80006ff6:	f7 36 00 08 	ld.ub	r6,r11[8]
80006ffa:	f3 66 00 08 	st.b	r9[8],r6
80006ffe:	f7 36 00 07 	ld.ub	r6,r11[7]
80007002:	f3 66 00 07 	st.b	r9[7],r6
80007006:	f7 36 00 06 	ld.ub	r6,r11[6]
8000700a:	f3 66 00 06 	st.b	r9[6],r6
8000700e:	f7 36 00 05 	ld.ub	r6,r11[5]
80007012:	f3 66 00 05 	st.b	r9[5],r6
80007016:	f7 36 00 04 	ld.ub	r6,r11[4]
8000701a:	f3 66 00 04 	st.b	r9[4],r6
8000701e:	f7 36 00 03 	ld.ub	r6,r11[3]
80007022:	f3 66 00 03 	st.b	r9[3],r6
80007026:	f7 36 00 02 	ld.ub	r6,r11[2]
8000702a:	f3 66 00 02 	st.b	r9[2],r6
8000702e:	f7 36 00 01 	ld.ub	r6,r11[1]
80007032:	f3 66 00 01 	st.b	r9[1],r6
80007036:	f7 36 00 00 	ld.ub	r6,r11[0]
8000703a:	f3 66 00 00 	st.b	r9[0],r6
8000703e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007042:	20 1a       	sub	r10,1
80007044:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80007048:	f8 0a 0b 09 	st.b	r12[r10],r9
8000704c:	cf b1       	brne	80007042 <memcpy+0x13a>
8000704e:	5e fc       	retal	r12

80007050 <memset>:
80007050:	18 98       	mov	r8,r12
80007052:	c0 38       	rjmp	80007058 <memset+0x8>
80007054:	10 cb       	st.b	r8++,r11
80007056:	20 1a       	sub	r10,1
80007058:	58 0a       	cp.w	r10,0
8000705a:	cf d1       	brne	80007054 <memset+0x4>
8000705c:	5e fc       	retal	r12
8000705e:	d7 03       	nop

80007060 <_realloc_r>:
80007060:	d4 31       	pushm	r0-r7,lr
80007062:	20 1d       	sub	sp,4
80007064:	16 94       	mov	r4,r11
80007066:	18 92       	mov	r2,r12
80007068:	14 9b       	mov	r11,r10
8000706a:	58 04       	cp.w	r4,0
8000706c:	c0 51       	brne	80007076 <_realloc_r+0x16>
8000706e:	fe b0 fd 31 	rcall	80006ad0 <_malloc_r>
80007072:	18 95       	mov	r5,r12
80007074:	c5 39       	rjmp	8000731a <_realloc_r+0x2ba>
80007076:	50 0a       	stdsp	sp[0x0],r10
80007078:	fe b0 ee 80 	rcall	80004d78 <__malloc_lock>
8000707c:	40 0b       	lddsp	r11,sp[0x0]
8000707e:	f6 c8 ff f5 	sub	r8,r11,-11
80007082:	e8 c1 00 08 	sub	r1,r4,8
80007086:	10 96       	mov	r6,r8
80007088:	62 1c       	ld.w	r12,r1[0x4]
8000708a:	e0 16 ff f8 	andl	r6,0xfff8
8000708e:	59 68       	cp.w	r8,22
80007090:	f9 b6 08 10 	movls	r6,16
80007094:	16 36       	cp.w	r6,r11
80007096:	5f 38       	srlo	r8
80007098:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000709c:	c0 50       	breq	800070a6 <_realloc_r+0x46>
8000709e:	30 c8       	mov	r8,12
800070a0:	30 05       	mov	r5,0
800070a2:	85 38       	st.w	r2[0xc],r8
800070a4:	c3 b9       	rjmp	8000731a <_realloc_r+0x2ba>
800070a6:	18 90       	mov	r0,r12
800070a8:	e0 10 ff fc 	andl	r0,0xfffc
800070ac:	0c 30       	cp.w	r0,r6
800070ae:	e0 84 01 0b 	brge	800072c4 <_realloc_r+0x264>
800070b2:	e0 68 01 1c 	mov	r8,284
800070b6:	e2 00 00 09 	add	r9,r1,r0
800070ba:	70 25       	ld.w	r5,r8[0x8]
800070bc:	0a 39       	cp.w	r9,r5
800070be:	c0 90       	breq	800070d0 <_realloc_r+0x70>
800070c0:	72 1a       	ld.w	r10,r9[0x4]
800070c2:	a1 ca       	cbr	r10,0x0
800070c4:	f2 0a 00 0a 	add	r10,r9,r10
800070c8:	74 1a       	ld.w	r10,r10[0x4]
800070ca:	ed ba 00 00 	bld	r10,0x0
800070ce:	c2 20       	breq	80007112 <_realloc_r+0xb2>
800070d0:	72 1a       	ld.w	r10,r9[0x4]
800070d2:	e0 1a ff fc 	andl	r10,0xfffc
800070d6:	f4 00 00 03 	add	r3,r10,r0
800070da:	0a 39       	cp.w	r9,r5
800070dc:	c1 31       	brne	80007102 <_realloc_r+0xa2>
800070de:	ec c7 ff f0 	sub	r7,r6,-16
800070e2:	0e 33       	cp.w	r3,r7
800070e4:	c1 95       	brlt	80007116 <_realloc_r+0xb6>
800070e6:	e2 06 00 09 	add	r9,r1,r6
800070ea:	0c 13       	sub	r3,r6
800070ec:	a1 a3       	sbr	r3,0x0
800070ee:	93 13       	st.w	r9[0x4],r3
800070f0:	91 29       	st.w	r8[0x8],r9
800070f2:	04 9c       	mov	r12,r2
800070f4:	62 18       	ld.w	r8,r1[0x4]
800070f6:	08 95       	mov	r5,r4
800070f8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800070fc:	10 46       	or	r6,r8
800070fe:	83 16       	st.w	r1[0x4],r6
80007100:	c0 b9       	rjmp	80007316 <_realloc_r+0x2b6>
80007102:	0c 33       	cp.w	r3,r6
80007104:	c0 95       	brlt	80007116 <_realloc_r+0xb6>
80007106:	72 28       	ld.w	r8,r9[0x8]
80007108:	02 97       	mov	r7,r1
8000710a:	72 39       	ld.w	r9,r9[0xc]
8000710c:	93 28       	st.w	r9[0x8],r8
8000710e:	91 39       	st.w	r8[0xc],r9
80007110:	cd c8       	rjmp	800072c8 <_realloc_r+0x268>
80007112:	30 0a       	mov	r10,0
80007114:	14 99       	mov	r9,r10
80007116:	ed bc 00 00 	bld	r12,0x0
8000711a:	e0 80 00 95 	breq	80007244 <_realloc_r+0x1e4>
8000711e:	62 07       	ld.w	r7,r1[0x0]
80007120:	e2 07 01 07 	sub	r7,r1,r7
80007124:	6e 1c       	ld.w	r12,r7[0x4]
80007126:	e0 1c ff fc 	andl	r12,0xfffc
8000712a:	58 09       	cp.w	r9,0
8000712c:	c5 60       	breq	800071d8 <_realloc_r+0x178>
8000712e:	f8 00 00 03 	add	r3,r12,r0
80007132:	0a 39       	cp.w	r9,r5
80007134:	c4 81       	brne	800071c4 <_realloc_r+0x164>
80007136:	14 03       	add	r3,r10
80007138:	ec c9 ff f0 	sub	r9,r6,-16
8000713c:	12 33       	cp.w	r3,r9
8000713e:	c4 d5       	brlt	800071d8 <_realloc_r+0x178>
80007140:	6e 3a       	ld.w	r10,r7[0xc]
80007142:	6e 29       	ld.w	r9,r7[0x8]
80007144:	95 29       	st.w	r10[0x8],r9
80007146:	93 3a       	st.w	r9[0xc],r10
80007148:	ee c5 ff f8 	sub	r5,r7,-8
8000714c:	e0 ca 00 04 	sub	r10,r0,4
80007150:	e0 4a 00 24 	cp.w	r10,36
80007154:	e0 8b 00 25 	brhi	8000719e <_realloc_r+0x13e>
80007158:	0a 99       	mov	r9,r5
8000715a:	59 3a       	cp.w	r10,19
8000715c:	e0 88 00 1a 	brls	80007190 <_realloc_r+0x130>
80007160:	09 09       	ld.w	r9,r4++
80007162:	8b 09       	st.w	r5[0x0],r9
80007164:	09 09       	ld.w	r9,r4++
80007166:	8f 39       	st.w	r7[0xc],r9
80007168:	ee c9 ff f0 	sub	r9,r7,-16
8000716c:	59 ba       	cp.w	r10,27
8000716e:	e0 88 00 11 	brls	80007190 <_realloc_r+0x130>
80007172:	09 0b       	ld.w	r11,r4++
80007174:	93 0b       	st.w	r9[0x0],r11
80007176:	09 09       	ld.w	r9,r4++
80007178:	8f 59       	st.w	r7[0x14],r9
8000717a:	ee c9 ff e8 	sub	r9,r7,-24
8000717e:	e0 4a 00 24 	cp.w	r10,36
80007182:	c0 71       	brne	80007190 <_realloc_r+0x130>
80007184:	09 0a       	ld.w	r10,r4++
80007186:	93 0a       	st.w	r9[0x0],r10
80007188:	ee c9 ff e0 	sub	r9,r7,-32
8000718c:	09 0a       	ld.w	r10,r4++
8000718e:	8f 7a       	st.w	r7[0x1c],r10
80007190:	09 0a       	ld.w	r10,r4++
80007192:	12 aa       	st.w	r9++,r10
80007194:	68 0a       	ld.w	r10,r4[0x0]
80007196:	93 0a       	st.w	r9[0x0],r10
80007198:	68 1a       	ld.w	r10,r4[0x4]
8000719a:	93 1a       	st.w	r9[0x4],r10
8000719c:	c0 78       	rjmp	800071aa <_realloc_r+0x14a>
8000719e:	50 08       	stdsp	sp[0x0],r8
800071a0:	08 9b       	mov	r11,r4
800071a2:	0a 9c       	mov	r12,r5
800071a4:	e0 a0 04 08 	rcall	800079b4 <memmove>
800071a8:	40 08       	lddsp	r8,sp[0x0]
800071aa:	ee 06 00 09 	add	r9,r7,r6
800071ae:	0c 13       	sub	r3,r6
800071b0:	a1 a3       	sbr	r3,0x0
800071b2:	93 13       	st.w	r9[0x4],r3
800071b4:	91 29       	st.w	r8[0x8],r9
800071b6:	04 9c       	mov	r12,r2
800071b8:	6e 18       	ld.w	r8,r7[0x4]
800071ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800071be:	10 46       	or	r6,r8
800071c0:	8f 16       	st.w	r7[0x4],r6
800071c2:	ca a8       	rjmp	80007316 <_realloc_r+0x2b6>
800071c4:	14 03       	add	r3,r10
800071c6:	0c 33       	cp.w	r3,r6
800071c8:	c0 85       	brlt	800071d8 <_realloc_r+0x178>
800071ca:	72 28       	ld.w	r8,r9[0x8]
800071cc:	72 39       	ld.w	r9,r9[0xc]
800071ce:	93 28       	st.w	r9[0x8],r8
800071d0:	91 39       	st.w	r8[0xc],r9
800071d2:	6e 28       	ld.w	r8,r7[0x8]
800071d4:	6e 39       	ld.w	r9,r7[0xc]
800071d6:	c0 78       	rjmp	800071e4 <_realloc_r+0x184>
800071d8:	f8 00 00 03 	add	r3,r12,r0
800071dc:	0c 33       	cp.w	r3,r6
800071de:	c3 35       	brlt	80007244 <_realloc_r+0x1e4>
800071e0:	6e 39       	ld.w	r9,r7[0xc]
800071e2:	6e 28       	ld.w	r8,r7[0x8]
800071e4:	93 28       	st.w	r9[0x8],r8
800071e6:	91 39       	st.w	r8[0xc],r9
800071e8:	e0 ca 00 04 	sub	r10,r0,4
800071ec:	ee cc ff f8 	sub	r12,r7,-8
800071f0:	e0 4a 00 24 	cp.w	r10,36
800071f4:	e0 8b 00 24 	brhi	8000723c <_realloc_r+0x1dc>
800071f8:	59 3a       	cp.w	r10,19
800071fa:	e0 88 00 1a 	brls	8000722e <_realloc_r+0x1ce>
800071fe:	09 08       	ld.w	r8,r4++
80007200:	99 08       	st.w	r12[0x0],r8
80007202:	09 08       	ld.w	r8,r4++
80007204:	8f 38       	st.w	r7[0xc],r8
80007206:	ee cc ff f0 	sub	r12,r7,-16
8000720a:	59 ba       	cp.w	r10,27
8000720c:	e0 88 00 11 	brls	8000722e <_realloc_r+0x1ce>
80007210:	09 08       	ld.w	r8,r4++
80007212:	99 08       	st.w	r12[0x0],r8
80007214:	09 08       	ld.w	r8,r4++
80007216:	8f 58       	st.w	r7[0x14],r8
80007218:	ee cc ff e8 	sub	r12,r7,-24
8000721c:	e0 4a 00 24 	cp.w	r10,36
80007220:	c0 71       	brne	8000722e <_realloc_r+0x1ce>
80007222:	09 08       	ld.w	r8,r4++
80007224:	99 08       	st.w	r12[0x0],r8
80007226:	ee cc ff e0 	sub	r12,r7,-32
8000722a:	09 08       	ld.w	r8,r4++
8000722c:	8f 78       	st.w	r7[0x1c],r8
8000722e:	09 08       	ld.w	r8,r4++
80007230:	18 a8       	st.w	r12++,r8
80007232:	68 08       	ld.w	r8,r4[0x0]
80007234:	99 08       	st.w	r12[0x0],r8
80007236:	68 18       	ld.w	r8,r4[0x4]
80007238:	99 18       	st.w	r12[0x4],r8
8000723a:	c4 78       	rjmp	800072c8 <_realloc_r+0x268>
8000723c:	08 9b       	mov	r11,r4
8000723e:	e0 a0 03 bb 	rcall	800079b4 <memmove>
80007242:	c4 38       	rjmp	800072c8 <_realloc_r+0x268>
80007244:	04 9c       	mov	r12,r2
80007246:	fe b0 fc 45 	rcall	80006ad0 <_malloc_r>
8000724a:	18 95       	mov	r5,r12
8000724c:	c3 a0       	breq	800072c0 <_realloc_r+0x260>
8000724e:	62 18       	ld.w	r8,r1[0x4]
80007250:	f8 c9 00 08 	sub	r9,r12,8
80007254:	a1 c8       	cbr	r8,0x0
80007256:	e2 08 00 08 	add	r8,r1,r8
8000725a:	10 39       	cp.w	r9,r8
8000725c:	c0 71       	brne	8000726a <_realloc_r+0x20a>
8000725e:	72 13       	ld.w	r3,r9[0x4]
80007260:	02 97       	mov	r7,r1
80007262:	e0 13 ff fc 	andl	r3,0xfffc
80007266:	00 03       	add	r3,r0
80007268:	c3 08       	rjmp	800072c8 <_realloc_r+0x268>
8000726a:	e0 ca 00 04 	sub	r10,r0,4
8000726e:	e0 4a 00 24 	cp.w	r10,36
80007272:	e0 8b 00 20 	brhi	800072b2 <_realloc_r+0x252>
80007276:	08 99       	mov	r9,r4
80007278:	18 98       	mov	r8,r12
8000727a:	59 3a       	cp.w	r10,19
8000727c:	e0 88 00 14 	brls	800072a4 <_realloc_r+0x244>
80007280:	13 0b       	ld.w	r11,r9++
80007282:	10 ab       	st.w	r8++,r11
80007284:	13 0b       	ld.w	r11,r9++
80007286:	10 ab       	st.w	r8++,r11
80007288:	59 ba       	cp.w	r10,27
8000728a:	e0 88 00 0d 	brls	800072a4 <_realloc_r+0x244>
8000728e:	13 0b       	ld.w	r11,r9++
80007290:	10 ab       	st.w	r8++,r11
80007292:	13 0b       	ld.w	r11,r9++
80007294:	10 ab       	st.w	r8++,r11
80007296:	e0 4a 00 24 	cp.w	r10,36
8000729a:	c0 51       	brne	800072a4 <_realloc_r+0x244>
8000729c:	13 0a       	ld.w	r10,r9++
8000729e:	10 aa       	st.w	r8++,r10
800072a0:	13 0a       	ld.w	r10,r9++
800072a2:	10 aa       	st.w	r8++,r10
800072a4:	13 0a       	ld.w	r10,r9++
800072a6:	10 aa       	st.w	r8++,r10
800072a8:	72 0a       	ld.w	r10,r9[0x0]
800072aa:	91 0a       	st.w	r8[0x0],r10
800072ac:	72 19       	ld.w	r9,r9[0x4]
800072ae:	91 19       	st.w	r8[0x4],r9
800072b0:	c0 48       	rjmp	800072b8 <_realloc_r+0x258>
800072b2:	08 9b       	mov	r11,r4
800072b4:	e0 a0 03 80 	rcall	800079b4 <memmove>
800072b8:	08 9b       	mov	r11,r4
800072ba:	04 9c       	mov	r12,r2
800072bc:	e0 a0 02 92 	rcall	800077e0 <_free_r>
800072c0:	04 9c       	mov	r12,r2
800072c2:	c2 a8       	rjmp	80007316 <_realloc_r+0x2b6>
800072c4:	00 93       	mov	r3,r0
800072c6:	02 97       	mov	r7,r1
800072c8:	e6 06 01 09 	sub	r9,r3,r6
800072cc:	6e 18       	ld.w	r8,r7[0x4]
800072ce:	58 f9       	cp.w	r9,15
800072d0:	e0 88 00 16 	brls	800072fc <_realloc_r+0x29c>
800072d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800072d8:	ed e8 10 08 	or	r8,r6,r8
800072dc:	8f 18       	st.w	r7[0x4],r8
800072de:	12 98       	mov	r8,r9
800072e0:	a1 a8       	sbr	r8,0x0
800072e2:	ee 06 00 0b 	add	r11,r7,r6
800072e6:	f6 09 00 09 	add	r9,r11,r9
800072ea:	97 18       	st.w	r11[0x4],r8
800072ec:	72 18       	ld.w	r8,r9[0x4]
800072ee:	a1 a8       	sbr	r8,0x0
800072f0:	2f 8b       	sub	r11,-8
800072f2:	93 18       	st.w	r9[0x4],r8
800072f4:	04 9c       	mov	r12,r2
800072f6:	e0 a0 02 75 	rcall	800077e0 <_free_r>
800072fa:	c0 b8       	rjmp	80007310 <_realloc_r+0x2b0>
800072fc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007300:	e7 e8 10 08 	or	r8,r3,r8
80007304:	8f 18       	st.w	r7[0x4],r8
80007306:	ee 03 00 03 	add	r3,r7,r3
8000730a:	66 18       	ld.w	r8,r3[0x4]
8000730c:	a1 a8       	sbr	r8,0x0
8000730e:	87 18       	st.w	r3[0x4],r8
80007310:	04 9c       	mov	r12,r2
80007312:	ee c5 ff f8 	sub	r5,r7,-8
80007316:	fe b0 ed 3f 	rcall	80004d94 <__malloc_unlock>
8000731a:	0a 9c       	mov	r12,r5
8000731c:	2f fd       	sub	sp,-4
8000731e:	d8 32       	popm	r0-r7,pc

80007320 <_sbrk_r>:
80007320:	d4 21       	pushm	r4-r7,lr
80007322:	30 08       	mov	r8,0
80007324:	18 97       	mov	r7,r12
80007326:	e0 66 07 fc 	mov	r6,2044
8000732a:	16 9c       	mov	r12,r11
8000732c:	8d 08       	st.w	r6[0x0],r8
8000732e:	c7 1c       	rcall	80007410 <_sbrk>
80007330:	5b fc       	cp.w	r12,-1
80007332:	c0 51       	brne	8000733c <_sbrk_r+0x1c>
80007334:	6c 08       	ld.w	r8,r6[0x0]
80007336:	58 08       	cp.w	r8,0
80007338:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000733c:	d8 22       	popm	r4-r7,pc
8000733e:	d7 03       	nop

80007340 <strncpy>:
80007340:	30 08       	mov	r8,0
80007342:	10 3a       	cp.w	r10,r8
80007344:	5e 0c       	reteq	r12
80007346:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000734a:	f8 08 0b 09 	st.b	r12[r8],r9
8000734e:	2f f8       	sub	r8,-1
80007350:	58 09       	cp.w	r9,0
80007352:	cf 81       	brne	80007342 <strncpy+0x2>
80007354:	10 3a       	cp.w	r10,r8
80007356:	5e 0c       	reteq	r12
80007358:	f8 08 0b 09 	st.b	r12[r8],r9
8000735c:	2f f8       	sub	r8,-1
8000735e:	cf bb       	rjmp	80007354 <strncpy+0x14>

80007360 <_init_argv>:
80007360:	30 e8       	mov	r8,14
80007362:	d6 73       	breakpoint
80007364:	3f fc       	mov	r12,-1
80007366:	35 8b       	mov	r11,88
80007368:	5e fc       	retal	r12

8000736a <_exit>:
8000736a:	30 d8       	mov	r8,13
8000736c:	d6 73       	breakpoint
8000736e:	3f fc       	mov	r12,-1
80007370:	35 8b       	mov	r11,88
80007372:	c0 08       	rjmp	80007372 <_exit+0x8>

80007374 <_close>:
80007374:	30 28       	mov	r8,2
80007376:	d6 73       	breakpoint
80007378:	3f fc       	mov	r12,-1
8000737a:	35 8b       	mov	r11,88
8000737c:	58 0c       	cp.w	r12,0
8000737e:	5e 4c       	retge	r12
80007380:	e0 6a 07 fc 	mov	r10,2044
80007384:	95 0b       	st.w	r10[0x0],r11
80007386:	5e fc       	retal	r12

80007388 <_lseek>:
80007388:	30 58       	mov	r8,5
8000738a:	d6 73       	breakpoint
8000738c:	3f fc       	mov	r12,-1
8000738e:	35 8b       	mov	r11,88
80007390:	58 0c       	cp.w	r12,0
80007392:	5e 4c       	retge	r12
80007394:	e0 6a 07 fc 	mov	r10,2044
80007398:	95 0b       	st.w	r10[0x0],r11
8000739a:	5e fc       	retal	r12

8000739c <isatty>:
8000739c:	30 b8       	mov	r8,11
8000739e:	d6 73       	breakpoint
800073a0:	3f fc       	mov	r12,-1
800073a2:	35 8b       	mov	r11,88
800073a4:	58 0c       	cp.w	r12,0
800073a6:	5e 4c       	retge	r12
800073a8:	e0 6a 07 fc 	mov	r10,2044
800073ac:	95 0b       	st.w	r10[0x0],r11
800073ae:	5e fc       	retal	r12

800073b0 <_fstat_host>:
800073b0:	30 98       	mov	r8,9
800073b2:	d6 73       	breakpoint
800073b4:	3f fc       	mov	r12,-1
800073b6:	35 8b       	mov	r11,88
800073b8:	58 0c       	cp.w	r12,0
800073ba:	5e 4c       	retge	r12
800073bc:	e0 6a 07 fc 	mov	r10,2044
800073c0:	95 0b       	st.w	r10[0x0],r11
800073c2:	5e fc       	retal	r12

800073c4 <_fstat>:
800073c4:	d4 21       	pushm	r4-r7,lr
800073c6:	21 0d       	sub	sp,64
800073c8:	16 97       	mov	r7,r11
800073ca:	1a 9b       	mov	r11,sp
800073cc:	cf 2f       	rcall	800073b0 <_fstat_host>
800073ce:	c0 34       	brge	800073d4 <_fstat+0x10>
800073d0:	3f fc       	mov	r12,-1
800073d2:	c1 c8       	rjmp	8000740a <_fstat+0x46>
800073d4:	40 08       	lddsp	r8,sp[0x0]
800073d6:	ae 08       	st.h	r7[0x0],r8
800073d8:	40 18       	lddsp	r8,sp[0x4]
800073da:	ae 18       	st.h	r7[0x2],r8
800073dc:	40 28       	lddsp	r8,sp[0x8]
800073de:	8f 18       	st.w	r7[0x4],r8
800073e0:	40 38       	lddsp	r8,sp[0xc]
800073e2:	ae 48       	st.h	r7[0x8],r8
800073e4:	40 48       	lddsp	r8,sp[0x10]
800073e6:	ae 58       	st.h	r7[0xa],r8
800073e8:	40 58       	lddsp	r8,sp[0x14]
800073ea:	ae 68       	st.h	r7[0xc],r8
800073ec:	40 68       	lddsp	r8,sp[0x18]
800073ee:	ae 78       	st.h	r7[0xe],r8
800073f0:	40 88       	lddsp	r8,sp[0x20]
800073f2:	8f 48       	st.w	r7[0x10],r8
800073f4:	40 a8       	lddsp	r8,sp[0x28]
800073f6:	8f b8       	st.w	r7[0x2c],r8
800073f8:	40 c8       	lddsp	r8,sp[0x30]
800073fa:	8f c8       	st.w	r7[0x30],r8
800073fc:	40 d8       	lddsp	r8,sp[0x34]
800073fe:	8f 58       	st.w	r7[0x14],r8
80007400:	40 e8       	lddsp	r8,sp[0x38]
80007402:	30 0c       	mov	r12,0
80007404:	8f 78       	st.w	r7[0x1c],r8
80007406:	40 f8       	lddsp	r8,sp[0x3c]
80007408:	8f 98       	st.w	r7[0x24],r8
8000740a:	2f 0d       	sub	sp,-64
8000740c:	d8 22       	popm	r4-r7,pc
8000740e:	d7 03       	nop

80007410 <_sbrk>:
80007410:	d4 01       	pushm	lr
80007412:	e0 68 07 d0 	mov	r8,2000
80007416:	70 09       	ld.w	r9,r8[0x0]
80007418:	58 09       	cp.w	r9,0
8000741a:	c0 41       	brne	80007422 <_sbrk+0x12>
8000741c:	e0 69 08 00 	mov	r9,2048
80007420:	91 09       	st.w	r8[0x0],r9
80007422:	e0 69 07 d0 	mov	r9,2000
80007426:	e0 6a f0 00 	mov	r10,61440
8000742a:	72 08       	ld.w	r8,r9[0x0]
8000742c:	f0 0c 00 0c 	add	r12,r8,r12
80007430:	14 3c       	cp.w	r12,r10
80007432:	e0 8b 00 04 	brhi	8000743a <_sbrk+0x2a>
80007436:	93 0c       	st.w	r9[0x0],r12
80007438:	c0 58       	rjmp	80007442 <_sbrk+0x32>
8000743a:	ce 1c       	rcall	800075fc <__errno>
8000743c:	30 c8       	mov	r8,12
8000743e:	99 08       	st.w	r12[0x0],r8
80007440:	3f f8       	mov	r8,-1
80007442:	10 9c       	mov	r12,r8
80007444:	d8 02       	popm	pc
80007446:	d7 03       	nop

80007448 <_vsprintf_r>:
80007448:	d4 01       	pushm	lr
8000744a:	21 7d       	sub	sp,92
8000744c:	e0 68 ff ff 	mov	r8,65535
80007450:	ea 18 7f ff 	orh	r8,0x7fff
80007454:	50 58       	stdsp	sp[0x14],r8
80007456:	50 28       	stdsp	sp[0x8],r8
80007458:	e0 68 02 08 	mov	r8,520
8000745c:	ba 68       	st.h	sp[0xc],r8
8000745e:	3f f8       	mov	r8,-1
80007460:	50 4b       	stdsp	sp[0x10],r11
80007462:	50 0b       	stdsp	sp[0x0],r11
80007464:	ba 78       	st.h	sp[0xe],r8
80007466:	1a 9b       	mov	r11,sp
80007468:	e0 a0 04 9e 	rcall	80007da4 <_vfprintf_r>
8000746c:	30 09       	mov	r9,0
8000746e:	40 08       	lddsp	r8,sp[0x0]
80007470:	b0 89       	st.b	r8[0x0],r9
80007472:	2e 9d       	sub	sp,-92
80007474:	d8 02       	popm	pc
80007476:	d7 03       	nop

80007478 <vsprintf>:
80007478:	d4 01       	pushm	lr
8000747a:	e0 68 01 18 	mov	r8,280
8000747e:	14 99       	mov	r9,r10
80007480:	16 9a       	mov	r10,r11
80007482:	18 9b       	mov	r11,r12
80007484:	70 0c       	ld.w	r12,r8[0x0]
80007486:	ce 1f       	rcall	80007448 <_vsprintf_r>
80007488:	d8 02       	popm	pc
8000748a:	d7 03       	nop

8000748c <__register_exitproc>:
8000748c:	d4 31       	pushm	r0-r7,lr
8000748e:	fe c8 ac da 	sub	r8,pc,-21286
80007492:	70 03       	ld.w	r3,r8[0x0]
80007494:	67 24       	ld.w	r4,r3[0x48]
80007496:	e6 c8 ff b4 	sub	r8,r3,-76
8000749a:	58 04       	cp.w	r4,0
8000749c:	f0 04 17 00 	moveq	r4,r8
800074a0:	e7 f4 0a 12 	st.weq	r3[0x48],r4
800074a4:	18 97       	mov	r7,r12
800074a6:	16 96       	mov	r6,r11
800074a8:	14 95       	mov	r5,r10
800074aa:	12 92       	mov	r2,r9
800074ac:	68 18       	ld.w	r8,r4[0x4]
800074ae:	59 f8       	cp.w	r8,31
800074b0:	e0 8a 00 0e 	brle	800074cc <__register_exitproc+0x40>
800074b4:	e0 6c 00 8c 	mov	r12,140
800074b8:	fe b0 fb 04 	rcall	80006ac0 <malloc>
800074bc:	18 94       	mov	r4,r12
800074be:	c3 80       	breq	8000752e <__register_exitproc+0xa2>
800074c0:	67 28       	ld.w	r8,r3[0x48]
800074c2:	99 08       	st.w	r12[0x0],r8
800074c4:	e7 4c 00 48 	st.w	r3[72],r12
800074c8:	30 08       	mov	r8,0
800074ca:	99 18       	st.w	r12[0x4],r8
800074cc:	58 07       	cp.w	r7,0
800074ce:	c2 70       	breq	8000751c <__register_exitproc+0x90>
800074d0:	e8 fc 00 88 	ld.w	r12,r4[136]
800074d4:	58 0c       	cp.w	r12,0
800074d6:	c0 d1       	brne	800074f0 <__register_exitproc+0x64>
800074d8:	e0 6c 01 08 	mov	r12,264
800074dc:	fe b0 fa f2 	rcall	80006ac0 <malloc>
800074e0:	c2 70       	breq	8000752e <__register_exitproc+0xa2>
800074e2:	30 08       	mov	r8,0
800074e4:	e9 4c 00 88 	st.w	r4[136],r12
800074e8:	f9 48 01 04 	st.w	r12[260],r8
800074ec:	f9 48 01 00 	st.w	r12[256],r8
800074f0:	68 18       	ld.w	r8,r4[0x4]
800074f2:	f0 c9 ff e0 	sub	r9,r8,-32
800074f6:	f8 08 09 25 	st.w	r12[r8<<0x2],r5
800074fa:	f8 09 09 22 	st.w	r12[r9<<0x2],r2
800074fe:	30 1a       	mov	r10,1
80007500:	f8 f9 01 00 	ld.w	r9,r12[256]
80007504:	f4 08 09 48 	lsl	r8,r10,r8
80007508:	10 49       	or	r9,r8
8000750a:	f9 49 01 00 	st.w	r12[256],r9
8000750e:	58 27       	cp.w	r7,2
80007510:	f9 f9 00 41 	ld.weq	r9,r12[0x104]
80007514:	f3 d8 e0 38 	oreq	r8,r9,r8
80007518:	f9 f8 0a 41 	st.weq	r12[0x104],r8
8000751c:	68 18       	ld.w	r8,r4[0x4]
8000751e:	30 0c       	mov	r12,0
80007520:	f0 c9 ff ff 	sub	r9,r8,-1
80007524:	2f e8       	sub	r8,-2
80007526:	89 19       	st.w	r4[0x4],r9
80007528:	e8 08 09 26 	st.w	r4[r8<<0x2],r6
8000752c:	d8 32       	popm	r0-r7,pc
8000752e:	dc 3a       	popm	r0-r7,pc,r12=-1

80007530 <__call_exitprocs>:
80007530:	d4 31       	pushm	r0-r7,lr
80007532:	20 3d       	sub	sp,12
80007534:	fe c8 ad 80 	sub	r8,pc,-21120
80007538:	50 2c       	stdsp	sp[0x8],r12
8000753a:	70 08       	ld.w	r8,r8[0x0]
8000753c:	16 91       	mov	r1,r11
8000753e:	50 08       	stdsp	sp[0x0],r8
80007540:	2b 88       	sub	r8,-72
80007542:	50 18       	stdsp	sp[0x4],r8
80007544:	40 0a       	lddsp	r10,sp[0x0]
80007546:	40 14       	lddsp	r4,sp[0x4]
80007548:	75 27       	ld.w	r7,r10[0x48]
8000754a:	c5 58       	rjmp	800075f4 <__call_exitprocs+0xc4>
8000754c:	6e 15       	ld.w	r5,r7[0x4]
8000754e:	ee f6 00 88 	ld.w	r6,r7[136]
80007552:	ea c2 ff ff 	sub	r2,r5,-1
80007556:	20 15       	sub	r5,1
80007558:	ee 02 00 22 	add	r2,r7,r2<<0x2
8000755c:	ec 05 00 23 	add	r3,r6,r5<<0x2
80007560:	c3 58       	rjmp	800075ca <__call_exitprocs+0x9a>
80007562:	58 01       	cp.w	r1,0
80007564:	c0 70       	breq	80007572 <__call_exitprocs+0x42>
80007566:	58 06       	cp.w	r6,0
80007568:	c2 e0       	breq	800075c4 <__call_exitprocs+0x94>
8000756a:	e6 f8 00 80 	ld.w	r8,r3[128]
8000756e:	02 38       	cp.w	r8,r1
80007570:	c2 a1       	brne	800075c4 <__call_exitprocs+0x94>
80007572:	6e 19       	ld.w	r9,r7[0x4]
80007574:	64 08       	ld.w	r8,r2[0x0]
80007576:	20 19       	sub	r9,1
80007578:	12 35       	cp.w	r5,r9
8000757a:	ef f5 0a 01 	st.weq	r7[0x4],r5
8000757e:	f9 b9 01 00 	movne	r9,0
80007582:	e5 f9 1a 00 	st.wne	r2[0x0],r9
80007586:	58 08       	cp.w	r8,0
80007588:	c1 e0       	breq	800075c4 <__call_exitprocs+0x94>
8000758a:	6e 10       	ld.w	r0,r7[0x4]
8000758c:	58 06       	cp.w	r6,0
8000758e:	c0 90       	breq	800075a0 <__call_exitprocs+0x70>
80007590:	30 1a       	mov	r10,1
80007592:	f4 05 09 49 	lsl	r9,r10,r5
80007596:	ec fa 01 00 	ld.w	r10,r6[256]
8000759a:	f3 ea 00 0a 	and	r10,r9,r10
8000759e:	c0 31       	brne	800075a4 <__call_exitprocs+0x74>
800075a0:	5d 18       	icall	r8
800075a2:	c0 b8       	rjmp	800075b8 <__call_exitprocs+0x88>
800075a4:	ec fa 01 04 	ld.w	r10,r6[260]
800075a8:	66 0b       	ld.w	r11,r3[0x0]
800075aa:	14 69       	and	r9,r10
800075ac:	c0 41       	brne	800075b4 <__call_exitprocs+0x84>
800075ae:	40 2c       	lddsp	r12,sp[0x8]
800075b0:	5d 18       	icall	r8
800075b2:	c0 38       	rjmp	800075b8 <__call_exitprocs+0x88>
800075b4:	16 9c       	mov	r12,r11
800075b6:	5d 18       	icall	r8
800075b8:	6e 18       	ld.w	r8,r7[0x4]
800075ba:	10 30       	cp.w	r0,r8
800075bc:	cc 41       	brne	80007544 <__call_exitprocs+0x14>
800075be:	68 08       	ld.w	r8,r4[0x0]
800075c0:	0e 38       	cp.w	r8,r7
800075c2:	cc 11       	brne	80007544 <__call_exitprocs+0x14>
800075c4:	20 15       	sub	r5,1
800075c6:	20 43       	sub	r3,4
800075c8:	20 42       	sub	r2,4
800075ca:	58 05       	cp.w	r5,0
800075cc:	cc b4       	brge	80007562 <__call_exitprocs+0x32>
800075ce:	6e 18       	ld.w	r8,r7[0x4]
800075d0:	58 08       	cp.w	r8,0
800075d2:	c0 f1       	brne	800075f0 <__call_exitprocs+0xc0>
800075d4:	6e 08       	ld.w	r8,r7[0x0]
800075d6:	58 08       	cp.w	r8,0
800075d8:	c0 c0       	breq	800075f0 <__call_exitprocs+0xc0>
800075da:	89 08       	st.w	r4[0x0],r8
800075dc:	58 06       	cp.w	r6,0
800075de:	c0 40       	breq	800075e6 <__call_exitprocs+0xb6>
800075e0:	0c 9c       	mov	r12,r6
800075e2:	fe b0 fa 67 	rcall	80006ab0 <free>
800075e6:	0e 9c       	mov	r12,r7
800075e8:	fe b0 fa 64 	rcall	80006ab0 <free>
800075ec:	68 07       	ld.w	r7,r4[0x0]
800075ee:	c0 38       	rjmp	800075f4 <__call_exitprocs+0xc4>
800075f0:	0e 94       	mov	r4,r7
800075f2:	6e 07       	ld.w	r7,r7[0x0]
800075f4:	58 07       	cp.w	r7,0
800075f6:	ca b1       	brne	8000754c <__call_exitprocs+0x1c>
800075f8:	2f dd       	sub	sp,-12
800075fa:	d8 32       	popm	r0-r7,pc

800075fc <__errno>:
800075fc:	e0 68 01 18 	mov	r8,280
80007600:	70 0c       	ld.w	r12,r8[0x0]
80007602:	2f 4c       	sub	r12,-12
80007604:	5e fc       	retal	r12
80007606:	d7 03       	nop

80007608 <__sfp_lock_acquire>:
80007608:	5e fc       	retal	r12

8000760a <__sfp_lock_release>:
8000760a:	5e fc       	retal	r12

8000760c <_cleanup_r>:
8000760c:	d4 01       	pushm	lr
8000760e:	fe cb ca 82 	sub	r11,pc,-13694
80007612:	ca dd       	rcall	8000796c <_fwalk>
80007614:	d8 02       	popm	pc
80007616:	d7 03       	nop

80007618 <__sfmoreglue>:
80007618:	d4 21       	pushm	r4-r7,lr
8000761a:	16 95       	mov	r5,r11
8000761c:	f6 06 10 5c 	mul	r6,r11,92
80007620:	ec cb ff f4 	sub	r11,r6,-12
80007624:	fe b0 fa 56 	rcall	80006ad0 <_malloc_r>
80007628:	18 97       	mov	r7,r12
8000762a:	c0 90       	breq	8000763c <__sfmoreglue+0x24>
8000762c:	99 15       	st.w	r12[0x4],r5
8000762e:	30 0b       	mov	r11,0
80007630:	2f 4c       	sub	r12,-12
80007632:	0c 9a       	mov	r10,r6
80007634:	8f 2c       	st.w	r7[0x8],r12
80007636:	8f 0b       	st.w	r7[0x0],r11
80007638:	fe b0 fd 0c 	rcall	80007050 <memset>
8000763c:	0e 9c       	mov	r12,r7
8000763e:	d8 22       	popm	r4-r7,pc

80007640 <__sfp>:
80007640:	d4 21       	pushm	r4-r7,lr
80007642:	fe c8 ae 8e 	sub	r8,pc,-20850
80007646:	18 96       	mov	r6,r12
80007648:	70 07       	ld.w	r7,r8[0x0]
8000764a:	6e 68       	ld.w	r8,r7[0x18]
8000764c:	58 08       	cp.w	r8,0
8000764e:	c0 31       	brne	80007654 <__sfp+0x14>
80007650:	0e 9c       	mov	r12,r7
80007652:	c2 dc       	rcall	800076ac <__sinit>
80007654:	ee c7 ff 28 	sub	r7,r7,-216
80007658:	30 05       	mov	r5,0
8000765a:	6e 2c       	ld.w	r12,r7[0x8]
8000765c:	6e 18       	ld.w	r8,r7[0x4]
8000765e:	c0 68       	rjmp	8000766a <__sfp+0x2a>
80007660:	98 69       	ld.sh	r9,r12[0xc]
80007662:	ea 09 19 00 	cp.h	r9,r5
80007666:	c1 10       	breq	80007688 <__sfp+0x48>
80007668:	2a 4c       	sub	r12,-92
8000766a:	20 18       	sub	r8,1
8000766c:	cf a7       	brpl	80007660 <__sfp+0x20>
8000766e:	6e 08       	ld.w	r8,r7[0x0]
80007670:	58 08       	cp.w	r8,0
80007672:	c0 61       	brne	8000767e <__sfp+0x3e>
80007674:	30 4b       	mov	r11,4
80007676:	0c 9c       	mov	r12,r6
80007678:	cd 0f       	rcall	80007618 <__sfmoreglue>
8000767a:	8f 0c       	st.w	r7[0x0],r12
8000767c:	c0 30       	breq	80007682 <__sfp+0x42>
8000767e:	6e 07       	ld.w	r7,r7[0x0]
80007680:	ce db       	rjmp	8000765a <__sfp+0x1a>
80007682:	30 c8       	mov	r8,12
80007684:	8d 38       	st.w	r6[0xc],r8
80007686:	d8 22       	popm	r4-r7,pc
80007688:	30 08       	mov	r8,0
8000768a:	f9 48 00 4c 	st.w	r12[76],r8
8000768e:	99 08       	st.w	r12[0x0],r8
80007690:	99 28       	st.w	r12[0x8],r8
80007692:	99 18       	st.w	r12[0x4],r8
80007694:	99 48       	st.w	r12[0x10],r8
80007696:	99 58       	st.w	r12[0x14],r8
80007698:	99 68       	st.w	r12[0x18],r8
8000769a:	99 d8       	st.w	r12[0x34],r8
8000769c:	99 e8       	st.w	r12[0x38],r8
8000769e:	f9 48 00 48 	st.w	r12[72],r8
800076a2:	3f f8       	mov	r8,-1
800076a4:	b8 78       	st.h	r12[0xe],r8
800076a6:	30 18       	mov	r8,1
800076a8:	b8 68       	st.h	r12[0xc],r8
800076aa:	d8 22       	popm	r4-r7,pc

800076ac <__sinit>:
800076ac:	d4 21       	pushm	r4-r7,lr
800076ae:	18 96       	mov	r6,r12
800076b0:	78 67       	ld.w	r7,r12[0x18]
800076b2:	58 07       	cp.w	r7,0
800076b4:	c4 91       	brne	80007746 <__sinit+0x9a>
800076b6:	fe c8 00 aa 	sub	r8,pc,170
800076ba:	30 15       	mov	r5,1
800076bc:	99 a8       	st.w	r12[0x28],r8
800076be:	f9 47 00 d8 	st.w	r12[216],r7
800076c2:	f9 47 00 dc 	st.w	r12[220],r7
800076c6:	f9 47 00 e0 	st.w	r12[224],r7
800076ca:	99 65       	st.w	r12[0x18],r5
800076cc:	cb af       	rcall	80007640 <__sfp>
800076ce:	8d 0c       	st.w	r6[0x0],r12
800076d0:	0c 9c       	mov	r12,r6
800076d2:	cb 7f       	rcall	80007640 <__sfp>
800076d4:	8d 1c       	st.w	r6[0x4],r12
800076d6:	0c 9c       	mov	r12,r6
800076d8:	cb 4f       	rcall	80007640 <__sfp>
800076da:	6c 09       	ld.w	r9,r6[0x0]
800076dc:	30 48       	mov	r8,4
800076de:	93 07       	st.w	r9[0x0],r7
800076e0:	b2 68       	st.h	r9[0xc],r8
800076e2:	93 17       	st.w	r9[0x4],r7
800076e4:	93 27       	st.w	r9[0x8],r7
800076e6:	6c 18       	ld.w	r8,r6[0x4]
800076e8:	b2 77       	st.h	r9[0xe],r7
800076ea:	93 47       	st.w	r9[0x10],r7
800076ec:	93 57       	st.w	r9[0x14],r7
800076ee:	93 67       	st.w	r9[0x18],r7
800076f0:	93 89       	st.w	r9[0x20],r9
800076f2:	91 07       	st.w	r8[0x0],r7
800076f4:	91 17       	st.w	r8[0x4],r7
800076f6:	91 27       	st.w	r8[0x8],r7
800076f8:	fe ce fc a4 	sub	lr,pc,-860
800076fc:	fe cb fc d8 	sub	r11,pc,-808
80007700:	93 9e       	st.w	r9[0x24],lr
80007702:	93 ab       	st.w	r9[0x28],r11
80007704:	fe ca fd 04 	sub	r10,pc,-764
80007708:	fe c4 fd 14 	sub	r4,pc,-748
8000770c:	93 ba       	st.w	r9[0x2c],r10
8000770e:	93 c4       	st.w	r9[0x30],r4
80007710:	30 99       	mov	r9,9
80007712:	b0 69       	st.h	r8[0xc],r9
80007714:	b0 75       	st.h	r8[0xe],r5
80007716:	91 c4       	st.w	r8[0x30],r4
80007718:	91 47       	st.w	r8[0x10],r7
8000771a:	91 57       	st.w	r8[0x14],r7
8000771c:	91 67       	st.w	r8[0x18],r7
8000771e:	91 88       	st.w	r8[0x20],r8
80007720:	91 9e       	st.w	r8[0x24],lr
80007722:	91 ab       	st.w	r8[0x28],r11
80007724:	91 ba       	st.w	r8[0x2c],r10
80007726:	8d 2c       	st.w	r6[0x8],r12
80007728:	31 28       	mov	r8,18
8000772a:	99 07       	st.w	r12[0x0],r7
8000772c:	b8 68       	st.h	r12[0xc],r8
8000772e:	99 17       	st.w	r12[0x4],r7
80007730:	99 27       	st.w	r12[0x8],r7
80007732:	30 28       	mov	r8,2
80007734:	b8 78       	st.h	r12[0xe],r8
80007736:	99 c4       	st.w	r12[0x30],r4
80007738:	99 67       	st.w	r12[0x18],r7
8000773a:	99 9e       	st.w	r12[0x24],lr
8000773c:	99 ab       	st.w	r12[0x28],r11
8000773e:	99 ba       	st.w	r12[0x2c],r10
80007740:	99 47       	st.w	r12[0x10],r7
80007742:	99 57       	st.w	r12[0x14],r7
80007744:	99 8c       	st.w	r12[0x20],r12
80007746:	d8 22       	popm	r4-r7,pc

80007748 <_malloc_trim_r>:
80007748:	d4 21       	pushm	r4-r7,lr
8000774a:	16 95       	mov	r5,r11
8000774c:	18 97       	mov	r7,r12
8000774e:	fe b0 eb 15 	rcall	80004d78 <__malloc_lock>
80007752:	e0 64 01 1c 	mov	r4,284
80007756:	68 28       	ld.w	r8,r4[0x8]
80007758:	70 16       	ld.w	r6,r8[0x4]
8000775a:	e0 16 ff fc 	andl	r6,0xfffc
8000775e:	ec c8 ff 91 	sub	r8,r6,-111
80007762:	f0 05 01 05 	sub	r5,r8,r5
80007766:	e0 15 ff 80 	andl	r5,0xff80
8000776a:	ea c5 00 80 	sub	r5,r5,128
8000776e:	e0 45 00 7f 	cp.w	r5,127
80007772:	e0 8a 00 25 	brle	800077bc <_malloc_trim_r+0x74>
80007776:	30 0b       	mov	r11,0
80007778:	0e 9c       	mov	r12,r7
8000777a:	fe b0 fd d3 	rcall	80007320 <_sbrk_r>
8000777e:	68 28       	ld.w	r8,r4[0x8]
80007780:	0c 08       	add	r8,r6
80007782:	10 3c       	cp.w	r12,r8
80007784:	c1 c1       	brne	800077bc <_malloc_trim_r+0x74>
80007786:	ea 0b 11 00 	rsub	r11,r5,0
8000778a:	0e 9c       	mov	r12,r7
8000778c:	fe b0 fd ca 	rcall	80007320 <_sbrk_r>
80007790:	5b fc       	cp.w	r12,-1
80007792:	c1 91       	brne	800077c4 <_malloc_trim_r+0x7c>
80007794:	30 0b       	mov	r11,0
80007796:	0e 9c       	mov	r12,r7
80007798:	fe b0 fd c4 	rcall	80007320 <_sbrk_r>
8000779c:	68 28       	ld.w	r8,r4[0x8]
8000779e:	f8 08 01 09 	sub	r9,r12,r8
800077a2:	58 f9       	cp.w	r9,15
800077a4:	e0 8a 00 0c 	brle	800077bc <_malloc_trim_r+0x74>
800077a8:	a1 a9       	sbr	r9,0x0
800077aa:	91 19       	st.w	r8[0x4],r9
800077ac:	e0 68 05 28 	mov	r8,1320
800077b0:	70 09       	ld.w	r9,r8[0x0]
800077b2:	e0 68 07 a8 	mov	r8,1960
800077b6:	f8 09 01 09 	sub	r9,r12,r9
800077ba:	91 09       	st.w	r8[0x0],r9
800077bc:	0e 9c       	mov	r12,r7
800077be:	fe b0 ea eb 	rcall	80004d94 <__malloc_unlock>
800077c2:	d8 2a       	popm	r4-r7,pc,r12=0
800077c4:	68 28       	ld.w	r8,r4[0x8]
800077c6:	0a 16       	sub	r6,r5
800077c8:	a1 a6       	sbr	r6,0x0
800077ca:	91 16       	st.w	r8[0x4],r6
800077cc:	e0 68 07 a8 	mov	r8,1960
800077d0:	70 09       	ld.w	r9,r8[0x0]
800077d2:	0a 19       	sub	r9,r5
800077d4:	0e 9c       	mov	r12,r7
800077d6:	91 09       	st.w	r8[0x0],r9
800077d8:	fe b0 ea de 	rcall	80004d94 <__malloc_unlock>
800077dc:	da 2a       	popm	r4-r7,pc,r12=1
800077de:	d7 03       	nop

800077e0 <_free_r>:
800077e0:	d4 21       	pushm	r4-r7,lr
800077e2:	16 96       	mov	r6,r11
800077e4:	18 97       	mov	r7,r12
800077e6:	58 0b       	cp.w	r11,0
800077e8:	e0 80 00 c0 	breq	80007968 <_free_r+0x188>
800077ec:	fe b0 ea c6 	rcall	80004d78 <__malloc_lock>
800077f0:	20 86       	sub	r6,8
800077f2:	e0 6a 01 1c 	mov	r10,284
800077f6:	6c 18       	ld.w	r8,r6[0x4]
800077f8:	74 2e       	ld.w	lr,r10[0x8]
800077fa:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800077fe:	a1 c8       	cbr	r8,0x0
80007800:	ec 08 00 09 	add	r9,r6,r8
80007804:	72 1b       	ld.w	r11,r9[0x4]
80007806:	e0 1b ff fc 	andl	r11,0xfffc
8000780a:	1c 39       	cp.w	r9,lr
8000780c:	c1 e1       	brne	80007848 <_free_r+0x68>
8000780e:	f6 08 00 08 	add	r8,r11,r8
80007812:	58 0c       	cp.w	r12,0
80007814:	c0 81       	brne	80007824 <_free_r+0x44>
80007816:	6c 09       	ld.w	r9,r6[0x0]
80007818:	12 16       	sub	r6,r9
8000781a:	12 08       	add	r8,r9
8000781c:	6c 3b       	ld.w	r11,r6[0xc]
8000781e:	6c 29       	ld.w	r9,r6[0x8]
80007820:	97 29       	st.w	r11[0x8],r9
80007822:	93 3b       	st.w	r9[0xc],r11
80007824:	10 99       	mov	r9,r8
80007826:	95 26       	st.w	r10[0x8],r6
80007828:	a1 a9       	sbr	r9,0x0
8000782a:	8d 19       	st.w	r6[0x4],r9
8000782c:	e0 69 05 24 	mov	r9,1316
80007830:	72 09       	ld.w	r9,r9[0x0]
80007832:	12 38       	cp.w	r8,r9
80007834:	c0 63       	brcs	80007840 <_free_r+0x60>
80007836:	e0 68 07 a4 	mov	r8,1956
8000783a:	0e 9c       	mov	r12,r7
8000783c:	70 0b       	ld.w	r11,r8[0x0]
8000783e:	c8 5f       	rcall	80007748 <_malloc_trim_r>
80007840:	0e 9c       	mov	r12,r7
80007842:	fe b0 ea a9 	rcall	80004d94 <__malloc_unlock>
80007846:	d8 22       	popm	r4-r7,pc
80007848:	93 1b       	st.w	r9[0x4],r11
8000784a:	58 0c       	cp.w	r12,0
8000784c:	c0 30       	breq	80007852 <_free_r+0x72>
8000784e:	30 0c       	mov	r12,0
80007850:	c1 08       	rjmp	80007870 <_free_r+0x90>
80007852:	6c 0e       	ld.w	lr,r6[0x0]
80007854:	f4 c5 ff f8 	sub	r5,r10,-8
80007858:	1c 16       	sub	r6,lr
8000785a:	1c 08       	add	r8,lr
8000785c:	6c 2e       	ld.w	lr,r6[0x8]
8000785e:	0a 3e       	cp.w	lr,r5
80007860:	f9 bc 00 01 	moveq	r12,1
80007864:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007868:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000786c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80007870:	f2 0b 00 0e 	add	lr,r9,r11
80007874:	7c 1e       	ld.w	lr,lr[0x4]
80007876:	ed be 00 00 	bld	lr,0x0
8000787a:	c1 40       	breq	800078a2 <_free_r+0xc2>
8000787c:	16 08       	add	r8,r11
8000787e:	58 0c       	cp.w	r12,0
80007880:	c0 d1       	brne	8000789a <_free_r+0xba>
80007882:	e0 6e 01 1c 	mov	lr,284
80007886:	72 2b       	ld.w	r11,r9[0x8]
80007888:	2f 8e       	sub	lr,-8
8000788a:	1c 3b       	cp.w	r11,lr
8000788c:	c0 71       	brne	8000789a <_free_r+0xba>
8000788e:	97 36       	st.w	r11[0xc],r6
80007890:	97 26       	st.w	r11[0x8],r6
80007892:	8d 2b       	st.w	r6[0x8],r11
80007894:	8d 3b       	st.w	r6[0xc],r11
80007896:	30 1c       	mov	r12,1
80007898:	c0 58       	rjmp	800078a2 <_free_r+0xc2>
8000789a:	72 2b       	ld.w	r11,r9[0x8]
8000789c:	72 39       	ld.w	r9,r9[0xc]
8000789e:	93 2b       	st.w	r9[0x8],r11
800078a0:	97 39       	st.w	r11[0xc],r9
800078a2:	10 99       	mov	r9,r8
800078a4:	ec 08 09 08 	st.w	r6[r8],r8
800078a8:	a1 a9       	sbr	r9,0x0
800078aa:	8d 19       	st.w	r6[0x4],r9
800078ac:	58 0c       	cp.w	r12,0
800078ae:	c5 a1       	brne	80007962 <_free_r+0x182>
800078b0:	e0 48 01 ff 	cp.w	r8,511
800078b4:	e0 8b 00 13 	brhi	800078da <_free_r+0xfa>
800078b8:	a3 98       	lsr	r8,0x3
800078ba:	f4 08 00 39 	add	r9,r10,r8<<0x3
800078be:	72 2b       	ld.w	r11,r9[0x8]
800078c0:	8d 39       	st.w	r6[0xc],r9
800078c2:	8d 2b       	st.w	r6[0x8],r11
800078c4:	97 36       	st.w	r11[0xc],r6
800078c6:	93 26       	st.w	r9[0x8],r6
800078c8:	a3 48       	asr	r8,0x2
800078ca:	74 19       	ld.w	r9,r10[0x4]
800078cc:	30 1b       	mov	r11,1
800078ce:	f6 08 09 48 	lsl	r8,r11,r8
800078d2:	f3 e8 10 08 	or	r8,r9,r8
800078d6:	95 18       	st.w	r10[0x4],r8
800078d8:	c4 58       	rjmp	80007962 <_free_r+0x182>
800078da:	f0 0b 16 09 	lsr	r11,r8,0x9
800078de:	58 4b       	cp.w	r11,4
800078e0:	e0 8b 00 06 	brhi	800078ec <_free_r+0x10c>
800078e4:	f0 0b 16 06 	lsr	r11,r8,0x6
800078e8:	2c 8b       	sub	r11,-56
800078ea:	c2 08       	rjmp	8000792a <_free_r+0x14a>
800078ec:	59 4b       	cp.w	r11,20
800078ee:	e0 8b 00 04 	brhi	800078f6 <_free_r+0x116>
800078f2:	2a 5b       	sub	r11,-91
800078f4:	c1 b8       	rjmp	8000792a <_free_r+0x14a>
800078f6:	e0 4b 00 54 	cp.w	r11,84
800078fa:	e0 8b 00 06 	brhi	80007906 <_free_r+0x126>
800078fe:	f0 0b 16 0c 	lsr	r11,r8,0xc
80007902:	29 2b       	sub	r11,-110
80007904:	c1 38       	rjmp	8000792a <_free_r+0x14a>
80007906:	e0 4b 01 54 	cp.w	r11,340
8000790a:	e0 8b 00 06 	brhi	80007916 <_free_r+0x136>
8000790e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80007912:	28 9b       	sub	r11,-119
80007914:	c0 b8       	rjmp	8000792a <_free_r+0x14a>
80007916:	e0 4b 05 54 	cp.w	r11,1364
8000791a:	e0 88 00 05 	brls	80007924 <_free_r+0x144>
8000791e:	37 eb       	mov	r11,126
80007920:	c0 58       	rjmp	8000792a <_free_r+0x14a>
80007922:	d7 03       	nop
80007924:	f0 0b 16 12 	lsr	r11,r8,0x12
80007928:	28 4b       	sub	r11,-124
8000792a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000792e:	78 29       	ld.w	r9,r12[0x8]
80007930:	18 39       	cp.w	r9,r12
80007932:	c0 e1       	brne	8000794e <_free_r+0x16e>
80007934:	74 18       	ld.w	r8,r10[0x4]
80007936:	a3 4b       	asr	r11,0x2
80007938:	30 1c       	mov	r12,1
8000793a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000793e:	f1 eb 10 0b 	or	r11,r8,r11
80007942:	12 98       	mov	r8,r9
80007944:	95 1b       	st.w	r10[0x4],r11
80007946:	c0 a8       	rjmp	8000795a <_free_r+0x17a>
80007948:	72 29       	ld.w	r9,r9[0x8]
8000794a:	18 39       	cp.w	r9,r12
8000794c:	c0 60       	breq	80007958 <_free_r+0x178>
8000794e:	72 1a       	ld.w	r10,r9[0x4]
80007950:	e0 1a ff fc 	andl	r10,0xfffc
80007954:	14 38       	cp.w	r8,r10
80007956:	cf 93       	brcs	80007948 <_free_r+0x168>
80007958:	72 38       	ld.w	r8,r9[0xc]
8000795a:	8d 38       	st.w	r6[0xc],r8
8000795c:	8d 29       	st.w	r6[0x8],r9
8000795e:	93 36       	st.w	r9[0xc],r6
80007960:	91 26       	st.w	r8[0x8],r6
80007962:	0e 9c       	mov	r12,r7
80007964:	fe b0 ea 18 	rcall	80004d94 <__malloc_unlock>
80007968:	d8 22       	popm	r4-r7,pc
8000796a:	d7 03       	nop

8000796c <_fwalk>:
8000796c:	d4 31       	pushm	r0-r7,lr
8000796e:	30 05       	mov	r5,0
80007970:	16 91       	mov	r1,r11
80007972:	f8 c7 ff 28 	sub	r7,r12,-216
80007976:	0a 92       	mov	r2,r5
80007978:	c4 8e       	rcall	80007608 <__sfp_lock_acquire>
8000797a:	3f f3       	mov	r3,-1
8000797c:	c1 68       	rjmp	800079a8 <_fwalk+0x3c>
8000797e:	6e 26       	ld.w	r6,r7[0x8]
80007980:	6e 14       	ld.w	r4,r7[0x4]
80007982:	2f 46       	sub	r6,-12
80007984:	c0 c8       	rjmp	8000799c <_fwalk+0x30>
80007986:	8c 08       	ld.sh	r8,r6[0x0]
80007988:	e4 08 19 00 	cp.h	r8,r2
8000798c:	c0 70       	breq	8000799a <_fwalk+0x2e>
8000798e:	8c 18       	ld.sh	r8,r6[0x2]
80007990:	e6 08 19 00 	cp.h	r8,r3
80007994:	c0 30       	breq	8000799a <_fwalk+0x2e>
80007996:	5d 11       	icall	r1
80007998:	18 45       	or	r5,r12
8000799a:	2a 46       	sub	r6,-92
8000799c:	20 14       	sub	r4,1
8000799e:	ec cc 00 0c 	sub	r12,r6,12
800079a2:	58 04       	cp.w	r4,0
800079a4:	cf 14       	brge	80007986 <_fwalk+0x1a>
800079a6:	6e 07       	ld.w	r7,r7[0x0]
800079a8:	58 07       	cp.w	r7,0
800079aa:	ce a1       	brne	8000797e <_fwalk+0x12>
800079ac:	c2 fe       	rcall	8000760a <__sfp_lock_release>
800079ae:	0a 9c       	mov	r12,r5
800079b0:	d8 32       	popm	r0-r7,pc
800079b2:	d7 03       	nop

800079b4 <memmove>:
800079b4:	d4 01       	pushm	lr
800079b6:	18 3b       	cp.w	r11,r12
800079b8:	c1 92       	brcc	800079ea <memmove+0x36>
800079ba:	f6 0a 00 09 	add	r9,r11,r10
800079be:	12 3c       	cp.w	r12,r9
800079c0:	c1 52       	brcc	800079ea <memmove+0x36>
800079c2:	f8 0a 00 0b 	add	r11,r12,r10
800079c6:	30 08       	mov	r8,0
800079c8:	c0 68       	rjmp	800079d4 <memmove+0x20>
800079ca:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800079ce:	20 1a       	sub	r10,1
800079d0:	f6 08 0b 0e 	st.b	r11[r8],lr
800079d4:	20 18       	sub	r8,1
800079d6:	58 0a       	cp.w	r10,0
800079d8:	cf 91       	brne	800079ca <memmove+0x16>
800079da:	d8 02       	popm	pc
800079dc:	f6 08 07 09 	ld.ub	r9,r11[r8]
800079e0:	20 1a       	sub	r10,1
800079e2:	f8 08 0b 09 	st.b	r12[r8],r9
800079e6:	2f f8       	sub	r8,-1
800079e8:	c0 28       	rjmp	800079ec <memmove+0x38>
800079ea:	30 08       	mov	r8,0
800079ec:	58 0a       	cp.w	r10,0
800079ee:	cf 71       	brne	800079dc <memmove+0x28>
800079f0:	d8 02       	popm	pc
800079f2:	d7 03       	nop

800079f4 <__sclose>:
800079f4:	d4 01       	pushm	lr
800079f6:	96 7b       	ld.sh	r11,r11[0xe]
800079f8:	e0 a0 11 e2 	rcall	80009dbc <_close_r>
800079fc:	d8 02       	popm	pc
800079fe:	d7 03       	nop

80007a00 <__sseek>:
80007a00:	d4 21       	pushm	r4-r7,lr
80007a02:	16 97       	mov	r7,r11
80007a04:	96 7b       	ld.sh	r11,r11[0xe]
80007a06:	e0 a0 1a a5 	rcall	8000af50 <_lseek_r>
80007a0a:	8e 68       	ld.sh	r8,r7[0xc]
80007a0c:	10 99       	mov	r9,r8
80007a0e:	ad c8       	cbr	r8,0xc
80007a10:	ad a9       	sbr	r9,0xc
80007a12:	5b fc       	cp.w	r12,-1
80007a14:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007a18:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007a1c:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007a20:	d8 22       	popm	r4-r7,pc
80007a22:	d7 03       	nop

80007a24 <__swrite>:
80007a24:	d4 21       	pushm	r4-r7,lr
80007a26:	96 68       	ld.sh	r8,r11[0xc]
80007a28:	16 97       	mov	r7,r11
80007a2a:	14 95       	mov	r5,r10
80007a2c:	12 94       	mov	r4,r9
80007a2e:	e2 18 01 00 	andl	r8,0x100,COH
80007a32:	18 96       	mov	r6,r12
80007a34:	c0 60       	breq	80007a40 <__swrite+0x1c>
80007a36:	30 29       	mov	r9,2
80007a38:	30 0a       	mov	r10,0
80007a3a:	96 7b       	ld.sh	r11,r11[0xe]
80007a3c:	e0 a0 1a 8a 	rcall	8000af50 <_lseek_r>
80007a40:	8e 68       	ld.sh	r8,r7[0xc]
80007a42:	ad c8       	cbr	r8,0xc
80007a44:	08 99       	mov	r9,r4
80007a46:	0a 9a       	mov	r10,r5
80007a48:	8e 7b       	ld.sh	r11,r7[0xe]
80007a4a:	0c 9c       	mov	r12,r6
80007a4c:	ae 68       	st.h	r7[0xc],r8
80007a4e:	e0 a0 11 35 	rcall	80009cb8 <_write_r>
80007a52:	d8 22       	popm	r4-r7,pc

80007a54 <__sread>:
80007a54:	d4 21       	pushm	r4-r7,lr
80007a56:	16 97       	mov	r7,r11
80007a58:	96 7b       	ld.sh	r11,r11[0xe]
80007a5a:	e0 a0 1d e3 	rcall	8000b620 <_read_r>
80007a5e:	c0 65       	brlt	80007a6a <__sread+0x16>
80007a60:	6f 58       	ld.w	r8,r7[0x54]
80007a62:	18 08       	add	r8,r12
80007a64:	ef 48 00 54 	st.w	r7[84],r8
80007a68:	d8 22       	popm	r4-r7,pc
80007a6a:	8e 68       	ld.sh	r8,r7[0xc]
80007a6c:	ad c8       	cbr	r8,0xc
80007a6e:	ae 68       	st.h	r7[0xc],r8
80007a70:	d8 22       	popm	r4-r7,pc
80007a72:	d7 03       	nop

80007a74 <get_arg>:
80007a74:	d4 31       	pushm	r0-r7,lr
80007a76:	20 8d       	sub	sp,32
80007a78:	fa c4 ff bc 	sub	r4,sp,-68
80007a7c:	50 4b       	stdsp	sp[0x10],r11
80007a7e:	68 2e       	ld.w	lr,r4[0x8]
80007a80:	50 58       	stdsp	sp[0x14],r8
80007a82:	12 96       	mov	r6,r9
80007a84:	7c 0b       	ld.w	r11,lr[0x0]
80007a86:	70 05       	ld.w	r5,r8[0x0]
80007a88:	50 6e       	stdsp	sp[0x18],lr
80007a8a:	58 0b       	cp.w	r11,0
80007a8c:	f4 0b 17 00 	moveq	r11,r10
80007a90:	68 03       	ld.w	r3,r4[0x0]
80007a92:	68 11       	ld.w	r1,r4[0x4]
80007a94:	40 49       	lddsp	r9,sp[0x10]
80007a96:	30 08       	mov	r8,0
80007a98:	c2 89       	rjmp	80007ce8 <get_arg+0x274>
80007a9a:	2f fb       	sub	r11,-1
80007a9c:	32 5c       	mov	r12,37
80007a9e:	17 8a       	ld.ub	r10,r11[0x0]
80007aa0:	f8 0a 18 00 	cp.b	r10,r12
80007aa4:	5f 1e       	srne	lr
80007aa6:	f0 0a 18 00 	cp.b	r10,r8
80007aaa:	5f 1c       	srne	r12
80007aac:	fd ec 00 0c 	and	r12,lr,r12
80007ab0:	f0 0c 18 00 	cp.b	r12,r8
80007ab4:	cf 31       	brne	80007a9a <get_arg+0x26>
80007ab6:	58 0a       	cp.w	r10,0
80007ab8:	e0 80 01 25 	breq	80007d02 <get_arg+0x28e>
80007abc:	30 0c       	mov	r12,0
80007abe:	3f fa       	mov	r10,-1
80007ac0:	18 90       	mov	r0,r12
80007ac2:	50 3a       	stdsp	sp[0xc],r10
80007ac4:	18 94       	mov	r4,r12
80007ac6:	18 92       	mov	r2,r12
80007ac8:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80007acc:	16 97       	mov	r7,r11
80007ace:	50 7c       	stdsp	sp[0x1c],r12
80007ad0:	fe cc af e4 	sub	r12,pc,-20508
80007ad4:	0f 3a       	ld.ub	r10,r7++
80007ad6:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80007ada:	40 7c       	lddsp	r12,sp[0x1c]
80007adc:	1c 0c       	add	r12,lr
80007ade:	fe ce b0 ba 	sub	lr,pc,-20294
80007ae2:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80007ae6:	20 1e       	sub	lr,1
80007ae8:	50 0e       	stdsp	sp[0x0],lr
80007aea:	fe ce b1 32 	sub	lr,pc,-20174
80007aee:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80007af2:	50 7c       	stdsp	sp[0x1c],r12
80007af4:	40 0c       	lddsp	r12,sp[0x0]
80007af6:	58 7c       	cp.w	r12,7
80007af8:	e0 8b 00 f1 	brhi	80007cda <get_arg+0x266>
80007afc:	fe ce b2 e4 	sub	lr,pc,-19740
80007b00:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80007b04:	36 8b       	mov	r11,104
80007b06:	f6 0a 18 00 	cp.b	r10,r11
80007b0a:	e0 80 00 e8 	breq	80007cda <get_arg+0x266>
80007b0e:	37 1b       	mov	r11,113
80007b10:	f6 0a 18 00 	cp.b	r10,r11
80007b14:	c0 70       	breq	80007b22 <get_arg+0xae>
80007b16:	34 cb       	mov	r11,76
80007b18:	f6 0a 18 00 	cp.b	r10,r11
80007b1c:	c0 51       	brne	80007b26 <get_arg+0xb2>
80007b1e:	a3 b4       	sbr	r4,0x3
80007b20:	cd d8       	rjmp	80007cda <get_arg+0x266>
80007b22:	a5 b4       	sbr	r4,0x5
80007b24:	cd b8       	rjmp	80007cda <get_arg+0x266>
80007b26:	08 9a       	mov	r10,r4
80007b28:	0e 9b       	mov	r11,r7
80007b2a:	a5 aa       	sbr	r10,0x4
80007b2c:	17 3c       	ld.ub	r12,r11++
80007b2e:	a5 b4       	sbr	r4,0x5
80007b30:	36 ce       	mov	lr,108
80007b32:	fc 0c 18 00 	cp.b	r12,lr
80007b36:	e0 80 00 d3 	breq	80007cdc <get_arg+0x268>
80007b3a:	14 94       	mov	r4,r10
80007b3c:	cc f8       	rjmp	80007cda <get_arg+0x266>
80007b3e:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80007b42:	36 7c       	mov	r12,103
80007b44:	f8 0a 18 00 	cp.b	r10,r12
80007b48:	e0 8b 00 27 	brhi	80007b96 <get_arg+0x122>
80007b4c:	36 5b       	mov	r11,101
80007b4e:	f6 0a 18 00 	cp.b	r10,r11
80007b52:	c4 82       	brcc	80007be2 <get_arg+0x16e>
80007b54:	34 fb       	mov	r11,79
80007b56:	f6 0a 18 00 	cp.b	r10,r11
80007b5a:	c4 80       	breq	80007bea <get_arg+0x176>
80007b5c:	e0 8b 00 0c 	brhi	80007b74 <get_arg+0x100>
80007b60:	34 5b       	mov	r11,69
80007b62:	f6 0a 18 00 	cp.b	r10,r11
80007b66:	c3 e0       	breq	80007be2 <get_arg+0x16e>
80007b68:	34 7b       	mov	r11,71
80007b6a:	f6 0a 18 00 	cp.b	r10,r11
80007b6e:	c3 a0       	breq	80007be2 <get_arg+0x16e>
80007b70:	34 4b       	mov	r11,68
80007b72:	c0 88       	rjmp	80007b82 <get_arg+0x10e>
80007b74:	35 8b       	mov	r11,88
80007b76:	f6 0a 18 00 	cp.b	r10,r11
80007b7a:	c2 c0       	breq	80007bd2 <get_arg+0x15e>
80007b7c:	e0 8b 00 07 	brhi	80007b8a <get_arg+0x116>
80007b80:	35 5b       	mov	r11,85
80007b82:	f6 0a 18 00 	cp.b	r10,r11
80007b86:	c3 51       	brne	80007bf0 <get_arg+0x17c>
80007b88:	c3 18       	rjmp	80007bea <get_arg+0x176>
80007b8a:	36 3b       	mov	r11,99
80007b8c:	f6 0a 18 00 	cp.b	r10,r11
80007b90:	c2 f0       	breq	80007bee <get_arg+0x17a>
80007b92:	36 4b       	mov	r11,100
80007b94:	c0 e8       	rjmp	80007bb0 <get_arg+0x13c>
80007b96:	37 0b       	mov	r11,112
80007b98:	f6 0a 18 00 	cp.b	r10,r11
80007b9c:	c2 50       	breq	80007be6 <get_arg+0x172>
80007b9e:	e0 8b 00 0d 	brhi	80007bb8 <get_arg+0x144>
80007ba2:	36 eb       	mov	r11,110
80007ba4:	f6 0a 18 00 	cp.b	r10,r11
80007ba8:	c1 f0       	breq	80007be6 <get_arg+0x172>
80007baa:	e0 8b 00 14 	brhi	80007bd2 <get_arg+0x15e>
80007bae:	36 9b       	mov	r11,105
80007bb0:	f6 0a 18 00 	cp.b	r10,r11
80007bb4:	c1 e1       	brne	80007bf0 <get_arg+0x17c>
80007bb6:	c0 e8       	rjmp	80007bd2 <get_arg+0x15e>
80007bb8:	37 5b       	mov	r11,117
80007bba:	f6 0a 18 00 	cp.b	r10,r11
80007bbe:	c0 a0       	breq	80007bd2 <get_arg+0x15e>
80007bc0:	37 8b       	mov	r11,120
80007bc2:	f6 0a 18 00 	cp.b	r10,r11
80007bc6:	c0 60       	breq	80007bd2 <get_arg+0x15e>
80007bc8:	37 3b       	mov	r11,115
80007bca:	f6 0a 18 00 	cp.b	r10,r11
80007bce:	c1 11       	brne	80007bf0 <get_arg+0x17c>
80007bd0:	c0 b8       	rjmp	80007be6 <get_arg+0x172>
80007bd2:	ed b4 00 04 	bld	r4,0x4
80007bd6:	c0 a0       	breq	80007bea <get_arg+0x176>
80007bd8:	ed b4 00 05 	bld	r4,0x5
80007bdc:	c0 91       	brne	80007bee <get_arg+0x17a>
80007bde:	30 20       	mov	r0,2
80007be0:	c0 88       	rjmp	80007bf0 <get_arg+0x17c>
80007be2:	30 40       	mov	r0,4
80007be4:	c0 68       	rjmp	80007bf0 <get_arg+0x17c>
80007be6:	30 30       	mov	r0,3
80007be8:	c0 48       	rjmp	80007bf0 <get_arg+0x17c>
80007bea:	30 10       	mov	r0,1
80007bec:	c0 28       	rjmp	80007bf0 <get_arg+0x17c>
80007bee:	30 00       	mov	r0,0
80007bf0:	40 3b       	lddsp	r11,sp[0xc]
80007bf2:	5b fb       	cp.w	r11,-1
80007bf4:	c0 40       	breq	80007bfc <get_arg+0x188>
80007bf6:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80007bfa:	c7 08       	rjmp	80007cda <get_arg+0x266>
80007bfc:	58 60       	cp.w	r0,6
80007bfe:	e0 8b 00 6e 	brhi	80007cda <get_arg+0x266>
80007c02:	6c 0a       	ld.w	r10,r6[0x0]
80007c04:	ea cc ff ff 	sub	r12,r5,-1
80007c08:	fe ce b3 d0 	sub	lr,pc,-19504
80007c0c:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80007c10:	f4 cb ff f8 	sub	r11,r10,-8
80007c14:	8d 0b       	st.w	r6[0x0],r11
80007c16:	f4 ea 00 00 	ld.d	r10,r10[0]
80007c1a:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80007c1e:	c0 f8       	rjmp	80007c3c <get_arg+0x1c8>
80007c20:	f4 cb ff fc 	sub	r11,r10,-4
80007c24:	8d 0b       	st.w	r6[0x0],r11
80007c26:	74 0a       	ld.w	r10,r10[0x0]
80007c28:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80007c2c:	c0 88       	rjmp	80007c3c <get_arg+0x1c8>
80007c2e:	f4 cb ff f8 	sub	r11,r10,-8
80007c32:	8d 0b       	st.w	r6[0x0],r11
80007c34:	f4 ea 00 00 	ld.d	r10,r10[0]
80007c38:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80007c3c:	0e 9b       	mov	r11,r7
80007c3e:	18 95       	mov	r5,r12
80007c40:	c4 e8       	rjmp	80007cdc <get_arg+0x268>
80007c42:	62 0a       	ld.w	r10,r1[0x0]
80007c44:	5b fa       	cp.w	r10,-1
80007c46:	c0 b1       	brne	80007c5c <get_arg+0x1e8>
80007c48:	50 19       	stdsp	sp[0x4],r9
80007c4a:	50 28       	stdsp	sp[0x8],r8
80007c4c:	e0 6a 00 80 	mov	r10,128
80007c50:	30 0b       	mov	r11,0
80007c52:	02 9c       	mov	r12,r1
80007c54:	fe b0 f9 fe 	rcall	80007050 <memset>
80007c58:	40 28       	lddsp	r8,sp[0x8]
80007c5a:	40 19       	lddsp	r9,sp[0x4]
80007c5c:	e4 cc 00 01 	sub	r12,r2,1
80007c60:	0e 9b       	mov	r11,r7
80007c62:	50 3c       	stdsp	sp[0xc],r12
80007c64:	f2 0c 0c 49 	max	r9,r9,r12
80007c68:	c3 a8       	rjmp	80007cdc <get_arg+0x268>
80007c6a:	62 0a       	ld.w	r10,r1[0x0]
80007c6c:	5b fa       	cp.w	r10,-1
80007c6e:	c0 b1       	brne	80007c84 <get_arg+0x210>
80007c70:	50 19       	stdsp	sp[0x4],r9
80007c72:	50 28       	stdsp	sp[0x8],r8
80007c74:	e0 6a 00 80 	mov	r10,128
80007c78:	30 0b       	mov	r11,0
80007c7a:	02 9c       	mov	r12,r1
80007c7c:	fe b0 f9 ea 	rcall	80007050 <memset>
80007c80:	40 28       	lddsp	r8,sp[0x8]
80007c82:	40 19       	lddsp	r9,sp[0x4]
80007c84:	20 12       	sub	r2,1
80007c86:	30 0a       	mov	r10,0
80007c88:	0e 9b       	mov	r11,r7
80007c8a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80007c8e:	f2 02 0c 49 	max	r9,r9,r2
80007c92:	c2 58       	rjmp	80007cdc <get_arg+0x268>
80007c94:	16 97       	mov	r7,r11
80007c96:	6c 0a       	ld.w	r10,r6[0x0]
80007c98:	f4 cb ff fc 	sub	r11,r10,-4
80007c9c:	8d 0b       	st.w	r6[0x0],r11
80007c9e:	74 0a       	ld.w	r10,r10[0x0]
80007ca0:	0e 9b       	mov	r11,r7
80007ca2:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80007ca6:	2f f5       	sub	r5,-1
80007ca8:	c1 a8       	rjmp	80007cdc <get_arg+0x268>
80007caa:	f4 c2 00 30 	sub	r2,r10,48
80007cae:	c0 68       	rjmp	80007cba <get_arg+0x246>
80007cb0:	e4 02 00 22 	add	r2,r2,r2<<0x2
80007cb4:	2f f7       	sub	r7,-1
80007cb6:	f4 02 00 12 	add	r2,r10,r2<<0x1
80007cba:	0f 8a       	ld.ub	r10,r7[0x0]
80007cbc:	58 0a       	cp.w	r10,0
80007cbe:	c0 e0       	breq	80007cda <get_arg+0x266>
80007cc0:	23 0a       	sub	r10,48
80007cc2:	58 9a       	cp.w	r10,9
80007cc4:	fe 98 ff f6 	brls	80007cb0 <get_arg+0x23c>
80007cc8:	c0 98       	rjmp	80007cda <get_arg+0x266>
80007cca:	2f f7       	sub	r7,-1
80007ccc:	0f 8a       	ld.ub	r10,r7[0x0]
80007cce:	58 0a       	cp.w	r10,0
80007cd0:	c0 50       	breq	80007cda <get_arg+0x266>
80007cd2:	23 0a       	sub	r10,48
80007cd4:	58 9a       	cp.w	r10,9
80007cd6:	fe 98 ff fa 	brls	80007cca <get_arg+0x256>
80007cda:	0e 9b       	mov	r11,r7
80007cdc:	40 7c       	lddsp	r12,sp[0x1c]
80007cde:	30 ba       	mov	r10,11
80007ce0:	f4 0c 18 00 	cp.b	r12,r10
80007ce4:	fe 91 fe f2 	brne	80007ac8 <get_arg+0x54>
80007ce8:	40 42       	lddsp	r2,sp[0x10]
80007cea:	17 8c       	ld.ub	r12,r11[0x0]
80007cec:	0a 32       	cp.w	r2,r5
80007cee:	5f 4a       	srge	r10
80007cf0:	f0 0c 18 00 	cp.b	r12,r8
80007cf4:	5f 1c       	srne	r12
80007cf6:	f9 ea 00 0a 	and	r10,r12,r10
80007cfa:	f0 0a 18 00 	cp.b	r10,r8
80007cfe:	fe 91 fe cf 	brne	80007a9c <get_arg+0x28>
80007d02:	30 08       	mov	r8,0
80007d04:	40 4e       	lddsp	lr,sp[0x10]
80007d06:	17 8a       	ld.ub	r10,r11[0x0]
80007d08:	e2 05 00 21 	add	r1,r1,r5<<0x2
80007d0c:	f0 0a 18 00 	cp.b	r10,r8
80007d10:	fc 09 17 10 	movne	r9,lr
80007d14:	e6 05 00 38 	add	r8,r3,r5<<0x3
80007d18:	06 9e       	mov	lr,r3
80007d1a:	c2 a8       	rjmp	80007d6e <get_arg+0x2fa>
80007d1c:	62 0a       	ld.w	r10,r1[0x0]
80007d1e:	58 3a       	cp.w	r10,3
80007d20:	c1 e0       	breq	80007d5c <get_arg+0x2e8>
80007d22:	e0 89 00 07 	brgt	80007d30 <get_arg+0x2bc>
80007d26:	58 1a       	cp.w	r10,1
80007d28:	c1 a0       	breq	80007d5c <get_arg+0x2e8>
80007d2a:	58 2a       	cp.w	r10,2
80007d2c:	c1 81       	brne	80007d5c <get_arg+0x2e8>
80007d2e:	c0 58       	rjmp	80007d38 <get_arg+0x2c4>
80007d30:	58 5a       	cp.w	r10,5
80007d32:	c0 c0       	breq	80007d4a <get_arg+0x2d6>
80007d34:	c0 b5       	brlt	80007d4a <get_arg+0x2d6>
80007d36:	c1 38       	rjmp	80007d5c <get_arg+0x2e8>
80007d38:	6c 0a       	ld.w	r10,r6[0x0]
80007d3a:	f4 cc ff f8 	sub	r12,r10,-8
80007d3e:	8d 0c       	st.w	r6[0x0],r12
80007d40:	f4 e2 00 00 	ld.d	r2,r10[0]
80007d44:	f0 e3 00 00 	st.d	r8[0],r2
80007d48:	c1 08       	rjmp	80007d68 <get_arg+0x2f4>
80007d4a:	6c 0a       	ld.w	r10,r6[0x0]
80007d4c:	f4 cc ff f8 	sub	r12,r10,-8
80007d50:	8d 0c       	st.w	r6[0x0],r12
80007d52:	f4 e2 00 00 	ld.d	r2,r10[0]
80007d56:	f0 e3 00 00 	st.d	r8[0],r2
80007d5a:	c0 78       	rjmp	80007d68 <get_arg+0x2f4>
80007d5c:	6c 0a       	ld.w	r10,r6[0x0]
80007d5e:	f4 cc ff fc 	sub	r12,r10,-4
80007d62:	8d 0c       	st.w	r6[0x0],r12
80007d64:	74 0a       	ld.w	r10,r10[0x0]
80007d66:	91 0a       	st.w	r8[0x0],r10
80007d68:	2f f5       	sub	r5,-1
80007d6a:	2f 88       	sub	r8,-8
80007d6c:	2f c1       	sub	r1,-4
80007d6e:	12 35       	cp.w	r5,r9
80007d70:	fe 9a ff d6 	brle	80007d1c <get_arg+0x2a8>
80007d74:	1c 93       	mov	r3,lr
80007d76:	40 52       	lddsp	r2,sp[0x14]
80007d78:	40 6e       	lddsp	lr,sp[0x18]
80007d7a:	85 05       	st.w	r2[0x0],r5
80007d7c:	9d 0b       	st.w	lr[0x0],r11
80007d7e:	40 4b       	lddsp	r11,sp[0x10]
80007d80:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80007d84:	2f 8d       	sub	sp,-32
80007d86:	d8 32       	popm	r0-r7,pc

80007d88 <__sprint_r>:
80007d88:	d4 21       	pushm	r4-r7,lr
80007d8a:	14 97       	mov	r7,r10
80007d8c:	74 28       	ld.w	r8,r10[0x8]
80007d8e:	58 08       	cp.w	r8,0
80007d90:	c0 41       	brne	80007d98 <__sprint_r+0x10>
80007d92:	95 18       	st.w	r10[0x4],r8
80007d94:	10 9c       	mov	r12,r8
80007d96:	d8 22       	popm	r4-r7,pc
80007d98:	e0 a0 17 8a 	rcall	8000acac <__sfvwrite_r>
80007d9c:	30 08       	mov	r8,0
80007d9e:	8f 18       	st.w	r7[0x4],r8
80007da0:	8f 28       	st.w	r7[0x8],r8
80007da2:	d8 22       	popm	r4-r7,pc

80007da4 <_vfprintf_r>:
80007da4:	d4 31       	pushm	r0-r7,lr
80007da6:	fa cd 06 bc 	sub	sp,sp,1724
80007daa:	51 09       	stdsp	sp[0x40],r9
80007dac:	16 91       	mov	r1,r11
80007dae:	14 97       	mov	r7,r10
80007db0:	18 95       	mov	r5,r12
80007db2:	e0 a0 18 cb 	rcall	8000af48 <_localeconv_r>
80007db6:	78 0c       	ld.w	r12,r12[0x0]
80007db8:	50 cc       	stdsp	sp[0x30],r12
80007dba:	58 05       	cp.w	r5,0
80007dbc:	c0 70       	breq	80007dca <_vfprintf_r+0x26>
80007dbe:	6a 68       	ld.w	r8,r5[0x18]
80007dc0:	58 08       	cp.w	r8,0
80007dc2:	c0 41       	brne	80007dca <_vfprintf_r+0x26>
80007dc4:	0a 9c       	mov	r12,r5
80007dc6:	fe b0 fc 73 	rcall	800076ac <__sinit>
80007dca:	fe c8 b6 12 	sub	r8,pc,-18926
80007dce:	10 31       	cp.w	r1,r8
80007dd0:	c0 31       	brne	80007dd6 <_vfprintf_r+0x32>
80007dd2:	6a 01       	ld.w	r1,r5[0x0]
80007dd4:	c0 c8       	rjmp	80007dec <_vfprintf_r+0x48>
80007dd6:	fe c8 b5 fe 	sub	r8,pc,-18946
80007dda:	10 31       	cp.w	r1,r8
80007ddc:	c0 31       	brne	80007de2 <_vfprintf_r+0x3e>
80007dde:	6a 11       	ld.w	r1,r5[0x4]
80007de0:	c0 68       	rjmp	80007dec <_vfprintf_r+0x48>
80007de2:	fe c8 b5 ea 	sub	r8,pc,-18966
80007de6:	10 31       	cp.w	r1,r8
80007de8:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80007dec:	82 68       	ld.sh	r8,r1[0xc]
80007dee:	ed b8 00 03 	bld	r8,0x3
80007df2:	c0 41       	brne	80007dfa <_vfprintf_r+0x56>
80007df4:	62 48       	ld.w	r8,r1[0x10]
80007df6:	58 08       	cp.w	r8,0
80007df8:	c0 71       	brne	80007e06 <_vfprintf_r+0x62>
80007dfa:	02 9b       	mov	r11,r1
80007dfc:	0a 9c       	mov	r12,r5
80007dfe:	e0 a0 0f 71 	rcall	80009ce0 <__swsetup_r>
80007e02:	e0 81 0f 54 	brne	80009caa <_vfprintf_r+0x1f06>
80007e06:	82 68       	ld.sh	r8,r1[0xc]
80007e08:	10 99       	mov	r9,r8
80007e0a:	e2 19 00 1a 	andl	r9,0x1a,COH
80007e0e:	58 a9       	cp.w	r9,10
80007e10:	c3 c1       	brne	80007e88 <_vfprintf_r+0xe4>
80007e12:	82 79       	ld.sh	r9,r1[0xe]
80007e14:	30 0a       	mov	r10,0
80007e16:	f4 09 19 00 	cp.h	r9,r10
80007e1a:	c3 75       	brlt	80007e88 <_vfprintf_r+0xe4>
80007e1c:	a1 d8       	cbr	r8,0x1
80007e1e:	fb 58 05 d0 	st.h	sp[1488],r8
80007e22:	62 88       	ld.w	r8,r1[0x20]
80007e24:	fb 48 05 e4 	st.w	sp[1508],r8
80007e28:	62 a8       	ld.w	r8,r1[0x28]
80007e2a:	fb 48 05 ec 	st.w	sp[1516],r8
80007e2e:	fa c8 ff bc 	sub	r8,sp,-68
80007e32:	fb 48 05 d4 	st.w	sp[1492],r8
80007e36:	fb 48 05 c4 	st.w	sp[1476],r8
80007e3a:	e0 68 04 00 	mov	r8,1024
80007e3e:	fb 48 05 d8 	st.w	sp[1496],r8
80007e42:	fb 48 05 cc 	st.w	sp[1484],r8
80007e46:	30 08       	mov	r8,0
80007e48:	fb 59 05 d2 	st.h	sp[1490],r9
80007e4c:	0e 9a       	mov	r10,r7
80007e4e:	41 09       	lddsp	r9,sp[0x40]
80007e50:	fa c7 fa 3c 	sub	r7,sp,-1476
80007e54:	fb 48 05 dc 	st.w	sp[1500],r8
80007e58:	0a 9c       	mov	r12,r5
80007e5a:	0e 9b       	mov	r11,r7
80007e5c:	ca 4f       	rcall	80007da4 <_vfprintf_r>
80007e5e:	50 bc       	stdsp	sp[0x2c],r12
80007e60:	c0 95       	brlt	80007e72 <_vfprintf_r+0xce>
80007e62:	0e 9b       	mov	r11,r7
80007e64:	0a 9c       	mov	r12,r5
80007e66:	e0 a0 16 9b 	rcall	8000ab9c <_fflush_r>
80007e6a:	40 be       	lddsp	lr,sp[0x2c]
80007e6c:	f9 be 01 ff 	movne	lr,-1
80007e70:	50 be       	stdsp	sp[0x2c],lr
80007e72:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80007e76:	ed b8 00 06 	bld	r8,0x6
80007e7a:	e0 81 0f 1a 	brne	80009cae <_vfprintf_r+0x1f0a>
80007e7e:	82 68       	ld.sh	r8,r1[0xc]
80007e80:	a7 a8       	sbr	r8,0x6
80007e82:	a2 68       	st.h	r1[0xc],r8
80007e84:	e0 8f 0f 15 	bral	80009cae <_vfprintf_r+0x1f0a>
80007e88:	30 08       	mov	r8,0
80007e8a:	fb 48 06 b4 	st.w	sp[1716],r8
80007e8e:	fb 48 06 90 	st.w	sp[1680],r8
80007e92:	fb 48 06 8c 	st.w	sp[1676],r8
80007e96:	fb 48 06 b0 	st.w	sp[1712],r8
80007e9a:	30 08       	mov	r8,0
80007e9c:	30 09       	mov	r9,0
80007e9e:	50 a7       	stdsp	sp[0x28],r7
80007ea0:	50 78       	stdsp	sp[0x1c],r8
80007ea2:	fa c3 f9 e0 	sub	r3,sp,-1568
80007ea6:	3f f8       	mov	r8,-1
80007ea8:	50 59       	stdsp	sp[0x14],r9
80007eaa:	fb 43 06 88 	st.w	sp[1672],r3
80007eae:	fb 48 05 44 	st.w	sp[1348],r8
80007eb2:	12 9c       	mov	r12,r9
80007eb4:	50 69       	stdsp	sp[0x18],r9
80007eb6:	50 d9       	stdsp	sp[0x34],r9
80007eb8:	50 e9       	stdsp	sp[0x38],r9
80007eba:	50 b9       	stdsp	sp[0x2c],r9
80007ebc:	12 97       	mov	r7,r9
80007ebe:	0a 94       	mov	r4,r5
80007ec0:	40 a2       	lddsp	r2,sp[0x28]
80007ec2:	32 5a       	mov	r10,37
80007ec4:	30 08       	mov	r8,0
80007ec6:	c0 28       	rjmp	80007eca <_vfprintf_r+0x126>
80007ec8:	2f f2       	sub	r2,-1
80007eca:	05 89       	ld.ub	r9,r2[0x0]
80007ecc:	f0 09 18 00 	cp.b	r9,r8
80007ed0:	5f 1b       	srne	r11
80007ed2:	f4 09 18 00 	cp.b	r9,r10
80007ed6:	5f 19       	srne	r9
80007ed8:	f3 eb 00 0b 	and	r11,r9,r11
80007edc:	f0 0b 18 00 	cp.b	r11,r8
80007ee0:	cf 41       	brne	80007ec8 <_vfprintf_r+0x124>
80007ee2:	40 ab       	lddsp	r11,sp[0x28]
80007ee4:	e4 0b 01 06 	sub	r6,r2,r11
80007ee8:	c1 e0       	breq	80007f24 <_vfprintf_r+0x180>
80007eea:	fa f8 06 90 	ld.w	r8,sp[1680]
80007eee:	0c 08       	add	r8,r6
80007ef0:	87 0b       	st.w	r3[0x0],r11
80007ef2:	fb 48 06 90 	st.w	sp[1680],r8
80007ef6:	87 16       	st.w	r3[0x4],r6
80007ef8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80007efc:	2f f8       	sub	r8,-1
80007efe:	fb 48 06 8c 	st.w	sp[1676],r8
80007f02:	58 78       	cp.w	r8,7
80007f04:	e0 89 00 04 	brgt	80007f0c <_vfprintf_r+0x168>
80007f08:	2f 83       	sub	r3,-8
80007f0a:	c0 a8       	rjmp	80007f1e <_vfprintf_r+0x17a>
80007f0c:	fa ca f9 78 	sub	r10,sp,-1672
80007f10:	02 9b       	mov	r11,r1
80007f12:	08 9c       	mov	r12,r4
80007f14:	c3 af       	rcall	80007d88 <__sprint_r>
80007f16:	e0 81 0e c6 	brne	80009ca2 <_vfprintf_r+0x1efe>
80007f1a:	fa c3 f9 e0 	sub	r3,sp,-1568
80007f1e:	40 ba       	lddsp	r10,sp[0x2c]
80007f20:	0c 0a       	add	r10,r6
80007f22:	50 ba       	stdsp	sp[0x2c],r10
80007f24:	05 89       	ld.ub	r9,r2[0x0]
80007f26:	30 08       	mov	r8,0
80007f28:	f0 09 18 00 	cp.b	r9,r8
80007f2c:	e0 80 0e aa 	breq	80009c80 <_vfprintf_r+0x1edc>
80007f30:	30 09       	mov	r9,0
80007f32:	fb 68 06 bb 	st.b	sp[1723],r8
80007f36:	0e 96       	mov	r6,r7
80007f38:	e4 c8 ff ff 	sub	r8,r2,-1
80007f3c:	3f fe       	mov	lr,-1
80007f3e:	50 93       	stdsp	sp[0x24],r3
80007f40:	50 41       	stdsp	sp[0x10],r1
80007f42:	0e 93       	mov	r3,r7
80007f44:	04 91       	mov	r1,r2
80007f46:	50 89       	stdsp	sp[0x20],r9
80007f48:	50 a8       	stdsp	sp[0x28],r8
80007f4a:	50 2e       	stdsp	sp[0x8],lr
80007f4c:	50 39       	stdsp	sp[0xc],r9
80007f4e:	12 95       	mov	r5,r9
80007f50:	12 90       	mov	r0,r9
80007f52:	10 97       	mov	r7,r8
80007f54:	08 92       	mov	r2,r4
80007f56:	c0 78       	rjmp	80007f64 <_vfprintf_r+0x1c0>
80007f58:	3f fc       	mov	r12,-1
80007f5a:	08 97       	mov	r7,r4
80007f5c:	50 2c       	stdsp	sp[0x8],r12
80007f5e:	c0 38       	rjmp	80007f64 <_vfprintf_r+0x1c0>
80007f60:	30 0b       	mov	r11,0
80007f62:	50 3b       	stdsp	sp[0xc],r11
80007f64:	0f 38       	ld.ub	r8,r7++
80007f66:	c0 28       	rjmp	80007f6a <_vfprintf_r+0x1c6>
80007f68:	12 90       	mov	r0,r9
80007f6a:	f0 c9 00 20 	sub	r9,r8,32
80007f6e:	e0 49 00 58 	cp.w	r9,88
80007f72:	e0 8b 0a 30 	brhi	800093d2 <_vfprintf_r+0x162e>
80007f76:	fe ca b7 22 	sub	r10,pc,-18654
80007f7a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80007f7e:	50 a7       	stdsp	sp[0x28],r7
80007f80:	50 80       	stdsp	sp[0x20],r0
80007f82:	0c 97       	mov	r7,r6
80007f84:	04 94       	mov	r4,r2
80007f86:	06 96       	mov	r6,r3
80007f88:	02 92       	mov	r2,r1
80007f8a:	fe c9 b4 fa 	sub	r9,pc,-19206
80007f8e:	40 93       	lddsp	r3,sp[0x24]
80007f90:	10 90       	mov	r0,r8
80007f92:	40 41       	lddsp	r1,sp[0x10]
80007f94:	50 d9       	stdsp	sp[0x34],r9
80007f96:	e0 8f 08 8e 	bral	800090b2 <_vfprintf_r+0x130e>
80007f9a:	30 08       	mov	r8,0
80007f9c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80007fa0:	f0 09 18 00 	cp.b	r9,r8
80007fa4:	ce 01       	brne	80007f64 <_vfprintf_r+0x1c0>
80007fa6:	32 08       	mov	r8,32
80007fa8:	c6 e8       	rjmp	80008084 <_vfprintf_r+0x2e0>
80007faa:	a1 a5       	sbr	r5,0x0
80007fac:	cd cb       	rjmp	80007f64 <_vfprintf_r+0x1c0>
80007fae:	0f 89       	ld.ub	r9,r7[0x0]
80007fb0:	f2 c8 00 30 	sub	r8,r9,48
80007fb4:	58 98       	cp.w	r8,9
80007fb6:	e0 8b 00 1d 	brhi	80007ff0 <_vfprintf_r+0x24c>
80007fba:	ee c8 ff ff 	sub	r8,r7,-1
80007fbe:	30 0b       	mov	r11,0
80007fc0:	23 09       	sub	r9,48
80007fc2:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80007fc6:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80007fca:	11 39       	ld.ub	r9,r8++
80007fcc:	f2 ca 00 30 	sub	r10,r9,48
80007fd0:	58 9a       	cp.w	r10,9
80007fd2:	fe 98 ff f7 	brls	80007fc0 <_vfprintf_r+0x21c>
80007fd6:	e0 49 00 24 	cp.w	r9,36
80007fda:	cc 31       	brne	80007f60 <_vfprintf_r+0x1bc>
80007fdc:	e0 4b 00 20 	cp.w	r11,32
80007fe0:	e0 89 0e 60 	brgt	80009ca0 <_vfprintf_r+0x1efc>
80007fe4:	20 1b       	sub	r11,1
80007fe6:	fa f9 06 b4 	ld.w	r9,sp[1716]
80007fea:	12 3b       	cp.w	r11,r9
80007fec:	c0 95       	brlt	80007ffe <_vfprintf_r+0x25a>
80007fee:	c1 08       	rjmp	8000800e <_vfprintf_r+0x26a>
80007ff0:	fa f9 06 b4 	ld.w	r9,sp[1716]
80007ff4:	ec ca ff ff 	sub	r10,r6,-1
80007ff8:	12 36       	cp.w	r6,r9
80007ffa:	c1 f5       	brlt	80008038 <_vfprintf_r+0x294>
80007ffc:	c2 68       	rjmp	80008048 <_vfprintf_r+0x2a4>
80007ffe:	fa ce f9 44 	sub	lr,sp,-1724
80008002:	10 97       	mov	r7,r8
80008004:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80008008:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000800c:	c3 58       	rjmp	80008076 <_vfprintf_r+0x2d2>
8000800e:	10 97       	mov	r7,r8
80008010:	fa c8 f9 50 	sub	r8,sp,-1712
80008014:	1a d8       	st.w	--sp,r8
80008016:	fa c8 fa b8 	sub	r8,sp,-1352
8000801a:	1a d8       	st.w	--sp,r8
8000801c:	fa c8 fb b4 	sub	r8,sp,-1100
80008020:	02 9a       	mov	r10,r1
80008022:	1a d8       	st.w	--sp,r8
80008024:	04 9c       	mov	r12,r2
80008026:	fa c8 f9 40 	sub	r8,sp,-1728
8000802a:	fa c9 ff b4 	sub	r9,sp,-76
8000802e:	fe b0 fd 23 	rcall	80007a74 <get_arg>
80008032:	2f dd       	sub	sp,-12
80008034:	78 00       	ld.w	r0,r12[0x0]
80008036:	c2 08       	rjmp	80008076 <_vfprintf_r+0x2d2>
80008038:	fa cc f9 44 	sub	r12,sp,-1724
8000803c:	14 96       	mov	r6,r10
8000803e:	f8 03 00 38 	add	r8,r12,r3<<0x3
80008042:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80008046:	c1 88       	rjmp	80008076 <_vfprintf_r+0x2d2>
80008048:	41 08       	lddsp	r8,sp[0x40]
8000804a:	59 f9       	cp.w	r9,31
8000804c:	e0 89 00 11 	brgt	8000806e <_vfprintf_r+0x2ca>
80008050:	f0 cb ff fc 	sub	r11,r8,-4
80008054:	51 0b       	stdsp	sp[0x40],r11
80008056:	70 00       	ld.w	r0,r8[0x0]
80008058:	fa cb f9 44 	sub	r11,sp,-1724
8000805c:	f6 09 00 38 	add	r8,r11,r9<<0x3
80008060:	f1 40 fd 88 	st.w	r8[-632],r0
80008064:	2f f9       	sub	r9,-1
80008066:	14 96       	mov	r6,r10
80008068:	fb 49 06 b4 	st.w	sp[1716],r9
8000806c:	c0 58       	rjmp	80008076 <_vfprintf_r+0x2d2>
8000806e:	70 00       	ld.w	r0,r8[0x0]
80008070:	14 96       	mov	r6,r10
80008072:	2f c8       	sub	r8,-4
80008074:	51 08       	stdsp	sp[0x40],r8
80008076:	58 00       	cp.w	r0,0
80008078:	fe 94 ff 76 	brge	80007f64 <_vfprintf_r+0x1c0>
8000807c:	5c 30       	neg	r0
8000807e:	a3 a5       	sbr	r5,0x2
80008080:	c7 2b       	rjmp	80007f64 <_vfprintf_r+0x1c0>
80008082:	32 b8       	mov	r8,43
80008084:	fb 68 06 bb 	st.b	sp[1723],r8
80008088:	c6 eb       	rjmp	80007f64 <_vfprintf_r+0x1c0>
8000808a:	0f 38       	ld.ub	r8,r7++
8000808c:	e0 48 00 2a 	cp.w	r8,42
80008090:	c0 30       	breq	80008096 <_vfprintf_r+0x2f2>
80008092:	30 09       	mov	r9,0
80008094:	c7 98       	rjmp	80008186 <_vfprintf_r+0x3e2>
80008096:	0f 88       	ld.ub	r8,r7[0x0]
80008098:	f0 c9 00 30 	sub	r9,r8,48
8000809c:	58 99       	cp.w	r9,9
8000809e:	e0 8b 00 1f 	brhi	800080dc <_vfprintf_r+0x338>
800080a2:	ee c4 ff ff 	sub	r4,r7,-1
800080a6:	30 0b       	mov	r11,0
800080a8:	23 08       	sub	r8,48
800080aa:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800080ae:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
800080b2:	09 38       	ld.ub	r8,r4++
800080b4:	f0 c9 00 30 	sub	r9,r8,48
800080b8:	58 99       	cp.w	r9,9
800080ba:	fe 98 ff f7 	brls	800080a8 <_vfprintf_r+0x304>
800080be:	e0 48 00 24 	cp.w	r8,36
800080c2:	fe 91 ff 4f 	brne	80007f60 <_vfprintf_r+0x1bc>
800080c6:	e0 4b 00 20 	cp.w	r11,32
800080ca:	e0 89 0d eb 	brgt	80009ca0 <_vfprintf_r+0x1efc>
800080ce:	20 1b       	sub	r11,1
800080d0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800080d4:	10 3b       	cp.w	r11,r8
800080d6:	c0 a5       	brlt	800080ea <_vfprintf_r+0x346>
800080d8:	c1 18       	rjmp	800080fa <_vfprintf_r+0x356>
800080da:	d7 03       	nop
800080dc:	fa fa 06 b4 	ld.w	r10,sp[1716]
800080e0:	ec c9 ff ff 	sub	r9,r6,-1
800080e4:	14 36       	cp.w	r6,r10
800080e6:	c1 f5       	brlt	80008124 <_vfprintf_r+0x380>
800080e8:	c2 88       	rjmp	80008138 <_vfprintf_r+0x394>
800080ea:	fa ca f9 44 	sub	r10,sp,-1724
800080ee:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
800080f2:	f6 fb fd 88 	ld.w	r11,r11[-632]
800080f6:	50 2b       	stdsp	sp[0x8],r11
800080f8:	c3 c8       	rjmp	80008170 <_vfprintf_r+0x3cc>
800080fa:	fa c8 f9 50 	sub	r8,sp,-1712
800080fe:	1a d8       	st.w	--sp,r8
80008100:	fa c8 fa b8 	sub	r8,sp,-1352
80008104:	1a d8       	st.w	--sp,r8
80008106:	fa c8 fb b4 	sub	r8,sp,-1100
8000810a:	02 9a       	mov	r10,r1
8000810c:	1a d8       	st.w	--sp,r8
8000810e:	04 9c       	mov	r12,r2
80008110:	fa c8 f9 40 	sub	r8,sp,-1728
80008114:	fa c9 ff b4 	sub	r9,sp,-76
80008118:	fe b0 fc ae 	rcall	80007a74 <get_arg>
8000811c:	2f dd       	sub	sp,-12
8000811e:	78 0c       	ld.w	r12,r12[0x0]
80008120:	50 2c       	stdsp	sp[0x8],r12
80008122:	c2 78       	rjmp	80008170 <_vfprintf_r+0x3cc>
80008124:	12 96       	mov	r6,r9
80008126:	0e 94       	mov	r4,r7
80008128:	fa c9 f9 44 	sub	r9,sp,-1724
8000812c:	f2 03 00 38 	add	r8,r9,r3<<0x3
80008130:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80008134:	50 28       	stdsp	sp[0x8],r8
80008136:	c1 d8       	rjmp	80008170 <_vfprintf_r+0x3cc>
80008138:	41 08       	lddsp	r8,sp[0x40]
8000813a:	59 fa       	cp.w	r10,31
8000813c:	e0 89 00 14 	brgt	80008164 <_vfprintf_r+0x3c0>
80008140:	f0 cb ff fc 	sub	r11,r8,-4
80008144:	70 08       	ld.w	r8,r8[0x0]
80008146:	51 0b       	stdsp	sp[0x40],r11
80008148:	50 28       	stdsp	sp[0x8],r8
8000814a:	fa c6 f9 44 	sub	r6,sp,-1724
8000814e:	40 2e       	lddsp	lr,sp[0x8]
80008150:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80008154:	f1 4e fd 88 	st.w	r8[-632],lr
80008158:	2f fa       	sub	r10,-1
8000815a:	0e 94       	mov	r4,r7
8000815c:	fb 4a 06 b4 	st.w	sp[1716],r10
80008160:	12 96       	mov	r6,r9
80008162:	c0 78       	rjmp	80008170 <_vfprintf_r+0x3cc>
80008164:	70 0c       	ld.w	r12,r8[0x0]
80008166:	0e 94       	mov	r4,r7
80008168:	2f c8       	sub	r8,-4
8000816a:	50 2c       	stdsp	sp[0x8],r12
8000816c:	12 96       	mov	r6,r9
8000816e:	51 08       	stdsp	sp[0x40],r8
80008170:	40 2b       	lddsp	r11,sp[0x8]
80008172:	58 0b       	cp.w	r11,0
80008174:	fe 95 fe f2 	brlt	80007f58 <_vfprintf_r+0x1b4>
80008178:	08 97       	mov	r7,r4
8000817a:	cf 5a       	rjmp	80007f64 <_vfprintf_r+0x1c0>
8000817c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80008180:	0f 38       	ld.ub	r8,r7++
80008182:	f4 09 00 19 	add	r9,r10,r9<<0x1
80008186:	f0 ca 00 30 	sub	r10,r8,48
8000818a:	58 9a       	cp.w	r10,9
8000818c:	fe 98 ff f8 	brls	8000817c <_vfprintf_r+0x3d8>
80008190:	3f fa       	mov	r10,-1
80008192:	f2 0a 0c 49 	max	r9,r9,r10
80008196:	50 29       	stdsp	sp[0x8],r9
80008198:	ce 9a       	rjmp	80007f6a <_vfprintf_r+0x1c6>
8000819a:	a7 b5       	sbr	r5,0x7
8000819c:	ce 4a       	rjmp	80007f64 <_vfprintf_r+0x1c0>
8000819e:	30 09       	mov	r9,0
800081a0:	23 08       	sub	r8,48
800081a2:	f2 09 00 29 	add	r9,r9,r9<<0x2
800081a6:	f0 09 00 19 	add	r9,r8,r9<<0x1
800081aa:	0f 38       	ld.ub	r8,r7++
800081ac:	f0 ca 00 30 	sub	r10,r8,48
800081b0:	58 9a       	cp.w	r10,9
800081b2:	fe 98 ff f7 	brls	800081a0 <_vfprintf_r+0x3fc>
800081b6:	e0 48 00 24 	cp.w	r8,36
800081ba:	fe 91 fe d7 	brne	80007f68 <_vfprintf_r+0x1c4>
800081be:	e0 49 00 20 	cp.w	r9,32
800081c2:	e0 89 0d 6f 	brgt	80009ca0 <_vfprintf_r+0x1efc>
800081c6:	f2 c3 00 01 	sub	r3,r9,1
800081ca:	30 19       	mov	r9,1
800081cc:	50 39       	stdsp	sp[0xc],r9
800081ce:	cc ba       	rjmp	80007f64 <_vfprintf_r+0x1c0>
800081d0:	a3 b5       	sbr	r5,0x3
800081d2:	cc 9a       	rjmp	80007f64 <_vfprintf_r+0x1c0>
800081d4:	a7 a5       	sbr	r5,0x6
800081d6:	cc 7a       	rjmp	80007f64 <_vfprintf_r+0x1c0>
800081d8:	0a 98       	mov	r8,r5
800081da:	a5 b5       	sbr	r5,0x5
800081dc:	a5 a8       	sbr	r8,0x4
800081de:	0f 89       	ld.ub	r9,r7[0x0]
800081e0:	36 ce       	mov	lr,108
800081e2:	fc 09 18 00 	cp.b	r9,lr
800081e6:	f7 b7 00 ff 	subeq	r7,-1
800081ea:	f0 05 17 10 	movne	r5,r8
800081ee:	cb ba       	rjmp	80007f64 <_vfprintf_r+0x1c0>
800081f0:	a5 b5       	sbr	r5,0x5
800081f2:	cb 9a       	rjmp	80007f64 <_vfprintf_r+0x1c0>
800081f4:	50 a7       	stdsp	sp[0x28],r7
800081f6:	50 80       	stdsp	sp[0x20],r0
800081f8:	0c 97       	mov	r7,r6
800081fa:	10 90       	mov	r0,r8
800081fc:	06 96       	mov	r6,r3
800081fe:	04 94       	mov	r4,r2
80008200:	40 93       	lddsp	r3,sp[0x24]
80008202:	02 92       	mov	r2,r1
80008204:	0e 99       	mov	r9,r7
80008206:	40 41       	lddsp	r1,sp[0x10]
80008208:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000820c:	40 3c       	lddsp	r12,sp[0xc]
8000820e:	58 0c       	cp.w	r12,0
80008210:	c1 d0       	breq	8000824a <_vfprintf_r+0x4a6>
80008212:	10 36       	cp.w	r6,r8
80008214:	c0 64       	brge	80008220 <_vfprintf_r+0x47c>
80008216:	fa cb f9 44 	sub	r11,sp,-1724
8000821a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000821e:	c1 d8       	rjmp	80008258 <_vfprintf_r+0x4b4>
80008220:	fa c8 f9 50 	sub	r8,sp,-1712
80008224:	1a d8       	st.w	--sp,r8
80008226:	fa c8 fa b8 	sub	r8,sp,-1352
8000822a:	1a d8       	st.w	--sp,r8
8000822c:	fa c8 fb b4 	sub	r8,sp,-1100
80008230:	1a d8       	st.w	--sp,r8
80008232:	fa c8 f9 40 	sub	r8,sp,-1728
80008236:	fa c9 ff b4 	sub	r9,sp,-76
8000823a:	04 9a       	mov	r10,r2
8000823c:	0c 9b       	mov	r11,r6
8000823e:	08 9c       	mov	r12,r4
80008240:	fe b0 fc 1a 	rcall	80007a74 <get_arg>
80008244:	2f dd       	sub	sp,-12
80008246:	19 b8       	ld.ub	r8,r12[0x3]
80008248:	c2 28       	rjmp	8000828c <_vfprintf_r+0x4e8>
8000824a:	2f f7       	sub	r7,-1
8000824c:	10 39       	cp.w	r9,r8
8000824e:	c0 84       	brge	8000825e <_vfprintf_r+0x4ba>
80008250:	fa ca f9 44 	sub	r10,sp,-1724
80008254:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008258:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000825c:	c1 88       	rjmp	8000828c <_vfprintf_r+0x4e8>
8000825e:	41 09       	lddsp	r9,sp[0x40]
80008260:	59 f8       	cp.w	r8,31
80008262:	e0 89 00 12 	brgt	80008286 <_vfprintf_r+0x4e2>
80008266:	f2 ca ff fc 	sub	r10,r9,-4
8000826a:	51 0a       	stdsp	sp[0x40],r10
8000826c:	72 09       	ld.w	r9,r9[0x0]
8000826e:	fa c6 f9 44 	sub	r6,sp,-1724
80008272:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80008276:	2f f8       	sub	r8,-1
80008278:	f5 49 fd 88 	st.w	r10[-632],r9
8000827c:	fb 48 06 b4 	st.w	sp[1716],r8
80008280:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80008284:	c0 48       	rjmp	8000828c <_vfprintf_r+0x4e8>
80008286:	13 b8       	ld.ub	r8,r9[0x3]
80008288:	2f c9       	sub	r9,-4
8000828a:	51 09       	stdsp	sp[0x40],r9
8000828c:	fb 68 06 60 	st.b	sp[1632],r8
80008290:	30 0e       	mov	lr,0
80008292:	30 08       	mov	r8,0
80008294:	30 12       	mov	r2,1
80008296:	fb 68 06 bb 	st.b	sp[1723],r8
8000829a:	50 2e       	stdsp	sp[0x8],lr
8000829c:	e0 8f 08 ad 	bral	800093f6 <_vfprintf_r+0x1652>
800082a0:	50 a7       	stdsp	sp[0x28],r7
800082a2:	50 80       	stdsp	sp[0x20],r0
800082a4:	0c 97       	mov	r7,r6
800082a6:	04 94       	mov	r4,r2
800082a8:	06 96       	mov	r6,r3
800082aa:	02 92       	mov	r2,r1
800082ac:	40 93       	lddsp	r3,sp[0x24]
800082ae:	10 90       	mov	r0,r8
800082b0:	40 41       	lddsp	r1,sp[0x10]
800082b2:	a5 a5       	sbr	r5,0x4
800082b4:	c0 a8       	rjmp	800082c8 <_vfprintf_r+0x524>
800082b6:	50 a7       	stdsp	sp[0x28],r7
800082b8:	50 80       	stdsp	sp[0x20],r0
800082ba:	0c 97       	mov	r7,r6
800082bc:	04 94       	mov	r4,r2
800082be:	06 96       	mov	r6,r3
800082c0:	02 92       	mov	r2,r1
800082c2:	40 93       	lddsp	r3,sp[0x24]
800082c4:	10 90       	mov	r0,r8
800082c6:	40 41       	lddsp	r1,sp[0x10]
800082c8:	ed b5 00 05 	bld	r5,0x5
800082cc:	c5 11       	brne	8000836e <_vfprintf_r+0x5ca>
800082ce:	fa f8 06 b4 	ld.w	r8,sp[1716]
800082d2:	40 3c       	lddsp	r12,sp[0xc]
800082d4:	58 0c       	cp.w	r12,0
800082d6:	c1 e0       	breq	80008312 <_vfprintf_r+0x56e>
800082d8:	10 36       	cp.w	r6,r8
800082da:	c0 64       	brge	800082e6 <_vfprintf_r+0x542>
800082dc:	fa cb f9 44 	sub	r11,sp,-1724
800082e0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800082e4:	c2 08       	rjmp	80008324 <_vfprintf_r+0x580>
800082e6:	fa c8 f9 50 	sub	r8,sp,-1712
800082ea:	1a d8       	st.w	--sp,r8
800082ec:	fa c8 fa b8 	sub	r8,sp,-1352
800082f0:	0c 9b       	mov	r11,r6
800082f2:	1a d8       	st.w	--sp,r8
800082f4:	fa c8 fb b4 	sub	r8,sp,-1100
800082f8:	1a d8       	st.w	--sp,r8
800082fa:	fa c9 ff b4 	sub	r9,sp,-76
800082fe:	fa c8 f9 40 	sub	r8,sp,-1728
80008302:	04 9a       	mov	r10,r2
80008304:	08 9c       	mov	r12,r4
80008306:	fe b0 fb b7 	rcall	80007a74 <get_arg>
8000830a:	2f dd       	sub	sp,-12
8000830c:	78 1b       	ld.w	r11,r12[0x4]
8000830e:	78 09       	ld.w	r9,r12[0x0]
80008310:	c2 b8       	rjmp	80008366 <_vfprintf_r+0x5c2>
80008312:	ee ca ff ff 	sub	r10,r7,-1
80008316:	10 37       	cp.w	r7,r8
80008318:	c0 b4       	brge	8000832e <_vfprintf_r+0x58a>
8000831a:	fa c9 f9 44 	sub	r9,sp,-1724
8000831e:	14 97       	mov	r7,r10
80008320:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008324:	ec fb fd 8c 	ld.w	r11,r6[-628]
80008328:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000832c:	c1 d8       	rjmp	80008366 <_vfprintf_r+0x5c2>
8000832e:	41 09       	lddsp	r9,sp[0x40]
80008330:	59 f8       	cp.w	r8,31
80008332:	e0 89 00 14 	brgt	8000835a <_vfprintf_r+0x5b6>
80008336:	f2 cb ff f8 	sub	r11,r9,-8
8000833a:	51 0b       	stdsp	sp[0x40],r11
8000833c:	fa c6 f9 44 	sub	r6,sp,-1724
80008340:	72 1b       	ld.w	r11,r9[0x4]
80008342:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80008346:	72 09       	ld.w	r9,r9[0x0]
80008348:	f9 4b fd 8c 	st.w	r12[-628],r11
8000834c:	f9 49 fd 88 	st.w	r12[-632],r9
80008350:	2f f8       	sub	r8,-1
80008352:	14 97       	mov	r7,r10
80008354:	fb 48 06 b4 	st.w	sp[1716],r8
80008358:	c0 78       	rjmp	80008366 <_vfprintf_r+0x5c2>
8000835a:	f2 c8 ff f8 	sub	r8,r9,-8
8000835e:	72 1b       	ld.w	r11,r9[0x4]
80008360:	14 97       	mov	r7,r10
80008362:	51 08       	stdsp	sp[0x40],r8
80008364:	72 09       	ld.w	r9,r9[0x0]
80008366:	16 98       	mov	r8,r11
80008368:	fa e9 00 00 	st.d	sp[0],r8
8000836c:	ca e8       	rjmp	800084c8 <_vfprintf_r+0x724>
8000836e:	ed b5 00 04 	bld	r5,0x4
80008372:	c1 71       	brne	800083a0 <_vfprintf_r+0x5fc>
80008374:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008378:	40 3e       	lddsp	lr,sp[0xc]
8000837a:	58 0e       	cp.w	lr,0
8000837c:	c0 80       	breq	8000838c <_vfprintf_r+0x5e8>
8000837e:	10 36       	cp.w	r6,r8
80008380:	c6 94       	brge	80008452 <_vfprintf_r+0x6ae>
80008382:	fa cc f9 44 	sub	r12,sp,-1724
80008386:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000838a:	c8 28       	rjmp	8000848e <_vfprintf_r+0x6ea>
8000838c:	ee ca ff ff 	sub	r10,r7,-1
80008390:	10 37       	cp.w	r7,r8
80008392:	e0 84 00 81 	brge	80008494 <_vfprintf_r+0x6f0>
80008396:	fa cb f9 44 	sub	r11,sp,-1724
8000839a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000839e:	c7 78       	rjmp	8000848c <_vfprintf_r+0x6e8>
800083a0:	ed b5 00 06 	bld	r5,0x6
800083a4:	c4 b1       	brne	8000843a <_vfprintf_r+0x696>
800083a6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800083aa:	40 3c       	lddsp	r12,sp[0xc]
800083ac:	58 0c       	cp.w	r12,0
800083ae:	c1 d0       	breq	800083e8 <_vfprintf_r+0x644>
800083b0:	10 36       	cp.w	r6,r8
800083b2:	c0 64       	brge	800083be <_vfprintf_r+0x61a>
800083b4:	fa cb f9 44 	sub	r11,sp,-1724
800083b8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800083bc:	c1 f8       	rjmp	800083fa <_vfprintf_r+0x656>
800083be:	fa c8 f9 50 	sub	r8,sp,-1712
800083c2:	1a d8       	st.w	--sp,r8
800083c4:	fa c8 fa b8 	sub	r8,sp,-1352
800083c8:	1a d8       	st.w	--sp,r8
800083ca:	fa c8 fb b4 	sub	r8,sp,-1100
800083ce:	1a d8       	st.w	--sp,r8
800083d0:	fa c8 f9 40 	sub	r8,sp,-1728
800083d4:	fa c9 ff b4 	sub	r9,sp,-76
800083d8:	04 9a       	mov	r10,r2
800083da:	0c 9b       	mov	r11,r6
800083dc:	08 9c       	mov	r12,r4
800083de:	fe b0 fb 4b 	rcall	80007a74 <get_arg>
800083e2:	2f dd       	sub	sp,-12
800083e4:	98 18       	ld.sh	r8,r12[0x2]
800083e6:	c2 68       	rjmp	80008432 <_vfprintf_r+0x68e>
800083e8:	ee ca ff ff 	sub	r10,r7,-1
800083ec:	10 37       	cp.w	r7,r8
800083ee:	c0 94       	brge	80008400 <_vfprintf_r+0x65c>
800083f0:	fa c9 f9 44 	sub	r9,sp,-1724
800083f4:	14 97       	mov	r7,r10
800083f6:	f2 06 00 36 	add	r6,r9,r6<<0x3
800083fa:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800083fe:	c1 a8       	rjmp	80008432 <_vfprintf_r+0x68e>
80008400:	41 09       	lddsp	r9,sp[0x40]
80008402:	59 f8       	cp.w	r8,31
80008404:	e0 89 00 13 	brgt	8000842a <_vfprintf_r+0x686>
80008408:	f2 cb ff fc 	sub	r11,r9,-4
8000840c:	51 0b       	stdsp	sp[0x40],r11
8000840e:	72 09       	ld.w	r9,r9[0x0]
80008410:	fa c6 f9 44 	sub	r6,sp,-1724
80008414:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008418:	2f f8       	sub	r8,-1
8000841a:	f7 49 fd 88 	st.w	r11[-632],r9
8000841e:	fb 48 06 b4 	st.w	sp[1716],r8
80008422:	14 97       	mov	r7,r10
80008424:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008428:	c0 58       	rjmp	80008432 <_vfprintf_r+0x68e>
8000842a:	92 18       	ld.sh	r8,r9[0x2]
8000842c:	14 97       	mov	r7,r10
8000842e:	2f c9       	sub	r9,-4
80008430:	51 09       	stdsp	sp[0x40],r9
80008432:	50 18       	stdsp	sp[0x4],r8
80008434:	bf 58       	asr	r8,0x1f
80008436:	50 08       	stdsp	sp[0x0],r8
80008438:	c4 88       	rjmp	800084c8 <_vfprintf_r+0x724>
8000843a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000843e:	40 3c       	lddsp	r12,sp[0xc]
80008440:	58 0c       	cp.w	r12,0
80008442:	c1 d0       	breq	8000847c <_vfprintf_r+0x6d8>
80008444:	10 36       	cp.w	r6,r8
80008446:	c0 64       	brge	80008452 <_vfprintf_r+0x6ae>
80008448:	fa cb f9 44 	sub	r11,sp,-1724
8000844c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008450:	c1 f8       	rjmp	8000848e <_vfprintf_r+0x6ea>
80008452:	fa c8 f9 50 	sub	r8,sp,-1712
80008456:	1a d8       	st.w	--sp,r8
80008458:	fa c8 fa b8 	sub	r8,sp,-1352
8000845c:	0c 9b       	mov	r11,r6
8000845e:	1a d8       	st.w	--sp,r8
80008460:	fa c8 fb b4 	sub	r8,sp,-1100
80008464:	04 9a       	mov	r10,r2
80008466:	1a d8       	st.w	--sp,r8
80008468:	08 9c       	mov	r12,r4
8000846a:	fa c8 f9 40 	sub	r8,sp,-1728
8000846e:	fa c9 ff b4 	sub	r9,sp,-76
80008472:	fe b0 fb 01 	rcall	80007a74 <get_arg>
80008476:	2f dd       	sub	sp,-12
80008478:	78 0b       	ld.w	r11,r12[0x0]
8000847a:	c2 48       	rjmp	800084c2 <_vfprintf_r+0x71e>
8000847c:	ee ca ff ff 	sub	r10,r7,-1
80008480:	10 37       	cp.w	r7,r8
80008482:	c0 94       	brge	80008494 <_vfprintf_r+0x6f0>
80008484:	fa c9 f9 44 	sub	r9,sp,-1724
80008488:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000848c:	14 97       	mov	r7,r10
8000848e:	ec fb fd 88 	ld.w	r11,r6[-632]
80008492:	c1 88       	rjmp	800084c2 <_vfprintf_r+0x71e>
80008494:	41 09       	lddsp	r9,sp[0x40]
80008496:	59 f8       	cp.w	r8,31
80008498:	e0 89 00 11 	brgt	800084ba <_vfprintf_r+0x716>
8000849c:	f2 cb ff fc 	sub	r11,r9,-4
800084a0:	51 0b       	stdsp	sp[0x40],r11
800084a2:	fa c6 f9 44 	sub	r6,sp,-1724
800084a6:	72 0b       	ld.w	r11,r9[0x0]
800084a8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800084ac:	f3 4b fd 88 	st.w	r9[-632],r11
800084b0:	2f f8       	sub	r8,-1
800084b2:	14 97       	mov	r7,r10
800084b4:	fb 48 06 b4 	st.w	sp[1716],r8
800084b8:	c0 58       	rjmp	800084c2 <_vfprintf_r+0x71e>
800084ba:	72 0b       	ld.w	r11,r9[0x0]
800084bc:	14 97       	mov	r7,r10
800084be:	2f c9       	sub	r9,-4
800084c0:	51 09       	stdsp	sp[0x40],r9
800084c2:	50 1b       	stdsp	sp[0x4],r11
800084c4:	bf 5b       	asr	r11,0x1f
800084c6:	50 0b       	stdsp	sp[0x0],r11
800084c8:	fa ea 00 00 	ld.d	r10,sp[0]
800084cc:	58 0a       	cp.w	r10,0
800084ce:	5c 2b       	cpc	r11
800084d0:	c0 e4       	brge	800084ec <_vfprintf_r+0x748>
800084d2:	30 08       	mov	r8,0
800084d4:	fa ea 00 00 	ld.d	r10,sp[0]
800084d8:	30 09       	mov	r9,0
800084da:	f0 0a 01 0a 	sub	r10,r8,r10
800084de:	f2 0b 01 4b 	sbc	r11,r9,r11
800084e2:	32 d8       	mov	r8,45
800084e4:	fa eb 00 00 	st.d	sp[0],r10
800084e8:	fb 68 06 bb 	st.b	sp[1723],r8
800084ec:	30 18       	mov	r8,1
800084ee:	e0 8f 06 fa 	bral	800092e2 <_vfprintf_r+0x153e>
800084f2:	50 a7       	stdsp	sp[0x28],r7
800084f4:	50 80       	stdsp	sp[0x20],r0
800084f6:	0c 97       	mov	r7,r6
800084f8:	04 94       	mov	r4,r2
800084fa:	06 96       	mov	r6,r3
800084fc:	02 92       	mov	r2,r1
800084fe:	40 93       	lddsp	r3,sp[0x24]
80008500:	10 90       	mov	r0,r8
80008502:	40 41       	lddsp	r1,sp[0x10]
80008504:	0e 99       	mov	r9,r7
80008506:	ed b5 00 03 	bld	r5,0x3
8000850a:	c4 11       	brne	8000858c <_vfprintf_r+0x7e8>
8000850c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008510:	40 3a       	lddsp	r10,sp[0xc]
80008512:	58 0a       	cp.w	r10,0
80008514:	c1 90       	breq	80008546 <_vfprintf_r+0x7a2>
80008516:	10 36       	cp.w	r6,r8
80008518:	c6 45       	brlt	800085e0 <_vfprintf_r+0x83c>
8000851a:	fa c8 f9 50 	sub	r8,sp,-1712
8000851e:	1a d8       	st.w	--sp,r8
80008520:	fa c8 fa b8 	sub	r8,sp,-1352
80008524:	1a d8       	st.w	--sp,r8
80008526:	fa c8 fb b4 	sub	r8,sp,-1100
8000852a:	0c 9b       	mov	r11,r6
8000852c:	1a d8       	st.w	--sp,r8
8000852e:	04 9a       	mov	r10,r2
80008530:	fa c8 f9 40 	sub	r8,sp,-1728
80008534:	fa c9 ff b4 	sub	r9,sp,-76
80008538:	08 9c       	mov	r12,r4
8000853a:	fe b0 fa 9d 	rcall	80007a74 <get_arg>
8000853e:	2f dd       	sub	sp,-12
80008540:	78 16       	ld.w	r6,r12[0x4]
80008542:	50 76       	stdsp	sp[0x1c],r6
80008544:	c4 88       	rjmp	800085d4 <_vfprintf_r+0x830>
80008546:	2f f7       	sub	r7,-1
80008548:	10 39       	cp.w	r9,r8
8000854a:	c0 c4       	brge	80008562 <_vfprintf_r+0x7be>
8000854c:	fa ce f9 44 	sub	lr,sp,-1724
80008550:	fc 06 00 36 	add	r6,lr,r6<<0x3
80008554:	ec fc fd 8c 	ld.w	r12,r6[-628]
80008558:	50 7c       	stdsp	sp[0x1c],r12
8000855a:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000855e:	50 56       	stdsp	sp[0x14],r6
80008560:	c6 68       	rjmp	8000862c <_vfprintf_r+0x888>
80008562:	41 09       	lddsp	r9,sp[0x40]
80008564:	59 f8       	cp.w	r8,31
80008566:	e0 89 00 10 	brgt	80008586 <_vfprintf_r+0x7e2>
8000856a:	f2 ca ff f8 	sub	r10,r9,-8
8000856e:	72 1b       	ld.w	r11,r9[0x4]
80008570:	51 0a       	stdsp	sp[0x40],r10
80008572:	72 09       	ld.w	r9,r9[0x0]
80008574:	fa ca f9 44 	sub	r10,sp,-1724
80008578:	50 7b       	stdsp	sp[0x1c],r11
8000857a:	50 59       	stdsp	sp[0x14],r9
8000857c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80008580:	40 5b       	lddsp	r11,sp[0x14]
80008582:	40 7a       	lddsp	r10,sp[0x1c]
80008584:	c4 78       	rjmp	80008612 <_vfprintf_r+0x86e>
80008586:	72 18       	ld.w	r8,r9[0x4]
80008588:	50 78       	stdsp	sp[0x1c],r8
8000858a:	c4 c8       	rjmp	80008622 <_vfprintf_r+0x87e>
8000858c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008590:	40 3e       	lddsp	lr,sp[0xc]
80008592:	58 0e       	cp.w	lr,0
80008594:	c2 30       	breq	800085da <_vfprintf_r+0x836>
80008596:	10 36       	cp.w	r6,r8
80008598:	c0 94       	brge	800085aa <_vfprintf_r+0x806>
8000859a:	fa cc f9 44 	sub	r12,sp,-1724
8000859e:	f8 06 00 36 	add	r6,r12,r6<<0x3
800085a2:	ec fb fd 8c 	ld.w	r11,r6[-628]
800085a6:	50 7b       	stdsp	sp[0x1c],r11
800085a8:	cd 9b       	rjmp	8000855a <_vfprintf_r+0x7b6>
800085aa:	fa c8 f9 50 	sub	r8,sp,-1712
800085ae:	1a d8       	st.w	--sp,r8
800085b0:	fa c8 fa b8 	sub	r8,sp,-1352
800085b4:	04 9a       	mov	r10,r2
800085b6:	1a d8       	st.w	--sp,r8
800085b8:	fa c8 fb b4 	sub	r8,sp,-1100
800085bc:	0c 9b       	mov	r11,r6
800085be:	1a d8       	st.w	--sp,r8
800085c0:	08 9c       	mov	r12,r4
800085c2:	fa c8 f9 40 	sub	r8,sp,-1728
800085c6:	fa c9 ff b4 	sub	r9,sp,-76
800085ca:	fe b0 fa 55 	rcall	80007a74 <get_arg>
800085ce:	2f dd       	sub	sp,-12
800085d0:	78 1a       	ld.w	r10,r12[0x4]
800085d2:	50 7a       	stdsp	sp[0x1c],r10
800085d4:	78 0c       	ld.w	r12,r12[0x0]
800085d6:	50 5c       	stdsp	sp[0x14],r12
800085d8:	c2 a8       	rjmp	8000862c <_vfprintf_r+0x888>
800085da:	2f f7       	sub	r7,-1
800085dc:	10 39       	cp.w	r9,r8
800085de:	c0 94       	brge	800085f0 <_vfprintf_r+0x84c>
800085e0:	fa c9 f9 44 	sub	r9,sp,-1724
800085e4:	f2 06 00 36 	add	r6,r9,r6<<0x3
800085e8:	ec f8 fd 8c 	ld.w	r8,r6[-628]
800085ec:	50 78       	stdsp	sp[0x1c],r8
800085ee:	cb 6b       	rjmp	8000855a <_vfprintf_r+0x7b6>
800085f0:	41 09       	lddsp	r9,sp[0x40]
800085f2:	59 f8       	cp.w	r8,31
800085f4:	e0 89 00 15 	brgt	8000861e <_vfprintf_r+0x87a>
800085f8:	f2 ca ff f8 	sub	r10,r9,-8
800085fc:	72 16       	ld.w	r6,r9[0x4]
800085fe:	72 09       	ld.w	r9,r9[0x0]
80008600:	51 0a       	stdsp	sp[0x40],r10
80008602:	50 59       	stdsp	sp[0x14],r9
80008604:	fa ce f9 44 	sub	lr,sp,-1724
80008608:	50 76       	stdsp	sp[0x1c],r6
8000860a:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000860e:	40 5b       	lddsp	r11,sp[0x14]
80008610:	0c 9a       	mov	r10,r6
80008612:	f2 eb fd 88 	st.d	r9[-632],r10
80008616:	2f f8       	sub	r8,-1
80008618:	fb 48 06 b4 	st.w	sp[1716],r8
8000861c:	c0 88       	rjmp	8000862c <_vfprintf_r+0x888>
8000861e:	72 1c       	ld.w	r12,r9[0x4]
80008620:	50 7c       	stdsp	sp[0x1c],r12
80008622:	f2 c8 ff f8 	sub	r8,r9,-8
80008626:	51 08       	stdsp	sp[0x40],r8
80008628:	72 09       	ld.w	r9,r9[0x0]
8000862a:	50 59       	stdsp	sp[0x14],r9
8000862c:	40 5b       	lddsp	r11,sp[0x14]
8000862e:	40 7a       	lddsp	r10,sp[0x1c]
80008630:	e0 a0 18 0c 	rcall	8000b648 <__isinfd>
80008634:	18 96       	mov	r6,r12
80008636:	c1 70       	breq	80008664 <_vfprintf_r+0x8c0>
80008638:	30 08       	mov	r8,0
8000863a:	30 09       	mov	r9,0
8000863c:	40 5b       	lddsp	r11,sp[0x14]
8000863e:	40 7a       	lddsp	r10,sp[0x1c]
80008640:	e0 a0 1b 82 	rcall	8000bd44 <__avr32_f64_cmp_lt>
80008644:	c0 40       	breq	8000864c <_vfprintf_r+0x8a8>
80008646:	32 d8       	mov	r8,45
80008648:	fb 68 06 bb 	st.b	sp[1723],r8
8000864c:	fe c8 bb a8 	sub	r8,pc,-17496
80008650:	fe c6 bb a8 	sub	r6,pc,-17496
80008654:	a7 d5       	cbr	r5,0x7
80008656:	e0 40 00 47 	cp.w	r0,71
8000865a:	f0 06 17 a0 	movle	r6,r8
8000865e:	30 32       	mov	r2,3
80008660:	e0 8f 06 ce 	bral	800093fc <_vfprintf_r+0x1658>
80008664:	40 5b       	lddsp	r11,sp[0x14]
80008666:	40 7a       	lddsp	r10,sp[0x1c]
80008668:	e0 a0 18 05 	rcall	8000b672 <__isnand>
8000866c:	c0 e0       	breq	80008688 <_vfprintf_r+0x8e4>
8000866e:	50 26       	stdsp	sp[0x8],r6
80008670:	fe c8 bb c4 	sub	r8,pc,-17468
80008674:	fe c6 bb c4 	sub	r6,pc,-17468
80008678:	a7 d5       	cbr	r5,0x7
8000867a:	e0 40 00 47 	cp.w	r0,71
8000867e:	f0 06 17 a0 	movle	r6,r8
80008682:	30 32       	mov	r2,3
80008684:	e0 8f 06 c2 	bral	80009408 <_vfprintf_r+0x1664>
80008688:	40 2a       	lddsp	r10,sp[0x8]
8000868a:	5b fa       	cp.w	r10,-1
8000868c:	c0 41       	brne	80008694 <_vfprintf_r+0x8f0>
8000868e:	30 69       	mov	r9,6
80008690:	50 29       	stdsp	sp[0x8],r9
80008692:	c1 18       	rjmp	800086b4 <_vfprintf_r+0x910>
80008694:	e0 40 00 47 	cp.w	r0,71
80008698:	5f 09       	sreq	r9
8000869a:	e0 40 00 67 	cp.w	r0,103
8000869e:	5f 08       	sreq	r8
800086a0:	f3 e8 10 08 	or	r8,r9,r8
800086a4:	f8 08 18 00 	cp.b	r8,r12
800086a8:	c0 60       	breq	800086b4 <_vfprintf_r+0x910>
800086aa:	40 28       	lddsp	r8,sp[0x8]
800086ac:	58 08       	cp.w	r8,0
800086ae:	f9 b8 00 01 	moveq	r8,1
800086b2:	50 28       	stdsp	sp[0x8],r8
800086b4:	40 78       	lddsp	r8,sp[0x1c]
800086b6:	40 59       	lddsp	r9,sp[0x14]
800086b8:	fa e9 06 94 	st.d	sp[1684],r8
800086bc:	a9 a5       	sbr	r5,0x8
800086be:	fa f8 06 94 	ld.w	r8,sp[1684]
800086c2:	58 08       	cp.w	r8,0
800086c4:	c0 65       	brlt	800086d0 <_vfprintf_r+0x92c>
800086c6:	40 5e       	lddsp	lr,sp[0x14]
800086c8:	30 0c       	mov	r12,0
800086ca:	50 6e       	stdsp	sp[0x18],lr
800086cc:	50 9c       	stdsp	sp[0x24],r12
800086ce:	c0 78       	rjmp	800086dc <_vfprintf_r+0x938>
800086d0:	40 5b       	lddsp	r11,sp[0x14]
800086d2:	32 da       	mov	r10,45
800086d4:	ee 1b 80 00 	eorh	r11,0x8000
800086d8:	50 9a       	stdsp	sp[0x24],r10
800086da:	50 6b       	stdsp	sp[0x18],r11
800086dc:	e0 40 00 46 	cp.w	r0,70
800086e0:	5f 09       	sreq	r9
800086e2:	e0 40 00 66 	cp.w	r0,102
800086e6:	5f 08       	sreq	r8
800086e8:	f3 e8 10 08 	or	r8,r9,r8
800086ec:	50 48       	stdsp	sp[0x10],r8
800086ee:	c0 40       	breq	800086f6 <_vfprintf_r+0x952>
800086f0:	40 22       	lddsp	r2,sp[0x8]
800086f2:	30 39       	mov	r9,3
800086f4:	c1 08       	rjmp	80008714 <_vfprintf_r+0x970>
800086f6:	e0 40 00 45 	cp.w	r0,69
800086fa:	5f 09       	sreq	r9
800086fc:	e0 40 00 65 	cp.w	r0,101
80008700:	5f 08       	sreq	r8
80008702:	40 22       	lddsp	r2,sp[0x8]
80008704:	10 49       	or	r9,r8
80008706:	2f f2       	sub	r2,-1
80008708:	40 46       	lddsp	r6,sp[0x10]
8000870a:	ec 09 18 00 	cp.b	r9,r6
8000870e:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80008712:	30 29       	mov	r9,2
80008714:	fa c8 f9 5c 	sub	r8,sp,-1700
80008718:	1a d8       	st.w	--sp,r8
8000871a:	fa c8 f9 54 	sub	r8,sp,-1708
8000871e:	1a d8       	st.w	--sp,r8
80008720:	fa c8 f9 4c 	sub	r8,sp,-1716
80008724:	08 9c       	mov	r12,r4
80008726:	1a d8       	st.w	--sp,r8
80008728:	04 98       	mov	r8,r2
8000872a:	40 9b       	lddsp	r11,sp[0x24]
8000872c:	40 aa       	lddsp	r10,sp[0x28]
8000872e:	e0 a0 0b e7 	rcall	80009efc <_dtoa_r>
80008732:	e0 40 00 47 	cp.w	r0,71
80008736:	5f 19       	srne	r9
80008738:	e0 40 00 67 	cp.w	r0,103
8000873c:	5f 18       	srne	r8
8000873e:	18 96       	mov	r6,r12
80008740:	2f dd       	sub	sp,-12
80008742:	f3 e8 00 08 	and	r8,r9,r8
80008746:	c0 41       	brne	8000874e <_vfprintf_r+0x9aa>
80008748:	ed b5 00 00 	bld	r5,0x0
8000874c:	c3 01       	brne	800087ac <_vfprintf_r+0xa08>
8000874e:	ec 02 00 0e 	add	lr,r6,r2
80008752:	50 3e       	stdsp	sp[0xc],lr
80008754:	40 4c       	lddsp	r12,sp[0x10]
80008756:	58 0c       	cp.w	r12,0
80008758:	c1 50       	breq	80008782 <_vfprintf_r+0x9de>
8000875a:	0d 89       	ld.ub	r9,r6[0x0]
8000875c:	33 08       	mov	r8,48
8000875e:	f0 09 18 00 	cp.b	r9,r8
80008762:	c0 b1       	brne	80008778 <_vfprintf_r+0x9d4>
80008764:	30 08       	mov	r8,0
80008766:	30 09       	mov	r9,0
80008768:	40 6b       	lddsp	r11,sp[0x18]
8000876a:	40 7a       	lddsp	r10,sp[0x1c]
8000876c:	e0 a0 1a a5 	rcall	8000bcb6 <__avr32_f64_cmp_eq>
80008770:	fb b2 00 01 	rsubeq	r2,1
80008774:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80008778:	40 3b       	lddsp	r11,sp[0xc]
8000877a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000877e:	10 0b       	add	r11,r8
80008780:	50 3b       	stdsp	sp[0xc],r11
80008782:	40 6b       	lddsp	r11,sp[0x18]
80008784:	30 08       	mov	r8,0
80008786:	30 09       	mov	r9,0
80008788:	40 7a       	lddsp	r10,sp[0x1c]
8000878a:	e0 a0 1a 96 	rcall	8000bcb6 <__avr32_f64_cmp_eq>
8000878e:	c0 90       	breq	800087a0 <_vfprintf_r+0x9fc>
80008790:	40 3a       	lddsp	r10,sp[0xc]
80008792:	fb 4a 06 a4 	st.w	sp[1700],r10
80008796:	c0 58       	rjmp	800087a0 <_vfprintf_r+0x9fc>
80008798:	10 c9       	st.b	r8++,r9
8000879a:	fb 48 06 a4 	st.w	sp[1700],r8
8000879e:	c0 28       	rjmp	800087a2 <_vfprintf_r+0x9fe>
800087a0:	33 09       	mov	r9,48
800087a2:	fa f8 06 a4 	ld.w	r8,sp[1700]
800087a6:	40 3e       	lddsp	lr,sp[0xc]
800087a8:	1c 38       	cp.w	r8,lr
800087aa:	cf 73       	brcs	80008798 <_vfprintf_r+0x9f4>
800087ac:	e0 40 00 47 	cp.w	r0,71
800087b0:	5f 09       	sreq	r9
800087b2:	e0 40 00 67 	cp.w	r0,103
800087b6:	5f 08       	sreq	r8
800087b8:	f3 e8 10 08 	or	r8,r9,r8
800087bc:	fa f9 06 a4 	ld.w	r9,sp[1700]
800087c0:	0c 19       	sub	r9,r6
800087c2:	50 69       	stdsp	sp[0x18],r9
800087c4:	58 08       	cp.w	r8,0
800087c6:	c0 b0       	breq	800087dc <_vfprintf_r+0xa38>
800087c8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800087cc:	5b d8       	cp.w	r8,-3
800087ce:	c0 55       	brlt	800087d8 <_vfprintf_r+0xa34>
800087d0:	40 2c       	lddsp	r12,sp[0x8]
800087d2:	18 38       	cp.w	r8,r12
800087d4:	e0 8a 00 6a 	brle	800088a8 <_vfprintf_r+0xb04>
800087d8:	20 20       	sub	r0,2
800087da:	c0 58       	rjmp	800087e4 <_vfprintf_r+0xa40>
800087dc:	e0 40 00 65 	cp.w	r0,101
800087e0:	e0 89 00 46 	brgt	8000886c <_vfprintf_r+0xac8>
800087e4:	fa fb 06 ac 	ld.w	r11,sp[1708]
800087e8:	fb 60 06 9c 	st.b	sp[1692],r0
800087ec:	20 1b       	sub	r11,1
800087ee:	fb 4b 06 ac 	st.w	sp[1708],r11
800087f2:	c0 47       	brpl	800087fa <_vfprintf_r+0xa56>
800087f4:	5c 3b       	neg	r11
800087f6:	32 d8       	mov	r8,45
800087f8:	c0 28       	rjmp	800087fc <_vfprintf_r+0xa58>
800087fa:	32 b8       	mov	r8,43
800087fc:	fb 68 06 9d 	st.b	sp[1693],r8
80008800:	58 9b       	cp.w	r11,9
80008802:	e0 8a 00 1d 	brle	8000883c <_vfprintf_r+0xa98>
80008806:	fa c9 fa 35 	sub	r9,sp,-1483
8000880a:	30 aa       	mov	r10,10
8000880c:	12 98       	mov	r8,r9
8000880e:	0e 9c       	mov	r12,r7
80008810:	0c 92       	mov	r2,r6
80008812:	f6 0a 0c 06 	divs	r6,r11,r10
80008816:	0e 9b       	mov	r11,r7
80008818:	2d 0b       	sub	r11,-48
8000881a:	10 fb       	st.b	--r8,r11
8000881c:	0c 9b       	mov	r11,r6
8000881e:	58 96       	cp.w	r6,9
80008820:	fe 99 ff f9 	brgt	80008812 <_vfprintf_r+0xa6e>
80008824:	2d 0b       	sub	r11,-48
80008826:	18 97       	mov	r7,r12
80008828:	04 96       	mov	r6,r2
8000882a:	10 fb       	st.b	--r8,r11
8000882c:	fa ca f9 62 	sub	r10,sp,-1694
80008830:	c0 38       	rjmp	80008836 <_vfprintf_r+0xa92>
80008832:	11 3b       	ld.ub	r11,r8++
80008834:	14 cb       	st.b	r10++,r11
80008836:	12 38       	cp.w	r8,r9
80008838:	cf d3       	brcs	80008832 <_vfprintf_r+0xa8e>
8000883a:	c0 98       	rjmp	8000884c <_vfprintf_r+0xaa8>
8000883c:	2d 0b       	sub	r11,-48
8000883e:	33 08       	mov	r8,48
80008840:	fb 6b 06 9f 	st.b	sp[1695],r11
80008844:	fb 68 06 9e 	st.b	sp[1694],r8
80008848:	fa ca f9 60 	sub	r10,sp,-1696
8000884c:	fa c8 f9 64 	sub	r8,sp,-1692
80008850:	f4 08 01 08 	sub	r8,r10,r8
80008854:	50 e8       	stdsp	sp[0x38],r8
80008856:	10 92       	mov	r2,r8
80008858:	40 6b       	lddsp	r11,sp[0x18]
8000885a:	16 02       	add	r2,r11
8000885c:	58 1b       	cp.w	r11,1
8000885e:	e0 89 00 05 	brgt	80008868 <_vfprintf_r+0xac4>
80008862:	ed b5 00 00 	bld	r5,0x0
80008866:	c3 51       	brne	800088d0 <_vfprintf_r+0xb2c>
80008868:	2f f2       	sub	r2,-1
8000886a:	c3 38       	rjmp	800088d0 <_vfprintf_r+0xb2c>
8000886c:	e0 40 00 66 	cp.w	r0,102
80008870:	c1 c1       	brne	800088a8 <_vfprintf_r+0xb04>
80008872:	fa f2 06 ac 	ld.w	r2,sp[1708]
80008876:	58 02       	cp.w	r2,0
80008878:	e0 8a 00 0c 	brle	80008890 <_vfprintf_r+0xaec>
8000887c:	40 2a       	lddsp	r10,sp[0x8]
8000887e:	58 0a       	cp.w	r10,0
80008880:	c0 41       	brne	80008888 <_vfprintf_r+0xae4>
80008882:	ed b5 00 00 	bld	r5,0x0
80008886:	c2 51       	brne	800088d0 <_vfprintf_r+0xb2c>
80008888:	2f f2       	sub	r2,-1
8000888a:	40 29       	lddsp	r9,sp[0x8]
8000888c:	12 02       	add	r2,r9
8000888e:	c0 b8       	rjmp	800088a4 <_vfprintf_r+0xb00>
80008890:	40 28       	lddsp	r8,sp[0x8]
80008892:	58 08       	cp.w	r8,0
80008894:	c0 61       	brne	800088a0 <_vfprintf_r+0xafc>
80008896:	ed b5 00 00 	bld	r5,0x0
8000889a:	c0 30       	breq	800088a0 <_vfprintf_r+0xafc>
8000889c:	30 12       	mov	r2,1
8000889e:	c1 98       	rjmp	800088d0 <_vfprintf_r+0xb2c>
800088a0:	40 22       	lddsp	r2,sp[0x8]
800088a2:	2f e2       	sub	r2,-2
800088a4:	36 60       	mov	r0,102
800088a6:	c1 58       	rjmp	800088d0 <_vfprintf_r+0xb2c>
800088a8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800088ac:	40 6e       	lddsp	lr,sp[0x18]
800088ae:	1c 32       	cp.w	r2,lr
800088b0:	c0 65       	brlt	800088bc <_vfprintf_r+0xb18>
800088b2:	ed b5 00 00 	bld	r5,0x0
800088b6:	f7 b2 00 ff 	subeq	r2,-1
800088ba:	c0 a8       	rjmp	800088ce <_vfprintf_r+0xb2a>
800088bc:	e4 08 11 02 	rsub	r8,r2,2
800088c0:	40 6c       	lddsp	r12,sp[0x18]
800088c2:	58 02       	cp.w	r2,0
800088c4:	f0 02 17 a0 	movle	r2,r8
800088c8:	f9 b2 09 01 	movgt	r2,1
800088cc:	18 02       	add	r2,r12
800088ce:	36 70       	mov	r0,103
800088d0:	40 9b       	lddsp	r11,sp[0x24]
800088d2:	58 0b       	cp.w	r11,0
800088d4:	e0 80 05 94 	breq	800093fc <_vfprintf_r+0x1658>
800088d8:	32 d8       	mov	r8,45
800088da:	fb 68 06 bb 	st.b	sp[1723],r8
800088de:	e0 8f 05 93 	bral	80009404 <_vfprintf_r+0x1660>
800088e2:	50 a7       	stdsp	sp[0x28],r7
800088e4:	04 94       	mov	r4,r2
800088e6:	0c 97       	mov	r7,r6
800088e8:	02 92       	mov	r2,r1
800088ea:	06 96       	mov	r6,r3
800088ec:	40 41       	lddsp	r1,sp[0x10]
800088ee:	40 93       	lddsp	r3,sp[0x24]
800088f0:	0e 99       	mov	r9,r7
800088f2:	ed b5 00 05 	bld	r5,0x5
800088f6:	c4 81       	brne	80008986 <_vfprintf_r+0xbe2>
800088f8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800088fc:	40 3e       	lddsp	lr,sp[0xc]
800088fe:	58 0e       	cp.w	lr,0
80008900:	c1 d0       	breq	8000893a <_vfprintf_r+0xb96>
80008902:	10 36       	cp.w	r6,r8
80008904:	c0 64       	brge	80008910 <_vfprintf_r+0xb6c>
80008906:	fa cc f9 44 	sub	r12,sp,-1724
8000890a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000890e:	c1 d8       	rjmp	80008948 <_vfprintf_r+0xba4>
80008910:	fa c8 f9 50 	sub	r8,sp,-1712
80008914:	1a d8       	st.w	--sp,r8
80008916:	fa c8 fa b8 	sub	r8,sp,-1352
8000891a:	04 9a       	mov	r10,r2
8000891c:	1a d8       	st.w	--sp,r8
8000891e:	fa c8 fb b4 	sub	r8,sp,-1100
80008922:	0c 9b       	mov	r11,r6
80008924:	1a d8       	st.w	--sp,r8
80008926:	08 9c       	mov	r12,r4
80008928:	fa c8 f9 40 	sub	r8,sp,-1728
8000892c:	fa c9 ff b4 	sub	r9,sp,-76
80008930:	fe b0 f8 a2 	rcall	80007a74 <get_arg>
80008934:	2f dd       	sub	sp,-12
80008936:	78 0a       	ld.w	r10,r12[0x0]
80008938:	c2 08       	rjmp	80008978 <_vfprintf_r+0xbd4>
8000893a:	2f f7       	sub	r7,-1
8000893c:	10 39       	cp.w	r9,r8
8000893e:	c0 84       	brge	8000894e <_vfprintf_r+0xbaa>
80008940:	fa cb f9 44 	sub	r11,sp,-1724
80008944:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008948:	ec fa fd 88 	ld.w	r10,r6[-632]
8000894c:	c1 68       	rjmp	80008978 <_vfprintf_r+0xbd4>
8000894e:	41 09       	lddsp	r9,sp[0x40]
80008950:	59 f8       	cp.w	r8,31
80008952:	e0 89 00 10 	brgt	80008972 <_vfprintf_r+0xbce>
80008956:	f2 ca ff fc 	sub	r10,r9,-4
8000895a:	51 0a       	stdsp	sp[0x40],r10
8000895c:	fa c6 f9 44 	sub	r6,sp,-1724
80008960:	72 0a       	ld.w	r10,r9[0x0]
80008962:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008966:	f3 4a fd 88 	st.w	r9[-632],r10
8000896a:	2f f8       	sub	r8,-1
8000896c:	fb 48 06 b4 	st.w	sp[1716],r8
80008970:	c0 48       	rjmp	80008978 <_vfprintf_r+0xbd4>
80008972:	72 0a       	ld.w	r10,r9[0x0]
80008974:	2f c9       	sub	r9,-4
80008976:	51 09       	stdsp	sp[0x40],r9
80008978:	40 be       	lddsp	lr,sp[0x2c]
8000897a:	1c 98       	mov	r8,lr
8000897c:	95 1e       	st.w	r10[0x4],lr
8000897e:	bf 58       	asr	r8,0x1f
80008980:	95 08       	st.w	r10[0x0],r8
80008982:	fe 9f fa 9f 	bral	80007ec0 <_vfprintf_r+0x11c>
80008986:	ed b5 00 04 	bld	r5,0x4
8000898a:	c4 80       	breq	80008a1a <_vfprintf_r+0xc76>
8000898c:	e2 15 00 40 	andl	r5,0x40,COH
80008990:	c4 50       	breq	80008a1a <_vfprintf_r+0xc76>
80008992:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008996:	40 3c       	lddsp	r12,sp[0xc]
80008998:	58 0c       	cp.w	r12,0
8000899a:	c1 d0       	breq	800089d4 <_vfprintf_r+0xc30>
8000899c:	10 36       	cp.w	r6,r8
8000899e:	c0 64       	brge	800089aa <_vfprintf_r+0xc06>
800089a0:	fa cb f9 44 	sub	r11,sp,-1724
800089a4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800089a8:	c1 d8       	rjmp	800089e2 <_vfprintf_r+0xc3e>
800089aa:	fa c8 f9 50 	sub	r8,sp,-1712
800089ae:	1a d8       	st.w	--sp,r8
800089b0:	fa c8 fa b8 	sub	r8,sp,-1352
800089b4:	04 9a       	mov	r10,r2
800089b6:	1a d8       	st.w	--sp,r8
800089b8:	fa c8 fb b4 	sub	r8,sp,-1100
800089bc:	0c 9b       	mov	r11,r6
800089be:	1a d8       	st.w	--sp,r8
800089c0:	08 9c       	mov	r12,r4
800089c2:	fa c8 f9 40 	sub	r8,sp,-1728
800089c6:	fa c9 ff b4 	sub	r9,sp,-76
800089ca:	fe b0 f8 55 	rcall	80007a74 <get_arg>
800089ce:	2f dd       	sub	sp,-12
800089d0:	78 0a       	ld.w	r10,r12[0x0]
800089d2:	c2 08       	rjmp	80008a12 <_vfprintf_r+0xc6e>
800089d4:	2f f7       	sub	r7,-1
800089d6:	10 39       	cp.w	r9,r8
800089d8:	c0 84       	brge	800089e8 <_vfprintf_r+0xc44>
800089da:	fa ca f9 44 	sub	r10,sp,-1724
800089de:	f4 06 00 36 	add	r6,r10,r6<<0x3
800089e2:	ec fa fd 88 	ld.w	r10,r6[-632]
800089e6:	c1 68       	rjmp	80008a12 <_vfprintf_r+0xc6e>
800089e8:	41 09       	lddsp	r9,sp[0x40]
800089ea:	59 f8       	cp.w	r8,31
800089ec:	e0 89 00 10 	brgt	80008a0c <_vfprintf_r+0xc68>
800089f0:	f2 ca ff fc 	sub	r10,r9,-4
800089f4:	51 0a       	stdsp	sp[0x40],r10
800089f6:	fa c6 f9 44 	sub	r6,sp,-1724
800089fa:	72 0a       	ld.w	r10,r9[0x0]
800089fc:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008a00:	f3 4a fd 88 	st.w	r9[-632],r10
80008a04:	2f f8       	sub	r8,-1
80008a06:	fb 48 06 b4 	st.w	sp[1716],r8
80008a0a:	c0 48       	rjmp	80008a12 <_vfprintf_r+0xc6e>
80008a0c:	72 0a       	ld.w	r10,r9[0x0]
80008a0e:	2f c9       	sub	r9,-4
80008a10:	51 09       	stdsp	sp[0x40],r9
80008a12:	40 be       	lddsp	lr,sp[0x2c]
80008a14:	b4 0e       	st.h	r10[0x0],lr
80008a16:	fe 9f fa 55 	bral	80007ec0 <_vfprintf_r+0x11c>
80008a1a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008a1e:	40 3c       	lddsp	r12,sp[0xc]
80008a20:	58 0c       	cp.w	r12,0
80008a22:	c1 d0       	breq	80008a5c <_vfprintf_r+0xcb8>
80008a24:	10 36       	cp.w	r6,r8
80008a26:	c0 64       	brge	80008a32 <_vfprintf_r+0xc8e>
80008a28:	fa cb f9 44 	sub	r11,sp,-1724
80008a2c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008a30:	c1 d8       	rjmp	80008a6a <_vfprintf_r+0xcc6>
80008a32:	fa c8 f9 50 	sub	r8,sp,-1712
80008a36:	1a d8       	st.w	--sp,r8
80008a38:	fa c8 fa b8 	sub	r8,sp,-1352
80008a3c:	04 9a       	mov	r10,r2
80008a3e:	1a d8       	st.w	--sp,r8
80008a40:	fa c8 fb b4 	sub	r8,sp,-1100
80008a44:	0c 9b       	mov	r11,r6
80008a46:	1a d8       	st.w	--sp,r8
80008a48:	08 9c       	mov	r12,r4
80008a4a:	fa c8 f9 40 	sub	r8,sp,-1728
80008a4e:	fa c9 ff b4 	sub	r9,sp,-76
80008a52:	fe b0 f8 11 	rcall	80007a74 <get_arg>
80008a56:	2f dd       	sub	sp,-12
80008a58:	78 0a       	ld.w	r10,r12[0x0]
80008a5a:	c2 08       	rjmp	80008a9a <_vfprintf_r+0xcf6>
80008a5c:	2f f7       	sub	r7,-1
80008a5e:	10 39       	cp.w	r9,r8
80008a60:	c0 84       	brge	80008a70 <_vfprintf_r+0xccc>
80008a62:	fa ca f9 44 	sub	r10,sp,-1724
80008a66:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008a6a:	ec fa fd 88 	ld.w	r10,r6[-632]
80008a6e:	c1 68       	rjmp	80008a9a <_vfprintf_r+0xcf6>
80008a70:	41 09       	lddsp	r9,sp[0x40]
80008a72:	59 f8       	cp.w	r8,31
80008a74:	e0 89 00 10 	brgt	80008a94 <_vfprintf_r+0xcf0>
80008a78:	f2 ca ff fc 	sub	r10,r9,-4
80008a7c:	51 0a       	stdsp	sp[0x40],r10
80008a7e:	fa c6 f9 44 	sub	r6,sp,-1724
80008a82:	72 0a       	ld.w	r10,r9[0x0]
80008a84:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008a88:	f3 4a fd 88 	st.w	r9[-632],r10
80008a8c:	2f f8       	sub	r8,-1
80008a8e:	fb 48 06 b4 	st.w	sp[1716],r8
80008a92:	c0 48       	rjmp	80008a9a <_vfprintf_r+0xcf6>
80008a94:	72 0a       	ld.w	r10,r9[0x0]
80008a96:	2f c9       	sub	r9,-4
80008a98:	51 09       	stdsp	sp[0x40],r9
80008a9a:	40 be       	lddsp	lr,sp[0x2c]
80008a9c:	95 0e       	st.w	r10[0x0],lr
80008a9e:	fe 9f fa 11 	bral	80007ec0 <_vfprintf_r+0x11c>
80008aa2:	50 a7       	stdsp	sp[0x28],r7
80008aa4:	50 80       	stdsp	sp[0x20],r0
80008aa6:	0c 97       	mov	r7,r6
80008aa8:	04 94       	mov	r4,r2
80008aaa:	06 96       	mov	r6,r3
80008aac:	02 92       	mov	r2,r1
80008aae:	40 93       	lddsp	r3,sp[0x24]
80008ab0:	10 90       	mov	r0,r8
80008ab2:	40 41       	lddsp	r1,sp[0x10]
80008ab4:	a5 a5       	sbr	r5,0x4
80008ab6:	c0 a8       	rjmp	80008aca <_vfprintf_r+0xd26>
80008ab8:	50 a7       	stdsp	sp[0x28],r7
80008aba:	50 80       	stdsp	sp[0x20],r0
80008abc:	0c 97       	mov	r7,r6
80008abe:	04 94       	mov	r4,r2
80008ac0:	06 96       	mov	r6,r3
80008ac2:	02 92       	mov	r2,r1
80008ac4:	40 93       	lddsp	r3,sp[0x24]
80008ac6:	10 90       	mov	r0,r8
80008ac8:	40 41       	lddsp	r1,sp[0x10]
80008aca:	ed b5 00 05 	bld	r5,0x5
80008ace:	c5 d1       	brne	80008b88 <_vfprintf_r+0xde4>
80008ad0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008ad4:	40 3c       	lddsp	r12,sp[0xc]
80008ad6:	58 0c       	cp.w	r12,0
80008ad8:	c2 60       	breq	80008b24 <_vfprintf_r+0xd80>
80008ada:	10 36       	cp.w	r6,r8
80008adc:	c0 a4       	brge	80008af0 <_vfprintf_r+0xd4c>
80008ade:	fa cb f9 44 	sub	r11,sp,-1724
80008ae2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008ae6:	ec e8 fd 88 	ld.d	r8,r6[-632]
80008aea:	fa e9 00 00 	st.d	sp[0],r8
80008aee:	c1 88       	rjmp	80008b1e <_vfprintf_r+0xd7a>
80008af0:	fa c8 f9 50 	sub	r8,sp,-1712
80008af4:	1a d8       	st.w	--sp,r8
80008af6:	fa c8 fa b8 	sub	r8,sp,-1352
80008afa:	04 9a       	mov	r10,r2
80008afc:	1a d8       	st.w	--sp,r8
80008afe:	0c 9b       	mov	r11,r6
80008b00:	fa c8 fb b4 	sub	r8,sp,-1100
80008b04:	08 9c       	mov	r12,r4
80008b06:	1a d8       	st.w	--sp,r8
80008b08:	fa c8 f9 40 	sub	r8,sp,-1728
80008b0c:	fa c9 ff b4 	sub	r9,sp,-76
80008b10:	fe b0 f7 b2 	rcall	80007a74 <get_arg>
80008b14:	2f dd       	sub	sp,-12
80008b16:	f8 ea 00 00 	ld.d	r10,r12[0]
80008b1a:	fa eb 00 00 	st.d	sp[0],r10
80008b1e:	30 08       	mov	r8,0
80008b20:	e0 8f 03 de 	bral	800092dc <_vfprintf_r+0x1538>
80008b24:	ee ca ff ff 	sub	r10,r7,-1
80008b28:	10 37       	cp.w	r7,r8
80008b2a:	c0 b4       	brge	80008b40 <_vfprintf_r+0xd9c>
80008b2c:	fa c9 f9 44 	sub	r9,sp,-1724
80008b30:	14 97       	mov	r7,r10
80008b32:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008b36:	ec ea fd 88 	ld.d	r10,r6[-632]
80008b3a:	fa eb 00 00 	st.d	sp[0],r10
80008b3e:	c1 88       	rjmp	80008b6e <_vfprintf_r+0xdca>
80008b40:	41 09       	lddsp	r9,sp[0x40]
80008b42:	59 f8       	cp.w	r8,31
80008b44:	e0 89 00 18 	brgt	80008b74 <_vfprintf_r+0xdd0>
80008b48:	f2 e6 00 00 	ld.d	r6,r9[0]
80008b4c:	f2 cb ff f8 	sub	r11,r9,-8
80008b50:	fa e7 00 00 	st.d	sp[0],r6
80008b54:	51 0b       	stdsp	sp[0x40],r11
80008b56:	fa c6 f9 44 	sub	r6,sp,-1724
80008b5a:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008b5e:	fa e6 00 00 	ld.d	r6,sp[0]
80008b62:	f2 e7 fd 88 	st.d	r9[-632],r6
80008b66:	2f f8       	sub	r8,-1
80008b68:	14 97       	mov	r7,r10
80008b6a:	fb 48 06 b4 	st.w	sp[1716],r8
80008b6e:	40 38       	lddsp	r8,sp[0xc]
80008b70:	e0 8f 03 b6 	bral	800092dc <_vfprintf_r+0x1538>
80008b74:	f2 e6 00 00 	ld.d	r6,r9[0]
80008b78:	40 38       	lddsp	r8,sp[0xc]
80008b7a:	fa e7 00 00 	st.d	sp[0],r6
80008b7e:	2f 89       	sub	r9,-8
80008b80:	14 97       	mov	r7,r10
80008b82:	51 09       	stdsp	sp[0x40],r9
80008b84:	e0 8f 03 ac 	bral	800092dc <_vfprintf_r+0x1538>
80008b88:	ed b5 00 04 	bld	r5,0x4
80008b8c:	c1 61       	brne	80008bb8 <_vfprintf_r+0xe14>
80008b8e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008b92:	40 3e       	lddsp	lr,sp[0xc]
80008b94:	58 0e       	cp.w	lr,0
80008b96:	c0 80       	breq	80008ba6 <_vfprintf_r+0xe02>
80008b98:	10 36       	cp.w	r6,r8
80008b9a:	c6 74       	brge	80008c68 <_vfprintf_r+0xec4>
80008b9c:	fa cc f9 44 	sub	r12,sp,-1724
80008ba0:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008ba4:	c8 08       	rjmp	80008ca4 <_vfprintf_r+0xf00>
80008ba6:	ee ca ff ff 	sub	r10,r7,-1
80008baa:	10 37       	cp.w	r7,r8
80008bac:	c7 f4       	brge	80008caa <_vfprintf_r+0xf06>
80008bae:	fa cb f9 44 	sub	r11,sp,-1724
80008bb2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008bb6:	c7 68       	rjmp	80008ca2 <_vfprintf_r+0xefe>
80008bb8:	ed b5 00 06 	bld	r5,0x6
80008bbc:	c4 a1       	brne	80008c50 <_vfprintf_r+0xeac>
80008bbe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008bc2:	40 3c       	lddsp	r12,sp[0xc]
80008bc4:	58 0c       	cp.w	r12,0
80008bc6:	c1 d0       	breq	80008c00 <_vfprintf_r+0xe5c>
80008bc8:	10 36       	cp.w	r6,r8
80008bca:	c0 64       	brge	80008bd6 <_vfprintf_r+0xe32>
80008bcc:	fa cb f9 44 	sub	r11,sp,-1724
80008bd0:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008bd4:	c1 f8       	rjmp	80008c12 <_vfprintf_r+0xe6e>
80008bd6:	fa c8 f9 50 	sub	r8,sp,-1712
80008bda:	1a d8       	st.w	--sp,r8
80008bdc:	fa c8 fa b8 	sub	r8,sp,-1352
80008be0:	1a d8       	st.w	--sp,r8
80008be2:	fa c8 fb b4 	sub	r8,sp,-1100
80008be6:	1a d8       	st.w	--sp,r8
80008be8:	fa c8 f9 40 	sub	r8,sp,-1728
80008bec:	fa c9 ff b4 	sub	r9,sp,-76
80008bf0:	04 9a       	mov	r10,r2
80008bf2:	0c 9b       	mov	r11,r6
80008bf4:	08 9c       	mov	r12,r4
80008bf6:	fe b0 f7 3f 	rcall	80007a74 <get_arg>
80008bfa:	2f dd       	sub	sp,-12
80008bfc:	98 18       	ld.sh	r8,r12[0x2]
80008bfe:	c2 68       	rjmp	80008c4a <_vfprintf_r+0xea6>
80008c00:	ee ca ff ff 	sub	r10,r7,-1
80008c04:	10 37       	cp.w	r7,r8
80008c06:	c0 94       	brge	80008c18 <_vfprintf_r+0xe74>
80008c08:	fa c9 f9 44 	sub	r9,sp,-1724
80008c0c:	14 97       	mov	r7,r10
80008c0e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008c12:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008c16:	c1 a8       	rjmp	80008c4a <_vfprintf_r+0xea6>
80008c18:	41 09       	lddsp	r9,sp[0x40]
80008c1a:	59 f8       	cp.w	r8,31
80008c1c:	e0 89 00 13 	brgt	80008c42 <_vfprintf_r+0xe9e>
80008c20:	f2 cb ff fc 	sub	r11,r9,-4
80008c24:	51 0b       	stdsp	sp[0x40],r11
80008c26:	72 09       	ld.w	r9,r9[0x0]
80008c28:	fa c6 f9 44 	sub	r6,sp,-1724
80008c2c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008c30:	2f f8       	sub	r8,-1
80008c32:	f7 49 fd 88 	st.w	r11[-632],r9
80008c36:	fb 48 06 b4 	st.w	sp[1716],r8
80008c3a:	14 97       	mov	r7,r10
80008c3c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008c40:	c0 58       	rjmp	80008c4a <_vfprintf_r+0xea6>
80008c42:	92 18       	ld.sh	r8,r9[0x2]
80008c44:	14 97       	mov	r7,r10
80008c46:	2f c9       	sub	r9,-4
80008c48:	51 09       	stdsp	sp[0x40],r9
80008c4a:	5c 78       	castu.h	r8
80008c4c:	50 18       	stdsp	sp[0x4],r8
80008c4e:	c4 68       	rjmp	80008cda <_vfprintf_r+0xf36>
80008c50:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008c54:	40 3c       	lddsp	r12,sp[0xc]
80008c56:	58 0c       	cp.w	r12,0
80008c58:	c1 d0       	breq	80008c92 <_vfprintf_r+0xeee>
80008c5a:	10 36       	cp.w	r6,r8
80008c5c:	c0 64       	brge	80008c68 <_vfprintf_r+0xec4>
80008c5e:	fa cb f9 44 	sub	r11,sp,-1724
80008c62:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008c66:	c1 f8       	rjmp	80008ca4 <_vfprintf_r+0xf00>
80008c68:	fa c8 f9 50 	sub	r8,sp,-1712
80008c6c:	1a d8       	st.w	--sp,r8
80008c6e:	fa c8 fa b8 	sub	r8,sp,-1352
80008c72:	0c 9b       	mov	r11,r6
80008c74:	1a d8       	st.w	--sp,r8
80008c76:	fa c8 fb b4 	sub	r8,sp,-1100
80008c7a:	04 9a       	mov	r10,r2
80008c7c:	1a d8       	st.w	--sp,r8
80008c7e:	08 9c       	mov	r12,r4
80008c80:	fa c8 f9 40 	sub	r8,sp,-1728
80008c84:	fa c9 ff b4 	sub	r9,sp,-76
80008c88:	fe b0 f6 f6 	rcall	80007a74 <get_arg>
80008c8c:	2f dd       	sub	sp,-12
80008c8e:	78 0b       	ld.w	r11,r12[0x0]
80008c90:	c2 48       	rjmp	80008cd8 <_vfprintf_r+0xf34>
80008c92:	ee ca ff ff 	sub	r10,r7,-1
80008c96:	10 37       	cp.w	r7,r8
80008c98:	c0 94       	brge	80008caa <_vfprintf_r+0xf06>
80008c9a:	fa c9 f9 44 	sub	r9,sp,-1724
80008c9e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008ca2:	14 97       	mov	r7,r10
80008ca4:	ec fb fd 88 	ld.w	r11,r6[-632]
80008ca8:	c1 88       	rjmp	80008cd8 <_vfprintf_r+0xf34>
80008caa:	41 09       	lddsp	r9,sp[0x40]
80008cac:	59 f8       	cp.w	r8,31
80008cae:	e0 89 00 11 	brgt	80008cd0 <_vfprintf_r+0xf2c>
80008cb2:	f2 cb ff fc 	sub	r11,r9,-4
80008cb6:	51 0b       	stdsp	sp[0x40],r11
80008cb8:	fa c6 f9 44 	sub	r6,sp,-1724
80008cbc:	72 0b       	ld.w	r11,r9[0x0]
80008cbe:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008cc2:	f3 4b fd 88 	st.w	r9[-632],r11
80008cc6:	2f f8       	sub	r8,-1
80008cc8:	14 97       	mov	r7,r10
80008cca:	fb 48 06 b4 	st.w	sp[1716],r8
80008cce:	c0 58       	rjmp	80008cd8 <_vfprintf_r+0xf34>
80008cd0:	72 0b       	ld.w	r11,r9[0x0]
80008cd2:	14 97       	mov	r7,r10
80008cd4:	2f c9       	sub	r9,-4
80008cd6:	51 09       	stdsp	sp[0x40],r9
80008cd8:	50 1b       	stdsp	sp[0x4],r11
80008cda:	30 0e       	mov	lr,0
80008cdc:	50 0e       	stdsp	sp[0x0],lr
80008cde:	1c 98       	mov	r8,lr
80008ce0:	e0 8f 02 fe 	bral	800092dc <_vfprintf_r+0x1538>
80008ce4:	50 a7       	stdsp	sp[0x28],r7
80008ce6:	50 80       	stdsp	sp[0x20],r0
80008ce8:	0c 97       	mov	r7,r6
80008cea:	04 94       	mov	r4,r2
80008cec:	06 96       	mov	r6,r3
80008cee:	02 92       	mov	r2,r1
80008cf0:	40 93       	lddsp	r3,sp[0x24]
80008cf2:	40 41       	lddsp	r1,sp[0x10]
80008cf4:	0e 99       	mov	r9,r7
80008cf6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008cfa:	40 3c       	lddsp	r12,sp[0xc]
80008cfc:	58 0c       	cp.w	r12,0
80008cfe:	c1 d0       	breq	80008d38 <_vfprintf_r+0xf94>
80008d00:	10 36       	cp.w	r6,r8
80008d02:	c0 64       	brge	80008d0e <_vfprintf_r+0xf6a>
80008d04:	fa cb f9 44 	sub	r11,sp,-1724
80008d08:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008d0c:	c1 d8       	rjmp	80008d46 <_vfprintf_r+0xfa2>
80008d0e:	fa c8 f9 50 	sub	r8,sp,-1712
80008d12:	1a d8       	st.w	--sp,r8
80008d14:	fa c8 fa b8 	sub	r8,sp,-1352
80008d18:	1a d8       	st.w	--sp,r8
80008d1a:	fa c8 fb b4 	sub	r8,sp,-1100
80008d1e:	1a d8       	st.w	--sp,r8
80008d20:	fa c9 ff b4 	sub	r9,sp,-76
80008d24:	fa c8 f9 40 	sub	r8,sp,-1728
80008d28:	04 9a       	mov	r10,r2
80008d2a:	0c 9b       	mov	r11,r6
80008d2c:	08 9c       	mov	r12,r4
80008d2e:	fe b0 f6 a3 	rcall	80007a74 <get_arg>
80008d32:	2f dd       	sub	sp,-12
80008d34:	78 09       	ld.w	r9,r12[0x0]
80008d36:	c2 18       	rjmp	80008d78 <_vfprintf_r+0xfd4>
80008d38:	2f f7       	sub	r7,-1
80008d3a:	10 39       	cp.w	r9,r8
80008d3c:	c0 84       	brge	80008d4c <_vfprintf_r+0xfa8>
80008d3e:	fa ca f9 44 	sub	r10,sp,-1724
80008d42:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008d46:	ec f9 fd 88 	ld.w	r9,r6[-632]
80008d4a:	c1 78       	rjmp	80008d78 <_vfprintf_r+0xfd4>
80008d4c:	41 09       	lddsp	r9,sp[0x40]
80008d4e:	59 f8       	cp.w	r8,31
80008d50:	e0 89 00 10 	brgt	80008d70 <_vfprintf_r+0xfcc>
80008d54:	f2 ca ff fc 	sub	r10,r9,-4
80008d58:	51 0a       	stdsp	sp[0x40],r10
80008d5a:	fa c6 f9 44 	sub	r6,sp,-1724
80008d5e:	72 09       	ld.w	r9,r9[0x0]
80008d60:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80008d64:	f5 49 fd 88 	st.w	r10[-632],r9
80008d68:	2f f8       	sub	r8,-1
80008d6a:	fb 48 06 b4 	st.w	sp[1716],r8
80008d6e:	c0 58       	rjmp	80008d78 <_vfprintf_r+0xfd4>
80008d70:	f2 c8 ff fc 	sub	r8,r9,-4
80008d74:	51 08       	stdsp	sp[0x40],r8
80008d76:	72 09       	ld.w	r9,r9[0x0]
80008d78:	33 08       	mov	r8,48
80008d7a:	fb 68 06 b8 	st.b	sp[1720],r8
80008d7e:	37 88       	mov	r8,120
80008d80:	30 0e       	mov	lr,0
80008d82:	fb 68 06 b9 	st.b	sp[1721],r8
80008d86:	fe cc c2 d2 	sub	r12,pc,-15662
80008d8a:	50 19       	stdsp	sp[0x4],r9
80008d8c:	a1 b5       	sbr	r5,0x1
80008d8e:	50 0e       	stdsp	sp[0x0],lr
80008d90:	50 dc       	stdsp	sp[0x34],r12
80008d92:	30 28       	mov	r8,2
80008d94:	37 80       	mov	r0,120
80008d96:	e0 8f 02 a3 	bral	800092dc <_vfprintf_r+0x1538>
80008d9a:	50 a7       	stdsp	sp[0x28],r7
80008d9c:	50 80       	stdsp	sp[0x20],r0
80008d9e:	10 90       	mov	r0,r8
80008da0:	30 08       	mov	r8,0
80008da2:	fb 68 06 bb 	st.b	sp[1723],r8
80008da6:	0c 97       	mov	r7,r6
80008da8:	04 94       	mov	r4,r2
80008daa:	06 96       	mov	r6,r3
80008dac:	02 92       	mov	r2,r1
80008dae:	40 93       	lddsp	r3,sp[0x24]
80008db0:	40 41       	lddsp	r1,sp[0x10]
80008db2:	0e 99       	mov	r9,r7
80008db4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008db8:	40 3b       	lddsp	r11,sp[0xc]
80008dba:	58 0b       	cp.w	r11,0
80008dbc:	c1 d0       	breq	80008df6 <_vfprintf_r+0x1052>
80008dbe:	10 36       	cp.w	r6,r8
80008dc0:	c0 64       	brge	80008dcc <_vfprintf_r+0x1028>
80008dc2:	fa ca f9 44 	sub	r10,sp,-1724
80008dc6:	f4 06 00 36 	add	r6,r10,r6<<0x3
80008dca:	c1 d8       	rjmp	80008e04 <_vfprintf_r+0x1060>
80008dcc:	fa c8 f9 50 	sub	r8,sp,-1712
80008dd0:	1a d8       	st.w	--sp,r8
80008dd2:	fa c8 fa b8 	sub	r8,sp,-1352
80008dd6:	1a d8       	st.w	--sp,r8
80008dd8:	fa c8 fb b4 	sub	r8,sp,-1100
80008ddc:	0c 9b       	mov	r11,r6
80008dde:	1a d8       	st.w	--sp,r8
80008de0:	04 9a       	mov	r10,r2
80008de2:	fa c8 f9 40 	sub	r8,sp,-1728
80008de6:	fa c9 ff b4 	sub	r9,sp,-76
80008dea:	08 9c       	mov	r12,r4
80008dec:	fe b0 f6 44 	rcall	80007a74 <get_arg>
80008df0:	2f dd       	sub	sp,-12
80008df2:	78 06       	ld.w	r6,r12[0x0]
80008df4:	c2 08       	rjmp	80008e34 <_vfprintf_r+0x1090>
80008df6:	2f f7       	sub	r7,-1
80008df8:	10 39       	cp.w	r9,r8
80008dfa:	c0 84       	brge	80008e0a <_vfprintf_r+0x1066>
80008dfc:	fa c9 f9 44 	sub	r9,sp,-1724
80008e00:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008e04:	ec f6 fd 88 	ld.w	r6,r6[-632]
80008e08:	c1 68       	rjmp	80008e34 <_vfprintf_r+0x1090>
80008e0a:	41 09       	lddsp	r9,sp[0x40]
80008e0c:	59 f8       	cp.w	r8,31
80008e0e:	e0 89 00 10 	brgt	80008e2e <_vfprintf_r+0x108a>
80008e12:	f2 ca ff fc 	sub	r10,r9,-4
80008e16:	51 0a       	stdsp	sp[0x40],r10
80008e18:	72 06       	ld.w	r6,r9[0x0]
80008e1a:	fa ce f9 44 	sub	lr,sp,-1724
80008e1e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80008e22:	f3 46 fd 88 	st.w	r9[-632],r6
80008e26:	2f f8       	sub	r8,-1
80008e28:	fb 48 06 b4 	st.w	sp[1716],r8
80008e2c:	c0 48       	rjmp	80008e34 <_vfprintf_r+0x1090>
80008e2e:	72 06       	ld.w	r6,r9[0x0]
80008e30:	2f c9       	sub	r9,-4
80008e32:	51 09       	stdsp	sp[0x40],r9
80008e34:	40 2c       	lddsp	r12,sp[0x8]
80008e36:	58 0c       	cp.w	r12,0
80008e38:	c1 05       	brlt	80008e58 <_vfprintf_r+0x10b4>
80008e3a:	18 9a       	mov	r10,r12
80008e3c:	30 0b       	mov	r11,0
80008e3e:	0c 9c       	mov	r12,r6
80008e40:	e0 a0 10 fa 	rcall	8000b034 <memchr>
80008e44:	e0 80 02 df 	breq	80009402 <_vfprintf_r+0x165e>
80008e48:	f8 06 01 02 	sub	r2,r12,r6
80008e4c:	40 2b       	lddsp	r11,sp[0x8]
80008e4e:	16 32       	cp.w	r2,r11
80008e50:	e0 89 02 d9 	brgt	80009402 <_vfprintf_r+0x165e>
80008e54:	e0 8f 02 d4 	bral	800093fc <_vfprintf_r+0x1658>
80008e58:	30 0a       	mov	r10,0
80008e5a:	0c 9c       	mov	r12,r6
80008e5c:	50 2a       	stdsp	sp[0x8],r10
80008e5e:	e0 a0 14 18 	rcall	8000b68e <strlen>
80008e62:	18 92       	mov	r2,r12
80008e64:	e0 8f 02 d2 	bral	80009408 <_vfprintf_r+0x1664>
80008e68:	50 a7       	stdsp	sp[0x28],r7
80008e6a:	50 80       	stdsp	sp[0x20],r0
80008e6c:	0c 97       	mov	r7,r6
80008e6e:	04 94       	mov	r4,r2
80008e70:	06 96       	mov	r6,r3
80008e72:	02 92       	mov	r2,r1
80008e74:	40 93       	lddsp	r3,sp[0x24]
80008e76:	10 90       	mov	r0,r8
80008e78:	40 41       	lddsp	r1,sp[0x10]
80008e7a:	a5 a5       	sbr	r5,0x4
80008e7c:	c0 a8       	rjmp	80008e90 <_vfprintf_r+0x10ec>
80008e7e:	50 a7       	stdsp	sp[0x28],r7
80008e80:	50 80       	stdsp	sp[0x20],r0
80008e82:	0c 97       	mov	r7,r6
80008e84:	04 94       	mov	r4,r2
80008e86:	06 96       	mov	r6,r3
80008e88:	02 92       	mov	r2,r1
80008e8a:	40 93       	lddsp	r3,sp[0x24]
80008e8c:	10 90       	mov	r0,r8
80008e8e:	40 41       	lddsp	r1,sp[0x10]
80008e90:	ed b5 00 05 	bld	r5,0x5
80008e94:	c5 61       	brne	80008f40 <_vfprintf_r+0x119c>
80008e96:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008e9a:	40 39       	lddsp	r9,sp[0xc]
80008e9c:	58 09       	cp.w	r9,0
80008e9e:	c2 10       	breq	80008ee0 <_vfprintf_r+0x113c>
80008ea0:	10 36       	cp.w	r6,r8
80008ea2:	c0 74       	brge	80008eb0 <_vfprintf_r+0x110c>
80008ea4:	fa c8 f9 44 	sub	r8,sp,-1724
80008ea8:	f0 06 00 36 	add	r6,r8,r6<<0x3
80008eac:	c2 38       	rjmp	80008ef2 <_vfprintf_r+0x114e>
80008eae:	d7 03       	nop
80008eb0:	fa c8 f9 50 	sub	r8,sp,-1712
80008eb4:	1a d8       	st.w	--sp,r8
80008eb6:	fa c8 fa b8 	sub	r8,sp,-1352
80008eba:	1a d8       	st.w	--sp,r8
80008ebc:	fa c8 fb b4 	sub	r8,sp,-1100
80008ec0:	1a d8       	st.w	--sp,r8
80008ec2:	fa c8 f9 40 	sub	r8,sp,-1728
80008ec6:	fa c9 ff b4 	sub	r9,sp,-76
80008eca:	04 9a       	mov	r10,r2
80008ecc:	0c 9b       	mov	r11,r6
80008ece:	08 9c       	mov	r12,r4
80008ed0:	fe b0 f5 d2 	rcall	80007a74 <get_arg>
80008ed4:	2f dd       	sub	sp,-12
80008ed6:	f8 e8 00 00 	ld.d	r8,r12[0]
80008eda:	fa e9 00 00 	st.d	sp[0],r8
80008ede:	c2 e8       	rjmp	80008f3a <_vfprintf_r+0x1196>
80008ee0:	ee ca ff ff 	sub	r10,r7,-1
80008ee4:	10 37       	cp.w	r7,r8
80008ee6:	c0 b4       	brge	80008efc <_vfprintf_r+0x1158>
80008ee8:	fa c8 f9 44 	sub	r8,sp,-1724
80008eec:	14 97       	mov	r7,r10
80008eee:	f0 06 00 36 	add	r6,r8,r6<<0x3
80008ef2:	ec ea fd 88 	ld.d	r10,r6[-632]
80008ef6:	fa eb 00 00 	st.d	sp[0],r10
80008efa:	c2 08       	rjmp	80008f3a <_vfprintf_r+0x1196>
80008efc:	41 09       	lddsp	r9,sp[0x40]
80008efe:	59 f8       	cp.w	r8,31
80008f00:	e0 89 00 16 	brgt	80008f2c <_vfprintf_r+0x1188>
80008f04:	f2 e6 00 00 	ld.d	r6,r9[0]
80008f08:	f2 cb ff f8 	sub	r11,r9,-8
80008f0c:	fa e7 00 00 	st.d	sp[0],r6
80008f10:	51 0b       	stdsp	sp[0x40],r11
80008f12:	fa c6 f9 44 	sub	r6,sp,-1724
80008f16:	ec 08 00 39 	add	r9,r6,r8<<0x3
80008f1a:	fa e6 00 00 	ld.d	r6,sp[0]
80008f1e:	f2 e7 fd 88 	st.d	r9[-632],r6
80008f22:	2f f8       	sub	r8,-1
80008f24:	14 97       	mov	r7,r10
80008f26:	fb 48 06 b4 	st.w	sp[1716],r8
80008f2a:	c0 88       	rjmp	80008f3a <_vfprintf_r+0x1196>
80008f2c:	f2 e6 00 00 	ld.d	r6,r9[0]
80008f30:	2f 89       	sub	r9,-8
80008f32:	fa e7 00 00 	st.d	sp[0],r6
80008f36:	51 09       	stdsp	sp[0x40],r9
80008f38:	14 97       	mov	r7,r10
80008f3a:	30 18       	mov	r8,1
80008f3c:	e0 8f 01 d0 	bral	800092dc <_vfprintf_r+0x1538>
80008f40:	ed b5 00 04 	bld	r5,0x4
80008f44:	c1 61       	brne	80008f70 <_vfprintf_r+0x11cc>
80008f46:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008f4a:	40 3e       	lddsp	lr,sp[0xc]
80008f4c:	58 0e       	cp.w	lr,0
80008f4e:	c0 80       	breq	80008f5e <_vfprintf_r+0x11ba>
80008f50:	10 36       	cp.w	r6,r8
80008f52:	c6 74       	brge	80009020 <_vfprintf_r+0x127c>
80008f54:	fa cc f9 44 	sub	r12,sp,-1724
80008f58:	f8 06 00 36 	add	r6,r12,r6<<0x3
80008f5c:	c8 08       	rjmp	8000905c <_vfprintf_r+0x12b8>
80008f5e:	ee ca ff ff 	sub	r10,r7,-1
80008f62:	10 37       	cp.w	r7,r8
80008f64:	c7 f4       	brge	80009062 <_vfprintf_r+0x12be>
80008f66:	fa cb f9 44 	sub	r11,sp,-1724
80008f6a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008f6e:	c7 68       	rjmp	8000905a <_vfprintf_r+0x12b6>
80008f70:	ed b5 00 06 	bld	r5,0x6
80008f74:	c4 a1       	brne	80009008 <_vfprintf_r+0x1264>
80008f76:	fa f8 06 b4 	ld.w	r8,sp[1716]
80008f7a:	40 3c       	lddsp	r12,sp[0xc]
80008f7c:	58 0c       	cp.w	r12,0
80008f7e:	c1 d0       	breq	80008fb8 <_vfprintf_r+0x1214>
80008f80:	10 36       	cp.w	r6,r8
80008f82:	c0 64       	brge	80008f8e <_vfprintf_r+0x11ea>
80008f84:	fa cb f9 44 	sub	r11,sp,-1724
80008f88:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008f8c:	c1 f8       	rjmp	80008fca <_vfprintf_r+0x1226>
80008f8e:	fa c8 f9 50 	sub	r8,sp,-1712
80008f92:	1a d8       	st.w	--sp,r8
80008f94:	fa c8 fa b8 	sub	r8,sp,-1352
80008f98:	1a d8       	st.w	--sp,r8
80008f9a:	fa c8 fb b4 	sub	r8,sp,-1100
80008f9e:	1a d8       	st.w	--sp,r8
80008fa0:	fa c8 f9 40 	sub	r8,sp,-1728
80008fa4:	fa c9 ff b4 	sub	r9,sp,-76
80008fa8:	04 9a       	mov	r10,r2
80008faa:	0c 9b       	mov	r11,r6
80008fac:	08 9c       	mov	r12,r4
80008fae:	fe b0 f5 63 	rcall	80007a74 <get_arg>
80008fb2:	2f dd       	sub	sp,-12
80008fb4:	98 18       	ld.sh	r8,r12[0x2]
80008fb6:	c2 68       	rjmp	80009002 <_vfprintf_r+0x125e>
80008fb8:	ee ca ff ff 	sub	r10,r7,-1
80008fbc:	10 37       	cp.w	r7,r8
80008fbe:	c0 94       	brge	80008fd0 <_vfprintf_r+0x122c>
80008fc0:	fa c9 f9 44 	sub	r9,sp,-1724
80008fc4:	14 97       	mov	r7,r10
80008fc6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80008fca:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008fce:	c1 a8       	rjmp	80009002 <_vfprintf_r+0x125e>
80008fd0:	41 09       	lddsp	r9,sp[0x40]
80008fd2:	59 f8       	cp.w	r8,31
80008fd4:	e0 89 00 13 	brgt	80008ffa <_vfprintf_r+0x1256>
80008fd8:	f2 cb ff fc 	sub	r11,r9,-4
80008fdc:	51 0b       	stdsp	sp[0x40],r11
80008fde:	72 09       	ld.w	r9,r9[0x0]
80008fe0:	fa c6 f9 44 	sub	r6,sp,-1724
80008fe4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80008fe8:	2f f8       	sub	r8,-1
80008fea:	f7 49 fd 88 	st.w	r11[-632],r9
80008fee:	fb 48 06 b4 	st.w	sp[1716],r8
80008ff2:	14 97       	mov	r7,r10
80008ff4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80008ff8:	c0 58       	rjmp	80009002 <_vfprintf_r+0x125e>
80008ffa:	92 18       	ld.sh	r8,r9[0x2]
80008ffc:	14 97       	mov	r7,r10
80008ffe:	2f c9       	sub	r9,-4
80009000:	51 09       	stdsp	sp[0x40],r9
80009002:	5c 78       	castu.h	r8
80009004:	50 18       	stdsp	sp[0x4],r8
80009006:	c4 68       	rjmp	80009092 <_vfprintf_r+0x12ee>
80009008:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000900c:	40 3c       	lddsp	r12,sp[0xc]
8000900e:	58 0c       	cp.w	r12,0
80009010:	c1 d0       	breq	8000904a <_vfprintf_r+0x12a6>
80009012:	10 36       	cp.w	r6,r8
80009014:	c0 64       	brge	80009020 <_vfprintf_r+0x127c>
80009016:	fa cb f9 44 	sub	r11,sp,-1724
8000901a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000901e:	c1 f8       	rjmp	8000905c <_vfprintf_r+0x12b8>
80009020:	fa c8 f9 50 	sub	r8,sp,-1712
80009024:	1a d8       	st.w	--sp,r8
80009026:	fa c8 fa b8 	sub	r8,sp,-1352
8000902a:	0c 9b       	mov	r11,r6
8000902c:	1a d8       	st.w	--sp,r8
8000902e:	fa c8 fb b4 	sub	r8,sp,-1100
80009032:	04 9a       	mov	r10,r2
80009034:	1a d8       	st.w	--sp,r8
80009036:	08 9c       	mov	r12,r4
80009038:	fa c8 f9 40 	sub	r8,sp,-1728
8000903c:	fa c9 ff b4 	sub	r9,sp,-76
80009040:	fe b0 f5 1a 	rcall	80007a74 <get_arg>
80009044:	2f dd       	sub	sp,-12
80009046:	78 0b       	ld.w	r11,r12[0x0]
80009048:	c2 48       	rjmp	80009090 <_vfprintf_r+0x12ec>
8000904a:	ee ca ff ff 	sub	r10,r7,-1
8000904e:	10 37       	cp.w	r7,r8
80009050:	c0 94       	brge	80009062 <_vfprintf_r+0x12be>
80009052:	fa c9 f9 44 	sub	r9,sp,-1724
80009056:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000905a:	14 97       	mov	r7,r10
8000905c:	ec fb fd 88 	ld.w	r11,r6[-632]
80009060:	c1 88       	rjmp	80009090 <_vfprintf_r+0x12ec>
80009062:	41 09       	lddsp	r9,sp[0x40]
80009064:	59 f8       	cp.w	r8,31
80009066:	e0 89 00 11 	brgt	80009088 <_vfprintf_r+0x12e4>
8000906a:	f2 cb ff fc 	sub	r11,r9,-4
8000906e:	51 0b       	stdsp	sp[0x40],r11
80009070:	fa c6 f9 44 	sub	r6,sp,-1724
80009074:	72 0b       	ld.w	r11,r9[0x0]
80009076:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000907a:	f3 4b fd 88 	st.w	r9[-632],r11
8000907e:	2f f8       	sub	r8,-1
80009080:	14 97       	mov	r7,r10
80009082:	fb 48 06 b4 	st.w	sp[1716],r8
80009086:	c0 58       	rjmp	80009090 <_vfprintf_r+0x12ec>
80009088:	72 0b       	ld.w	r11,r9[0x0]
8000908a:	14 97       	mov	r7,r10
8000908c:	2f c9       	sub	r9,-4
8000908e:	51 09       	stdsp	sp[0x40],r9
80009090:	50 1b       	stdsp	sp[0x4],r11
80009092:	30 0e       	mov	lr,0
80009094:	30 18       	mov	r8,1
80009096:	50 0e       	stdsp	sp[0x0],lr
80009098:	c2 29       	rjmp	800092dc <_vfprintf_r+0x1538>
8000909a:	50 a7       	stdsp	sp[0x28],r7
8000909c:	50 80       	stdsp	sp[0x20],r0
8000909e:	0c 97       	mov	r7,r6
800090a0:	04 94       	mov	r4,r2
800090a2:	06 96       	mov	r6,r3
800090a4:	02 92       	mov	r2,r1
800090a6:	fe cc c5 f2 	sub	r12,pc,-14862
800090aa:	40 93       	lddsp	r3,sp[0x24]
800090ac:	10 90       	mov	r0,r8
800090ae:	40 41       	lddsp	r1,sp[0x10]
800090b0:	50 dc       	stdsp	sp[0x34],r12
800090b2:	ed b5 00 05 	bld	r5,0x5
800090b6:	c5 51       	brne	80009160 <_vfprintf_r+0x13bc>
800090b8:	fa f8 06 b4 	ld.w	r8,sp[1716]
800090bc:	40 3b       	lddsp	r11,sp[0xc]
800090be:	58 0b       	cp.w	r11,0
800090c0:	c2 20       	breq	80009104 <_vfprintf_r+0x1360>
800090c2:	10 36       	cp.w	r6,r8
800090c4:	c0 a4       	brge	800090d8 <_vfprintf_r+0x1334>
800090c6:	fa ca f9 44 	sub	r10,sp,-1724
800090ca:	f4 06 00 36 	add	r6,r10,r6<<0x3
800090ce:	ec e8 fd 88 	ld.d	r8,r6[-632]
800090d2:	fa e9 00 00 	st.d	sp[0],r8
800090d6:	cf 28       	rjmp	800092ba <_vfprintf_r+0x1516>
800090d8:	fa c8 f9 50 	sub	r8,sp,-1712
800090dc:	1a d8       	st.w	--sp,r8
800090de:	fa c8 fa b8 	sub	r8,sp,-1352
800090e2:	04 9a       	mov	r10,r2
800090e4:	1a d8       	st.w	--sp,r8
800090e6:	0c 9b       	mov	r11,r6
800090e8:	fa c8 fb b4 	sub	r8,sp,-1100
800090ec:	08 9c       	mov	r12,r4
800090ee:	1a d8       	st.w	--sp,r8
800090f0:	fa c8 f9 40 	sub	r8,sp,-1728
800090f4:	fa c9 ff b4 	sub	r9,sp,-76
800090f8:	fe b0 f4 be 	rcall	80007a74 <get_arg>
800090fc:	2f dd       	sub	sp,-12
800090fe:	f8 ea 00 00 	ld.d	r10,r12[0]
80009102:	c0 c8       	rjmp	8000911a <_vfprintf_r+0x1376>
80009104:	ee ca ff ff 	sub	r10,r7,-1
80009108:	10 37       	cp.w	r7,r8
8000910a:	c0 b4       	brge	80009120 <_vfprintf_r+0x137c>
8000910c:	fa c9 f9 44 	sub	r9,sp,-1724
80009110:	14 97       	mov	r7,r10
80009112:	f2 06 00 36 	add	r6,r9,r6<<0x3
80009116:	ec ea fd 88 	ld.d	r10,r6[-632]
8000911a:	fa eb 00 00 	st.d	sp[0],r10
8000911e:	cc e8       	rjmp	800092ba <_vfprintf_r+0x1516>
80009120:	41 09       	lddsp	r9,sp[0x40]
80009122:	59 f8       	cp.w	r8,31
80009124:	e0 89 00 16 	brgt	80009150 <_vfprintf_r+0x13ac>
80009128:	f2 e6 00 00 	ld.d	r6,r9[0]
8000912c:	f2 cb ff f8 	sub	r11,r9,-8
80009130:	fa e7 00 00 	st.d	sp[0],r6
80009134:	51 0b       	stdsp	sp[0x40],r11
80009136:	fa c6 f9 44 	sub	r6,sp,-1724
8000913a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000913e:	fa e6 00 00 	ld.d	r6,sp[0]
80009142:	f2 e7 fd 88 	st.d	r9[-632],r6
80009146:	2f f8       	sub	r8,-1
80009148:	14 97       	mov	r7,r10
8000914a:	fb 48 06 b4 	st.w	sp[1716],r8
8000914e:	cb 68       	rjmp	800092ba <_vfprintf_r+0x1516>
80009150:	f2 e6 00 00 	ld.d	r6,r9[0]
80009154:	2f 89       	sub	r9,-8
80009156:	fa e7 00 00 	st.d	sp[0],r6
8000915a:	51 09       	stdsp	sp[0x40],r9
8000915c:	14 97       	mov	r7,r10
8000915e:	ca e8       	rjmp	800092ba <_vfprintf_r+0x1516>
80009160:	ed b5 00 04 	bld	r5,0x4
80009164:	c1 71       	brne	80009192 <_vfprintf_r+0x13ee>
80009166:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000916a:	40 3e       	lddsp	lr,sp[0xc]
8000916c:	58 0e       	cp.w	lr,0
8000916e:	c0 80       	breq	8000917e <_vfprintf_r+0x13da>
80009170:	10 36       	cp.w	r6,r8
80009172:	c6 94       	brge	80009244 <_vfprintf_r+0x14a0>
80009174:	fa cc f9 44 	sub	r12,sp,-1724
80009178:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000917c:	c8 28       	rjmp	80009280 <_vfprintf_r+0x14dc>
8000917e:	ee ca ff ff 	sub	r10,r7,-1
80009182:	10 37       	cp.w	r7,r8
80009184:	e0 84 00 81 	brge	80009286 <_vfprintf_r+0x14e2>
80009188:	fa cb f9 44 	sub	r11,sp,-1724
8000918c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009190:	c7 78       	rjmp	8000927e <_vfprintf_r+0x14da>
80009192:	ed b5 00 06 	bld	r5,0x6
80009196:	c4 b1       	brne	8000922c <_vfprintf_r+0x1488>
80009198:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000919c:	40 3c       	lddsp	r12,sp[0xc]
8000919e:	58 0c       	cp.w	r12,0
800091a0:	c1 d0       	breq	800091da <_vfprintf_r+0x1436>
800091a2:	10 36       	cp.w	r6,r8
800091a4:	c0 64       	brge	800091b0 <_vfprintf_r+0x140c>
800091a6:	fa cb f9 44 	sub	r11,sp,-1724
800091aa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800091ae:	c1 f8       	rjmp	800091ec <_vfprintf_r+0x1448>
800091b0:	fa c8 f9 50 	sub	r8,sp,-1712
800091b4:	1a d8       	st.w	--sp,r8
800091b6:	fa c8 fa b8 	sub	r8,sp,-1352
800091ba:	1a d8       	st.w	--sp,r8
800091bc:	fa c8 fb b4 	sub	r8,sp,-1100
800091c0:	1a d8       	st.w	--sp,r8
800091c2:	fa c8 f9 40 	sub	r8,sp,-1728
800091c6:	fa c9 ff b4 	sub	r9,sp,-76
800091ca:	04 9a       	mov	r10,r2
800091cc:	0c 9b       	mov	r11,r6
800091ce:	08 9c       	mov	r12,r4
800091d0:	fe b0 f4 52 	rcall	80007a74 <get_arg>
800091d4:	2f dd       	sub	sp,-12
800091d6:	98 18       	ld.sh	r8,r12[0x2]
800091d8:	c2 78       	rjmp	80009226 <_vfprintf_r+0x1482>
800091da:	ee ca ff ff 	sub	r10,r7,-1
800091de:	10 37       	cp.w	r7,r8
800091e0:	c0 a4       	brge	800091f4 <_vfprintf_r+0x1450>
800091e2:	fa c9 f9 44 	sub	r9,sp,-1724
800091e6:	14 97       	mov	r7,r10
800091e8:	f2 06 00 36 	add	r6,r9,r6<<0x3
800091ec:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800091f0:	c1 b8       	rjmp	80009226 <_vfprintf_r+0x1482>
800091f2:	d7 03       	nop
800091f4:	41 09       	lddsp	r9,sp[0x40]
800091f6:	59 f8       	cp.w	r8,31
800091f8:	e0 89 00 13 	brgt	8000921e <_vfprintf_r+0x147a>
800091fc:	f2 cb ff fc 	sub	r11,r9,-4
80009200:	51 0b       	stdsp	sp[0x40],r11
80009202:	72 09       	ld.w	r9,r9[0x0]
80009204:	fa c6 f9 44 	sub	r6,sp,-1724
80009208:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000920c:	2f f8       	sub	r8,-1
8000920e:	f7 49 fd 88 	st.w	r11[-632],r9
80009212:	fb 48 06 b4 	st.w	sp[1716],r8
80009216:	14 97       	mov	r7,r10
80009218:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000921c:	c0 58       	rjmp	80009226 <_vfprintf_r+0x1482>
8000921e:	92 18       	ld.sh	r8,r9[0x2]
80009220:	14 97       	mov	r7,r10
80009222:	2f c9       	sub	r9,-4
80009224:	51 09       	stdsp	sp[0x40],r9
80009226:	5c 78       	castu.h	r8
80009228:	50 18       	stdsp	sp[0x4],r8
8000922a:	c4 68       	rjmp	800092b6 <_vfprintf_r+0x1512>
8000922c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80009230:	40 3c       	lddsp	r12,sp[0xc]
80009232:	58 0c       	cp.w	r12,0
80009234:	c1 d0       	breq	8000926e <_vfprintf_r+0x14ca>
80009236:	10 36       	cp.w	r6,r8
80009238:	c0 64       	brge	80009244 <_vfprintf_r+0x14a0>
8000923a:	fa cb f9 44 	sub	r11,sp,-1724
8000923e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80009242:	c1 f8       	rjmp	80009280 <_vfprintf_r+0x14dc>
80009244:	fa c8 f9 50 	sub	r8,sp,-1712
80009248:	1a d8       	st.w	--sp,r8
8000924a:	fa c8 fa b8 	sub	r8,sp,-1352
8000924e:	0c 9b       	mov	r11,r6
80009250:	1a d8       	st.w	--sp,r8
80009252:	fa c8 fb b4 	sub	r8,sp,-1100
80009256:	04 9a       	mov	r10,r2
80009258:	1a d8       	st.w	--sp,r8
8000925a:	08 9c       	mov	r12,r4
8000925c:	fa c8 f9 40 	sub	r8,sp,-1728
80009260:	fa c9 ff b4 	sub	r9,sp,-76
80009264:	fe b0 f4 08 	rcall	80007a74 <get_arg>
80009268:	2f dd       	sub	sp,-12
8000926a:	78 0b       	ld.w	r11,r12[0x0]
8000926c:	c2 48       	rjmp	800092b4 <_vfprintf_r+0x1510>
8000926e:	ee ca ff ff 	sub	r10,r7,-1
80009272:	10 37       	cp.w	r7,r8
80009274:	c0 94       	brge	80009286 <_vfprintf_r+0x14e2>
80009276:	fa c9 f9 44 	sub	r9,sp,-1724
8000927a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000927e:	14 97       	mov	r7,r10
80009280:	ec fb fd 88 	ld.w	r11,r6[-632]
80009284:	c1 88       	rjmp	800092b4 <_vfprintf_r+0x1510>
80009286:	41 09       	lddsp	r9,sp[0x40]
80009288:	59 f8       	cp.w	r8,31
8000928a:	e0 89 00 11 	brgt	800092ac <_vfprintf_r+0x1508>
8000928e:	f2 cb ff fc 	sub	r11,r9,-4
80009292:	51 0b       	stdsp	sp[0x40],r11
80009294:	fa c6 f9 44 	sub	r6,sp,-1724
80009298:	72 0b       	ld.w	r11,r9[0x0]
8000929a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000929e:	f3 4b fd 88 	st.w	r9[-632],r11
800092a2:	2f f8       	sub	r8,-1
800092a4:	14 97       	mov	r7,r10
800092a6:	fb 48 06 b4 	st.w	sp[1716],r8
800092aa:	c0 58       	rjmp	800092b4 <_vfprintf_r+0x1510>
800092ac:	72 0b       	ld.w	r11,r9[0x0]
800092ae:	14 97       	mov	r7,r10
800092b0:	2f c9       	sub	r9,-4
800092b2:	51 09       	stdsp	sp[0x40],r9
800092b4:	50 1b       	stdsp	sp[0x4],r11
800092b6:	30 0e       	mov	lr,0
800092b8:	50 0e       	stdsp	sp[0x0],lr
800092ba:	40 08       	lddsp	r8,sp[0x0]
800092bc:	40 1c       	lddsp	r12,sp[0x4]
800092be:	18 48       	or	r8,r12
800092c0:	5f 19       	srne	r9
800092c2:	0a 98       	mov	r8,r5
800092c4:	eb e9 00 09 	and	r9,r5,r9
800092c8:	a1 b8       	sbr	r8,0x1
800092ca:	58 09       	cp.w	r9,0
800092cc:	c0 70       	breq	800092da <_vfprintf_r+0x1536>
800092ce:	10 95       	mov	r5,r8
800092d0:	fb 60 06 b9 	st.b	sp[1721],r0
800092d4:	33 08       	mov	r8,48
800092d6:	fb 68 06 b8 	st.b	sp[1720],r8
800092da:	30 28       	mov	r8,2
800092dc:	30 09       	mov	r9,0
800092de:	fb 69 06 bb 	st.b	sp[1723],r9
800092e2:	0a 99       	mov	r9,r5
800092e4:	a7 d9       	cbr	r9,0x7
800092e6:	40 2b       	lddsp	r11,sp[0x8]
800092e8:	40 16       	lddsp	r6,sp[0x4]
800092ea:	58 0b       	cp.w	r11,0
800092ec:	5f 1a       	srne	r10
800092ee:	f2 05 17 40 	movge	r5,r9
800092f2:	fa c2 f9 78 	sub	r2,sp,-1672
800092f6:	40 09       	lddsp	r9,sp[0x0]
800092f8:	0c 49       	or	r9,r6
800092fa:	5f 19       	srne	r9
800092fc:	f5 e9 10 09 	or	r9,r10,r9
80009300:	c5 c0       	breq	800093b8 <_vfprintf_r+0x1614>
80009302:	30 19       	mov	r9,1
80009304:	f2 08 18 00 	cp.b	r8,r9
80009308:	c0 60       	breq	80009314 <_vfprintf_r+0x1570>
8000930a:	30 29       	mov	r9,2
8000930c:	f2 08 18 00 	cp.b	r8,r9
80009310:	c0 41       	brne	80009318 <_vfprintf_r+0x1574>
80009312:	c3 c8       	rjmp	8000938a <_vfprintf_r+0x15e6>
80009314:	04 96       	mov	r6,r2
80009316:	c3 08       	rjmp	80009376 <_vfprintf_r+0x15d2>
80009318:	04 96       	mov	r6,r2
8000931a:	fa e8 00 00 	ld.d	r8,sp[0]
8000931e:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80009322:	2d 0a       	sub	r10,-48
80009324:	0c fa       	st.b	--r6,r10
80009326:	f0 0b 16 03 	lsr	r11,r8,0x3
8000932a:	f2 0c 16 03 	lsr	r12,r9,0x3
8000932e:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80009332:	18 99       	mov	r9,r12
80009334:	16 98       	mov	r8,r11
80009336:	58 08       	cp.w	r8,0
80009338:	5c 29       	cpc	r9
8000933a:	cf 21       	brne	8000931e <_vfprintf_r+0x157a>
8000933c:	fa e9 00 00 	st.d	sp[0],r8
80009340:	ed b5 00 00 	bld	r5,0x0
80009344:	c4 51       	brne	800093ce <_vfprintf_r+0x162a>
80009346:	33 09       	mov	r9,48
80009348:	f2 0a 18 00 	cp.b	r10,r9
8000934c:	c4 10       	breq	800093ce <_vfprintf_r+0x162a>
8000934e:	0c f9       	st.b	--r6,r9
80009350:	c3 f8       	rjmp	800093ce <_vfprintf_r+0x162a>
80009352:	fa ea 00 00 	ld.d	r10,sp[0]
80009356:	30 a8       	mov	r8,10
80009358:	30 09       	mov	r9,0
8000935a:	e0 a0 16 b5 	rcall	8000c0c4 <__avr32_umod64>
8000935e:	30 a8       	mov	r8,10
80009360:	2d 0a       	sub	r10,-48
80009362:	30 09       	mov	r9,0
80009364:	ac 8a       	st.b	r6[0x0],r10
80009366:	fa ea 00 00 	ld.d	r10,sp[0]
8000936a:	fe b0 ea 59 	rcall	8000681c <__avr32_udiv64>
8000936e:	16 99       	mov	r9,r11
80009370:	14 98       	mov	r8,r10
80009372:	fa e9 00 00 	st.d	sp[0],r8
80009376:	20 16       	sub	r6,1
80009378:	fa ea 00 00 	ld.d	r10,sp[0]
8000937c:	58 9a       	cp.w	r10,9
8000937e:	5c 2b       	cpc	r11
80009380:	fe 9b ff e9 	brhi	80009352 <_vfprintf_r+0x15ae>
80009384:	1b f8       	ld.ub	r8,sp[0x7]
80009386:	2d 08       	sub	r8,-48
80009388:	c2 08       	rjmp	800093c8 <_vfprintf_r+0x1624>
8000938a:	04 96       	mov	r6,r2
8000938c:	fa e8 00 00 	ld.d	r8,sp[0]
80009390:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80009394:	40 de       	lddsp	lr,sp[0x34]
80009396:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000939a:	0c fa       	st.b	--r6,r10
8000939c:	f2 0b 16 04 	lsr	r11,r9,0x4
800093a0:	f0 0a 16 04 	lsr	r10,r8,0x4
800093a4:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
800093a8:	16 99       	mov	r9,r11
800093aa:	14 98       	mov	r8,r10
800093ac:	58 08       	cp.w	r8,0
800093ae:	5c 29       	cpc	r9
800093b0:	cf 01       	brne	80009390 <_vfprintf_r+0x15ec>
800093b2:	fa e9 00 00 	st.d	sp[0],r8
800093b6:	c0 c8       	rjmp	800093ce <_vfprintf_r+0x162a>
800093b8:	58 08       	cp.w	r8,0
800093ba:	c0 91       	brne	800093cc <_vfprintf_r+0x1628>
800093bc:	ed b5 00 00 	bld	r5,0x0
800093c0:	c0 61       	brne	800093cc <_vfprintf_r+0x1628>
800093c2:	fa c6 f9 79 	sub	r6,sp,-1671
800093c6:	33 08       	mov	r8,48
800093c8:	ac 88       	st.b	r6[0x0],r8
800093ca:	c0 28       	rjmp	800093ce <_vfprintf_r+0x162a>
800093cc:	04 96       	mov	r6,r2
800093ce:	0c 12       	sub	r2,r6
800093d0:	c1 c8       	rjmp	80009408 <_vfprintf_r+0x1664>
800093d2:	50 a7       	stdsp	sp[0x28],r7
800093d4:	50 80       	stdsp	sp[0x20],r0
800093d6:	40 93       	lddsp	r3,sp[0x24]
800093d8:	0c 97       	mov	r7,r6
800093da:	10 90       	mov	r0,r8
800093dc:	04 94       	mov	r4,r2
800093de:	40 41       	lddsp	r1,sp[0x10]
800093e0:	58 08       	cp.w	r8,0
800093e2:	e0 80 04 4f 	breq	80009c80 <_vfprintf_r+0x1edc>
800093e6:	fb 68 06 60 	st.b	sp[1632],r8
800093ea:	30 0c       	mov	r12,0
800093ec:	30 08       	mov	r8,0
800093ee:	30 12       	mov	r2,1
800093f0:	fb 68 06 bb 	st.b	sp[1723],r8
800093f4:	50 2c       	stdsp	sp[0x8],r12
800093f6:	fa c6 f9 a0 	sub	r6,sp,-1632
800093fa:	c0 78       	rjmp	80009408 <_vfprintf_r+0x1664>
800093fc:	30 0b       	mov	r11,0
800093fe:	50 2b       	stdsp	sp[0x8],r11
80009400:	c0 48       	rjmp	80009408 <_vfprintf_r+0x1664>
80009402:	40 22       	lddsp	r2,sp[0x8]
80009404:	30 0a       	mov	r10,0
80009406:	50 2a       	stdsp	sp[0x8],r10
80009408:	40 29       	lddsp	r9,sp[0x8]
8000940a:	e4 09 0c 49 	max	r9,r2,r9
8000940e:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80009412:	50 39       	stdsp	sp[0xc],r9
80009414:	0a 9e       	mov	lr,r5
80009416:	30 09       	mov	r9,0
80009418:	e2 1e 00 02 	andl	lr,0x2,COH
8000941c:	f2 08 18 00 	cp.b	r8,r9
80009420:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80009424:	f7 b8 01 ff 	subne	r8,-1
80009428:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000942c:	0a 9b       	mov	r11,r5
8000942e:	58 0e       	cp.w	lr,0
80009430:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80009434:	f7 bc 01 fe 	subne	r12,-2
80009438:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000943c:	e2 1b 00 84 	andl	r11,0x84,COH
80009440:	50 fe       	stdsp	sp[0x3c],lr
80009442:	50 9b       	stdsp	sp[0x24],r11
80009444:	c4 71       	brne	800094d2 <_vfprintf_r+0x172e>
80009446:	40 8a       	lddsp	r10,sp[0x20]
80009448:	40 39       	lddsp	r9,sp[0xc]
8000944a:	12 1a       	sub	r10,r9
8000944c:	50 4a       	stdsp	sp[0x10],r10
8000944e:	58 0a       	cp.w	r10,0
80009450:	e0 89 00 20 	brgt	80009490 <_vfprintf_r+0x16ec>
80009454:	c3 f8       	rjmp	800094d2 <_vfprintf_r+0x172e>
80009456:	2f 09       	sub	r9,-16
80009458:	2f f8       	sub	r8,-1
8000945a:	fe ce c9 8e 	sub	lr,pc,-13938
8000945e:	31 0c       	mov	r12,16
80009460:	fb 49 06 90 	st.w	sp[1680],r9
80009464:	87 0e       	st.w	r3[0x0],lr
80009466:	87 1c       	st.w	r3[0x4],r12
80009468:	fb 48 06 8c 	st.w	sp[1676],r8
8000946c:	58 78       	cp.w	r8,7
8000946e:	e0 89 00 04 	brgt	80009476 <_vfprintf_r+0x16d2>
80009472:	2f 83       	sub	r3,-8
80009474:	c0 b8       	rjmp	8000948a <_vfprintf_r+0x16e6>
80009476:	fa ca f9 78 	sub	r10,sp,-1672
8000947a:	02 9b       	mov	r11,r1
8000947c:	08 9c       	mov	r12,r4
8000947e:	fe b0 f4 85 	rcall	80007d88 <__sprint_r>
80009482:	e0 81 04 10 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009486:	fa c3 f9 e0 	sub	r3,sp,-1568
8000948a:	40 4b       	lddsp	r11,sp[0x10]
8000948c:	21 0b       	sub	r11,16
8000948e:	50 4b       	stdsp	sp[0x10],r11
80009490:	fa f9 06 90 	ld.w	r9,sp[1680]
80009494:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009498:	fe ca c9 cc 	sub	r10,pc,-13876
8000949c:	40 4e       	lddsp	lr,sp[0x10]
8000949e:	59 0e       	cp.w	lr,16
800094a0:	fe 99 ff db 	brgt	80009456 <_vfprintf_r+0x16b2>
800094a4:	1c 09       	add	r9,lr
800094a6:	2f f8       	sub	r8,-1
800094a8:	87 0a       	st.w	r3[0x0],r10
800094aa:	fb 49 06 90 	st.w	sp[1680],r9
800094ae:	87 1e       	st.w	r3[0x4],lr
800094b0:	fb 48 06 8c 	st.w	sp[1676],r8
800094b4:	58 78       	cp.w	r8,7
800094b6:	e0 89 00 04 	brgt	800094be <_vfprintf_r+0x171a>
800094ba:	2f 83       	sub	r3,-8
800094bc:	c0 b8       	rjmp	800094d2 <_vfprintf_r+0x172e>
800094be:	fa ca f9 78 	sub	r10,sp,-1672
800094c2:	02 9b       	mov	r11,r1
800094c4:	08 9c       	mov	r12,r4
800094c6:	fe b0 f4 61 	rcall	80007d88 <__sprint_r>
800094ca:	e0 81 03 ec 	brne	80009ca2 <_vfprintf_r+0x1efe>
800094ce:	fa c3 f9 e0 	sub	r3,sp,-1568
800094d2:	30 09       	mov	r9,0
800094d4:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800094d8:	f2 08 18 00 	cp.b	r8,r9
800094dc:	c1 f0       	breq	8000951a <_vfprintf_r+0x1776>
800094de:	fa f8 06 90 	ld.w	r8,sp[1680]
800094e2:	fa c9 f9 45 	sub	r9,sp,-1723
800094e6:	2f f8       	sub	r8,-1
800094e8:	87 09       	st.w	r3[0x0],r9
800094ea:	fb 48 06 90 	st.w	sp[1680],r8
800094ee:	30 19       	mov	r9,1
800094f0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800094f4:	87 19       	st.w	r3[0x4],r9
800094f6:	2f f8       	sub	r8,-1
800094f8:	fb 48 06 8c 	st.w	sp[1676],r8
800094fc:	58 78       	cp.w	r8,7
800094fe:	e0 89 00 04 	brgt	80009506 <_vfprintf_r+0x1762>
80009502:	2f 83       	sub	r3,-8
80009504:	c0 b8       	rjmp	8000951a <_vfprintf_r+0x1776>
80009506:	fa ca f9 78 	sub	r10,sp,-1672
8000950a:	02 9b       	mov	r11,r1
8000950c:	08 9c       	mov	r12,r4
8000950e:	fe b0 f4 3d 	rcall	80007d88 <__sprint_r>
80009512:	e0 81 03 c8 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009516:	fa c3 f9 e0 	sub	r3,sp,-1568
8000951a:	40 fc       	lddsp	r12,sp[0x3c]
8000951c:	58 0c       	cp.w	r12,0
8000951e:	c1 f0       	breq	8000955c <_vfprintf_r+0x17b8>
80009520:	fa f8 06 90 	ld.w	r8,sp[1680]
80009524:	fa c9 f9 48 	sub	r9,sp,-1720
80009528:	2f e8       	sub	r8,-2
8000952a:	87 09       	st.w	r3[0x0],r9
8000952c:	fb 48 06 90 	st.w	sp[1680],r8
80009530:	30 29       	mov	r9,2
80009532:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009536:	87 19       	st.w	r3[0x4],r9
80009538:	2f f8       	sub	r8,-1
8000953a:	fb 48 06 8c 	st.w	sp[1676],r8
8000953e:	58 78       	cp.w	r8,7
80009540:	e0 89 00 04 	brgt	80009548 <_vfprintf_r+0x17a4>
80009544:	2f 83       	sub	r3,-8
80009546:	c0 b8       	rjmp	8000955c <_vfprintf_r+0x17b8>
80009548:	fa ca f9 78 	sub	r10,sp,-1672
8000954c:	02 9b       	mov	r11,r1
8000954e:	08 9c       	mov	r12,r4
80009550:	fe b0 f4 1c 	rcall	80007d88 <__sprint_r>
80009554:	e0 81 03 a7 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009558:	fa c3 f9 e0 	sub	r3,sp,-1568
8000955c:	40 9b       	lddsp	r11,sp[0x24]
8000955e:	e0 4b 00 80 	cp.w	r11,128
80009562:	c4 71       	brne	800095f0 <_vfprintf_r+0x184c>
80009564:	40 8a       	lddsp	r10,sp[0x20]
80009566:	40 39       	lddsp	r9,sp[0xc]
80009568:	12 1a       	sub	r10,r9
8000956a:	50 4a       	stdsp	sp[0x10],r10
8000956c:	58 0a       	cp.w	r10,0
8000956e:	e0 89 00 20 	brgt	800095ae <_vfprintf_r+0x180a>
80009572:	c3 f8       	rjmp	800095f0 <_vfprintf_r+0x184c>
80009574:	2f 09       	sub	r9,-16
80009576:	2f f8       	sub	r8,-1
80009578:	fe ce ca 9c 	sub	lr,pc,-13668
8000957c:	31 0c       	mov	r12,16
8000957e:	fb 49 06 90 	st.w	sp[1680],r9
80009582:	87 0e       	st.w	r3[0x0],lr
80009584:	87 1c       	st.w	r3[0x4],r12
80009586:	fb 48 06 8c 	st.w	sp[1676],r8
8000958a:	58 78       	cp.w	r8,7
8000958c:	e0 89 00 04 	brgt	80009594 <_vfprintf_r+0x17f0>
80009590:	2f 83       	sub	r3,-8
80009592:	c0 b8       	rjmp	800095a8 <_vfprintf_r+0x1804>
80009594:	fa ca f9 78 	sub	r10,sp,-1672
80009598:	02 9b       	mov	r11,r1
8000959a:	08 9c       	mov	r12,r4
8000959c:	fe b0 f3 f6 	rcall	80007d88 <__sprint_r>
800095a0:	e0 81 03 81 	brne	80009ca2 <_vfprintf_r+0x1efe>
800095a4:	fa c3 f9 e0 	sub	r3,sp,-1568
800095a8:	40 4b       	lddsp	r11,sp[0x10]
800095aa:	21 0b       	sub	r11,16
800095ac:	50 4b       	stdsp	sp[0x10],r11
800095ae:	fa f9 06 90 	ld.w	r9,sp[1680]
800095b2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800095b6:	fe ca ca da 	sub	r10,pc,-13606
800095ba:	40 4e       	lddsp	lr,sp[0x10]
800095bc:	59 0e       	cp.w	lr,16
800095be:	fe 99 ff db 	brgt	80009574 <_vfprintf_r+0x17d0>
800095c2:	1c 09       	add	r9,lr
800095c4:	2f f8       	sub	r8,-1
800095c6:	87 0a       	st.w	r3[0x0],r10
800095c8:	fb 49 06 90 	st.w	sp[1680],r9
800095cc:	87 1e       	st.w	r3[0x4],lr
800095ce:	fb 48 06 8c 	st.w	sp[1676],r8
800095d2:	58 78       	cp.w	r8,7
800095d4:	e0 89 00 04 	brgt	800095dc <_vfprintf_r+0x1838>
800095d8:	2f 83       	sub	r3,-8
800095da:	c0 b8       	rjmp	800095f0 <_vfprintf_r+0x184c>
800095dc:	fa ca f9 78 	sub	r10,sp,-1672
800095e0:	02 9b       	mov	r11,r1
800095e2:	08 9c       	mov	r12,r4
800095e4:	fe b0 f3 d2 	rcall	80007d88 <__sprint_r>
800095e8:	e0 81 03 5d 	brne	80009ca2 <_vfprintf_r+0x1efe>
800095ec:	fa c3 f9 e0 	sub	r3,sp,-1568
800095f0:	40 2c       	lddsp	r12,sp[0x8]
800095f2:	04 1c       	sub	r12,r2
800095f4:	50 2c       	stdsp	sp[0x8],r12
800095f6:	58 0c       	cp.w	r12,0
800095f8:	e0 89 00 20 	brgt	80009638 <_vfprintf_r+0x1894>
800095fc:	c3 f8       	rjmp	8000967a <_vfprintf_r+0x18d6>
800095fe:	2f 09       	sub	r9,-16
80009600:	2f f8       	sub	r8,-1
80009602:	fe cb cb 26 	sub	r11,pc,-13530
80009606:	31 0a       	mov	r10,16
80009608:	fb 49 06 90 	st.w	sp[1680],r9
8000960c:	87 0b       	st.w	r3[0x0],r11
8000960e:	87 1a       	st.w	r3[0x4],r10
80009610:	fb 48 06 8c 	st.w	sp[1676],r8
80009614:	58 78       	cp.w	r8,7
80009616:	e0 89 00 04 	brgt	8000961e <_vfprintf_r+0x187a>
8000961a:	2f 83       	sub	r3,-8
8000961c:	c0 b8       	rjmp	80009632 <_vfprintf_r+0x188e>
8000961e:	fa ca f9 78 	sub	r10,sp,-1672
80009622:	02 9b       	mov	r11,r1
80009624:	08 9c       	mov	r12,r4
80009626:	fe b0 f3 b1 	rcall	80007d88 <__sprint_r>
8000962a:	e0 81 03 3c 	brne	80009ca2 <_vfprintf_r+0x1efe>
8000962e:	fa c3 f9 e0 	sub	r3,sp,-1568
80009632:	40 29       	lddsp	r9,sp[0x8]
80009634:	21 09       	sub	r9,16
80009636:	50 29       	stdsp	sp[0x8],r9
80009638:	fa f9 06 90 	ld.w	r9,sp[1680]
8000963c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009640:	fe ca cb 64 	sub	r10,pc,-13468
80009644:	40 2e       	lddsp	lr,sp[0x8]
80009646:	59 0e       	cp.w	lr,16
80009648:	fe 99 ff db 	brgt	800095fe <_vfprintf_r+0x185a>
8000964c:	1c 09       	add	r9,lr
8000964e:	2f f8       	sub	r8,-1
80009650:	87 0a       	st.w	r3[0x0],r10
80009652:	fb 49 06 90 	st.w	sp[1680],r9
80009656:	87 1e       	st.w	r3[0x4],lr
80009658:	fb 48 06 8c 	st.w	sp[1676],r8
8000965c:	58 78       	cp.w	r8,7
8000965e:	e0 89 00 04 	brgt	80009666 <_vfprintf_r+0x18c2>
80009662:	2f 83       	sub	r3,-8
80009664:	c0 b8       	rjmp	8000967a <_vfprintf_r+0x18d6>
80009666:	fa ca f9 78 	sub	r10,sp,-1672
8000966a:	02 9b       	mov	r11,r1
8000966c:	08 9c       	mov	r12,r4
8000966e:	fe b0 f3 8d 	rcall	80007d88 <__sprint_r>
80009672:	e0 81 03 18 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009676:	fa c3 f9 e0 	sub	r3,sp,-1568
8000967a:	ed b5 00 08 	bld	r5,0x8
8000967e:	c0 b0       	breq	80009694 <_vfprintf_r+0x18f0>
80009680:	fa f8 06 90 	ld.w	r8,sp[1680]
80009684:	87 12       	st.w	r3[0x4],r2
80009686:	87 06       	st.w	r3[0x0],r6
80009688:	f0 02 00 02 	add	r2,r8,r2
8000968c:	fb 42 06 90 	st.w	sp[1680],r2
80009690:	e0 8f 01 d4 	bral	80009a38 <_vfprintf_r+0x1c94>
80009694:	e0 40 00 65 	cp.w	r0,101
80009698:	e0 8a 01 d6 	brle	80009a44 <_vfprintf_r+0x1ca0>
8000969c:	30 08       	mov	r8,0
8000969e:	30 09       	mov	r9,0
800096a0:	40 5b       	lddsp	r11,sp[0x14]
800096a2:	40 7a       	lddsp	r10,sp[0x1c]
800096a4:	e0 a0 13 09 	rcall	8000bcb6 <__avr32_f64_cmp_eq>
800096a8:	c7 90       	breq	8000979a <_vfprintf_r+0x19f6>
800096aa:	fa f8 06 90 	ld.w	r8,sp[1680]
800096ae:	fe c9 cb e6 	sub	r9,pc,-13338
800096b2:	2f f8       	sub	r8,-1
800096b4:	87 09       	st.w	r3[0x0],r9
800096b6:	fb 48 06 90 	st.w	sp[1680],r8
800096ba:	30 19       	mov	r9,1
800096bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800096c0:	87 19       	st.w	r3[0x4],r9
800096c2:	2f f8       	sub	r8,-1
800096c4:	fb 48 06 8c 	st.w	sp[1676],r8
800096c8:	58 78       	cp.w	r8,7
800096ca:	e0 89 00 05 	brgt	800096d4 <_vfprintf_r+0x1930>
800096ce:	2f 83       	sub	r3,-8
800096d0:	c0 c8       	rjmp	800096e8 <_vfprintf_r+0x1944>
800096d2:	d7 03       	nop
800096d4:	fa ca f9 78 	sub	r10,sp,-1672
800096d8:	02 9b       	mov	r11,r1
800096da:	08 9c       	mov	r12,r4
800096dc:	fe b0 f3 56 	rcall	80007d88 <__sprint_r>
800096e0:	e0 81 02 e1 	brne	80009ca2 <_vfprintf_r+0x1efe>
800096e4:	fa c3 f9 e0 	sub	r3,sp,-1568
800096e8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800096ec:	40 6c       	lddsp	r12,sp[0x18]
800096ee:	18 38       	cp.w	r8,r12
800096f0:	c0 55       	brlt	800096fa <_vfprintf_r+0x1956>
800096f2:	ed b5 00 00 	bld	r5,0x0
800096f6:	e0 81 02 6b 	brne	80009bcc <_vfprintf_r+0x1e28>
800096fa:	fa f8 06 90 	ld.w	r8,sp[1680]
800096fe:	2f f8       	sub	r8,-1
80009700:	40 cb       	lddsp	r11,sp[0x30]
80009702:	fb 48 06 90 	st.w	sp[1680],r8
80009706:	30 19       	mov	r9,1
80009708:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000970c:	87 0b       	st.w	r3[0x0],r11
8000970e:	2f f8       	sub	r8,-1
80009710:	87 19       	st.w	r3[0x4],r9
80009712:	fb 48 06 8c 	st.w	sp[1676],r8
80009716:	58 78       	cp.w	r8,7
80009718:	e0 89 00 04 	brgt	80009720 <_vfprintf_r+0x197c>
8000971c:	2f 83       	sub	r3,-8
8000971e:	c0 b8       	rjmp	80009734 <_vfprintf_r+0x1990>
80009720:	fa ca f9 78 	sub	r10,sp,-1672
80009724:	02 9b       	mov	r11,r1
80009726:	08 9c       	mov	r12,r4
80009728:	fe b0 f3 30 	rcall	80007d88 <__sprint_r>
8000972c:	e0 81 02 bb 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009730:	fa c3 f9 e0 	sub	r3,sp,-1568
80009734:	40 66       	lddsp	r6,sp[0x18]
80009736:	20 16       	sub	r6,1
80009738:	58 06       	cp.w	r6,0
8000973a:	e0 89 00 1d 	brgt	80009774 <_vfprintf_r+0x19d0>
8000973e:	e0 8f 02 47 	bral	80009bcc <_vfprintf_r+0x1e28>
80009742:	2f 09       	sub	r9,-16
80009744:	2f f8       	sub	r8,-1
80009746:	fb 49 06 90 	st.w	sp[1680],r9
8000974a:	87 02       	st.w	r3[0x0],r2
8000974c:	87 10       	st.w	r3[0x4],r0
8000974e:	fb 48 06 8c 	st.w	sp[1676],r8
80009752:	58 78       	cp.w	r8,7
80009754:	e0 89 00 04 	brgt	8000975c <_vfprintf_r+0x19b8>
80009758:	2f 83       	sub	r3,-8
8000975a:	c0 b8       	rjmp	80009770 <_vfprintf_r+0x19cc>
8000975c:	fa ca f9 78 	sub	r10,sp,-1672
80009760:	02 9b       	mov	r11,r1
80009762:	08 9c       	mov	r12,r4
80009764:	fe b0 f3 12 	rcall	80007d88 <__sprint_r>
80009768:	e0 81 02 9d 	brne	80009ca2 <_vfprintf_r+0x1efe>
8000976c:	fa c3 f9 e0 	sub	r3,sp,-1568
80009770:	21 06       	sub	r6,16
80009772:	c0 48       	rjmp	8000977a <_vfprintf_r+0x19d6>
80009774:	fe c2 cc 98 	sub	r2,pc,-13160
80009778:	31 00       	mov	r0,16
8000977a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000977e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009782:	fe ca cc a6 	sub	r10,pc,-13146
80009786:	59 06       	cp.w	r6,16
80009788:	fe 99 ff dd 	brgt	80009742 <_vfprintf_r+0x199e>
8000978c:	0c 09       	add	r9,r6
8000978e:	87 0a       	st.w	r3[0x0],r10
80009790:	fb 49 06 90 	st.w	sp[1680],r9
80009794:	2f f8       	sub	r8,-1
80009796:	87 16       	st.w	r3[0x4],r6
80009798:	c5 39       	rjmp	80009a3e <_vfprintf_r+0x1c9a>
8000979a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000979e:	58 0a       	cp.w	r10,0
800097a0:	e0 89 00 92 	brgt	800098c4 <_vfprintf_r+0x1b20>
800097a4:	fa f8 06 90 	ld.w	r8,sp[1680]
800097a8:	fe c9 cc e0 	sub	r9,pc,-13088
800097ac:	2f f8       	sub	r8,-1
800097ae:	87 09       	st.w	r3[0x0],r9
800097b0:	fb 48 06 90 	st.w	sp[1680],r8
800097b4:	30 19       	mov	r9,1
800097b6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800097ba:	87 19       	st.w	r3[0x4],r9
800097bc:	2f f8       	sub	r8,-1
800097be:	fb 48 06 8c 	st.w	sp[1676],r8
800097c2:	58 78       	cp.w	r8,7
800097c4:	e0 89 00 04 	brgt	800097cc <_vfprintf_r+0x1a28>
800097c8:	2f 83       	sub	r3,-8
800097ca:	c0 b8       	rjmp	800097e0 <_vfprintf_r+0x1a3c>
800097cc:	fa ca f9 78 	sub	r10,sp,-1672
800097d0:	02 9b       	mov	r11,r1
800097d2:	08 9c       	mov	r12,r4
800097d4:	fe b0 f2 da 	rcall	80007d88 <__sprint_r>
800097d8:	e0 81 02 65 	brne	80009ca2 <_vfprintf_r+0x1efe>
800097dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800097e0:	fa f8 06 ac 	ld.w	r8,sp[1708]
800097e4:	58 08       	cp.w	r8,0
800097e6:	c0 81       	brne	800097f6 <_vfprintf_r+0x1a52>
800097e8:	40 6a       	lddsp	r10,sp[0x18]
800097ea:	58 0a       	cp.w	r10,0
800097ec:	c0 51       	brne	800097f6 <_vfprintf_r+0x1a52>
800097ee:	ed b5 00 00 	bld	r5,0x0
800097f2:	e0 81 01 ed 	brne	80009bcc <_vfprintf_r+0x1e28>
800097f6:	40 c9       	lddsp	r9,sp[0x30]
800097f8:	fa f8 06 90 	ld.w	r8,sp[1680]
800097fc:	2f f8       	sub	r8,-1
800097fe:	87 09       	st.w	r3[0x0],r9
80009800:	fb 48 06 90 	st.w	sp[1680],r8
80009804:	30 19       	mov	r9,1
80009806:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000980a:	87 19       	st.w	r3[0x4],r9
8000980c:	2f f8       	sub	r8,-1
8000980e:	fb 48 06 8c 	st.w	sp[1676],r8
80009812:	58 78       	cp.w	r8,7
80009814:	e0 89 00 04 	brgt	8000981c <_vfprintf_r+0x1a78>
80009818:	2f 83       	sub	r3,-8
8000981a:	c0 b8       	rjmp	80009830 <_vfprintf_r+0x1a8c>
8000981c:	fa ca f9 78 	sub	r10,sp,-1672
80009820:	02 9b       	mov	r11,r1
80009822:	08 9c       	mov	r12,r4
80009824:	fe b0 f2 b2 	rcall	80007d88 <__sprint_r>
80009828:	e0 81 02 3d 	brne	80009ca2 <_vfprintf_r+0x1efe>
8000982c:	fa c3 f9 e0 	sub	r3,sp,-1568
80009830:	fa f2 06 ac 	ld.w	r2,sp[1708]
80009834:	5c 32       	neg	r2
80009836:	58 02       	cp.w	r2,0
80009838:	e0 89 00 1d 	brgt	80009872 <_vfprintf_r+0x1ace>
8000983c:	c3 d8       	rjmp	800098b6 <_vfprintf_r+0x1b12>
8000983e:	2f 09       	sub	r9,-16
80009840:	2f f8       	sub	r8,-1
80009842:	31 0e       	mov	lr,16
80009844:	fb 49 06 90 	st.w	sp[1680],r9
80009848:	87 00       	st.w	r3[0x0],r0
8000984a:	87 1e       	st.w	r3[0x4],lr
8000984c:	fb 48 06 8c 	st.w	sp[1676],r8
80009850:	58 78       	cp.w	r8,7
80009852:	e0 89 00 04 	brgt	8000985a <_vfprintf_r+0x1ab6>
80009856:	2f 83       	sub	r3,-8
80009858:	c0 b8       	rjmp	8000986e <_vfprintf_r+0x1aca>
8000985a:	fa ca f9 78 	sub	r10,sp,-1672
8000985e:	02 9b       	mov	r11,r1
80009860:	08 9c       	mov	r12,r4
80009862:	fe b0 f2 93 	rcall	80007d88 <__sprint_r>
80009866:	e0 81 02 1e 	brne	80009ca2 <_vfprintf_r+0x1efe>
8000986a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000986e:	21 02       	sub	r2,16
80009870:	c0 38       	rjmp	80009876 <_vfprintf_r+0x1ad2>
80009872:	fe c0 cd 96 	sub	r0,pc,-12906
80009876:	fa f9 06 90 	ld.w	r9,sp[1680]
8000987a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000987e:	fe ca cd a2 	sub	r10,pc,-12894
80009882:	59 02       	cp.w	r2,16
80009884:	fe 99 ff dd 	brgt	8000983e <_vfprintf_r+0x1a9a>
80009888:	04 09       	add	r9,r2
8000988a:	2f f8       	sub	r8,-1
8000988c:	87 0a       	st.w	r3[0x0],r10
8000988e:	fb 49 06 90 	st.w	sp[1680],r9
80009892:	87 12       	st.w	r3[0x4],r2
80009894:	fb 48 06 8c 	st.w	sp[1676],r8
80009898:	58 78       	cp.w	r8,7
8000989a:	e0 89 00 04 	brgt	800098a2 <_vfprintf_r+0x1afe>
8000989e:	2f 83       	sub	r3,-8
800098a0:	c0 b8       	rjmp	800098b6 <_vfprintf_r+0x1b12>
800098a2:	fa ca f9 78 	sub	r10,sp,-1672
800098a6:	02 9b       	mov	r11,r1
800098a8:	08 9c       	mov	r12,r4
800098aa:	fe b0 f2 6f 	rcall	80007d88 <__sprint_r>
800098ae:	e0 81 01 fa 	brne	80009ca2 <_vfprintf_r+0x1efe>
800098b2:	fa c3 f9 e0 	sub	r3,sp,-1568
800098b6:	40 6c       	lddsp	r12,sp[0x18]
800098b8:	fa f8 06 90 	ld.w	r8,sp[1680]
800098bc:	87 06       	st.w	r3[0x0],r6
800098be:	87 1c       	st.w	r3[0x4],r12
800098c0:	18 08       	add	r8,r12
800098c2:	cb 98       	rjmp	80009a34 <_vfprintf_r+0x1c90>
800098c4:	fa f9 06 90 	ld.w	r9,sp[1680]
800098c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800098cc:	40 6b       	lddsp	r11,sp[0x18]
800098ce:	16 3a       	cp.w	r10,r11
800098d0:	c6 f5       	brlt	800099ae <_vfprintf_r+0x1c0a>
800098d2:	16 09       	add	r9,r11
800098d4:	2f f8       	sub	r8,-1
800098d6:	87 06       	st.w	r3[0x0],r6
800098d8:	fb 49 06 90 	st.w	sp[1680],r9
800098dc:	87 1b       	st.w	r3[0x4],r11
800098de:	fb 48 06 8c 	st.w	sp[1676],r8
800098e2:	58 78       	cp.w	r8,7
800098e4:	e0 89 00 04 	brgt	800098ec <_vfprintf_r+0x1b48>
800098e8:	2f 83       	sub	r3,-8
800098ea:	c0 b8       	rjmp	80009900 <_vfprintf_r+0x1b5c>
800098ec:	fa ca f9 78 	sub	r10,sp,-1672
800098f0:	02 9b       	mov	r11,r1
800098f2:	08 9c       	mov	r12,r4
800098f4:	fe b0 f2 4a 	rcall	80007d88 <__sprint_r>
800098f8:	e0 81 01 d5 	brne	80009ca2 <_vfprintf_r+0x1efe>
800098fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80009900:	fa f6 06 ac 	ld.w	r6,sp[1708]
80009904:	40 6a       	lddsp	r10,sp[0x18]
80009906:	14 16       	sub	r6,r10
80009908:	58 06       	cp.w	r6,0
8000990a:	e0 89 00 1c 	brgt	80009942 <_vfprintf_r+0x1b9e>
8000990e:	c3 d8       	rjmp	80009988 <_vfprintf_r+0x1be4>
80009910:	2f 09       	sub	r9,-16
80009912:	2f f8       	sub	r8,-1
80009914:	fb 49 06 90 	st.w	sp[1680],r9
80009918:	87 02       	st.w	r3[0x0],r2
8000991a:	87 10       	st.w	r3[0x4],r0
8000991c:	fb 48 06 8c 	st.w	sp[1676],r8
80009920:	58 78       	cp.w	r8,7
80009922:	e0 89 00 04 	brgt	8000992a <_vfprintf_r+0x1b86>
80009926:	2f 83       	sub	r3,-8
80009928:	c0 b8       	rjmp	8000993e <_vfprintf_r+0x1b9a>
8000992a:	fa ca f9 78 	sub	r10,sp,-1672
8000992e:	02 9b       	mov	r11,r1
80009930:	08 9c       	mov	r12,r4
80009932:	fe b0 f2 2b 	rcall	80007d88 <__sprint_r>
80009936:	e0 81 01 b6 	brne	80009ca2 <_vfprintf_r+0x1efe>
8000993a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000993e:	21 06       	sub	r6,16
80009940:	c0 48       	rjmp	80009948 <_vfprintf_r+0x1ba4>
80009942:	fe c2 ce 66 	sub	r2,pc,-12698
80009946:	31 00       	mov	r0,16
80009948:	fa f9 06 90 	ld.w	r9,sp[1680]
8000994c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009950:	fe ca ce 74 	sub	r10,pc,-12684
80009954:	59 06       	cp.w	r6,16
80009956:	fe 99 ff dd 	brgt	80009910 <_vfprintf_r+0x1b6c>
8000995a:	0c 09       	add	r9,r6
8000995c:	2f f8       	sub	r8,-1
8000995e:	87 0a       	st.w	r3[0x0],r10
80009960:	fb 49 06 90 	st.w	sp[1680],r9
80009964:	87 16       	st.w	r3[0x4],r6
80009966:	fb 48 06 8c 	st.w	sp[1676],r8
8000996a:	58 78       	cp.w	r8,7
8000996c:	e0 89 00 04 	brgt	80009974 <_vfprintf_r+0x1bd0>
80009970:	2f 83       	sub	r3,-8
80009972:	c0 b8       	rjmp	80009988 <_vfprintf_r+0x1be4>
80009974:	fa ca f9 78 	sub	r10,sp,-1672
80009978:	02 9b       	mov	r11,r1
8000997a:	08 9c       	mov	r12,r4
8000997c:	fe b0 f2 06 	rcall	80007d88 <__sprint_r>
80009980:	e0 81 01 91 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009984:	fa c3 f9 e0 	sub	r3,sp,-1568
80009988:	ed b5 00 00 	bld	r5,0x0
8000998c:	e0 81 01 20 	brne	80009bcc <_vfprintf_r+0x1e28>
80009990:	40 c9       	lddsp	r9,sp[0x30]
80009992:	fa f8 06 90 	ld.w	r8,sp[1680]
80009996:	2f f8       	sub	r8,-1
80009998:	87 09       	st.w	r3[0x0],r9
8000999a:	fb 48 06 90 	st.w	sp[1680],r8
8000999e:	30 19       	mov	r9,1
800099a0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800099a4:	87 19       	st.w	r3[0x4],r9
800099a6:	2f f8       	sub	r8,-1
800099a8:	fb 48 06 8c 	st.w	sp[1676],r8
800099ac:	c0 29       	rjmp	80009bb0 <_vfprintf_r+0x1e0c>
800099ae:	14 09       	add	r9,r10
800099b0:	2f f8       	sub	r8,-1
800099b2:	fb 49 06 90 	st.w	sp[1680],r9
800099b6:	87 06       	st.w	r3[0x0],r6
800099b8:	87 1a       	st.w	r3[0x4],r10
800099ba:	fb 48 06 8c 	st.w	sp[1676],r8
800099be:	58 78       	cp.w	r8,7
800099c0:	e0 89 00 04 	brgt	800099c8 <_vfprintf_r+0x1c24>
800099c4:	2f 83       	sub	r3,-8
800099c6:	c0 b8       	rjmp	800099dc <_vfprintf_r+0x1c38>
800099c8:	fa ca f9 78 	sub	r10,sp,-1672
800099cc:	02 9b       	mov	r11,r1
800099ce:	08 9c       	mov	r12,r4
800099d0:	fe b0 f1 dc 	rcall	80007d88 <__sprint_r>
800099d4:	e0 81 01 67 	brne	80009ca2 <_vfprintf_r+0x1efe>
800099d8:	fa c3 f9 e0 	sub	r3,sp,-1568
800099dc:	40 c8       	lddsp	r8,sp[0x30]
800099de:	87 08       	st.w	r3[0x0],r8
800099e0:	fa f8 06 90 	ld.w	r8,sp[1680]
800099e4:	2f f8       	sub	r8,-1
800099e6:	30 19       	mov	r9,1
800099e8:	fb 48 06 90 	st.w	sp[1680],r8
800099ec:	87 19       	st.w	r3[0x4],r9
800099ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
800099f2:	2f f8       	sub	r8,-1
800099f4:	fb 48 06 8c 	st.w	sp[1676],r8
800099f8:	fa f2 06 ac 	ld.w	r2,sp[1708]
800099fc:	58 78       	cp.w	r8,7
800099fe:	e0 89 00 04 	brgt	80009a06 <_vfprintf_r+0x1c62>
80009a02:	2f 83       	sub	r3,-8
80009a04:	c0 b8       	rjmp	80009a1a <_vfprintf_r+0x1c76>
80009a06:	fa ca f9 78 	sub	r10,sp,-1672
80009a0a:	02 9b       	mov	r11,r1
80009a0c:	08 9c       	mov	r12,r4
80009a0e:	fe b0 f1 bd 	rcall	80007d88 <__sprint_r>
80009a12:	e0 81 01 48 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009a16:	fa c3 f9 e0 	sub	r3,sp,-1568
80009a1a:	04 06       	add	r6,r2
80009a1c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80009a20:	87 06       	st.w	r3[0x0],r6
80009a22:	fa f9 06 90 	ld.w	r9,sp[1680]
80009a26:	40 66       	lddsp	r6,sp[0x18]
80009a28:	40 6e       	lddsp	lr,sp[0x18]
80009a2a:	10 16       	sub	r6,r8
80009a2c:	f2 08 01 08 	sub	r8,r9,r8
80009a30:	87 16       	st.w	r3[0x4],r6
80009a32:	1c 08       	add	r8,lr
80009a34:	fb 48 06 90 	st.w	sp[1680],r8
80009a38:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009a3c:	2f f8       	sub	r8,-1
80009a3e:	fb 48 06 8c 	st.w	sp[1676],r8
80009a42:	cb 78       	rjmp	80009bb0 <_vfprintf_r+0x1e0c>
80009a44:	40 6c       	lddsp	r12,sp[0x18]
80009a46:	58 1c       	cp.w	r12,1
80009a48:	e0 89 00 06 	brgt	80009a54 <_vfprintf_r+0x1cb0>
80009a4c:	ed b5 00 00 	bld	r5,0x0
80009a50:	e0 81 00 85 	brne	80009b5a <_vfprintf_r+0x1db6>
80009a54:	fa f8 06 90 	ld.w	r8,sp[1680]
80009a58:	2f f8       	sub	r8,-1
80009a5a:	30 19       	mov	r9,1
80009a5c:	fb 48 06 90 	st.w	sp[1680],r8
80009a60:	87 06       	st.w	r3[0x0],r6
80009a62:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009a66:	87 19       	st.w	r3[0x4],r9
80009a68:	2f f8       	sub	r8,-1
80009a6a:	fb 48 06 8c 	st.w	sp[1676],r8
80009a6e:	58 78       	cp.w	r8,7
80009a70:	e0 89 00 04 	brgt	80009a78 <_vfprintf_r+0x1cd4>
80009a74:	2f 83       	sub	r3,-8
80009a76:	c0 b8       	rjmp	80009a8c <_vfprintf_r+0x1ce8>
80009a78:	fa ca f9 78 	sub	r10,sp,-1672
80009a7c:	02 9b       	mov	r11,r1
80009a7e:	08 9c       	mov	r12,r4
80009a80:	fe b0 f1 84 	rcall	80007d88 <__sprint_r>
80009a84:	e0 81 01 0f 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009a88:	fa c3 f9 e0 	sub	r3,sp,-1568
80009a8c:	fa f8 06 90 	ld.w	r8,sp[1680]
80009a90:	2f f8       	sub	r8,-1
80009a92:	40 cb       	lddsp	r11,sp[0x30]
80009a94:	fb 48 06 90 	st.w	sp[1680],r8
80009a98:	30 19       	mov	r9,1
80009a9a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009a9e:	87 0b       	st.w	r3[0x0],r11
80009aa0:	2f f8       	sub	r8,-1
80009aa2:	87 19       	st.w	r3[0x4],r9
80009aa4:	fb 48 06 8c 	st.w	sp[1676],r8
80009aa8:	58 78       	cp.w	r8,7
80009aaa:	e0 89 00 05 	brgt	80009ab4 <_vfprintf_r+0x1d10>
80009aae:	2f 83       	sub	r3,-8
80009ab0:	c0 c8       	rjmp	80009ac8 <_vfprintf_r+0x1d24>
80009ab2:	d7 03       	nop
80009ab4:	fa ca f9 78 	sub	r10,sp,-1672
80009ab8:	02 9b       	mov	r11,r1
80009aba:	08 9c       	mov	r12,r4
80009abc:	fe b0 f1 66 	rcall	80007d88 <__sprint_r>
80009ac0:	e0 81 00 f1 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009ac4:	fa c3 f9 e0 	sub	r3,sp,-1568
80009ac8:	30 08       	mov	r8,0
80009aca:	30 09       	mov	r9,0
80009acc:	40 5b       	lddsp	r11,sp[0x14]
80009ace:	40 7a       	lddsp	r10,sp[0x1c]
80009ad0:	e0 a0 10 f3 	rcall	8000bcb6 <__avr32_f64_cmp_eq>
80009ad4:	40 68       	lddsp	r8,sp[0x18]
80009ad6:	20 18       	sub	r8,1
80009ad8:	58 0c       	cp.w	r12,0
80009ada:	c0 d1       	brne	80009af4 <_vfprintf_r+0x1d50>
80009adc:	2f f6       	sub	r6,-1
80009ade:	87 18       	st.w	r3[0x4],r8
80009ae0:	87 06       	st.w	r3[0x0],r6
80009ae2:	fa f6 06 90 	ld.w	r6,sp[1680]
80009ae6:	10 06       	add	r6,r8
80009ae8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009aec:	fb 46 06 90 	st.w	sp[1680],r6
80009af0:	2f f8       	sub	r8,-1
80009af2:	c3 18       	rjmp	80009b54 <_vfprintf_r+0x1db0>
80009af4:	10 96       	mov	r6,r8
80009af6:	58 08       	cp.w	r8,0
80009af8:	e0 89 00 1c 	brgt	80009b30 <_vfprintf_r+0x1d8c>
80009afc:	c4 b8       	rjmp	80009b92 <_vfprintf_r+0x1dee>
80009afe:	2f 09       	sub	r9,-16
80009b00:	2f f8       	sub	r8,-1
80009b02:	fb 49 06 90 	st.w	sp[1680],r9
80009b06:	87 02       	st.w	r3[0x0],r2
80009b08:	87 10       	st.w	r3[0x4],r0
80009b0a:	fb 48 06 8c 	st.w	sp[1676],r8
80009b0e:	58 78       	cp.w	r8,7
80009b10:	e0 89 00 04 	brgt	80009b18 <_vfprintf_r+0x1d74>
80009b14:	2f 83       	sub	r3,-8
80009b16:	c0 b8       	rjmp	80009b2c <_vfprintf_r+0x1d88>
80009b18:	fa ca f9 78 	sub	r10,sp,-1672
80009b1c:	02 9b       	mov	r11,r1
80009b1e:	08 9c       	mov	r12,r4
80009b20:	fe b0 f1 34 	rcall	80007d88 <__sprint_r>
80009b24:	e0 81 00 bf 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009b28:	fa c3 f9 e0 	sub	r3,sp,-1568
80009b2c:	21 06       	sub	r6,16
80009b2e:	c0 48       	rjmp	80009b36 <_vfprintf_r+0x1d92>
80009b30:	fe c2 d0 54 	sub	r2,pc,-12204
80009b34:	31 00       	mov	r0,16
80009b36:	fa f9 06 90 	ld.w	r9,sp[1680]
80009b3a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009b3e:	fe ca d0 62 	sub	r10,pc,-12190
80009b42:	59 06       	cp.w	r6,16
80009b44:	fe 99 ff dd 	brgt	80009afe <_vfprintf_r+0x1d5a>
80009b48:	0c 09       	add	r9,r6
80009b4a:	87 0a       	st.w	r3[0x0],r10
80009b4c:	fb 49 06 90 	st.w	sp[1680],r9
80009b50:	2f f8       	sub	r8,-1
80009b52:	87 16       	st.w	r3[0x4],r6
80009b54:	fb 48 06 8c 	st.w	sp[1676],r8
80009b58:	c0 e8       	rjmp	80009b74 <_vfprintf_r+0x1dd0>
80009b5a:	fa f8 06 90 	ld.w	r8,sp[1680]
80009b5e:	2f f8       	sub	r8,-1
80009b60:	30 19       	mov	r9,1
80009b62:	fb 48 06 90 	st.w	sp[1680],r8
80009b66:	87 06       	st.w	r3[0x0],r6
80009b68:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009b6c:	87 19       	st.w	r3[0x4],r9
80009b6e:	2f f8       	sub	r8,-1
80009b70:	fb 48 06 8c 	st.w	sp[1676],r8
80009b74:	58 78       	cp.w	r8,7
80009b76:	e0 89 00 04 	brgt	80009b7e <_vfprintf_r+0x1dda>
80009b7a:	2f 83       	sub	r3,-8
80009b7c:	c0 b8       	rjmp	80009b92 <_vfprintf_r+0x1dee>
80009b7e:	fa ca f9 78 	sub	r10,sp,-1672
80009b82:	02 9b       	mov	r11,r1
80009b84:	08 9c       	mov	r12,r4
80009b86:	fe b0 f1 01 	rcall	80007d88 <__sprint_r>
80009b8a:	e0 81 00 8c 	brne	80009ca2 <_vfprintf_r+0x1efe>
80009b8e:	fa c3 f9 e0 	sub	r3,sp,-1568
80009b92:	40 ea       	lddsp	r10,sp[0x38]
80009b94:	fa f8 06 90 	ld.w	r8,sp[1680]
80009b98:	14 08       	add	r8,r10
80009b9a:	fa c9 f9 64 	sub	r9,sp,-1692
80009b9e:	fb 48 06 90 	st.w	sp[1680],r8
80009ba2:	87 1a       	st.w	r3[0x4],r10
80009ba4:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009ba8:	87 09       	st.w	r3[0x0],r9
80009baa:	2f f8       	sub	r8,-1
80009bac:	fb 48 06 8c 	st.w	sp[1676],r8
80009bb0:	58 78       	cp.w	r8,7
80009bb2:	e0 89 00 04 	brgt	80009bba <_vfprintf_r+0x1e16>
80009bb6:	2f 83       	sub	r3,-8
80009bb8:	c0 a8       	rjmp	80009bcc <_vfprintf_r+0x1e28>
80009bba:	fa ca f9 78 	sub	r10,sp,-1672
80009bbe:	02 9b       	mov	r11,r1
80009bc0:	08 9c       	mov	r12,r4
80009bc2:	fe b0 f0 e3 	rcall	80007d88 <__sprint_r>
80009bc6:	c6 e1       	brne	80009ca2 <_vfprintf_r+0x1efe>
80009bc8:	fa c3 f9 e0 	sub	r3,sp,-1568
80009bcc:	e2 15 00 04 	andl	r5,0x4,COH
80009bd0:	c3 f0       	breq	80009c4e <_vfprintf_r+0x1eaa>
80009bd2:	40 86       	lddsp	r6,sp[0x20]
80009bd4:	40 39       	lddsp	r9,sp[0xc]
80009bd6:	12 16       	sub	r6,r9
80009bd8:	58 06       	cp.w	r6,0
80009bda:	e0 89 00 1a 	brgt	80009c0e <_vfprintf_r+0x1e6a>
80009bde:	c3 88       	rjmp	80009c4e <_vfprintf_r+0x1eaa>
80009be0:	2f 09       	sub	r9,-16
80009be2:	2f f8       	sub	r8,-1
80009be4:	fb 49 06 90 	st.w	sp[1680],r9
80009be8:	87 05       	st.w	r3[0x0],r5
80009bea:	87 12       	st.w	r3[0x4],r2
80009bec:	fb 48 06 8c 	st.w	sp[1676],r8
80009bf0:	58 78       	cp.w	r8,7
80009bf2:	e0 89 00 04 	brgt	80009bfa <_vfprintf_r+0x1e56>
80009bf6:	2f 83       	sub	r3,-8
80009bf8:	c0 98       	rjmp	80009c0a <_vfprintf_r+0x1e66>
80009bfa:	00 9a       	mov	r10,r0
80009bfc:	02 9b       	mov	r11,r1
80009bfe:	08 9c       	mov	r12,r4
80009c00:	fe b0 f0 c4 	rcall	80007d88 <__sprint_r>
80009c04:	c4 f1       	brne	80009ca2 <_vfprintf_r+0x1efe>
80009c06:	fa c3 f9 e0 	sub	r3,sp,-1568
80009c0a:	21 06       	sub	r6,16
80009c0c:	c0 68       	rjmp	80009c18 <_vfprintf_r+0x1e74>
80009c0e:	fe c5 d1 42 	sub	r5,pc,-11966
80009c12:	31 02       	mov	r2,16
80009c14:	fa c0 f9 78 	sub	r0,sp,-1672
80009c18:	fa f9 06 90 	ld.w	r9,sp[1680]
80009c1c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80009c20:	fe ca d1 54 	sub	r10,pc,-11948
80009c24:	59 06       	cp.w	r6,16
80009c26:	fe 99 ff dd 	brgt	80009be0 <_vfprintf_r+0x1e3c>
80009c2a:	0c 09       	add	r9,r6
80009c2c:	2f f8       	sub	r8,-1
80009c2e:	87 0a       	st.w	r3[0x0],r10
80009c30:	87 16       	st.w	r3[0x4],r6
80009c32:	fb 49 06 90 	st.w	sp[1680],r9
80009c36:	fb 48 06 8c 	st.w	sp[1676],r8
80009c3a:	58 78       	cp.w	r8,7
80009c3c:	e0 8a 00 09 	brle	80009c4e <_vfprintf_r+0x1eaa>
80009c40:	fa ca f9 78 	sub	r10,sp,-1672
80009c44:	02 9b       	mov	r11,r1
80009c46:	08 9c       	mov	r12,r4
80009c48:	fe b0 f0 a0 	rcall	80007d88 <__sprint_r>
80009c4c:	c2 b1       	brne	80009ca2 <_vfprintf_r+0x1efe>
80009c4e:	40 bc       	lddsp	r12,sp[0x2c]
80009c50:	40 36       	lddsp	r6,sp[0xc]
80009c52:	40 8e       	lddsp	lr,sp[0x20]
80009c54:	ec 0e 0c 48 	max	r8,r6,lr
80009c58:	10 0c       	add	r12,r8
80009c5a:	50 bc       	stdsp	sp[0x2c],r12
80009c5c:	fa f8 06 90 	ld.w	r8,sp[1680]
80009c60:	58 08       	cp.w	r8,0
80009c62:	c0 80       	breq	80009c72 <_vfprintf_r+0x1ece>
80009c64:	fa ca f9 78 	sub	r10,sp,-1672
80009c68:	02 9b       	mov	r11,r1
80009c6a:	08 9c       	mov	r12,r4
80009c6c:	fe b0 f0 8e 	rcall	80007d88 <__sprint_r>
80009c70:	c1 91       	brne	80009ca2 <_vfprintf_r+0x1efe>
80009c72:	30 0b       	mov	r11,0
80009c74:	fa c3 f9 e0 	sub	r3,sp,-1568
80009c78:	fb 4b 06 8c 	st.w	sp[1676],r11
80009c7c:	fe 9f f1 22 	bral	80007ec0 <_vfprintf_r+0x11c>
80009c80:	08 95       	mov	r5,r4
80009c82:	fa f8 06 90 	ld.w	r8,sp[1680]
80009c86:	58 08       	cp.w	r8,0
80009c88:	c0 80       	breq	80009c98 <_vfprintf_r+0x1ef4>
80009c8a:	08 9c       	mov	r12,r4
80009c8c:	fa ca f9 78 	sub	r10,sp,-1672
80009c90:	02 9b       	mov	r11,r1
80009c92:	fe b0 f0 7b 	rcall	80007d88 <__sprint_r>
80009c96:	c0 61       	brne	80009ca2 <_vfprintf_r+0x1efe>
80009c98:	30 08       	mov	r8,0
80009c9a:	fb 48 06 8c 	st.w	sp[1676],r8
80009c9e:	c0 28       	rjmp	80009ca2 <_vfprintf_r+0x1efe>
80009ca0:	40 41       	lddsp	r1,sp[0x10]
80009ca2:	82 68       	ld.sh	r8,r1[0xc]
80009ca4:	ed b8 00 06 	bld	r8,0x6
80009ca8:	c0 31       	brne	80009cae <_vfprintf_r+0x1f0a>
80009caa:	3f fa       	mov	r10,-1
80009cac:	50 ba       	stdsp	sp[0x2c],r10
80009cae:	40 bc       	lddsp	r12,sp[0x2c]
80009cb0:	fe 3d f9 44 	sub	sp,-1724
80009cb4:	d8 32       	popm	r0-r7,pc
80009cb6:	d7 03       	nop

80009cb8 <_write_r>:
80009cb8:	d4 21       	pushm	r4-r7,lr
80009cba:	16 98       	mov	r8,r11
80009cbc:	18 97       	mov	r7,r12
80009cbe:	10 9c       	mov	r12,r8
80009cc0:	30 08       	mov	r8,0
80009cc2:	14 9b       	mov	r11,r10
80009cc4:	e0 66 07 fc 	mov	r6,2044
80009cc8:	12 9a       	mov	r10,r9
80009cca:	8d 08       	st.w	r6[0x0],r8
80009ccc:	fe b0 da 8c 	rcall	800051e4 <_write>
80009cd0:	5b fc       	cp.w	r12,-1
80009cd2:	c0 51       	brne	80009cdc <_write_r+0x24>
80009cd4:	6c 08       	ld.w	r8,r6[0x0]
80009cd6:	58 08       	cp.w	r8,0
80009cd8:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009cdc:	d8 22       	popm	r4-r7,pc
80009cde:	d7 03       	nop

80009ce0 <__swsetup_r>:
80009ce0:	d4 21       	pushm	r4-r7,lr
80009ce2:	e0 68 01 18 	mov	r8,280
80009ce6:	18 96       	mov	r6,r12
80009ce8:	16 97       	mov	r7,r11
80009cea:	70 0c       	ld.w	r12,r8[0x0]
80009cec:	58 0c       	cp.w	r12,0
80009cee:	c0 60       	breq	80009cfa <__swsetup_r+0x1a>
80009cf0:	78 68       	ld.w	r8,r12[0x18]
80009cf2:	58 08       	cp.w	r8,0
80009cf4:	c0 31       	brne	80009cfa <__swsetup_r+0x1a>
80009cf6:	fe b0 ec db 	rcall	800076ac <__sinit>
80009cfa:	fe c8 d5 42 	sub	r8,pc,-10942
80009cfe:	10 37       	cp.w	r7,r8
80009d00:	c0 61       	brne	80009d0c <__swsetup_r+0x2c>
80009d02:	e0 68 01 18 	mov	r8,280
80009d06:	70 08       	ld.w	r8,r8[0x0]
80009d08:	70 07       	ld.w	r7,r8[0x0]
80009d0a:	c1 28       	rjmp	80009d2e <__swsetup_r+0x4e>
80009d0c:	fe c8 d5 34 	sub	r8,pc,-10956
80009d10:	10 37       	cp.w	r7,r8
80009d12:	c0 61       	brne	80009d1e <__swsetup_r+0x3e>
80009d14:	e0 68 01 18 	mov	r8,280
80009d18:	70 08       	ld.w	r8,r8[0x0]
80009d1a:	70 17       	ld.w	r7,r8[0x4]
80009d1c:	c0 98       	rjmp	80009d2e <__swsetup_r+0x4e>
80009d1e:	fe c8 d5 26 	sub	r8,pc,-10970
80009d22:	10 37       	cp.w	r7,r8
80009d24:	c0 51       	brne	80009d2e <__swsetup_r+0x4e>
80009d26:	e0 68 01 18 	mov	r8,280
80009d2a:	70 08       	ld.w	r8,r8[0x0]
80009d2c:	70 27       	ld.w	r7,r8[0x8]
80009d2e:	8e 68       	ld.sh	r8,r7[0xc]
80009d30:	ed b8 00 03 	bld	r8,0x3
80009d34:	c1 e0       	breq	80009d70 <__swsetup_r+0x90>
80009d36:	ed b8 00 04 	bld	r8,0x4
80009d3a:	c3 e1       	brne	80009db6 <__swsetup_r+0xd6>
80009d3c:	ed b8 00 02 	bld	r8,0x2
80009d40:	c1 51       	brne	80009d6a <__swsetup_r+0x8a>
80009d42:	6e db       	ld.w	r11,r7[0x34]
80009d44:	58 0b       	cp.w	r11,0
80009d46:	c0 a0       	breq	80009d5a <__swsetup_r+0x7a>
80009d48:	ee c8 ff bc 	sub	r8,r7,-68
80009d4c:	10 3b       	cp.w	r11,r8
80009d4e:	c0 40       	breq	80009d56 <__swsetup_r+0x76>
80009d50:	0c 9c       	mov	r12,r6
80009d52:	fe b0 ed 47 	rcall	800077e0 <_free_r>
80009d56:	30 08       	mov	r8,0
80009d58:	8f d8       	st.w	r7[0x34],r8
80009d5a:	8e 68       	ld.sh	r8,r7[0xc]
80009d5c:	e0 18 ff db 	andl	r8,0xffdb
80009d60:	ae 68       	st.h	r7[0xc],r8
80009d62:	30 08       	mov	r8,0
80009d64:	8f 18       	st.w	r7[0x4],r8
80009d66:	6e 48       	ld.w	r8,r7[0x10]
80009d68:	8f 08       	st.w	r7[0x0],r8
80009d6a:	8e 68       	ld.sh	r8,r7[0xc]
80009d6c:	a3 b8       	sbr	r8,0x3
80009d6e:	ae 68       	st.h	r7[0xc],r8
80009d70:	6e 48       	ld.w	r8,r7[0x10]
80009d72:	58 08       	cp.w	r8,0
80009d74:	c0 b1       	brne	80009d8a <__swsetup_r+0xaa>
80009d76:	8e 68       	ld.sh	r8,r7[0xc]
80009d78:	e2 18 02 80 	andl	r8,0x280,COH
80009d7c:	e0 48 02 00 	cp.w	r8,512
80009d80:	c0 50       	breq	80009d8a <__swsetup_r+0xaa>
80009d82:	0c 9c       	mov	r12,r6
80009d84:	0e 9b       	mov	r11,r7
80009d86:	e0 a0 08 f9 	rcall	8000af78 <__smakebuf_r>
80009d8a:	8e 69       	ld.sh	r9,r7[0xc]
80009d8c:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80009d90:	c0 70       	breq	80009d9e <__swsetup_r+0xbe>
80009d92:	30 08       	mov	r8,0
80009d94:	8f 28       	st.w	r7[0x8],r8
80009d96:	6e 58       	ld.w	r8,r7[0x14]
80009d98:	5c 38       	neg	r8
80009d9a:	8f 68       	st.w	r7[0x18],r8
80009d9c:	c0 68       	rjmp	80009da8 <__swsetup_r+0xc8>
80009d9e:	ed b9 00 01 	bld	r9,0x1
80009da2:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80009da6:	8f 28       	st.w	r7[0x8],r8
80009da8:	6e 48       	ld.w	r8,r7[0x10]
80009daa:	58 08       	cp.w	r8,0
80009dac:	c0 61       	brne	80009db8 <__swsetup_r+0xd8>
80009dae:	8e 68       	ld.sh	r8,r7[0xc]
80009db0:	ed b8 00 07 	bld	r8,0x7
80009db4:	c0 21       	brne	80009db8 <__swsetup_r+0xd8>
80009db6:	dc 2a       	popm	r4-r7,pc,r12=-1
80009db8:	d8 2a       	popm	r4-r7,pc,r12=0
80009dba:	d7 03       	nop

80009dbc <_close_r>:
80009dbc:	d4 21       	pushm	r4-r7,lr
80009dbe:	30 08       	mov	r8,0
80009dc0:	18 97       	mov	r7,r12
80009dc2:	e0 66 07 fc 	mov	r6,2044
80009dc6:	16 9c       	mov	r12,r11
80009dc8:	8d 08       	st.w	r6[0x0],r8
80009dca:	fe b0 ea d5 	rcall	80007374 <_close>
80009dce:	5b fc       	cp.w	r12,-1
80009dd0:	c0 51       	brne	80009dda <_close_r+0x1e>
80009dd2:	6c 08       	ld.w	r8,r6[0x0]
80009dd4:	58 08       	cp.w	r8,0
80009dd6:	ef f8 1a 03 	st.wne	r7[0xc],r8
80009dda:	d8 22       	popm	r4-r7,pc

80009ddc <quorem>:
80009ddc:	d4 31       	pushm	r0-r7,lr
80009dde:	20 2d       	sub	sp,8
80009de0:	18 97       	mov	r7,r12
80009de2:	78 48       	ld.w	r8,r12[0x10]
80009de4:	76 46       	ld.w	r6,r11[0x10]
80009de6:	0c 38       	cp.w	r8,r6
80009de8:	c0 34       	brge	80009dee <quorem+0x12>
80009dea:	30 0c       	mov	r12,0
80009dec:	c8 58       	rjmp	80009ef6 <quorem+0x11a>
80009dee:	ec c2 ff fc 	sub	r2,r6,-4
80009df2:	f6 c3 ff ec 	sub	r3,r11,-20
80009df6:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80009dfa:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80009dfe:	2f f9       	sub	r9,-1
80009e00:	20 16       	sub	r6,1
80009e02:	f8 09 0d 08 	divu	r8,r12,r9
80009e06:	f6 02 00 22 	add	r2,r11,r2<<0x2
80009e0a:	ee c4 ff ec 	sub	r4,r7,-20
80009e0e:	10 95       	mov	r5,r8
80009e10:	58 08       	cp.w	r8,0
80009e12:	c4 10       	breq	80009e94 <quorem+0xb8>
80009e14:	30 09       	mov	r9,0
80009e16:	06 9a       	mov	r10,r3
80009e18:	08 98       	mov	r8,r4
80009e1a:	12 91       	mov	r1,r9
80009e1c:	50 0b       	stdsp	sp[0x0],r11
80009e1e:	70 0e       	ld.w	lr,r8[0x0]
80009e20:	b1 8e       	lsr	lr,0x10
80009e22:	50 1e       	stdsp	sp[0x4],lr
80009e24:	15 0e       	ld.w	lr,r10++
80009e26:	fc 00 16 10 	lsr	r0,lr,0x10
80009e2a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80009e2e:	ea 0e 03 41 	mac	r1,r5,lr
80009e32:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80009e36:	b1 81       	lsr	r1,0x10
80009e38:	40 1b       	lddsp	r11,sp[0x4]
80009e3a:	ea 00 02 40 	mul	r0,r5,r0
80009e3e:	e2 00 00 00 	add	r0,r1,r0
80009e42:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80009e46:	02 1b       	sub	r11,r1
80009e48:	50 1b       	stdsp	sp[0x4],r11
80009e4a:	70 0b       	ld.w	r11,r8[0x0]
80009e4c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80009e50:	02 09       	add	r9,r1
80009e52:	f2 0e 01 0e 	sub	lr,r9,lr
80009e56:	b0 1e       	st.h	r8[0x2],lr
80009e58:	fc 09 14 10 	asr	r9,lr,0x10
80009e5c:	40 1e       	lddsp	lr,sp[0x4]
80009e5e:	fc 09 00 09 	add	r9,lr,r9
80009e62:	b0 09       	st.h	r8[0x0],r9
80009e64:	e0 01 16 10 	lsr	r1,r0,0x10
80009e68:	2f c8       	sub	r8,-4
80009e6a:	b1 49       	asr	r9,0x10
80009e6c:	04 3a       	cp.w	r10,r2
80009e6e:	fe 98 ff d8 	brls	80009e1e <quorem+0x42>
80009e72:	40 0b       	lddsp	r11,sp[0x0]
80009e74:	58 0c       	cp.w	r12,0
80009e76:	c0 f1       	brne	80009e94 <quorem+0xb8>
80009e78:	ec c8 ff fb 	sub	r8,r6,-5
80009e7c:	ee 08 00 28 	add	r8,r7,r8<<0x2
80009e80:	c0 28       	rjmp	80009e84 <quorem+0xa8>
80009e82:	20 16       	sub	r6,1
80009e84:	20 48       	sub	r8,4
80009e86:	08 38       	cp.w	r8,r4
80009e88:	e0 88 00 05 	brls	80009e92 <quorem+0xb6>
80009e8c:	70 09       	ld.w	r9,r8[0x0]
80009e8e:	58 09       	cp.w	r9,0
80009e90:	cf 90       	breq	80009e82 <quorem+0xa6>
80009e92:	8f 46       	st.w	r7[0x10],r6
80009e94:	0e 9c       	mov	r12,r7
80009e96:	e0 a0 09 51 	rcall	8000b138 <__mcmp>
80009e9a:	c2 d5       	brlt	80009ef4 <quorem+0x118>
80009e9c:	2f f5       	sub	r5,-1
80009e9e:	08 98       	mov	r8,r4
80009ea0:	30 09       	mov	r9,0
80009ea2:	07 0b       	ld.w	r11,r3++
80009ea4:	f6 0a 16 10 	lsr	r10,r11,0x10
80009ea8:	70 0c       	ld.w	r12,r8[0x0]
80009eaa:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80009eae:	f8 0e 16 10 	lsr	lr,r12,0x10
80009eb2:	14 1e       	sub	lr,r10
80009eb4:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80009eb8:	16 1a       	sub	r10,r11
80009eba:	12 0a       	add	r10,r9
80009ebc:	b0 1a       	st.h	r8[0x2],r10
80009ebe:	b1 4a       	asr	r10,0x10
80009ec0:	fc 0a 00 09 	add	r9,lr,r10
80009ec4:	b0 09       	st.h	r8[0x0],r9
80009ec6:	2f c8       	sub	r8,-4
80009ec8:	b1 49       	asr	r9,0x10
80009eca:	04 33       	cp.w	r3,r2
80009ecc:	fe 98 ff eb 	brls	80009ea2 <quorem+0xc6>
80009ed0:	ec c8 ff fb 	sub	r8,r6,-5
80009ed4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80009ed8:	58 09       	cp.w	r9,0
80009eda:	c0 d1       	brne	80009ef4 <quorem+0x118>
80009edc:	ee 08 00 28 	add	r8,r7,r8<<0x2
80009ee0:	c0 28       	rjmp	80009ee4 <quorem+0x108>
80009ee2:	20 16       	sub	r6,1
80009ee4:	20 48       	sub	r8,4
80009ee6:	08 38       	cp.w	r8,r4
80009ee8:	e0 88 00 05 	brls	80009ef2 <quorem+0x116>
80009eec:	70 09       	ld.w	r9,r8[0x0]
80009eee:	58 09       	cp.w	r9,0
80009ef0:	cf 90       	breq	80009ee2 <quorem+0x106>
80009ef2:	8f 46       	st.w	r7[0x10],r6
80009ef4:	0a 9c       	mov	r12,r5
80009ef6:	2f ed       	sub	sp,-8
80009ef8:	d8 32       	popm	r0-r7,pc
80009efa:	d7 03       	nop

80009efc <_dtoa_r>:
80009efc:	d4 31       	pushm	r0-r7,lr
80009efe:	21 ad       	sub	sp,104
80009f00:	fa c4 ff 74 	sub	r4,sp,-140
80009f04:	18 97       	mov	r7,r12
80009f06:	16 95       	mov	r5,r11
80009f08:	68 2c       	ld.w	r12,r4[0x8]
80009f0a:	50 c9       	stdsp	sp[0x30],r9
80009f0c:	68 16       	ld.w	r6,r4[0x4]
80009f0e:	68 09       	ld.w	r9,r4[0x0]
80009f10:	50 e8       	stdsp	sp[0x38],r8
80009f12:	14 94       	mov	r4,r10
80009f14:	51 2c       	stdsp	sp[0x48],r12
80009f16:	fa e5 00 08 	st.d	sp[8],r4
80009f1a:	51 59       	stdsp	sp[0x54],r9
80009f1c:	6e 95       	ld.w	r5,r7[0x24]
80009f1e:	58 05       	cp.w	r5,0
80009f20:	c0 91       	brne	80009f32 <_dtoa_r+0x36>
80009f22:	31 0c       	mov	r12,16
80009f24:	fe b0 e5 ce 	rcall	80006ac0 <malloc>
80009f28:	99 35       	st.w	r12[0xc],r5
80009f2a:	8f 9c       	st.w	r7[0x24],r12
80009f2c:	99 15       	st.w	r12[0x4],r5
80009f2e:	99 25       	st.w	r12[0x8],r5
80009f30:	99 05       	st.w	r12[0x0],r5
80009f32:	6e 99       	ld.w	r9,r7[0x24]
80009f34:	72 08       	ld.w	r8,r9[0x0]
80009f36:	58 08       	cp.w	r8,0
80009f38:	c0 f0       	breq	80009f56 <_dtoa_r+0x5a>
80009f3a:	72 1a       	ld.w	r10,r9[0x4]
80009f3c:	91 1a       	st.w	r8[0x4],r10
80009f3e:	30 1a       	mov	r10,1
80009f40:	72 19       	ld.w	r9,r9[0x4]
80009f42:	f4 09 09 49 	lsl	r9,r10,r9
80009f46:	10 9b       	mov	r11,r8
80009f48:	91 29       	st.w	r8[0x8],r9
80009f4a:	0e 9c       	mov	r12,r7
80009f4c:	e0 a0 09 10 	rcall	8000b16c <_Bfree>
80009f50:	6e 98       	ld.w	r8,r7[0x24]
80009f52:	30 09       	mov	r9,0
80009f54:	91 09       	st.w	r8[0x0],r9
80009f56:	40 28       	lddsp	r8,sp[0x8]
80009f58:	10 94       	mov	r4,r8
80009f5a:	58 08       	cp.w	r8,0
80009f5c:	c0 64       	brge	80009f68 <_dtoa_r+0x6c>
80009f5e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80009f62:	50 28       	stdsp	sp[0x8],r8
80009f64:	30 18       	mov	r8,1
80009f66:	c0 28       	rjmp	80009f6a <_dtoa_r+0x6e>
80009f68:	30 08       	mov	r8,0
80009f6a:	8d 08       	st.w	r6[0x0],r8
80009f6c:	fc 1c 7f f0 	movh	r12,0x7ff0
80009f70:	40 26       	lddsp	r6,sp[0x8]
80009f72:	0c 98       	mov	r8,r6
80009f74:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80009f78:	18 38       	cp.w	r8,r12
80009f7a:	c2 01       	brne	80009fba <_dtoa_r+0xbe>
80009f7c:	e0 68 27 0f 	mov	r8,9999
80009f80:	41 5b       	lddsp	r11,sp[0x54]
80009f82:	97 08       	st.w	r11[0x0],r8
80009f84:	40 3a       	lddsp	r10,sp[0xc]
80009f86:	58 0a       	cp.w	r10,0
80009f88:	c0 71       	brne	80009f96 <_dtoa_r+0x9a>
80009f8a:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80009f8e:	c0 41       	brne	80009f96 <_dtoa_r+0x9a>
80009f90:	fe cc d3 a4 	sub	r12,pc,-11356
80009f94:	c0 38       	rjmp	80009f9a <_dtoa_r+0x9e>
80009f96:	fe cc d3 9e 	sub	r12,pc,-11362
80009f9a:	41 29       	lddsp	r9,sp[0x48]
80009f9c:	58 09       	cp.w	r9,0
80009f9e:	e0 80 05 9a 	breq	8000aad2 <_dtoa_r+0xbd6>
80009fa2:	f8 c8 ff fd 	sub	r8,r12,-3
80009fa6:	f8 c9 ff f8 	sub	r9,r12,-8
80009faa:	11 8b       	ld.ub	r11,r8[0x0]
80009fac:	30 0a       	mov	r10,0
80009fae:	41 25       	lddsp	r5,sp[0x48]
80009fb0:	f4 0b 18 00 	cp.b	r11,r10
80009fb4:	f2 08 17 10 	movne	r8,r9
80009fb8:	c1 68       	rjmp	80009fe4 <_dtoa_r+0xe8>
80009fba:	fa ea 00 08 	ld.d	r10,sp[8]
80009fbe:	30 08       	mov	r8,0
80009fc0:	fa eb 00 3c 	st.d	sp[60],r10
80009fc4:	30 09       	mov	r9,0
80009fc6:	e0 a0 0e 78 	rcall	8000bcb6 <__avr32_f64_cmp_eq>
80009fca:	c1 00       	breq	80009fea <_dtoa_r+0xee>
80009fcc:	30 18       	mov	r8,1
80009fce:	41 5a       	lddsp	r10,sp[0x54]
80009fd0:	95 08       	st.w	r10[0x0],r8
80009fd2:	fe cc d5 0a 	sub	r12,pc,-10998
80009fd6:	41 29       	lddsp	r9,sp[0x48]
80009fd8:	f8 08 00 08 	add	r8,r12,r8
80009fdc:	58 09       	cp.w	r9,0
80009fde:	e0 80 05 7a 	breq	8000aad2 <_dtoa_r+0xbd6>
80009fe2:	12 95       	mov	r5,r9
80009fe4:	8b 08       	st.w	r5[0x0],r8
80009fe6:	e0 8f 05 76 	bral	8000aad2 <_dtoa_r+0xbd6>
80009fea:	fa c8 ff 9c 	sub	r8,sp,-100
80009fee:	fa c9 ff a0 	sub	r9,sp,-96
80009ff2:	fa ea 00 3c 	ld.d	r10,sp[60]
80009ff6:	0e 9c       	mov	r12,r7
80009ff8:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80009ffc:	e0 a0 09 0a 	rcall	8000b210 <__d2b>
8000a000:	18 93       	mov	r3,r12
8000a002:	58 05       	cp.w	r5,0
8000a004:	c0 d0       	breq	8000a01e <_dtoa_r+0x122>
8000a006:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a00a:	30 04       	mov	r4,0
8000a00c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
8000a010:	ea c5 03 ff 	sub	r5,r5,1023
8000a014:	10 9b       	mov	r11,r8
8000a016:	51 74       	stdsp	sp[0x5c],r4
8000a018:	ea 1b 3f f0 	orh	r11,0x3ff0
8000a01c:	c2 58       	rjmp	8000a066 <_dtoa_r+0x16a>
8000a01e:	41 88       	lddsp	r8,sp[0x60]
8000a020:	41 9c       	lddsp	r12,sp[0x64]
8000a022:	10 0c       	add	r12,r8
8000a024:	f8 c5 fb ce 	sub	r5,r12,-1074
8000a028:	e0 45 00 20 	cp.w	r5,32
8000a02c:	e0 8a 00 0e 	brle	8000a048 <_dtoa_r+0x14c>
8000a030:	f8 cc fb ee 	sub	r12,r12,-1042
8000a034:	40 3b       	lddsp	r11,sp[0xc]
8000a036:	ea 08 11 40 	rsub	r8,r5,64
8000a03a:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000a03e:	ec 08 09 46 	lsl	r6,r6,r8
8000a042:	0c 4c       	or	r12,r6
8000a044:	c0 78       	rjmp	8000a052 <_dtoa_r+0x156>
8000a046:	d7 03       	nop
8000a048:	ea 0c 11 20 	rsub	r12,r5,32
8000a04c:	40 3a       	lddsp	r10,sp[0xc]
8000a04e:	f4 0c 09 4c 	lsl	r12,r10,r12
8000a052:	e0 a0 0d be 	rcall	8000bbce <__avr32_u32_to_f64>
8000a056:	fc 18 fe 10 	movh	r8,0xfe10
8000a05a:	30 19       	mov	r9,1
8000a05c:	ea c5 04 33 	sub	r5,r5,1075
8000a060:	f0 0b 00 0b 	add	r11,r8,r11
8000a064:	51 79       	stdsp	sp[0x5c],r9
8000a066:	30 08       	mov	r8,0
8000a068:	fc 19 3f f8 	movh	r9,0x3ff8
8000a06c:	e0 a0 0c 46 	rcall	8000b8f8 <__avr32_f64_sub>
8000a070:	e0 68 43 61 	mov	r8,17249
8000a074:	ea 18 63 6f 	orh	r8,0x636f
8000a078:	e0 69 87 a7 	mov	r9,34727
8000a07c:	ea 19 3f d2 	orh	r9,0x3fd2
8000a080:	e0 a0 0b 50 	rcall	8000b720 <__avr32_f64_mul>
8000a084:	e0 68 c8 b3 	mov	r8,51379
8000a088:	ea 18 8b 60 	orh	r8,0x8b60
8000a08c:	e0 69 8a 28 	mov	r9,35368
8000a090:	ea 19 3f c6 	orh	r9,0x3fc6
8000a094:	e0 a0 0d 00 	rcall	8000ba94 <__avr32_f64_add>
8000a098:	0a 9c       	mov	r12,r5
8000a09a:	14 90       	mov	r0,r10
8000a09c:	16 91       	mov	r1,r11
8000a09e:	e0 a0 0d 9c 	rcall	8000bbd6 <__avr32_s32_to_f64>
8000a0a2:	e0 68 79 fb 	mov	r8,31227
8000a0a6:	ea 18 50 9f 	orh	r8,0x509f
8000a0aa:	e0 69 44 13 	mov	r9,17427
8000a0ae:	ea 19 3f d3 	orh	r9,0x3fd3
8000a0b2:	e0 a0 0b 37 	rcall	8000b720 <__avr32_f64_mul>
8000a0b6:	14 98       	mov	r8,r10
8000a0b8:	16 99       	mov	r9,r11
8000a0ba:	00 9a       	mov	r10,r0
8000a0bc:	02 9b       	mov	r11,r1
8000a0be:	e0 a0 0c eb 	rcall	8000ba94 <__avr32_f64_add>
8000a0c2:	14 90       	mov	r0,r10
8000a0c4:	16 91       	mov	r1,r11
8000a0c6:	e0 a0 0d 71 	rcall	8000bba8 <__avr32_f64_to_s32>
8000a0ca:	30 08       	mov	r8,0
8000a0cc:	18 96       	mov	r6,r12
8000a0ce:	30 09       	mov	r9,0
8000a0d0:	00 9a       	mov	r10,r0
8000a0d2:	02 9b       	mov	r11,r1
8000a0d4:	e0 a0 0e 38 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a0d8:	c0 c0       	breq	8000a0f0 <_dtoa_r+0x1f4>
8000a0da:	0c 9c       	mov	r12,r6
8000a0dc:	e0 a0 0d 7d 	rcall	8000bbd6 <__avr32_s32_to_f64>
8000a0e0:	14 98       	mov	r8,r10
8000a0e2:	16 99       	mov	r9,r11
8000a0e4:	00 9a       	mov	r10,r0
8000a0e6:	02 9b       	mov	r11,r1
8000a0e8:	e0 a0 0d e7 	rcall	8000bcb6 <__avr32_f64_cmp_eq>
8000a0ec:	f7 b6 00 01 	subeq	r6,1
8000a0f0:	59 66       	cp.w	r6,22
8000a0f2:	e0 88 00 05 	brls	8000a0fc <_dtoa_r+0x200>
8000a0f6:	30 18       	mov	r8,1
8000a0f8:	51 48       	stdsp	sp[0x50],r8
8000a0fa:	c1 38       	rjmp	8000a120 <_dtoa_r+0x224>
8000a0fc:	fe c8 d4 b4 	sub	r8,pc,-11084
8000a100:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a104:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8000a108:	e0 a0 0e 1e 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a10c:	f9 b4 00 00 	moveq	r4,0
8000a110:	fb f4 0a 14 	st.weq	sp[0x50],r4
8000a114:	f7 b6 01 01 	subne	r6,1
8000a118:	f9 bc 01 00 	movne	r12,0
8000a11c:	fb fc 1a 14 	st.wne	sp[0x50],r12
8000a120:	41 90       	lddsp	r0,sp[0x64]
8000a122:	20 10       	sub	r0,1
8000a124:	0a 10       	sub	r0,r5
8000a126:	c0 46       	brmi	8000a12e <_dtoa_r+0x232>
8000a128:	50 40       	stdsp	sp[0x10],r0
8000a12a:	30 00       	mov	r0,0
8000a12c:	c0 48       	rjmp	8000a134 <_dtoa_r+0x238>
8000a12e:	30 0b       	mov	r11,0
8000a130:	5c 30       	neg	r0
8000a132:	50 4b       	stdsp	sp[0x10],r11
8000a134:	ec 02 11 00 	rsub	r2,r6,0
8000a138:	58 06       	cp.w	r6,0
8000a13a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000a13e:	f5 d6 e4 0a 	addge	r10,r10,r6
8000a142:	fb fa 4a 04 	st.wge	sp[0x10],r10
8000a146:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000a14a:	f9 b2 04 00 	movge	r2,0
8000a14e:	e1 d6 e5 10 	sublt	r0,r0,r6
8000a152:	f9 b9 05 00 	movlt	r9,0
8000a156:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000a15a:	40 c8       	lddsp	r8,sp[0x30]
8000a15c:	58 98       	cp.w	r8,9
8000a15e:	e0 8b 00 20 	brhi	8000a19e <_dtoa_r+0x2a2>
8000a162:	58 58       	cp.w	r8,5
8000a164:	f9 b4 0a 01 	movle	r4,1
8000a168:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000a16c:	f7 b5 09 04 	subgt	r5,4
8000a170:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
8000a174:	f9 b4 09 00 	movgt	r4,0
8000a178:	40 cc       	lddsp	r12,sp[0x30]
8000a17a:	58 3c       	cp.w	r12,3
8000a17c:	c2 d0       	breq	8000a1d6 <_dtoa_r+0x2da>
8000a17e:	e0 89 00 05 	brgt	8000a188 <_dtoa_r+0x28c>
8000a182:	58 2c       	cp.w	r12,2
8000a184:	c1 01       	brne	8000a1a4 <_dtoa_r+0x2a8>
8000a186:	c1 88       	rjmp	8000a1b6 <_dtoa_r+0x2ba>
8000a188:	40 cb       	lddsp	r11,sp[0x30]
8000a18a:	58 4b       	cp.w	r11,4
8000a18c:	c0 60       	breq	8000a198 <_dtoa_r+0x29c>
8000a18e:	58 5b       	cp.w	r11,5
8000a190:	c0 a1       	brne	8000a1a4 <_dtoa_r+0x2a8>
8000a192:	30 1a       	mov	r10,1
8000a194:	50 da       	stdsp	sp[0x34],r10
8000a196:	c2 28       	rjmp	8000a1da <_dtoa_r+0x2de>
8000a198:	30 19       	mov	r9,1
8000a19a:	50 d9       	stdsp	sp[0x34],r9
8000a19c:	c0 f8       	rjmp	8000a1ba <_dtoa_r+0x2be>
8000a19e:	30 08       	mov	r8,0
8000a1a0:	30 14       	mov	r4,1
8000a1a2:	50 c8       	stdsp	sp[0x30],r8
8000a1a4:	3f f5       	mov	r5,-1
8000a1a6:	30 1c       	mov	r12,1
8000a1a8:	30 0b       	mov	r11,0
8000a1aa:	50 95       	stdsp	sp[0x24],r5
8000a1ac:	50 dc       	stdsp	sp[0x34],r12
8000a1ae:	0a 91       	mov	r1,r5
8000a1b0:	31 28       	mov	r8,18
8000a1b2:	50 eb       	stdsp	sp[0x38],r11
8000a1b4:	c2 08       	rjmp	8000a1f4 <_dtoa_r+0x2f8>
8000a1b6:	30 0a       	mov	r10,0
8000a1b8:	50 da       	stdsp	sp[0x34],r10
8000a1ba:	40 e9       	lddsp	r9,sp[0x38]
8000a1bc:	58 09       	cp.w	r9,0
8000a1be:	e0 89 00 07 	brgt	8000a1cc <_dtoa_r+0x2d0>
8000a1c2:	30 18       	mov	r8,1
8000a1c4:	50 98       	stdsp	sp[0x24],r8
8000a1c6:	10 91       	mov	r1,r8
8000a1c8:	50 e8       	stdsp	sp[0x38],r8
8000a1ca:	c1 58       	rjmp	8000a1f4 <_dtoa_r+0x2f8>
8000a1cc:	40 e5       	lddsp	r5,sp[0x38]
8000a1ce:	50 95       	stdsp	sp[0x24],r5
8000a1d0:	0a 91       	mov	r1,r5
8000a1d2:	0a 98       	mov	r8,r5
8000a1d4:	c1 08       	rjmp	8000a1f4 <_dtoa_r+0x2f8>
8000a1d6:	30 0c       	mov	r12,0
8000a1d8:	50 dc       	stdsp	sp[0x34],r12
8000a1da:	40 eb       	lddsp	r11,sp[0x38]
8000a1dc:	ec 0b 00 0b 	add	r11,r6,r11
8000a1e0:	50 9b       	stdsp	sp[0x24],r11
8000a1e2:	16 98       	mov	r8,r11
8000a1e4:	2f f8       	sub	r8,-1
8000a1e6:	58 08       	cp.w	r8,0
8000a1e8:	e0 89 00 05 	brgt	8000a1f2 <_dtoa_r+0x2f6>
8000a1ec:	10 91       	mov	r1,r8
8000a1ee:	30 18       	mov	r8,1
8000a1f0:	c0 28       	rjmp	8000a1f4 <_dtoa_r+0x2f8>
8000a1f2:	10 91       	mov	r1,r8
8000a1f4:	30 09       	mov	r9,0
8000a1f6:	6e 9a       	ld.w	r10,r7[0x24]
8000a1f8:	95 19       	st.w	r10[0x4],r9
8000a1fa:	30 49       	mov	r9,4
8000a1fc:	c0 68       	rjmp	8000a208 <_dtoa_r+0x30c>
8000a1fe:	d7 03       	nop
8000a200:	6a 1a       	ld.w	r10,r5[0x4]
8000a202:	a1 79       	lsl	r9,0x1
8000a204:	2f fa       	sub	r10,-1
8000a206:	8b 1a       	st.w	r5[0x4],r10
8000a208:	6e 95       	ld.w	r5,r7[0x24]
8000a20a:	f2 ca ff ec 	sub	r10,r9,-20
8000a20e:	10 3a       	cp.w	r10,r8
8000a210:	fe 98 ff f8 	brls	8000a200 <_dtoa_r+0x304>
8000a214:	6a 1b       	ld.w	r11,r5[0x4]
8000a216:	0e 9c       	mov	r12,r7
8000a218:	e0 a0 07 c4 	rcall	8000b1a0 <_Balloc>
8000a21c:	58 e1       	cp.w	r1,14
8000a21e:	5f 88       	srls	r8
8000a220:	8b 0c       	st.w	r5[0x0],r12
8000a222:	f1 e4 00 04 	and	r4,r8,r4
8000a226:	6e 98       	ld.w	r8,r7[0x24]
8000a228:	70 08       	ld.w	r8,r8[0x0]
8000a22a:	50 88       	stdsp	sp[0x20],r8
8000a22c:	e0 80 01 82 	breq	8000a530 <_dtoa_r+0x634>
8000a230:	58 06       	cp.w	r6,0
8000a232:	e0 8a 00 43 	brle	8000a2b8 <_dtoa_r+0x3bc>
8000a236:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000a23a:	fe c8 d5 f2 	sub	r8,pc,-10766
8000a23e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000a242:	fa e5 00 18 	st.d	sp[24],r4
8000a246:	ec 04 14 04 	asr	r4,r6,0x4
8000a24a:	ed b4 00 04 	bld	r4,0x4
8000a24e:	c0 30       	breq	8000a254 <_dtoa_r+0x358>
8000a250:	30 25       	mov	r5,2
8000a252:	c1 08       	rjmp	8000a272 <_dtoa_r+0x376>
8000a254:	fe c8 d5 44 	sub	r8,pc,-10940
8000a258:	f0 e8 00 20 	ld.d	r8,r8[32]
8000a25c:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a260:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
8000a264:	e0 a0 0d a4 	rcall	8000bdac <__avr32_f64_div>
8000a268:	30 35       	mov	r5,3
8000a26a:	14 98       	mov	r8,r10
8000a26c:	16 99       	mov	r9,r11
8000a26e:	fa e9 00 08 	st.d	sp[8],r8
8000a272:	fe cc d5 62 	sub	r12,pc,-10910
8000a276:	50 a3       	stdsp	sp[0x28],r3
8000a278:	0c 93       	mov	r3,r6
8000a27a:	18 96       	mov	r6,r12
8000a27c:	c0 f8       	rjmp	8000a29a <_dtoa_r+0x39e>
8000a27e:	fa ea 00 18 	ld.d	r10,sp[24]
8000a282:	ed b4 00 00 	bld	r4,0x0
8000a286:	c0 81       	brne	8000a296 <_dtoa_r+0x39a>
8000a288:	ec e8 00 00 	ld.d	r8,r6[0]
8000a28c:	2f f5       	sub	r5,-1
8000a28e:	e0 a0 0a 49 	rcall	8000b720 <__avr32_f64_mul>
8000a292:	fa eb 00 18 	st.d	sp[24],r10
8000a296:	a1 54       	asr	r4,0x1
8000a298:	2f 86       	sub	r6,-8
8000a29a:	58 04       	cp.w	r4,0
8000a29c:	cf 11       	brne	8000a27e <_dtoa_r+0x382>
8000a29e:	fa e8 00 18 	ld.d	r8,sp[24]
8000a2a2:	fa ea 00 08 	ld.d	r10,sp[8]
8000a2a6:	06 96       	mov	r6,r3
8000a2a8:	e0 a0 0d 82 	rcall	8000bdac <__avr32_f64_div>
8000a2ac:	40 a3       	lddsp	r3,sp[0x28]
8000a2ae:	14 98       	mov	r8,r10
8000a2b0:	16 99       	mov	r9,r11
8000a2b2:	fa e9 00 08 	st.d	sp[8],r8
8000a2b6:	c2 f8       	rjmp	8000a314 <_dtoa_r+0x418>
8000a2b8:	ec 08 11 00 	rsub	r8,r6,0
8000a2bc:	c0 31       	brne	8000a2c2 <_dtoa_r+0x3c6>
8000a2be:	30 25       	mov	r5,2
8000a2c0:	c2 a8       	rjmp	8000a314 <_dtoa_r+0x418>
8000a2c2:	fe cc d5 b2 	sub	r12,pc,-10830
8000a2c6:	f0 04 14 04 	asr	r4,r8,0x4
8000a2ca:	50 1c       	stdsp	sp[0x4],r12
8000a2cc:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000a2d0:	fe c9 d6 88 	sub	r9,pc,-10616
8000a2d4:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a2d8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000a2dc:	e0 a0 0a 22 	rcall	8000b720 <__avr32_f64_mul>
8000a2e0:	40 1c       	lddsp	r12,sp[0x4]
8000a2e2:	50 63       	stdsp	sp[0x18],r3
8000a2e4:	30 25       	mov	r5,2
8000a2e6:	0c 93       	mov	r3,r6
8000a2e8:	fa eb 00 08 	st.d	sp[8],r10
8000a2ec:	18 96       	mov	r6,r12
8000a2ee:	c0 f8       	rjmp	8000a30c <_dtoa_r+0x410>
8000a2f0:	fa ea 00 08 	ld.d	r10,sp[8]
8000a2f4:	ed b4 00 00 	bld	r4,0x0
8000a2f8:	c0 81       	brne	8000a308 <_dtoa_r+0x40c>
8000a2fa:	ec e8 00 00 	ld.d	r8,r6[0]
8000a2fe:	2f f5       	sub	r5,-1
8000a300:	e0 a0 0a 10 	rcall	8000b720 <__avr32_f64_mul>
8000a304:	fa eb 00 08 	st.d	sp[8],r10
8000a308:	a1 54       	asr	r4,0x1
8000a30a:	2f 86       	sub	r6,-8
8000a30c:	58 04       	cp.w	r4,0
8000a30e:	cf 11       	brne	8000a2f0 <_dtoa_r+0x3f4>
8000a310:	06 96       	mov	r6,r3
8000a312:	40 63       	lddsp	r3,sp[0x18]
8000a314:	41 4a       	lddsp	r10,sp[0x50]
8000a316:	58 0a       	cp.w	r10,0
8000a318:	c2 a0       	breq	8000a36c <_dtoa_r+0x470>
8000a31a:	fa e8 00 08 	ld.d	r8,sp[8]
8000a31e:	58 01       	cp.w	r1,0
8000a320:	5f 94       	srgt	r4
8000a322:	fa e9 00 18 	st.d	sp[24],r8
8000a326:	30 08       	mov	r8,0
8000a328:	fc 19 3f f0 	movh	r9,0x3ff0
8000a32c:	fa ea 00 18 	ld.d	r10,sp[24]
8000a330:	e0 a0 0d 0a 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a334:	f9 bc 00 00 	moveq	r12,0
8000a338:	f9 bc 01 01 	movne	r12,1
8000a33c:	e9 ec 00 0c 	and	r12,r4,r12
8000a340:	c1 60       	breq	8000a36c <_dtoa_r+0x470>
8000a342:	40 98       	lddsp	r8,sp[0x24]
8000a344:	58 08       	cp.w	r8,0
8000a346:	e0 8a 00 f1 	brle	8000a528 <_dtoa_r+0x62c>
8000a34a:	30 08       	mov	r8,0
8000a34c:	fc 19 40 24 	movh	r9,0x4024
8000a350:	ec c4 00 01 	sub	r4,r6,1
8000a354:	fa ea 00 18 	ld.d	r10,sp[24]
8000a358:	2f f5       	sub	r5,-1
8000a35a:	50 64       	stdsp	sp[0x18],r4
8000a35c:	e0 a0 09 e2 	rcall	8000b720 <__avr32_f64_mul>
8000a360:	40 94       	lddsp	r4,sp[0x24]
8000a362:	14 98       	mov	r8,r10
8000a364:	16 99       	mov	r9,r11
8000a366:	fa e9 00 08 	st.d	sp[8],r8
8000a36a:	c0 38       	rjmp	8000a370 <_dtoa_r+0x474>
8000a36c:	50 66       	stdsp	sp[0x18],r6
8000a36e:	02 94       	mov	r4,r1
8000a370:	0a 9c       	mov	r12,r5
8000a372:	e0 a0 0c 32 	rcall	8000bbd6 <__avr32_s32_to_f64>
8000a376:	fa e8 00 08 	ld.d	r8,sp[8]
8000a37a:	e0 a0 09 d3 	rcall	8000b720 <__avr32_f64_mul>
8000a37e:	30 08       	mov	r8,0
8000a380:	fc 19 40 1c 	movh	r9,0x401c
8000a384:	e0 a0 0b 88 	rcall	8000ba94 <__avr32_f64_add>
8000a388:	14 98       	mov	r8,r10
8000a38a:	16 99       	mov	r9,r11
8000a38c:	fa e9 00 28 	st.d	sp[40],r8
8000a390:	fc 18 fc c0 	movh	r8,0xfcc0
8000a394:	40 a5       	lddsp	r5,sp[0x28]
8000a396:	10 05       	add	r5,r8
8000a398:	50 a5       	stdsp	sp[0x28],r5
8000a39a:	58 04       	cp.w	r4,0
8000a39c:	c2 11       	brne	8000a3de <_dtoa_r+0x4e2>
8000a39e:	fa ea 00 08 	ld.d	r10,sp[8]
8000a3a2:	30 08       	mov	r8,0
8000a3a4:	fc 19 40 14 	movh	r9,0x4014
8000a3a8:	e0 a0 0a a8 	rcall	8000b8f8 <__avr32_f64_sub>
8000a3ac:	40 bc       	lddsp	r12,sp[0x2c]
8000a3ae:	fa eb 00 08 	st.d	sp[8],r10
8000a3b2:	14 98       	mov	r8,r10
8000a3b4:	16 99       	mov	r9,r11
8000a3b6:	18 9a       	mov	r10,r12
8000a3b8:	0a 9b       	mov	r11,r5
8000a3ba:	e0 a0 0c c5 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a3be:	e0 81 02 54 	brne	8000a866 <_dtoa_r+0x96a>
8000a3c2:	0a 98       	mov	r8,r5
8000a3c4:	40 b9       	lddsp	r9,sp[0x2c]
8000a3c6:	ee 18 80 00 	eorh	r8,0x8000
8000a3ca:	fa ea 00 08 	ld.d	r10,sp[8]
8000a3ce:	10 95       	mov	r5,r8
8000a3d0:	12 98       	mov	r8,r9
8000a3d2:	0a 99       	mov	r9,r5
8000a3d4:	e0 a0 0c b8 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a3d8:	e0 81 02 3e 	brne	8000a854 <_dtoa_r+0x958>
8000a3dc:	ca 68       	rjmp	8000a528 <_dtoa_r+0x62c>
8000a3de:	fe c9 d7 96 	sub	r9,pc,-10346
8000a3e2:	e8 c8 00 01 	sub	r8,r4,1
8000a3e6:	40 d5       	lddsp	r5,sp[0x34]
8000a3e8:	58 05       	cp.w	r5,0
8000a3ea:	c4 f0       	breq	8000a488 <_dtoa_r+0x58c>
8000a3ec:	30 0c       	mov	r12,0
8000a3ee:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000a3f2:	51 3c       	stdsp	sp[0x4c],r12
8000a3f4:	30 0a       	mov	r10,0
8000a3f6:	fc 1b 3f e0 	movh	r11,0x3fe0
8000a3fa:	e0 a0 0c d9 	rcall	8000bdac <__avr32_f64_div>
8000a3fe:	fa e8 00 28 	ld.d	r8,sp[40]
8000a402:	40 85       	lddsp	r5,sp[0x20]
8000a404:	e0 a0 0a 7a 	rcall	8000b8f8 <__avr32_f64_sub>
8000a408:	fa eb 00 28 	st.d	sp[40],r10
8000a40c:	fa ea 00 08 	ld.d	r10,sp[8]
8000a410:	e0 a0 0b cc 	rcall	8000bba8 <__avr32_f64_to_s32>
8000a414:	51 6c       	stdsp	sp[0x58],r12
8000a416:	e0 a0 0b e0 	rcall	8000bbd6 <__avr32_s32_to_f64>
8000a41a:	14 98       	mov	r8,r10
8000a41c:	16 99       	mov	r9,r11
8000a41e:	fa ea 00 08 	ld.d	r10,sp[8]
8000a422:	e0 a0 0a 6b 	rcall	8000b8f8 <__avr32_f64_sub>
8000a426:	fa eb 00 08 	st.d	sp[8],r10
8000a42a:	41 68       	lddsp	r8,sp[0x58]
8000a42c:	2d 08       	sub	r8,-48
8000a42e:	0a c8       	st.b	r5++,r8
8000a430:	41 39       	lddsp	r9,sp[0x4c]
8000a432:	2f f9       	sub	r9,-1
8000a434:	51 39       	stdsp	sp[0x4c],r9
8000a436:	fa e8 00 28 	ld.d	r8,sp[40]
8000a43a:	e0 a0 0c 85 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a43e:	e0 81 03 39 	brne	8000aab0 <_dtoa_r+0xbb4>
8000a442:	fa e8 00 08 	ld.d	r8,sp[8]
8000a446:	30 0a       	mov	r10,0
8000a448:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a44c:	e0 a0 0a 56 	rcall	8000b8f8 <__avr32_f64_sub>
8000a450:	fa e8 00 28 	ld.d	r8,sp[40]
8000a454:	e0 a0 0c 78 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a458:	fa ea 00 28 	ld.d	r10,sp[40]
8000a45c:	30 08       	mov	r8,0
8000a45e:	fc 19 40 24 	movh	r9,0x4024
8000a462:	e0 81 00 da 	brne	8000a616 <_dtoa_r+0x71a>
8000a466:	41 3c       	lddsp	r12,sp[0x4c]
8000a468:	08 3c       	cp.w	r12,r4
8000a46a:	c5 f4       	brge	8000a528 <_dtoa_r+0x62c>
8000a46c:	e0 a0 09 5a 	rcall	8000b720 <__avr32_f64_mul>
8000a470:	30 08       	mov	r8,0
8000a472:	fa eb 00 28 	st.d	sp[40],r10
8000a476:	fc 19 40 24 	movh	r9,0x4024
8000a47a:	fa ea 00 08 	ld.d	r10,sp[8]
8000a47e:	e0 a0 09 51 	rcall	8000b720 <__avr32_f64_mul>
8000a482:	fa eb 00 08 	st.d	sp[8],r10
8000a486:	cc 3b       	rjmp	8000a40c <_dtoa_r+0x510>
8000a488:	40 85       	lddsp	r5,sp[0x20]
8000a48a:	08 05       	add	r5,r4
8000a48c:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
8000a490:	51 35       	stdsp	sp[0x4c],r5
8000a492:	fa e8 00 28 	ld.d	r8,sp[40]
8000a496:	40 85       	lddsp	r5,sp[0x20]
8000a498:	e0 a0 09 44 	rcall	8000b720 <__avr32_f64_mul>
8000a49c:	fa eb 00 28 	st.d	sp[40],r10
8000a4a0:	fa ea 00 08 	ld.d	r10,sp[8]
8000a4a4:	e0 a0 0b 82 	rcall	8000bba8 <__avr32_f64_to_s32>
8000a4a8:	51 6c       	stdsp	sp[0x58],r12
8000a4aa:	e0 a0 0b 96 	rcall	8000bbd6 <__avr32_s32_to_f64>
8000a4ae:	14 98       	mov	r8,r10
8000a4b0:	16 99       	mov	r9,r11
8000a4b2:	fa ea 00 08 	ld.d	r10,sp[8]
8000a4b6:	e0 a0 0a 21 	rcall	8000b8f8 <__avr32_f64_sub>
8000a4ba:	fa eb 00 08 	st.d	sp[8],r10
8000a4be:	41 68       	lddsp	r8,sp[0x58]
8000a4c0:	2d 08       	sub	r8,-48
8000a4c2:	0a c8       	st.b	r5++,r8
8000a4c4:	41 3c       	lddsp	r12,sp[0x4c]
8000a4c6:	18 35       	cp.w	r5,r12
8000a4c8:	c2 81       	brne	8000a518 <_dtoa_r+0x61c>
8000a4ca:	30 08       	mov	r8,0
8000a4cc:	fc 19 3f e0 	movh	r9,0x3fe0
8000a4d0:	fa ea 00 28 	ld.d	r10,sp[40]
8000a4d4:	e0 a0 0a e0 	rcall	8000ba94 <__avr32_f64_add>
8000a4d8:	40 85       	lddsp	r5,sp[0x20]
8000a4da:	fa e8 00 08 	ld.d	r8,sp[8]
8000a4de:	08 05       	add	r5,r4
8000a4e0:	e0 a0 0c 32 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a4e4:	e0 81 00 99 	brne	8000a616 <_dtoa_r+0x71a>
8000a4e8:	fa e8 00 28 	ld.d	r8,sp[40]
8000a4ec:	30 0a       	mov	r10,0
8000a4ee:	fc 1b 3f e0 	movh	r11,0x3fe0
8000a4f2:	e0 a0 0a 03 	rcall	8000b8f8 <__avr32_f64_sub>
8000a4f6:	14 98       	mov	r8,r10
8000a4f8:	16 99       	mov	r9,r11
8000a4fa:	fa ea 00 08 	ld.d	r10,sp[8]
8000a4fe:	e0 a0 0c 23 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a502:	c1 30       	breq	8000a528 <_dtoa_r+0x62c>
8000a504:	33 09       	mov	r9,48
8000a506:	0a 98       	mov	r8,r5
8000a508:	11 7a       	ld.ub	r10,--r8
8000a50a:	f2 0a 18 00 	cp.b	r10,r9
8000a50e:	e0 81 02 d1 	brne	8000aab0 <_dtoa_r+0xbb4>
8000a512:	10 95       	mov	r5,r8
8000a514:	cf 9b       	rjmp	8000a506 <_dtoa_r+0x60a>
8000a516:	d7 03       	nop
8000a518:	30 08       	mov	r8,0
8000a51a:	fc 19 40 24 	movh	r9,0x4024
8000a51e:	e0 a0 09 01 	rcall	8000b720 <__avr32_f64_mul>
8000a522:	fa eb 00 08 	st.d	sp[8],r10
8000a526:	cb db       	rjmp	8000a4a0 <_dtoa_r+0x5a4>
8000a528:	fa ea 00 3c 	ld.d	r10,sp[60]
8000a52c:	fa eb 00 08 	st.d	sp[8],r10
8000a530:	58 e6       	cp.w	r6,14
8000a532:	5f ab       	srle	r11
8000a534:	41 8a       	lddsp	r10,sp[0x60]
8000a536:	30 08       	mov	r8,0
8000a538:	f4 09 11 ff 	rsub	r9,r10,-1
8000a53c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
8000a540:	f0 09 18 00 	cp.b	r9,r8
8000a544:	e0 80 00 82 	breq	8000a648 <_dtoa_r+0x74c>
8000a548:	40 ea       	lddsp	r10,sp[0x38]
8000a54a:	58 01       	cp.w	r1,0
8000a54c:	5f a9       	srle	r9
8000a54e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000a552:	fe ca d9 0a 	sub	r10,pc,-9974
8000a556:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000a55a:	fa e5 00 10 	st.d	sp[16],r4
8000a55e:	f0 09 18 00 	cp.b	r9,r8
8000a562:	c1 40       	breq	8000a58a <_dtoa_r+0x68e>
8000a564:	58 01       	cp.w	r1,0
8000a566:	e0 81 01 77 	brne	8000a854 <_dtoa_r+0x958>
8000a56a:	30 08       	mov	r8,0
8000a56c:	fc 19 40 14 	movh	r9,0x4014
8000a570:	08 9a       	mov	r10,r4
8000a572:	0a 9b       	mov	r11,r5
8000a574:	e0 a0 08 d6 	rcall	8000b720 <__avr32_f64_mul>
8000a578:	fa e8 00 08 	ld.d	r8,sp[8]
8000a57c:	e0 a0 0b b0 	rcall	8000bcdc <__avr32_f64_cmp_ge>
8000a580:	e0 81 01 6a 	brne	8000a854 <_dtoa_r+0x958>
8000a584:	02 92       	mov	r2,r1
8000a586:	e0 8f 01 72 	bral	8000a86a <_dtoa_r+0x96e>
8000a58a:	40 85       	lddsp	r5,sp[0x20]
8000a58c:	30 14       	mov	r4,1
8000a58e:	fa e8 00 10 	ld.d	r8,sp[16]
8000a592:	fa ea 00 08 	ld.d	r10,sp[8]
8000a596:	e0 a0 0c 0b 	rcall	8000bdac <__avr32_f64_div>
8000a59a:	e0 a0 0b 07 	rcall	8000bba8 <__avr32_f64_to_s32>
8000a59e:	18 92       	mov	r2,r12
8000a5a0:	e0 a0 0b 1b 	rcall	8000bbd6 <__avr32_s32_to_f64>
8000a5a4:	fa e8 00 10 	ld.d	r8,sp[16]
8000a5a8:	e0 a0 08 bc 	rcall	8000b720 <__avr32_f64_mul>
8000a5ac:	14 98       	mov	r8,r10
8000a5ae:	16 99       	mov	r9,r11
8000a5b0:	fa ea 00 08 	ld.d	r10,sp[8]
8000a5b4:	e0 a0 09 a2 	rcall	8000b8f8 <__avr32_f64_sub>
8000a5b8:	fa eb 00 08 	st.d	sp[8],r10
8000a5bc:	e4 c8 ff d0 	sub	r8,r2,-48
8000a5c0:	0a c8       	st.b	r5++,r8
8000a5c2:	fc 19 40 24 	movh	r9,0x4024
8000a5c6:	30 08       	mov	r8,0
8000a5c8:	02 34       	cp.w	r4,r1
8000a5ca:	c3 31       	brne	8000a630 <_dtoa_r+0x734>
8000a5cc:	fa e8 00 08 	ld.d	r8,sp[8]
8000a5d0:	e0 a0 0a 62 	rcall	8000ba94 <__avr32_f64_add>
8000a5d4:	16 91       	mov	r1,r11
8000a5d6:	14 90       	mov	r0,r10
8000a5d8:	14 98       	mov	r8,r10
8000a5da:	02 99       	mov	r9,r1
8000a5dc:	fa ea 00 10 	ld.d	r10,sp[16]
8000a5e0:	e0 a0 0b b2 	rcall	8000bd44 <__avr32_f64_cmp_lt>
8000a5e4:	c1 a1       	brne	8000a618 <_dtoa_r+0x71c>
8000a5e6:	fa e8 00 10 	ld.d	r8,sp[16]
8000a5ea:	00 9a       	mov	r10,r0
8000a5ec:	02 9b       	mov	r11,r1
8000a5ee:	e0 a0 0b 64 	rcall	8000bcb6 <__avr32_f64_cmp_eq>
8000a5f2:	e0 80 02 5e 	breq	8000aaae <_dtoa_r+0xbb2>
8000a5f6:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000a5fa:	c0 f1       	brne	8000a618 <_dtoa_r+0x71c>
8000a5fc:	e0 8f 02 59 	bral	8000aaae <_dtoa_r+0xbb2>
8000a600:	40 8a       	lddsp	r10,sp[0x20]
8000a602:	14 38       	cp.w	r8,r10
8000a604:	c0 30       	breq	8000a60a <_dtoa_r+0x70e>
8000a606:	10 95       	mov	r5,r8
8000a608:	c0 98       	rjmp	8000a61a <_dtoa_r+0x71e>
8000a60a:	33 08       	mov	r8,48
8000a60c:	40 89       	lddsp	r9,sp[0x20]
8000a60e:	2f f6       	sub	r6,-1
8000a610:	b2 88       	st.b	r9[0x0],r8
8000a612:	40 88       	lddsp	r8,sp[0x20]
8000a614:	c0 88       	rjmp	8000a624 <_dtoa_r+0x728>
8000a616:	40 66       	lddsp	r6,sp[0x18]
8000a618:	33 99       	mov	r9,57
8000a61a:	0a 98       	mov	r8,r5
8000a61c:	11 7a       	ld.ub	r10,--r8
8000a61e:	f2 0a 18 00 	cp.b	r10,r9
8000a622:	ce f0       	breq	8000a600 <_dtoa_r+0x704>
8000a624:	50 66       	stdsp	sp[0x18],r6
8000a626:	11 89       	ld.ub	r9,r8[0x0]
8000a628:	2f f9       	sub	r9,-1
8000a62a:	b0 89       	st.b	r8[0x0],r9
8000a62c:	e0 8f 02 42 	bral	8000aab0 <_dtoa_r+0xbb4>
8000a630:	e0 a0 08 78 	rcall	8000b720 <__avr32_f64_mul>
8000a634:	2f f4       	sub	r4,-1
8000a636:	fa eb 00 08 	st.d	sp[8],r10
8000a63a:	30 08       	mov	r8,0
8000a63c:	30 09       	mov	r9,0
8000a63e:	e0 a0 0b 3c 	rcall	8000bcb6 <__avr32_f64_cmp_eq>
8000a642:	ca 60       	breq	8000a58e <_dtoa_r+0x692>
8000a644:	e0 8f 02 35 	bral	8000aaae <_dtoa_r+0xbb2>
8000a648:	40 d8       	lddsp	r8,sp[0x34]
8000a64a:	58 08       	cp.w	r8,0
8000a64c:	c0 51       	brne	8000a656 <_dtoa_r+0x75a>
8000a64e:	04 98       	mov	r8,r2
8000a650:	00 95       	mov	r5,r0
8000a652:	40 d4       	lddsp	r4,sp[0x34]
8000a654:	c3 78       	rjmp	8000a6c2 <_dtoa_r+0x7c6>
8000a656:	40 c5       	lddsp	r5,sp[0x30]
8000a658:	58 15       	cp.w	r5,1
8000a65a:	e0 89 00 0f 	brgt	8000a678 <_dtoa_r+0x77c>
8000a65e:	41 74       	lddsp	r4,sp[0x5c]
8000a660:	58 04       	cp.w	r4,0
8000a662:	c0 40       	breq	8000a66a <_dtoa_r+0x76e>
8000a664:	f4 c9 fb cd 	sub	r9,r10,-1075
8000a668:	c0 48       	rjmp	8000a670 <_dtoa_r+0x774>
8000a66a:	41 99       	lddsp	r9,sp[0x64]
8000a66c:	f2 09 11 36 	rsub	r9,r9,54
8000a670:	04 98       	mov	r8,r2
8000a672:	00 95       	mov	r5,r0
8000a674:	c1 c8       	rjmp	8000a6ac <_dtoa_r+0x7b0>
8000a676:	d7 03       	nop
8000a678:	e2 c8 00 01 	sub	r8,r1,1
8000a67c:	58 01       	cp.w	r1,0
8000a67e:	e0 05 17 40 	movge	r5,r0
8000a682:	e2 09 17 40 	movge	r9,r1
8000a686:	e1 d1 e5 15 	sublt	r5,r0,r1
8000a68a:	f9 b9 05 00 	movlt	r9,0
8000a68e:	10 32       	cp.w	r2,r8
8000a690:	e5 d8 e4 18 	subge	r8,r2,r8
8000a694:	f1 d2 e5 18 	sublt	r8,r8,r2
8000a698:	e5 d8 e5 02 	addlt	r2,r2,r8
8000a69c:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
8000a6a0:	f9 d8 e5 0c 	addlt	r12,r12,r8
8000a6a4:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000a6a8:	f9 b8 05 00 	movlt	r8,0
8000a6ac:	40 4b       	lddsp	r11,sp[0x10]
8000a6ae:	12 0b       	add	r11,r9
8000a6b0:	50 08       	stdsp	sp[0x0],r8
8000a6b2:	50 4b       	stdsp	sp[0x10],r11
8000a6b4:	12 00       	add	r0,r9
8000a6b6:	30 1b       	mov	r11,1
8000a6b8:	0e 9c       	mov	r12,r7
8000a6ba:	e0 a0 07 27 	rcall	8000b508 <__i2b>
8000a6be:	40 08       	lddsp	r8,sp[0x0]
8000a6c0:	18 94       	mov	r4,r12
8000a6c2:	40 4a       	lddsp	r10,sp[0x10]
8000a6c4:	58 05       	cp.w	r5,0
8000a6c6:	5f 99       	srgt	r9
8000a6c8:	58 0a       	cp.w	r10,0
8000a6ca:	5f 9a       	srgt	r10
8000a6cc:	f5 e9 00 09 	and	r9,r10,r9
8000a6d0:	c0 80       	breq	8000a6e0 <_dtoa_r+0x7e4>
8000a6d2:	40 4c       	lddsp	r12,sp[0x10]
8000a6d4:	f8 05 0d 49 	min	r9,r12,r5
8000a6d8:	12 1c       	sub	r12,r9
8000a6da:	12 10       	sub	r0,r9
8000a6dc:	50 4c       	stdsp	sp[0x10],r12
8000a6de:	12 15       	sub	r5,r9
8000a6e0:	58 02       	cp.w	r2,0
8000a6e2:	e0 8a 00 27 	brle	8000a730 <_dtoa_r+0x834>
8000a6e6:	40 db       	lddsp	r11,sp[0x34]
8000a6e8:	58 0b       	cp.w	r11,0
8000a6ea:	c1 d0       	breq	8000a724 <_dtoa_r+0x828>
8000a6ec:	58 08       	cp.w	r8,0
8000a6ee:	e0 8a 00 17 	brle	8000a71c <_dtoa_r+0x820>
8000a6f2:	10 9a       	mov	r10,r8
8000a6f4:	50 08       	stdsp	sp[0x0],r8
8000a6f6:	08 9b       	mov	r11,r4
8000a6f8:	0e 9c       	mov	r12,r7
8000a6fa:	e0 a0 07 4d 	rcall	8000b594 <__pow5mult>
8000a6fe:	06 9a       	mov	r10,r3
8000a700:	18 9b       	mov	r11,r12
8000a702:	18 94       	mov	r4,r12
8000a704:	0e 9c       	mov	r12,r7
8000a706:	e0 a0 06 81 	rcall	8000b408 <__multiply>
8000a70a:	18 99       	mov	r9,r12
8000a70c:	06 9b       	mov	r11,r3
8000a70e:	50 19       	stdsp	sp[0x4],r9
8000a710:	0e 9c       	mov	r12,r7
8000a712:	e0 a0 05 2d 	rcall	8000b16c <_Bfree>
8000a716:	40 19       	lddsp	r9,sp[0x4]
8000a718:	40 08       	lddsp	r8,sp[0x0]
8000a71a:	12 93       	mov	r3,r9
8000a71c:	e4 08 01 0a 	sub	r10,r2,r8
8000a720:	c0 80       	breq	8000a730 <_dtoa_r+0x834>
8000a722:	c0 28       	rjmp	8000a726 <_dtoa_r+0x82a>
8000a724:	04 9a       	mov	r10,r2
8000a726:	06 9b       	mov	r11,r3
8000a728:	0e 9c       	mov	r12,r7
8000a72a:	e0 a0 07 35 	rcall	8000b594 <__pow5mult>
8000a72e:	18 93       	mov	r3,r12
8000a730:	30 1b       	mov	r11,1
8000a732:	0e 9c       	mov	r12,r7
8000a734:	e0 a0 06 ea 	rcall	8000b508 <__i2b>
8000a738:	41 1a       	lddsp	r10,sp[0x44]
8000a73a:	18 92       	mov	r2,r12
8000a73c:	58 0a       	cp.w	r10,0
8000a73e:	e0 8a 00 07 	brle	8000a74c <_dtoa_r+0x850>
8000a742:	18 9b       	mov	r11,r12
8000a744:	0e 9c       	mov	r12,r7
8000a746:	e0 a0 07 27 	rcall	8000b594 <__pow5mult>
8000a74a:	18 92       	mov	r2,r12
8000a74c:	40 c9       	lddsp	r9,sp[0x30]
8000a74e:	58 19       	cp.w	r9,1
8000a750:	e0 89 00 14 	brgt	8000a778 <_dtoa_r+0x87c>
8000a754:	40 38       	lddsp	r8,sp[0xc]
8000a756:	58 08       	cp.w	r8,0
8000a758:	c1 01       	brne	8000a778 <_dtoa_r+0x87c>
8000a75a:	40 29       	lddsp	r9,sp[0x8]
8000a75c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000a760:	c0 c1       	brne	8000a778 <_dtoa_r+0x87c>
8000a762:	12 98       	mov	r8,r9
8000a764:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000a768:	c0 80       	breq	8000a778 <_dtoa_r+0x87c>
8000a76a:	40 4c       	lddsp	r12,sp[0x10]
8000a76c:	30 1b       	mov	r11,1
8000a76e:	2f fc       	sub	r12,-1
8000a770:	2f f0       	sub	r0,-1
8000a772:	50 4c       	stdsp	sp[0x10],r12
8000a774:	50 6b       	stdsp	sp[0x18],r11
8000a776:	c0 38       	rjmp	8000a77c <_dtoa_r+0x880>
8000a778:	30 0a       	mov	r10,0
8000a77a:	50 6a       	stdsp	sp[0x18],r10
8000a77c:	41 19       	lddsp	r9,sp[0x44]
8000a77e:	58 09       	cp.w	r9,0
8000a780:	c0 31       	brne	8000a786 <_dtoa_r+0x88a>
8000a782:	30 1c       	mov	r12,1
8000a784:	c0 98       	rjmp	8000a796 <_dtoa_r+0x89a>
8000a786:	64 48       	ld.w	r8,r2[0x10]
8000a788:	2f c8       	sub	r8,-4
8000a78a:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
8000a78e:	e0 a0 04 5e 	rcall	8000b04a <__hi0bits>
8000a792:	f8 0c 11 20 	rsub	r12,r12,32
8000a796:	40 4b       	lddsp	r11,sp[0x10]
8000a798:	f8 0b 00 08 	add	r8,r12,r11
8000a79c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000a7a0:	c0 c0       	breq	8000a7b8 <_dtoa_r+0x8bc>
8000a7a2:	f0 08 11 20 	rsub	r8,r8,32
8000a7a6:	58 48       	cp.w	r8,4
8000a7a8:	e0 8a 00 06 	brle	8000a7b4 <_dtoa_r+0x8b8>
8000a7ac:	20 48       	sub	r8,4
8000a7ae:	10 0b       	add	r11,r8
8000a7b0:	50 4b       	stdsp	sp[0x10],r11
8000a7b2:	c0 78       	rjmp	8000a7c0 <_dtoa_r+0x8c4>
8000a7b4:	58 48       	cp.w	r8,4
8000a7b6:	c0 70       	breq	8000a7c4 <_dtoa_r+0x8c8>
8000a7b8:	40 4a       	lddsp	r10,sp[0x10]
8000a7ba:	2e 48       	sub	r8,-28
8000a7bc:	10 0a       	add	r10,r8
8000a7be:	50 4a       	stdsp	sp[0x10],r10
8000a7c0:	10 00       	add	r0,r8
8000a7c2:	10 05       	add	r5,r8
8000a7c4:	58 00       	cp.w	r0,0
8000a7c6:	e0 8a 00 08 	brle	8000a7d6 <_dtoa_r+0x8da>
8000a7ca:	06 9b       	mov	r11,r3
8000a7cc:	00 9a       	mov	r10,r0
8000a7ce:	0e 9c       	mov	r12,r7
8000a7d0:	e0 a0 05 d8 	rcall	8000b380 <__lshift>
8000a7d4:	18 93       	mov	r3,r12
8000a7d6:	40 49       	lddsp	r9,sp[0x10]
8000a7d8:	58 09       	cp.w	r9,0
8000a7da:	e0 8a 00 08 	brle	8000a7ea <_dtoa_r+0x8ee>
8000a7de:	04 9b       	mov	r11,r2
8000a7e0:	12 9a       	mov	r10,r9
8000a7e2:	0e 9c       	mov	r12,r7
8000a7e4:	e0 a0 05 ce 	rcall	8000b380 <__lshift>
8000a7e8:	18 92       	mov	r2,r12
8000a7ea:	41 48       	lddsp	r8,sp[0x50]
8000a7ec:	58 08       	cp.w	r8,0
8000a7ee:	c1 b0       	breq	8000a824 <_dtoa_r+0x928>
8000a7f0:	04 9b       	mov	r11,r2
8000a7f2:	06 9c       	mov	r12,r3
8000a7f4:	e0 a0 04 a2 	rcall	8000b138 <__mcmp>
8000a7f8:	c1 64       	brge	8000a824 <_dtoa_r+0x928>
8000a7fa:	06 9b       	mov	r11,r3
8000a7fc:	30 09       	mov	r9,0
8000a7fe:	30 aa       	mov	r10,10
8000a800:	0e 9c       	mov	r12,r7
8000a802:	e0 a0 06 8b 	rcall	8000b518 <__multadd>
8000a806:	20 16       	sub	r6,1
8000a808:	18 93       	mov	r3,r12
8000a80a:	40 dc       	lddsp	r12,sp[0x34]
8000a80c:	58 0c       	cp.w	r12,0
8000a80e:	c0 31       	brne	8000a814 <_dtoa_r+0x918>
8000a810:	40 91       	lddsp	r1,sp[0x24]
8000a812:	c0 98       	rjmp	8000a824 <_dtoa_r+0x928>
8000a814:	08 9b       	mov	r11,r4
8000a816:	40 91       	lddsp	r1,sp[0x24]
8000a818:	30 09       	mov	r9,0
8000a81a:	30 aa       	mov	r10,10
8000a81c:	0e 9c       	mov	r12,r7
8000a81e:	e0 a0 06 7d 	rcall	8000b518 <__multadd>
8000a822:	18 94       	mov	r4,r12
8000a824:	58 01       	cp.w	r1,0
8000a826:	5f a9       	srle	r9
8000a828:	40 cb       	lddsp	r11,sp[0x30]
8000a82a:	58 2b       	cp.w	r11,2
8000a82c:	5f 98       	srgt	r8
8000a82e:	f3 e8 00 08 	and	r8,r9,r8
8000a832:	c2 50       	breq	8000a87c <_dtoa_r+0x980>
8000a834:	58 01       	cp.w	r1,0
8000a836:	c1 11       	brne	8000a858 <_dtoa_r+0x95c>
8000a838:	04 9b       	mov	r11,r2
8000a83a:	02 99       	mov	r9,r1
8000a83c:	30 5a       	mov	r10,5
8000a83e:	0e 9c       	mov	r12,r7
8000a840:	e0 a0 06 6c 	rcall	8000b518 <__multadd>
8000a844:	18 92       	mov	r2,r12
8000a846:	18 9b       	mov	r11,r12
8000a848:	06 9c       	mov	r12,r3
8000a84a:	e0 a0 04 77 	rcall	8000b138 <__mcmp>
8000a84e:	e0 89 00 0f 	brgt	8000a86c <_dtoa_r+0x970>
8000a852:	c0 38       	rjmp	8000a858 <_dtoa_r+0x95c>
8000a854:	30 02       	mov	r2,0
8000a856:	04 94       	mov	r4,r2
8000a858:	40 ea       	lddsp	r10,sp[0x38]
8000a85a:	30 09       	mov	r9,0
8000a85c:	5c da       	com	r10
8000a85e:	40 85       	lddsp	r5,sp[0x20]
8000a860:	50 6a       	stdsp	sp[0x18],r10
8000a862:	50 49       	stdsp	sp[0x10],r9
8000a864:	c0 f9       	rjmp	8000aa82 <_dtoa_r+0xb86>
8000a866:	08 92       	mov	r2,r4
8000a868:	40 66       	lddsp	r6,sp[0x18]
8000a86a:	04 94       	mov	r4,r2
8000a86c:	2f f6       	sub	r6,-1
8000a86e:	50 66       	stdsp	sp[0x18],r6
8000a870:	33 18       	mov	r8,49
8000a872:	40 85       	lddsp	r5,sp[0x20]
8000a874:	0a c8       	st.b	r5++,r8
8000a876:	30 08       	mov	r8,0
8000a878:	50 48       	stdsp	sp[0x10],r8
8000a87a:	c0 49       	rjmp	8000aa82 <_dtoa_r+0xb86>
8000a87c:	40 dc       	lddsp	r12,sp[0x34]
8000a87e:	58 0c       	cp.w	r12,0
8000a880:	e0 80 00 b5 	breq	8000a9ea <_dtoa_r+0xaee>
8000a884:	58 05       	cp.w	r5,0
8000a886:	e0 8a 00 08 	brle	8000a896 <_dtoa_r+0x99a>
8000a88a:	08 9b       	mov	r11,r4
8000a88c:	0a 9a       	mov	r10,r5
8000a88e:	0e 9c       	mov	r12,r7
8000a890:	e0 a0 05 78 	rcall	8000b380 <__lshift>
8000a894:	18 94       	mov	r4,r12
8000a896:	40 6b       	lddsp	r11,sp[0x18]
8000a898:	58 0b       	cp.w	r11,0
8000a89a:	c0 31       	brne	8000a8a0 <_dtoa_r+0x9a4>
8000a89c:	08 9c       	mov	r12,r4
8000a89e:	c1 38       	rjmp	8000a8c4 <_dtoa_r+0x9c8>
8000a8a0:	68 1b       	ld.w	r11,r4[0x4]
8000a8a2:	0e 9c       	mov	r12,r7
8000a8a4:	e0 a0 04 7e 	rcall	8000b1a0 <_Balloc>
8000a8a8:	68 4a       	ld.w	r10,r4[0x10]
8000a8aa:	18 95       	mov	r5,r12
8000a8ac:	e8 cb ff f4 	sub	r11,r4,-12
8000a8b0:	2f ea       	sub	r10,-2
8000a8b2:	2f 4c       	sub	r12,-12
8000a8b4:	a3 6a       	lsl	r10,0x2
8000a8b6:	fe b0 e3 29 	rcall	80006f08 <memcpy>
8000a8ba:	0a 9b       	mov	r11,r5
8000a8bc:	30 1a       	mov	r10,1
8000a8be:	0e 9c       	mov	r12,r7
8000a8c0:	e0 a0 05 60 	rcall	8000b380 <__lshift>
8000a8c4:	50 44       	stdsp	sp[0x10],r4
8000a8c6:	40 3a       	lddsp	r10,sp[0xc]
8000a8c8:	30 19       	mov	r9,1
8000a8ca:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000a8ce:	18 94       	mov	r4,r12
8000a8d0:	50 da       	stdsp	sp[0x34],r10
8000a8d2:	40 85       	lddsp	r5,sp[0x20]
8000a8d4:	50 99       	stdsp	sp[0x24],r9
8000a8d6:	50 26       	stdsp	sp[0x8],r6
8000a8d8:	50 e1       	stdsp	sp[0x38],r1
8000a8da:	04 9b       	mov	r11,r2
8000a8dc:	06 9c       	mov	r12,r3
8000a8de:	fe b0 fa 7f 	rcall	80009ddc <quorem>
8000a8e2:	40 4b       	lddsp	r11,sp[0x10]
8000a8e4:	f8 c0 ff d0 	sub	r0,r12,-48
8000a8e8:	06 9c       	mov	r12,r3
8000a8ea:	e0 a0 04 27 	rcall	8000b138 <__mcmp>
8000a8ee:	08 9a       	mov	r10,r4
8000a8f0:	50 6c       	stdsp	sp[0x18],r12
8000a8f2:	04 9b       	mov	r11,r2
8000a8f4:	0e 9c       	mov	r12,r7
8000a8f6:	e0 a0 04 dd 	rcall	8000b2b0 <__mdiff>
8000a8fa:	18 91       	mov	r1,r12
8000a8fc:	78 38       	ld.w	r8,r12[0xc]
8000a8fe:	58 08       	cp.w	r8,0
8000a900:	c0 30       	breq	8000a906 <_dtoa_r+0xa0a>
8000a902:	30 16       	mov	r6,1
8000a904:	c0 68       	rjmp	8000a910 <_dtoa_r+0xa14>
8000a906:	18 9b       	mov	r11,r12
8000a908:	06 9c       	mov	r12,r3
8000a90a:	e0 a0 04 17 	rcall	8000b138 <__mcmp>
8000a90e:	18 96       	mov	r6,r12
8000a910:	0e 9c       	mov	r12,r7
8000a912:	02 9b       	mov	r11,r1
8000a914:	e0 a0 04 2c 	rcall	8000b16c <_Bfree>
8000a918:	40 cc       	lddsp	r12,sp[0x30]
8000a91a:	ed ec 10 08 	or	r8,r6,r12
8000a91e:	c0 d1       	brne	8000a938 <_dtoa_r+0xa3c>
8000a920:	40 db       	lddsp	r11,sp[0x34]
8000a922:	58 0b       	cp.w	r11,0
8000a924:	c0 a1       	brne	8000a938 <_dtoa_r+0xa3c>
8000a926:	40 26       	lddsp	r6,sp[0x8]
8000a928:	e0 40 00 39 	cp.w	r0,57
8000a92c:	c3 00       	breq	8000a98c <_dtoa_r+0xa90>
8000a92e:	40 6a       	lddsp	r10,sp[0x18]
8000a930:	58 0a       	cp.w	r10,0
8000a932:	e0 89 00 24 	brgt	8000a97a <_dtoa_r+0xa7e>
8000a936:	c2 f8       	rjmp	8000a994 <_dtoa_r+0xa98>
8000a938:	40 69       	lddsp	r9,sp[0x18]
8000a93a:	58 09       	cp.w	r9,0
8000a93c:	c0 85       	brlt	8000a94c <_dtoa_r+0xa50>
8000a93e:	12 98       	mov	r8,r9
8000a940:	40 cc       	lddsp	r12,sp[0x30]
8000a942:	18 48       	or	r8,r12
8000a944:	c1 d1       	brne	8000a97e <_dtoa_r+0xa82>
8000a946:	40 db       	lddsp	r11,sp[0x34]
8000a948:	58 0b       	cp.w	r11,0
8000a94a:	c1 a1       	brne	8000a97e <_dtoa_r+0xa82>
8000a94c:	0c 99       	mov	r9,r6
8000a94e:	40 26       	lddsp	r6,sp[0x8]
8000a950:	58 09       	cp.w	r9,0
8000a952:	e0 8a 00 21 	brle	8000a994 <_dtoa_r+0xa98>
8000a956:	06 9b       	mov	r11,r3
8000a958:	30 1a       	mov	r10,1
8000a95a:	0e 9c       	mov	r12,r7
8000a95c:	e0 a0 05 12 	rcall	8000b380 <__lshift>
8000a960:	04 9b       	mov	r11,r2
8000a962:	18 93       	mov	r3,r12
8000a964:	e0 a0 03 ea 	rcall	8000b138 <__mcmp>
8000a968:	e0 89 00 06 	brgt	8000a974 <_dtoa_r+0xa78>
8000a96c:	c1 41       	brne	8000a994 <_dtoa_r+0xa98>
8000a96e:	ed b0 00 00 	bld	r0,0x0
8000a972:	c1 11       	brne	8000a994 <_dtoa_r+0xa98>
8000a974:	e0 40 00 39 	cp.w	r0,57
8000a978:	c0 a0       	breq	8000a98c <_dtoa_r+0xa90>
8000a97a:	2f f0       	sub	r0,-1
8000a97c:	c0 c8       	rjmp	8000a994 <_dtoa_r+0xa98>
8000a97e:	58 06       	cp.w	r6,0
8000a980:	e0 8a 00 0c 	brle	8000a998 <_dtoa_r+0xa9c>
8000a984:	40 26       	lddsp	r6,sp[0x8]
8000a986:	e0 40 00 39 	cp.w	r0,57
8000a98a:	c0 41       	brne	8000a992 <_dtoa_r+0xa96>
8000a98c:	33 98       	mov	r8,57
8000a98e:	0a c8       	st.b	r5++,r8
8000a990:	c6 78       	rjmp	8000aa5e <_dtoa_r+0xb62>
8000a992:	2f f0       	sub	r0,-1
8000a994:	0a c0       	st.b	r5++,r0
8000a996:	c7 58       	rjmp	8000aa80 <_dtoa_r+0xb84>
8000a998:	0a c0       	st.b	r5++,r0
8000a99a:	40 9a       	lddsp	r10,sp[0x24]
8000a99c:	40 e9       	lddsp	r9,sp[0x38]
8000a99e:	12 3a       	cp.w	r10,r9
8000a9a0:	c4 30       	breq	8000aa26 <_dtoa_r+0xb2a>
8000a9a2:	06 9b       	mov	r11,r3
8000a9a4:	30 09       	mov	r9,0
8000a9a6:	30 aa       	mov	r10,10
8000a9a8:	0e 9c       	mov	r12,r7
8000a9aa:	e0 a0 05 b7 	rcall	8000b518 <__multadd>
8000a9ae:	40 48       	lddsp	r8,sp[0x10]
8000a9b0:	18 93       	mov	r3,r12
8000a9b2:	08 38       	cp.w	r8,r4
8000a9b4:	c0 91       	brne	8000a9c6 <_dtoa_r+0xaca>
8000a9b6:	10 9b       	mov	r11,r8
8000a9b8:	30 09       	mov	r9,0
8000a9ba:	30 aa       	mov	r10,10
8000a9bc:	0e 9c       	mov	r12,r7
8000a9be:	e0 a0 05 ad 	rcall	8000b518 <__multadd>
8000a9c2:	50 4c       	stdsp	sp[0x10],r12
8000a9c4:	c0 e8       	rjmp	8000a9e0 <_dtoa_r+0xae4>
8000a9c6:	40 4b       	lddsp	r11,sp[0x10]
8000a9c8:	30 09       	mov	r9,0
8000a9ca:	30 aa       	mov	r10,10
8000a9cc:	0e 9c       	mov	r12,r7
8000a9ce:	e0 a0 05 a5 	rcall	8000b518 <__multadd>
8000a9d2:	08 9b       	mov	r11,r4
8000a9d4:	50 4c       	stdsp	sp[0x10],r12
8000a9d6:	30 09       	mov	r9,0
8000a9d8:	30 aa       	mov	r10,10
8000a9da:	0e 9c       	mov	r12,r7
8000a9dc:	e0 a0 05 9e 	rcall	8000b518 <__multadd>
8000a9e0:	18 94       	mov	r4,r12
8000a9e2:	40 9c       	lddsp	r12,sp[0x24]
8000a9e4:	2f fc       	sub	r12,-1
8000a9e6:	50 9c       	stdsp	sp[0x24],r12
8000a9e8:	c7 9b       	rjmp	8000a8da <_dtoa_r+0x9de>
8000a9ea:	30 18       	mov	r8,1
8000a9ec:	06 90       	mov	r0,r3
8000a9ee:	40 85       	lddsp	r5,sp[0x20]
8000a9f0:	08 93       	mov	r3,r4
8000a9f2:	0c 94       	mov	r4,r6
8000a9f4:	10 96       	mov	r6,r8
8000a9f6:	04 9b       	mov	r11,r2
8000a9f8:	00 9c       	mov	r12,r0
8000a9fa:	fe b0 f9 f1 	rcall	80009ddc <quorem>
8000a9fe:	2d 0c       	sub	r12,-48
8000aa00:	0a cc       	st.b	r5++,r12
8000aa02:	02 36       	cp.w	r6,r1
8000aa04:	c0 a4       	brge	8000aa18 <_dtoa_r+0xb1c>
8000aa06:	00 9b       	mov	r11,r0
8000aa08:	30 09       	mov	r9,0
8000aa0a:	30 aa       	mov	r10,10
8000aa0c:	0e 9c       	mov	r12,r7
8000aa0e:	2f f6       	sub	r6,-1
8000aa10:	e0 a0 05 84 	rcall	8000b518 <__multadd>
8000aa14:	18 90       	mov	r0,r12
8000aa16:	cf 0b       	rjmp	8000a9f6 <_dtoa_r+0xafa>
8000aa18:	08 96       	mov	r6,r4
8000aa1a:	30 0b       	mov	r11,0
8000aa1c:	06 94       	mov	r4,r3
8000aa1e:	50 4b       	stdsp	sp[0x10],r11
8000aa20:	00 93       	mov	r3,r0
8000aa22:	18 90       	mov	r0,r12
8000aa24:	c0 28       	rjmp	8000aa28 <_dtoa_r+0xb2c>
8000aa26:	40 26       	lddsp	r6,sp[0x8]
8000aa28:	06 9b       	mov	r11,r3
8000aa2a:	30 1a       	mov	r10,1
8000aa2c:	0e 9c       	mov	r12,r7
8000aa2e:	e0 a0 04 a9 	rcall	8000b380 <__lshift>
8000aa32:	04 9b       	mov	r11,r2
8000aa34:	18 93       	mov	r3,r12
8000aa36:	e0 a0 03 81 	rcall	8000b138 <__mcmp>
8000aa3a:	e0 89 00 12 	brgt	8000aa5e <_dtoa_r+0xb62>
8000aa3e:	c1 b1       	brne	8000aa74 <_dtoa_r+0xb78>
8000aa40:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000aa44:	c0 d1       	brne	8000aa5e <_dtoa_r+0xb62>
8000aa46:	c1 78       	rjmp	8000aa74 <_dtoa_r+0xb78>
8000aa48:	40 89       	lddsp	r9,sp[0x20]
8000aa4a:	12 38       	cp.w	r8,r9
8000aa4c:	c0 30       	breq	8000aa52 <_dtoa_r+0xb56>
8000aa4e:	10 95       	mov	r5,r8
8000aa50:	c0 88       	rjmp	8000aa60 <_dtoa_r+0xb64>
8000aa52:	2f f6       	sub	r6,-1
8000aa54:	50 66       	stdsp	sp[0x18],r6
8000aa56:	33 18       	mov	r8,49
8000aa58:	40 8c       	lddsp	r12,sp[0x20]
8000aa5a:	b8 88       	st.b	r12[0x0],r8
8000aa5c:	c1 38       	rjmp	8000aa82 <_dtoa_r+0xb86>
8000aa5e:	33 9a       	mov	r10,57
8000aa60:	0a 98       	mov	r8,r5
8000aa62:	11 79       	ld.ub	r9,--r8
8000aa64:	f4 09 18 00 	cp.b	r9,r10
8000aa68:	cf 00       	breq	8000aa48 <_dtoa_r+0xb4c>
8000aa6a:	2f f9       	sub	r9,-1
8000aa6c:	b0 89       	st.b	r8[0x0],r9
8000aa6e:	c0 98       	rjmp	8000aa80 <_dtoa_r+0xb84>
8000aa70:	10 95       	mov	r5,r8
8000aa72:	c0 28       	rjmp	8000aa76 <_dtoa_r+0xb7a>
8000aa74:	33 09       	mov	r9,48
8000aa76:	0a 98       	mov	r8,r5
8000aa78:	11 7a       	ld.ub	r10,--r8
8000aa7a:	f2 0a 18 00 	cp.b	r10,r9
8000aa7e:	cf 90       	breq	8000aa70 <_dtoa_r+0xb74>
8000aa80:	50 66       	stdsp	sp[0x18],r6
8000aa82:	04 9b       	mov	r11,r2
8000aa84:	0e 9c       	mov	r12,r7
8000aa86:	e0 a0 03 73 	rcall	8000b16c <_Bfree>
8000aa8a:	58 04       	cp.w	r4,0
8000aa8c:	c1 20       	breq	8000aab0 <_dtoa_r+0xbb4>
8000aa8e:	40 4b       	lddsp	r11,sp[0x10]
8000aa90:	08 3b       	cp.w	r11,r4
8000aa92:	5f 19       	srne	r9
8000aa94:	58 0b       	cp.w	r11,0
8000aa96:	5f 18       	srne	r8
8000aa98:	f3 e8 00 08 	and	r8,r9,r8
8000aa9c:	c0 40       	breq	8000aaa4 <_dtoa_r+0xba8>
8000aa9e:	0e 9c       	mov	r12,r7
8000aaa0:	e0 a0 03 66 	rcall	8000b16c <_Bfree>
8000aaa4:	08 9b       	mov	r11,r4
8000aaa6:	0e 9c       	mov	r12,r7
8000aaa8:	e0 a0 03 62 	rcall	8000b16c <_Bfree>
8000aaac:	c0 28       	rjmp	8000aab0 <_dtoa_r+0xbb4>
8000aaae:	50 66       	stdsp	sp[0x18],r6
8000aab0:	0e 9c       	mov	r12,r7
8000aab2:	06 9b       	mov	r11,r3
8000aab4:	e0 a0 03 5c 	rcall	8000b16c <_Bfree>
8000aab8:	30 08       	mov	r8,0
8000aaba:	aa 88       	st.b	r5[0x0],r8
8000aabc:	40 68       	lddsp	r8,sp[0x18]
8000aabe:	41 5a       	lddsp	r10,sp[0x54]
8000aac0:	2f f8       	sub	r8,-1
8000aac2:	41 29       	lddsp	r9,sp[0x48]
8000aac4:	95 08       	st.w	r10[0x0],r8
8000aac6:	40 8c       	lddsp	r12,sp[0x20]
8000aac8:	58 09       	cp.w	r9,0
8000aaca:	fb f8 10 12 	ld.wne	r8,sp[0x48]
8000aace:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000aad2:	2e 6d       	sub	sp,-104
8000aad4:	d8 32       	popm	r0-r7,pc
8000aad6:	d7 03       	nop

8000aad8 <_fclose_r>:
8000aad8:	d4 21       	pushm	r4-r7,lr
8000aada:	18 96       	mov	r6,r12
8000aadc:	16 97       	mov	r7,r11
8000aade:	58 0b       	cp.w	r11,0
8000aae0:	c0 31       	brne	8000aae6 <_fclose_r+0xe>
8000aae2:	16 95       	mov	r5,r11
8000aae4:	c5 28       	rjmp	8000ab88 <_fclose_r+0xb0>
8000aae6:	fe b0 e5 91 	rcall	80007608 <__sfp_lock_acquire>
8000aaea:	58 06       	cp.w	r6,0
8000aaec:	c0 70       	breq	8000aafa <_fclose_r+0x22>
8000aaee:	6c 68       	ld.w	r8,r6[0x18]
8000aaf0:	58 08       	cp.w	r8,0
8000aaf2:	c0 41       	brne	8000aafa <_fclose_r+0x22>
8000aaf4:	0c 9c       	mov	r12,r6
8000aaf6:	fe b0 e5 db 	rcall	800076ac <__sinit>
8000aafa:	fe c8 e3 42 	sub	r8,pc,-7358
8000aafe:	10 37       	cp.w	r7,r8
8000ab00:	c0 31       	brne	8000ab06 <_fclose_r+0x2e>
8000ab02:	6c 07       	ld.w	r7,r6[0x0]
8000ab04:	c0 c8       	rjmp	8000ab1c <_fclose_r+0x44>
8000ab06:	fe c8 e3 2e 	sub	r8,pc,-7378
8000ab0a:	10 37       	cp.w	r7,r8
8000ab0c:	c0 31       	brne	8000ab12 <_fclose_r+0x3a>
8000ab0e:	6c 17       	ld.w	r7,r6[0x4]
8000ab10:	c0 68       	rjmp	8000ab1c <_fclose_r+0x44>
8000ab12:	fe c8 e3 1a 	sub	r8,pc,-7398
8000ab16:	10 37       	cp.w	r7,r8
8000ab18:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000ab1c:	8e 69       	ld.sh	r9,r7[0xc]
8000ab1e:	30 08       	mov	r8,0
8000ab20:	f0 09 19 00 	cp.h	r9,r8
8000ab24:	c0 51       	brne	8000ab2e <_fclose_r+0x56>
8000ab26:	fe b0 e5 72 	rcall	8000760a <__sfp_lock_release>
8000ab2a:	30 05       	mov	r5,0
8000ab2c:	c2 e8       	rjmp	8000ab88 <_fclose_r+0xb0>
8000ab2e:	0e 9b       	mov	r11,r7
8000ab30:	0c 9c       	mov	r12,r6
8000ab32:	c3 5c       	rcall	8000ab9c <_fflush_r>
8000ab34:	6e c8       	ld.w	r8,r7[0x30]
8000ab36:	18 95       	mov	r5,r12
8000ab38:	58 08       	cp.w	r8,0
8000ab3a:	c0 60       	breq	8000ab46 <_fclose_r+0x6e>
8000ab3c:	6e 8b       	ld.w	r11,r7[0x20]
8000ab3e:	0c 9c       	mov	r12,r6
8000ab40:	5d 18       	icall	r8
8000ab42:	f9 b5 05 ff 	movlt	r5,-1
8000ab46:	8e 68       	ld.sh	r8,r7[0xc]
8000ab48:	ed b8 00 07 	bld	r8,0x7
8000ab4c:	c0 51       	brne	8000ab56 <_fclose_r+0x7e>
8000ab4e:	6e 4b       	ld.w	r11,r7[0x10]
8000ab50:	0c 9c       	mov	r12,r6
8000ab52:	fe b0 e6 47 	rcall	800077e0 <_free_r>
8000ab56:	6e db       	ld.w	r11,r7[0x34]
8000ab58:	58 0b       	cp.w	r11,0
8000ab5a:	c0 a0       	breq	8000ab6e <_fclose_r+0x96>
8000ab5c:	ee c8 ff bc 	sub	r8,r7,-68
8000ab60:	10 3b       	cp.w	r11,r8
8000ab62:	c0 40       	breq	8000ab6a <_fclose_r+0x92>
8000ab64:	0c 9c       	mov	r12,r6
8000ab66:	fe b0 e6 3d 	rcall	800077e0 <_free_r>
8000ab6a:	30 08       	mov	r8,0
8000ab6c:	8f d8       	st.w	r7[0x34],r8
8000ab6e:	6f 2b       	ld.w	r11,r7[0x48]
8000ab70:	58 0b       	cp.w	r11,0
8000ab72:	c0 70       	breq	8000ab80 <_fclose_r+0xa8>
8000ab74:	0c 9c       	mov	r12,r6
8000ab76:	fe b0 e6 35 	rcall	800077e0 <_free_r>
8000ab7a:	30 08       	mov	r8,0
8000ab7c:	ef 48 00 48 	st.w	r7[72],r8
8000ab80:	30 08       	mov	r8,0
8000ab82:	ae 68       	st.h	r7[0xc],r8
8000ab84:	fe b0 e5 43 	rcall	8000760a <__sfp_lock_release>
8000ab88:	0a 9c       	mov	r12,r5
8000ab8a:	d8 22       	popm	r4-r7,pc

8000ab8c <fclose>:
8000ab8c:	d4 01       	pushm	lr
8000ab8e:	e0 68 01 18 	mov	r8,280
8000ab92:	18 9b       	mov	r11,r12
8000ab94:	70 0c       	ld.w	r12,r8[0x0]
8000ab96:	ca 1f       	rcall	8000aad8 <_fclose_r>
8000ab98:	d8 02       	popm	pc
8000ab9a:	d7 03       	nop

8000ab9c <_fflush_r>:
8000ab9c:	d4 21       	pushm	r4-r7,lr
8000ab9e:	16 97       	mov	r7,r11
8000aba0:	18 96       	mov	r6,r12
8000aba2:	76 48       	ld.w	r8,r11[0x10]
8000aba4:	58 08       	cp.w	r8,0
8000aba6:	e0 80 00 81 	breq	8000aca8 <_fflush_r+0x10c>
8000abaa:	58 0c       	cp.w	r12,0
8000abac:	c0 60       	breq	8000abb8 <_fflush_r+0x1c>
8000abae:	78 68       	ld.w	r8,r12[0x18]
8000abb0:	58 08       	cp.w	r8,0
8000abb2:	c0 31       	brne	8000abb8 <_fflush_r+0x1c>
8000abb4:	fe b0 e5 7c 	rcall	800076ac <__sinit>
8000abb8:	fe c8 e4 00 	sub	r8,pc,-7168
8000abbc:	10 37       	cp.w	r7,r8
8000abbe:	c0 31       	brne	8000abc4 <_fflush_r+0x28>
8000abc0:	6c 07       	ld.w	r7,r6[0x0]
8000abc2:	c0 c8       	rjmp	8000abda <_fflush_r+0x3e>
8000abc4:	fe c8 e3 ec 	sub	r8,pc,-7188
8000abc8:	10 37       	cp.w	r7,r8
8000abca:	c0 31       	brne	8000abd0 <_fflush_r+0x34>
8000abcc:	6c 17       	ld.w	r7,r6[0x4]
8000abce:	c0 68       	rjmp	8000abda <_fflush_r+0x3e>
8000abd0:	fe c8 e3 d8 	sub	r8,pc,-7208
8000abd4:	10 37       	cp.w	r7,r8
8000abd6:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000abda:	8e 6a       	ld.sh	r10,r7[0xc]
8000abdc:	14 98       	mov	r8,r10
8000abde:	ed ba 00 03 	bld	r10,0x3
8000abe2:	c4 20       	breq	8000ac66 <_fflush_r+0xca>
8000abe4:	ab ba       	sbr	r10,0xb
8000abe6:	ae 6a       	st.h	r7[0xc],r10
8000abe8:	6e 18       	ld.w	r8,r7[0x4]
8000abea:	58 08       	cp.w	r8,0
8000abec:	e0 89 00 06 	brgt	8000abf8 <_fflush_r+0x5c>
8000abf0:	6f 08       	ld.w	r8,r7[0x40]
8000abf2:	58 08       	cp.w	r8,0
8000abf4:	e0 8a 00 5a 	brle	8000aca8 <_fflush_r+0x10c>
8000abf8:	6e b8       	ld.w	r8,r7[0x2c]
8000abfa:	58 08       	cp.w	r8,0
8000abfc:	c5 60       	breq	8000aca8 <_fflush_r+0x10c>
8000abfe:	e2 1a 10 00 	andl	r10,0x1000,COH
8000ac02:	c0 30       	breq	8000ac08 <_fflush_r+0x6c>
8000ac04:	6f 55       	ld.w	r5,r7[0x54]
8000ac06:	c0 f8       	rjmp	8000ac24 <_fflush_r+0x88>
8000ac08:	30 19       	mov	r9,1
8000ac0a:	6e 8b       	ld.w	r11,r7[0x20]
8000ac0c:	0c 9c       	mov	r12,r6
8000ac0e:	5d 18       	icall	r8
8000ac10:	18 95       	mov	r5,r12
8000ac12:	5b fc       	cp.w	r12,-1
8000ac14:	c0 81       	brne	8000ac24 <_fflush_r+0x88>
8000ac16:	6c 38       	ld.w	r8,r6[0xc]
8000ac18:	59 d8       	cp.w	r8,29
8000ac1a:	c4 70       	breq	8000aca8 <_fflush_r+0x10c>
8000ac1c:	8e 68       	ld.sh	r8,r7[0xc]
8000ac1e:	a7 a8       	sbr	r8,0x6
8000ac20:	ae 68       	st.h	r7[0xc],r8
8000ac22:	d8 22       	popm	r4-r7,pc
8000ac24:	8e 68       	ld.sh	r8,r7[0xc]
8000ac26:	ed b8 00 02 	bld	r8,0x2
8000ac2a:	c0 91       	brne	8000ac3c <_fflush_r+0xa0>
8000ac2c:	6e 18       	ld.w	r8,r7[0x4]
8000ac2e:	10 15       	sub	r5,r8
8000ac30:	6e d8       	ld.w	r8,r7[0x34]
8000ac32:	58 08       	cp.w	r8,0
8000ac34:	ef f8 10 10 	ld.wne	r8,r7[0x40]
8000ac38:	eb d8 e1 15 	subne	r5,r5,r8
8000ac3c:	6e b8       	ld.w	r8,r7[0x2c]
8000ac3e:	0c 9c       	mov	r12,r6
8000ac40:	30 09       	mov	r9,0
8000ac42:	0a 9a       	mov	r10,r5
8000ac44:	6e 8b       	ld.w	r11,r7[0x20]
8000ac46:	5d 18       	icall	r8
8000ac48:	8e 68       	ld.sh	r8,r7[0xc]
8000ac4a:	0a 3c       	cp.w	r12,r5
8000ac4c:	c2 61       	brne	8000ac98 <_fflush_r+0xfc>
8000ac4e:	ab d8       	cbr	r8,0xb
8000ac50:	30 0c       	mov	r12,0
8000ac52:	6e 49       	ld.w	r9,r7[0x10]
8000ac54:	ae 68       	st.h	r7[0xc],r8
8000ac56:	8f 1c       	st.w	r7[0x4],r12
8000ac58:	8f 09       	st.w	r7[0x0],r9
8000ac5a:	ed b8 00 0c 	bld	r8,0xc
8000ac5e:	c2 51       	brne	8000aca8 <_fflush_r+0x10c>
8000ac60:	ef 45 00 54 	st.w	r7[84],r5
8000ac64:	d8 22       	popm	r4-r7,pc
8000ac66:	6e 45       	ld.w	r5,r7[0x10]
8000ac68:	58 05       	cp.w	r5,0
8000ac6a:	c1 f0       	breq	8000aca8 <_fflush_r+0x10c>
8000ac6c:	6e 04       	ld.w	r4,r7[0x0]
8000ac6e:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000ac72:	8f 05       	st.w	r7[0x0],r5
8000ac74:	f9 b8 01 00 	movne	r8,0
8000ac78:	ef f8 00 05 	ld.weq	r8,r7[0x14]
8000ac7c:	0a 14       	sub	r4,r5
8000ac7e:	8f 28       	st.w	r7[0x8],r8
8000ac80:	c1 18       	rjmp	8000aca2 <_fflush_r+0x106>
8000ac82:	08 99       	mov	r9,r4
8000ac84:	0a 9a       	mov	r10,r5
8000ac86:	6e a8       	ld.w	r8,r7[0x28]
8000ac88:	6e 8b       	ld.w	r11,r7[0x20]
8000ac8a:	0c 9c       	mov	r12,r6
8000ac8c:	5d 18       	icall	r8
8000ac8e:	18 14       	sub	r4,r12
8000ac90:	58 0c       	cp.w	r12,0
8000ac92:	e0 89 00 07 	brgt	8000aca0 <_fflush_r+0x104>
8000ac96:	8e 68       	ld.sh	r8,r7[0xc]
8000ac98:	a7 a8       	sbr	r8,0x6
8000ac9a:	3f fc       	mov	r12,-1
8000ac9c:	ae 68       	st.h	r7[0xc],r8
8000ac9e:	d8 22       	popm	r4-r7,pc
8000aca0:	18 05       	add	r5,r12
8000aca2:	58 04       	cp.w	r4,0
8000aca4:	fe 99 ff ef 	brgt	8000ac82 <_fflush_r+0xe6>
8000aca8:	d8 2a       	popm	r4-r7,pc,r12=0
8000acaa:	d7 03       	nop

8000acac <__sfvwrite_r>:
8000acac:	d4 31       	pushm	r0-r7,lr
8000acae:	20 3d       	sub	sp,12
8000acb0:	14 94       	mov	r4,r10
8000acb2:	18 95       	mov	r5,r12
8000acb4:	16 97       	mov	r7,r11
8000acb6:	74 28       	ld.w	r8,r10[0x8]
8000acb8:	58 08       	cp.w	r8,0
8000acba:	e0 80 01 43 	breq	8000af40 <__sfvwrite_r+0x294>
8000acbe:	96 68       	ld.sh	r8,r11[0xc]
8000acc0:	ed b8 00 03 	bld	r8,0x3
8000acc4:	c0 41       	brne	8000accc <__sfvwrite_r+0x20>
8000acc6:	76 48       	ld.w	r8,r11[0x10]
8000acc8:	58 08       	cp.w	r8,0
8000acca:	c0 c1       	brne	8000ace2 <__sfvwrite_r+0x36>
8000accc:	0e 9b       	mov	r11,r7
8000acce:	0a 9c       	mov	r12,r5
8000acd0:	fe b0 f8 08 	rcall	80009ce0 <__swsetup_r>
8000acd4:	c0 70       	breq	8000ace2 <__sfvwrite_r+0x36>
8000acd6:	8e 68       	ld.sh	r8,r7[0xc]
8000acd8:	a7 a8       	sbr	r8,0x6
8000acda:	ae 68       	st.h	r7[0xc],r8
8000acdc:	30 98       	mov	r8,9
8000acde:	8b 38       	st.w	r5[0xc],r8
8000ace0:	c2 e9       	rjmp	8000af3c <__sfvwrite_r+0x290>
8000ace2:	8e 63       	ld.sh	r3,r7[0xc]
8000ace4:	68 00       	ld.w	r0,r4[0x0]
8000ace6:	06 96       	mov	r6,r3
8000ace8:	e2 16 00 02 	andl	r6,0x2,COH
8000acec:	c2 10       	breq	8000ad2e <__sfvwrite_r+0x82>
8000acee:	30 03       	mov	r3,0
8000acf0:	e0 62 04 00 	mov	r2,1024
8000acf4:	06 96       	mov	r6,r3
8000acf6:	c0 48       	rjmp	8000acfe <__sfvwrite_r+0x52>
8000acf8:	60 03       	ld.w	r3,r0[0x0]
8000acfa:	60 16       	ld.w	r6,r0[0x4]
8000acfc:	2f 80       	sub	r0,-8
8000acfe:	58 06       	cp.w	r6,0
8000ad00:	cf c0       	breq	8000acf8 <__sfvwrite_r+0x4c>
8000ad02:	e0 46 04 00 	cp.w	r6,1024
8000ad06:	ec 09 17 80 	movls	r9,r6
8000ad0a:	e4 09 17 b0 	movhi	r9,r2
8000ad0e:	06 9a       	mov	r10,r3
8000ad10:	6e a8       	ld.w	r8,r7[0x28]
8000ad12:	6e 8b       	ld.w	r11,r7[0x20]
8000ad14:	0a 9c       	mov	r12,r5
8000ad16:	5d 18       	icall	r8
8000ad18:	18 16       	sub	r6,r12
8000ad1a:	58 0c       	cp.w	r12,0
8000ad1c:	e0 8a 01 0d 	brle	8000af36 <__sfvwrite_r+0x28a>
8000ad20:	68 28       	ld.w	r8,r4[0x8]
8000ad22:	18 18       	sub	r8,r12
8000ad24:	89 28       	st.w	r4[0x8],r8
8000ad26:	e0 80 01 0d 	breq	8000af40 <__sfvwrite_r+0x294>
8000ad2a:	18 03       	add	r3,r12
8000ad2c:	ce 9b       	rjmp	8000acfe <__sfvwrite_r+0x52>
8000ad2e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
8000ad32:	c0 70       	breq	8000ad40 <__sfvwrite_r+0x94>
8000ad34:	50 06       	stdsp	sp[0x0],r6
8000ad36:	0c 93       	mov	r3,r6
8000ad38:	0c 91       	mov	r1,r6
8000ad3a:	50 15       	stdsp	sp[0x4],r5
8000ad3c:	08 92       	mov	r2,r4
8000ad3e:	c9 f8       	rjmp	8000ae7c <__sfvwrite_r+0x1d0>
8000ad40:	06 96       	mov	r6,r3
8000ad42:	08 91       	mov	r1,r4
8000ad44:	c0 48       	rjmp	8000ad4c <__sfvwrite_r+0xa0>
8000ad46:	60 03       	ld.w	r3,r0[0x0]
8000ad48:	60 16       	ld.w	r6,r0[0x4]
8000ad4a:	2f 80       	sub	r0,-8
8000ad4c:	58 06       	cp.w	r6,0
8000ad4e:	cf c0       	breq	8000ad46 <__sfvwrite_r+0x9a>
8000ad50:	8e 68       	ld.sh	r8,r7[0xc]
8000ad52:	6e 24       	ld.w	r4,r7[0x8]
8000ad54:	10 99       	mov	r9,r8
8000ad56:	e2 19 02 00 	andl	r9,0x200,COH
8000ad5a:	c5 70       	breq	8000ae08 <__sfvwrite_r+0x15c>
8000ad5c:	08 36       	cp.w	r6,r4
8000ad5e:	c4 53       	brcs	8000ade8 <__sfvwrite_r+0x13c>
8000ad60:	10 99       	mov	r9,r8
8000ad62:	e2 19 04 80 	andl	r9,0x480,COH
8000ad66:	c4 10       	breq	8000ade8 <__sfvwrite_r+0x13c>
8000ad68:	6e 4b       	ld.w	r11,r7[0x10]
8000ad6a:	6e 09       	ld.w	r9,r7[0x0]
8000ad6c:	16 19       	sub	r9,r11
8000ad6e:	50 09       	stdsp	sp[0x0],r9
8000ad70:	6e 59       	ld.w	r9,r7[0x14]
8000ad72:	10 9c       	mov	r12,r8
8000ad74:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000ad78:	30 28       	mov	r8,2
8000ad7a:	f4 08 0c 08 	divs	r8,r10,r8
8000ad7e:	fa e9 00 04 	st.d	sp[4],r8
8000ad82:	10 94       	mov	r4,r8
8000ad84:	40 09       	lddsp	r9,sp[0x0]
8000ad86:	e2 1c 04 00 	andl	r12,0x400,COH
8000ad8a:	2f f9       	sub	r9,-1
8000ad8c:	0c 09       	add	r9,r6
8000ad8e:	12 38       	cp.w	r8,r9
8000ad90:	f2 04 17 30 	movlo	r4,r9
8000ad94:	58 0c       	cp.w	r12,0
8000ad96:	c1 10       	breq	8000adb8 <__sfvwrite_r+0x10c>
8000ad98:	08 9b       	mov	r11,r4
8000ad9a:	0a 9c       	mov	r12,r5
8000ad9c:	fe b0 de 9a 	rcall	80006ad0 <_malloc_r>
8000ada0:	18 92       	mov	r2,r12
8000ada2:	c1 50       	breq	8000adcc <__sfvwrite_r+0x120>
8000ada4:	40 0a       	lddsp	r10,sp[0x0]
8000ada6:	6e 4b       	ld.w	r11,r7[0x10]
8000ada8:	fe b0 e0 b0 	rcall	80006f08 <memcpy>
8000adac:	8e 68       	ld.sh	r8,r7[0xc]
8000adae:	e0 18 fb 7f 	andl	r8,0xfb7f
8000adb2:	a7 b8       	sbr	r8,0x7
8000adb4:	ae 68       	st.h	r7[0xc],r8
8000adb6:	c0 e8       	rjmp	8000add2 <__sfvwrite_r+0x126>
8000adb8:	08 9a       	mov	r10,r4
8000adba:	0a 9c       	mov	r12,r5
8000adbc:	fe b0 e1 52 	rcall	80007060 <_realloc_r>
8000adc0:	18 92       	mov	r2,r12
8000adc2:	c0 81       	brne	8000add2 <__sfvwrite_r+0x126>
8000adc4:	6e 4b       	ld.w	r11,r7[0x10]
8000adc6:	0a 9c       	mov	r12,r5
8000adc8:	fe b0 e5 0c 	rcall	800077e0 <_free_r>
8000adcc:	30 c8       	mov	r8,12
8000adce:	8b 38       	st.w	r5[0xc],r8
8000add0:	cb 38       	rjmp	8000af36 <__sfvwrite_r+0x28a>
8000add2:	40 0a       	lddsp	r10,sp[0x0]
8000add4:	40 09       	lddsp	r9,sp[0x0]
8000add6:	e8 0a 01 0a 	sub	r10,r4,r10
8000adda:	e4 09 00 08 	add	r8,r2,r9
8000adde:	8f 54       	st.w	r7[0x14],r4
8000ade0:	8f 2a       	st.w	r7[0x8],r10
8000ade2:	8f 08       	st.w	r7[0x0],r8
8000ade4:	8f 42       	st.w	r7[0x10],r2
8000ade6:	0c 94       	mov	r4,r6
8000ade8:	08 36       	cp.w	r6,r4
8000adea:	ec 04 17 30 	movlo	r4,r6
8000adee:	06 9b       	mov	r11,r3
8000adf0:	08 9a       	mov	r10,r4
8000adf2:	6e 0c       	ld.w	r12,r7[0x0]
8000adf4:	fe b0 e5 e0 	rcall	800079b4 <memmove>
8000adf8:	6e 08       	ld.w	r8,r7[0x0]
8000adfa:	08 08       	add	r8,r4
8000adfc:	8f 08       	st.w	r7[0x0],r8
8000adfe:	6e 28       	ld.w	r8,r7[0x8]
8000ae00:	08 18       	sub	r8,r4
8000ae02:	0c 94       	mov	r4,r6
8000ae04:	8f 28       	st.w	r7[0x8],r8
8000ae06:	c2 f8       	rjmp	8000ae64 <__sfvwrite_r+0x1b8>
8000ae08:	08 36       	cp.w	r6,r4
8000ae0a:	5f ba       	srhi	r10
8000ae0c:	6e 0c       	ld.w	r12,r7[0x0]
8000ae0e:	6e 48       	ld.w	r8,r7[0x10]
8000ae10:	10 3c       	cp.w	r12,r8
8000ae12:	5f b8       	srhi	r8
8000ae14:	f5 e8 00 08 	and	r8,r10,r8
8000ae18:	f2 08 18 00 	cp.b	r8,r9
8000ae1c:	c0 d0       	breq	8000ae36 <__sfvwrite_r+0x18a>
8000ae1e:	06 9b       	mov	r11,r3
8000ae20:	08 9a       	mov	r10,r4
8000ae22:	fe b0 e5 c9 	rcall	800079b4 <memmove>
8000ae26:	6e 08       	ld.w	r8,r7[0x0]
8000ae28:	08 08       	add	r8,r4
8000ae2a:	0e 9b       	mov	r11,r7
8000ae2c:	8f 08       	st.w	r7[0x0],r8
8000ae2e:	0a 9c       	mov	r12,r5
8000ae30:	cb 6e       	rcall	8000ab9c <_fflush_r>
8000ae32:	c1 90       	breq	8000ae64 <__sfvwrite_r+0x1b8>
8000ae34:	c8 18       	rjmp	8000af36 <__sfvwrite_r+0x28a>
8000ae36:	6e 59       	ld.w	r9,r7[0x14]
8000ae38:	12 36       	cp.w	r6,r9
8000ae3a:	c0 a3       	brcs	8000ae4e <__sfvwrite_r+0x1a2>
8000ae3c:	6e a8       	ld.w	r8,r7[0x28]
8000ae3e:	06 9a       	mov	r10,r3
8000ae40:	6e 8b       	ld.w	r11,r7[0x20]
8000ae42:	0a 9c       	mov	r12,r5
8000ae44:	5d 18       	icall	r8
8000ae46:	18 94       	mov	r4,r12
8000ae48:	e0 89 00 0e 	brgt	8000ae64 <__sfvwrite_r+0x1b8>
8000ae4c:	c7 58       	rjmp	8000af36 <__sfvwrite_r+0x28a>
8000ae4e:	0c 9a       	mov	r10,r6
8000ae50:	06 9b       	mov	r11,r3
8000ae52:	fe b0 e5 b1 	rcall	800079b4 <memmove>
8000ae56:	6e 08       	ld.w	r8,r7[0x0]
8000ae58:	0c 08       	add	r8,r6
8000ae5a:	0c 94       	mov	r4,r6
8000ae5c:	8f 08       	st.w	r7[0x0],r8
8000ae5e:	6e 28       	ld.w	r8,r7[0x8]
8000ae60:	0c 18       	sub	r8,r6
8000ae62:	8f 28       	st.w	r7[0x8],r8
8000ae64:	62 28       	ld.w	r8,r1[0x8]
8000ae66:	08 18       	sub	r8,r4
8000ae68:	83 28       	st.w	r1[0x8],r8
8000ae6a:	c6 b0       	breq	8000af40 <__sfvwrite_r+0x294>
8000ae6c:	08 16       	sub	r6,r4
8000ae6e:	08 03       	add	r3,r4
8000ae70:	c6 eb       	rjmp	8000ad4c <__sfvwrite_r+0xa0>
8000ae72:	60 03       	ld.w	r3,r0[0x0]
8000ae74:	60 11       	ld.w	r1,r0[0x4]
8000ae76:	30 08       	mov	r8,0
8000ae78:	2f 80       	sub	r0,-8
8000ae7a:	50 08       	stdsp	sp[0x0],r8
8000ae7c:	58 01       	cp.w	r1,0
8000ae7e:	cf a0       	breq	8000ae72 <__sfvwrite_r+0x1c6>
8000ae80:	40 0a       	lddsp	r10,sp[0x0]
8000ae82:	58 0a       	cp.w	r10,0
8000ae84:	c1 41       	brne	8000aeac <__sfvwrite_r+0x200>
8000ae86:	e2 c6 ff ff 	sub	r6,r1,-1
8000ae8a:	02 9a       	mov	r10,r1
8000ae8c:	30 ab       	mov	r11,10
8000ae8e:	06 9c       	mov	r12,r3
8000ae90:	cd 2c       	rcall	8000b034 <memchr>
8000ae92:	f8 c8 ff ff 	sub	r8,r12,-1
8000ae96:	58 0c       	cp.w	r12,0
8000ae98:	f1 d3 e1 16 	subne	r6,r8,r3
8000ae9c:	f9 b9 01 01 	movne	r9,1
8000aea0:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000aea4:	f9 b8 00 01 	moveq	r8,1
8000aea8:	fb f8 0a 00 	st.weq	sp[0x0],r8
8000aeac:	02 36       	cp.w	r6,r1
8000aeae:	ec 04 17 80 	movls	r4,r6
8000aeb2:	e2 04 17 b0 	movhi	r4,r1
8000aeb6:	6e 59       	ld.w	r9,r7[0x14]
8000aeb8:	6e 25       	ld.w	r5,r7[0x8]
8000aeba:	f2 05 00 05 	add	r5,r9,r5
8000aebe:	0a 34       	cp.w	r4,r5
8000aec0:	5f 9a       	srgt	r10
8000aec2:	6e 0c       	ld.w	r12,r7[0x0]
8000aec4:	6e 48       	ld.w	r8,r7[0x10]
8000aec6:	10 3c       	cp.w	r12,r8
8000aec8:	5f b8       	srhi	r8
8000aeca:	f5 e8 00 08 	and	r8,r10,r8
8000aece:	30 0a       	mov	r10,0
8000aed0:	f4 08 18 00 	cp.b	r8,r10
8000aed4:	c0 d0       	breq	8000aeee <__sfvwrite_r+0x242>
8000aed6:	06 9b       	mov	r11,r3
8000aed8:	0a 9a       	mov	r10,r5
8000aeda:	fe b0 e5 6d 	rcall	800079b4 <memmove>
8000aede:	6e 08       	ld.w	r8,r7[0x0]
8000aee0:	0a 08       	add	r8,r5
8000aee2:	0e 9b       	mov	r11,r7
8000aee4:	8f 08       	st.w	r7[0x0],r8
8000aee6:	40 1c       	lddsp	r12,sp[0x4]
8000aee8:	c5 ae       	rcall	8000ab9c <_fflush_r>
8000aeea:	c1 80       	breq	8000af1a <__sfvwrite_r+0x26e>
8000aeec:	c2 58       	rjmp	8000af36 <__sfvwrite_r+0x28a>
8000aeee:	12 34       	cp.w	r4,r9
8000aef0:	c0 a5       	brlt	8000af04 <__sfvwrite_r+0x258>
8000aef2:	6e a8       	ld.w	r8,r7[0x28]
8000aef4:	06 9a       	mov	r10,r3
8000aef6:	6e 8b       	ld.w	r11,r7[0x20]
8000aef8:	40 1c       	lddsp	r12,sp[0x4]
8000aefa:	5d 18       	icall	r8
8000aefc:	18 95       	mov	r5,r12
8000aefe:	e0 89 00 0e 	brgt	8000af1a <__sfvwrite_r+0x26e>
8000af02:	c1 a8       	rjmp	8000af36 <__sfvwrite_r+0x28a>
8000af04:	08 9a       	mov	r10,r4
8000af06:	06 9b       	mov	r11,r3
8000af08:	fe b0 e5 56 	rcall	800079b4 <memmove>
8000af0c:	6e 08       	ld.w	r8,r7[0x0]
8000af0e:	08 08       	add	r8,r4
8000af10:	08 95       	mov	r5,r4
8000af12:	8f 08       	st.w	r7[0x0],r8
8000af14:	6e 28       	ld.w	r8,r7[0x8]
8000af16:	08 18       	sub	r8,r4
8000af18:	8f 28       	st.w	r7[0x8],r8
8000af1a:	0a 16       	sub	r6,r5
8000af1c:	c0 61       	brne	8000af28 <__sfvwrite_r+0x27c>
8000af1e:	0e 9b       	mov	r11,r7
8000af20:	40 1c       	lddsp	r12,sp[0x4]
8000af22:	c3 de       	rcall	8000ab9c <_fflush_r>
8000af24:	c0 91       	brne	8000af36 <__sfvwrite_r+0x28a>
8000af26:	50 06       	stdsp	sp[0x0],r6
8000af28:	64 28       	ld.w	r8,r2[0x8]
8000af2a:	0a 18       	sub	r8,r5
8000af2c:	85 28       	st.w	r2[0x8],r8
8000af2e:	c0 90       	breq	8000af40 <__sfvwrite_r+0x294>
8000af30:	0a 11       	sub	r1,r5
8000af32:	0a 03       	add	r3,r5
8000af34:	ca 4b       	rjmp	8000ae7c <__sfvwrite_r+0x1d0>
8000af36:	8e 68       	ld.sh	r8,r7[0xc]
8000af38:	a7 a8       	sbr	r8,0x6
8000af3a:	ae 68       	st.h	r7[0xc],r8
8000af3c:	3f fc       	mov	r12,-1
8000af3e:	c0 28       	rjmp	8000af42 <__sfvwrite_r+0x296>
8000af40:	30 0c       	mov	r12,0
8000af42:	2f dd       	sub	sp,-12
8000af44:	d8 32       	popm	r0-r7,pc
8000af46:	d7 03       	nop

8000af48 <_localeconv_r>:
8000af48:	fe cc e3 4c 	sub	r12,pc,-7348
8000af4c:	5e fc       	retal	r12
8000af4e:	d7 03       	nop

8000af50 <_lseek_r>:
8000af50:	d4 21       	pushm	r4-r7,lr
8000af52:	16 98       	mov	r8,r11
8000af54:	18 97       	mov	r7,r12
8000af56:	10 9c       	mov	r12,r8
8000af58:	30 08       	mov	r8,0
8000af5a:	14 9b       	mov	r11,r10
8000af5c:	e0 66 07 fc 	mov	r6,2044
8000af60:	12 9a       	mov	r10,r9
8000af62:	8d 08       	st.w	r6[0x0],r8
8000af64:	fe b0 e2 12 	rcall	80007388 <_lseek>
8000af68:	5b fc       	cp.w	r12,-1
8000af6a:	c0 51       	brne	8000af74 <_lseek_r+0x24>
8000af6c:	6c 08       	ld.w	r8,r6[0x0]
8000af6e:	58 08       	cp.w	r8,0
8000af70:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000af74:	d8 22       	popm	r4-r7,pc
8000af76:	d7 03       	nop

8000af78 <__smakebuf_r>:
8000af78:	d4 21       	pushm	r4-r7,lr
8000af7a:	20 fd       	sub	sp,60
8000af7c:	96 68       	ld.sh	r8,r11[0xc]
8000af7e:	16 97       	mov	r7,r11
8000af80:	18 96       	mov	r6,r12
8000af82:	e2 18 00 02 	andl	r8,0x2,COH
8000af86:	c3 d1       	brne	8000b000 <__smakebuf_r+0x88>
8000af88:	96 7b       	ld.sh	r11,r11[0xe]
8000af8a:	f0 0b 19 00 	cp.h	r11,r8
8000af8e:	c0 55       	brlt	8000af98 <__smakebuf_r+0x20>
8000af90:	1a 9a       	mov	r10,sp
8000af92:	e0 a0 03 b5 	rcall	8000b6fc <_fstat_r>
8000af96:	c0 f4       	brge	8000afb4 <__smakebuf_r+0x3c>
8000af98:	8e 65       	ld.sh	r5,r7[0xc]
8000af9a:	0a 98       	mov	r8,r5
8000af9c:	ab b8       	sbr	r8,0xb
8000af9e:	e2 15 00 80 	andl	r5,0x80,COH
8000afa2:	ae 68       	st.h	r7[0xc],r8
8000afa4:	30 04       	mov	r4,0
8000afa6:	e0 68 04 00 	mov	r8,1024
8000afaa:	f9 b5 01 40 	movne	r5,64
8000afae:	f0 05 17 00 	moveq	r5,r8
8000afb2:	c1 c8       	rjmp	8000afea <__smakebuf_r+0x72>
8000afb4:	40 18       	lddsp	r8,sp[0x4]
8000afb6:	e2 18 f0 00 	andl	r8,0xf000,COH
8000afba:	e0 48 20 00 	cp.w	r8,8192
8000afbe:	5f 04       	sreq	r4
8000afc0:	e0 48 80 00 	cp.w	r8,32768
8000afc4:	c0 e1       	brne	8000afe0 <__smakebuf_r+0x68>
8000afc6:	6e b9       	ld.w	r9,r7[0x2c]
8000afc8:	fe c8 35 c8 	sub	r8,pc,13768
8000afcc:	10 39       	cp.w	r9,r8
8000afce:	c0 91       	brne	8000afe0 <__smakebuf_r+0x68>
8000afd0:	8e 68       	ld.sh	r8,r7[0xc]
8000afd2:	e0 65 04 00 	mov	r5,1024
8000afd6:	ab a8       	sbr	r8,0xa
8000afd8:	ef 45 00 50 	st.w	r7[80],r5
8000afdc:	ae 68       	st.h	r7[0xc],r8
8000afde:	c0 68       	rjmp	8000afea <__smakebuf_r+0x72>
8000afe0:	8e 68       	ld.sh	r8,r7[0xc]
8000afe2:	e0 65 04 00 	mov	r5,1024
8000afe6:	ab b8       	sbr	r8,0xb
8000afe8:	ae 68       	st.h	r7[0xc],r8
8000afea:	0a 9b       	mov	r11,r5
8000afec:	0c 9c       	mov	r12,r6
8000afee:	fe b0 dd 71 	rcall	80006ad0 <_malloc_r>
8000aff2:	8e 68       	ld.sh	r8,r7[0xc]
8000aff4:	c0 d1       	brne	8000b00e <__smakebuf_r+0x96>
8000aff6:	ed b8 00 09 	bld	r8,0x9
8000affa:	c1 b0       	breq	8000b030 <__smakebuf_r+0xb8>
8000affc:	a1 b8       	sbr	r8,0x1
8000affe:	ae 68       	st.h	r7[0xc],r8
8000b000:	ee c8 ff b9 	sub	r8,r7,-71
8000b004:	8f 48       	st.w	r7[0x10],r8
8000b006:	8f 08       	st.w	r7[0x0],r8
8000b008:	30 18       	mov	r8,1
8000b00a:	8f 58       	st.w	r7[0x14],r8
8000b00c:	c1 28       	rjmp	8000b030 <__smakebuf_r+0xb8>
8000b00e:	a7 b8       	sbr	r8,0x7
8000b010:	8f 4c       	st.w	r7[0x10],r12
8000b012:	ae 68       	st.h	r7[0xc],r8
8000b014:	8f 55       	st.w	r7[0x14],r5
8000b016:	fe c8 3a 0a 	sub	r8,pc,14858
8000b01a:	8f 0c       	st.w	r7[0x0],r12
8000b01c:	8d a8       	st.w	r6[0x28],r8
8000b01e:	58 04       	cp.w	r4,0
8000b020:	c0 80       	breq	8000b030 <__smakebuf_r+0xb8>
8000b022:	8e 7c       	ld.sh	r12,r7[0xe]
8000b024:	fe b0 e1 bc 	rcall	8000739c <isatty>
8000b028:	c0 40       	breq	8000b030 <__smakebuf_r+0xb8>
8000b02a:	8e 68       	ld.sh	r8,r7[0xc]
8000b02c:	a1 a8       	sbr	r8,0x0
8000b02e:	ae 68       	st.h	r7[0xc],r8
8000b030:	2f 1d       	sub	sp,-60
8000b032:	d8 22       	popm	r4-r7,pc

8000b034 <memchr>:
8000b034:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000b038:	c0 68       	rjmp	8000b044 <memchr+0x10>
8000b03a:	20 1a       	sub	r10,1
8000b03c:	19 88       	ld.ub	r8,r12[0x0]
8000b03e:	16 38       	cp.w	r8,r11
8000b040:	5e 0c       	reteq	r12
8000b042:	2f fc       	sub	r12,-1
8000b044:	58 0a       	cp.w	r10,0
8000b046:	cf a1       	brne	8000b03a <memchr+0x6>
8000b048:	5e fa       	retal	r10

8000b04a <__hi0bits>:
8000b04a:	18 98       	mov	r8,r12
8000b04c:	e0 1c 00 00 	andl	r12,0x0
8000b050:	f0 09 15 10 	lsl	r9,r8,0x10
8000b054:	58 0c       	cp.w	r12,0
8000b056:	f2 08 17 00 	moveq	r8,r9
8000b05a:	f9 bc 00 10 	moveq	r12,16
8000b05e:	f9 bc 01 00 	movne	r12,0
8000b062:	10 9a       	mov	r10,r8
8000b064:	f0 09 15 08 	lsl	r9,r8,0x8
8000b068:	e6 1a ff 00 	andh	r10,0xff00,COH
8000b06c:	f7 bc 00 f8 	subeq	r12,-8
8000b070:	f2 08 17 00 	moveq	r8,r9
8000b074:	10 9a       	mov	r10,r8
8000b076:	f0 09 15 04 	lsl	r9,r8,0x4
8000b07a:	e6 1a f0 00 	andh	r10,0xf000,COH
8000b07e:	f7 bc 00 fc 	subeq	r12,-4
8000b082:	f2 08 17 00 	moveq	r8,r9
8000b086:	10 9a       	mov	r10,r8
8000b088:	f0 09 15 02 	lsl	r9,r8,0x2
8000b08c:	e6 1a c0 00 	andh	r10,0xc000,COH
8000b090:	f7 bc 00 fe 	subeq	r12,-2
8000b094:	f2 08 17 00 	moveq	r8,r9
8000b098:	58 08       	cp.w	r8,0
8000b09a:	5e 5c       	retlt	r12
8000b09c:	ed b8 00 1e 	bld	r8,0x1e
8000b0a0:	f9 bc 01 20 	movne	r12,32
8000b0a4:	f7 bc 00 ff 	subeq	r12,-1
8000b0a8:	5e fc       	retal	r12

8000b0aa <__lo0bits>:
8000b0aa:	18 99       	mov	r9,r12
8000b0ac:	78 08       	ld.w	r8,r12[0x0]
8000b0ae:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000b0b2:	c1 50       	breq	8000b0dc <__lo0bits+0x32>
8000b0b4:	ed b8 00 00 	bld	r8,0x0
8000b0b8:	c0 21       	brne	8000b0bc <__lo0bits+0x12>
8000b0ba:	5e fd       	retal	0
8000b0bc:	10 9b       	mov	r11,r8
8000b0be:	f0 0a 16 01 	lsr	r10,r8,0x1
8000b0c2:	e2 1b 00 02 	andl	r11,0x2,COH
8000b0c6:	a3 88       	lsr	r8,0x2
8000b0c8:	58 0b       	cp.w	r11,0
8000b0ca:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000b0ce:	f9 bc 01 01 	movne	r12,1
8000b0d2:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000b0d6:	f9 bc 00 02 	moveq	r12,2
8000b0da:	5e fc       	retal	r12
8000b0dc:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000b0e0:	f0 0b 16 10 	lsr	r11,r8,0x10
8000b0e4:	58 0a       	cp.w	r10,0
8000b0e6:	f6 08 17 00 	moveq	r8,r11
8000b0ea:	f9 bc 00 10 	moveq	r12,16
8000b0ee:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000b0f2:	f0 0a 16 08 	lsr	r10,r8,0x8
8000b0f6:	58 0b       	cp.w	r11,0
8000b0f8:	f7 bc 00 f8 	subeq	r12,-8
8000b0fc:	f4 08 17 00 	moveq	r8,r10
8000b100:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000b104:	f0 0a 16 04 	lsr	r10,r8,0x4
8000b108:	58 0b       	cp.w	r11,0
8000b10a:	f7 bc 00 fc 	subeq	r12,-4
8000b10e:	f4 08 17 00 	moveq	r8,r10
8000b112:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000b116:	f0 0a 16 02 	lsr	r10,r8,0x2
8000b11a:	58 0b       	cp.w	r11,0
8000b11c:	f7 bc 00 fe 	subeq	r12,-2
8000b120:	f4 08 17 00 	moveq	r8,r10
8000b124:	ed b8 00 00 	bld	r8,0x0
8000b128:	c0 60       	breq	8000b134 <__lo0bits+0x8a>
8000b12a:	a1 98       	lsr	r8,0x1
8000b12c:	c0 31       	brne	8000b132 <__lo0bits+0x88>
8000b12e:	32 0c       	mov	r12,32
8000b130:	5e fc       	retal	r12
8000b132:	2f fc       	sub	r12,-1
8000b134:	93 08       	st.w	r9[0x0],r8
8000b136:	5e fc       	retal	r12

8000b138 <__mcmp>:
8000b138:	d4 01       	pushm	lr
8000b13a:	18 98       	mov	r8,r12
8000b13c:	76 49       	ld.w	r9,r11[0x10]
8000b13e:	78 4c       	ld.w	r12,r12[0x10]
8000b140:	12 1c       	sub	r12,r9
8000b142:	c1 31       	brne	8000b168 <__mcmp+0x30>
8000b144:	2f b9       	sub	r9,-5
8000b146:	a3 69       	lsl	r9,0x2
8000b148:	12 0b       	add	r11,r9
8000b14a:	f0 09 00 09 	add	r9,r8,r9
8000b14e:	2e c8       	sub	r8,-20
8000b150:	13 4e       	ld.w	lr,--r9
8000b152:	17 4a       	ld.w	r10,--r11
8000b154:	14 3e       	cp.w	lr,r10
8000b156:	c0 60       	breq	8000b162 <__mcmp+0x2a>
8000b158:	f9 bc 03 ff 	movlo	r12,-1
8000b15c:	f9 bc 02 01 	movhs	r12,1
8000b160:	d8 02       	popm	pc
8000b162:	10 39       	cp.w	r9,r8
8000b164:	fe 9b ff f6 	brhi	8000b150 <__mcmp+0x18>
8000b168:	d8 02       	popm	pc
8000b16a:	d7 03       	nop

8000b16c <_Bfree>:
8000b16c:	d4 21       	pushm	r4-r7,lr
8000b16e:	18 97       	mov	r7,r12
8000b170:	16 95       	mov	r5,r11
8000b172:	78 96       	ld.w	r6,r12[0x24]
8000b174:	58 06       	cp.w	r6,0
8000b176:	c0 91       	brne	8000b188 <_Bfree+0x1c>
8000b178:	31 0c       	mov	r12,16
8000b17a:	fe b0 dc a3 	rcall	80006ac0 <malloc>
8000b17e:	99 36       	st.w	r12[0xc],r6
8000b180:	8f 9c       	st.w	r7[0x24],r12
8000b182:	99 16       	st.w	r12[0x4],r6
8000b184:	99 26       	st.w	r12[0x8],r6
8000b186:	99 06       	st.w	r12[0x0],r6
8000b188:	58 05       	cp.w	r5,0
8000b18a:	c0 90       	breq	8000b19c <_Bfree+0x30>
8000b18c:	6a 19       	ld.w	r9,r5[0x4]
8000b18e:	6e 98       	ld.w	r8,r7[0x24]
8000b190:	70 38       	ld.w	r8,r8[0xc]
8000b192:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000b196:	8b 0a       	st.w	r5[0x0],r10
8000b198:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000b19c:	d8 22       	popm	r4-r7,pc
8000b19e:	d7 03       	nop

8000b1a0 <_Balloc>:
8000b1a0:	d4 21       	pushm	r4-r7,lr
8000b1a2:	18 97       	mov	r7,r12
8000b1a4:	16 96       	mov	r6,r11
8000b1a6:	78 95       	ld.w	r5,r12[0x24]
8000b1a8:	58 05       	cp.w	r5,0
8000b1aa:	c0 91       	brne	8000b1bc <_Balloc+0x1c>
8000b1ac:	31 0c       	mov	r12,16
8000b1ae:	fe b0 dc 89 	rcall	80006ac0 <malloc>
8000b1b2:	99 35       	st.w	r12[0xc],r5
8000b1b4:	8f 9c       	st.w	r7[0x24],r12
8000b1b6:	99 15       	st.w	r12[0x4],r5
8000b1b8:	99 25       	st.w	r12[0x8],r5
8000b1ba:	99 05       	st.w	r12[0x0],r5
8000b1bc:	6e 95       	ld.w	r5,r7[0x24]
8000b1be:	6a 38       	ld.w	r8,r5[0xc]
8000b1c0:	58 08       	cp.w	r8,0
8000b1c2:	c0 b1       	brne	8000b1d8 <_Balloc+0x38>
8000b1c4:	31 0a       	mov	r10,16
8000b1c6:	30 4b       	mov	r11,4
8000b1c8:	0e 9c       	mov	r12,r7
8000b1ca:	e0 a0 02 6d 	rcall	8000b6a4 <_calloc_r>
8000b1ce:	8b 3c       	st.w	r5[0xc],r12
8000b1d0:	6e 98       	ld.w	r8,r7[0x24]
8000b1d2:	70 3c       	ld.w	r12,r8[0xc]
8000b1d4:	58 0c       	cp.w	r12,0
8000b1d6:	c1 b0       	breq	8000b20c <_Balloc+0x6c>
8000b1d8:	6e 98       	ld.w	r8,r7[0x24]
8000b1da:	70 38       	ld.w	r8,r8[0xc]
8000b1dc:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000b1e0:	70 0c       	ld.w	r12,r8[0x0]
8000b1e2:	58 0c       	cp.w	r12,0
8000b1e4:	c0 40       	breq	8000b1ec <_Balloc+0x4c>
8000b1e6:	78 09       	ld.w	r9,r12[0x0]
8000b1e8:	91 09       	st.w	r8[0x0],r9
8000b1ea:	c0 e8       	rjmp	8000b206 <_Balloc+0x66>
8000b1ec:	0e 9c       	mov	r12,r7
8000b1ee:	30 17       	mov	r7,1
8000b1f0:	0e 9b       	mov	r11,r7
8000b1f2:	ee 06 09 47 	lsl	r7,r7,r6
8000b1f6:	ee ca ff fb 	sub	r10,r7,-5
8000b1fa:	a3 6a       	lsl	r10,0x2
8000b1fc:	e0 a0 02 54 	rcall	8000b6a4 <_calloc_r>
8000b200:	c0 60       	breq	8000b20c <_Balloc+0x6c>
8000b202:	99 16       	st.w	r12[0x4],r6
8000b204:	99 27       	st.w	r12[0x8],r7
8000b206:	30 08       	mov	r8,0
8000b208:	99 38       	st.w	r12[0xc],r8
8000b20a:	99 48       	st.w	r12[0x10],r8
8000b20c:	d8 22       	popm	r4-r7,pc
8000b20e:	d7 03       	nop

8000b210 <__d2b>:
8000b210:	d4 31       	pushm	r0-r7,lr
8000b212:	20 2d       	sub	sp,8
8000b214:	16 93       	mov	r3,r11
8000b216:	12 96       	mov	r6,r9
8000b218:	10 95       	mov	r5,r8
8000b21a:	14 92       	mov	r2,r10
8000b21c:	30 1b       	mov	r11,1
8000b21e:	cc 1f       	rcall	8000b1a0 <_Balloc>
8000b220:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000b224:	50 09       	stdsp	sp[0x0],r9
8000b226:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000b22a:	b5 a9       	sbr	r9,0x14
8000b22c:	f0 01 16 14 	lsr	r1,r8,0x14
8000b230:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000b234:	18 94       	mov	r4,r12
8000b236:	58 02       	cp.w	r2,0
8000b238:	c1 d0       	breq	8000b272 <__d2b+0x62>
8000b23a:	fa cc ff f8 	sub	r12,sp,-8
8000b23e:	18 d2       	st.w	--r12,r2
8000b240:	c3 5f       	rcall	8000b0aa <__lo0bits>
8000b242:	40 18       	lddsp	r8,sp[0x4]
8000b244:	c0 d0       	breq	8000b25e <__d2b+0x4e>
8000b246:	40 09       	lddsp	r9,sp[0x0]
8000b248:	f8 0a 11 20 	rsub	r10,r12,32
8000b24c:	f2 0a 09 4a 	lsl	r10,r9,r10
8000b250:	f5 e8 10 08 	or	r8,r10,r8
8000b254:	89 58       	st.w	r4[0x14],r8
8000b256:	f2 0c 0a 49 	lsr	r9,r9,r12
8000b25a:	50 09       	stdsp	sp[0x0],r9
8000b25c:	c0 28       	rjmp	8000b260 <__d2b+0x50>
8000b25e:	89 58       	st.w	r4[0x14],r8
8000b260:	40 08       	lddsp	r8,sp[0x0]
8000b262:	58 08       	cp.w	r8,0
8000b264:	f9 b3 01 02 	movne	r3,2
8000b268:	f9 b3 00 01 	moveq	r3,1
8000b26c:	89 68       	st.w	r4[0x18],r8
8000b26e:	89 43       	st.w	r4[0x10],r3
8000b270:	c0 88       	rjmp	8000b280 <__d2b+0x70>
8000b272:	1a 9c       	mov	r12,sp
8000b274:	c1 bf       	rcall	8000b0aa <__lo0bits>
8000b276:	30 13       	mov	r3,1
8000b278:	40 08       	lddsp	r8,sp[0x0]
8000b27a:	2e 0c       	sub	r12,-32
8000b27c:	89 43       	st.w	r4[0x10],r3
8000b27e:	89 58       	st.w	r4[0x14],r8
8000b280:	58 01       	cp.w	r1,0
8000b282:	c0 90       	breq	8000b294 <__d2b+0x84>
8000b284:	e2 c1 04 33 	sub	r1,r1,1075
8000b288:	18 01       	add	r1,r12
8000b28a:	8d 01       	st.w	r6[0x0],r1
8000b28c:	f8 0c 11 35 	rsub	r12,r12,53
8000b290:	8b 0c       	st.w	r5[0x0],r12
8000b292:	c0 c8       	rjmp	8000b2aa <__d2b+0x9a>
8000b294:	e6 c8 ff fc 	sub	r8,r3,-4
8000b298:	f8 cc 04 32 	sub	r12,r12,1074
8000b29c:	a5 73       	lsl	r3,0x5
8000b29e:	8d 0c       	st.w	r6[0x0],r12
8000b2a0:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000b2a4:	cd 3e       	rcall	8000b04a <__hi0bits>
8000b2a6:	18 13       	sub	r3,r12
8000b2a8:	8b 03       	st.w	r5[0x0],r3
8000b2aa:	08 9c       	mov	r12,r4
8000b2ac:	2f ed       	sub	sp,-8
8000b2ae:	d8 32       	popm	r0-r7,pc

8000b2b0 <__mdiff>:
8000b2b0:	d4 31       	pushm	r0-r7,lr
8000b2b2:	74 48       	ld.w	r8,r10[0x10]
8000b2b4:	76 45       	ld.w	r5,r11[0x10]
8000b2b6:	16 97       	mov	r7,r11
8000b2b8:	14 96       	mov	r6,r10
8000b2ba:	10 15       	sub	r5,r8
8000b2bc:	c1 31       	brne	8000b2e2 <__mdiff+0x32>
8000b2be:	2f b8       	sub	r8,-5
8000b2c0:	ee ce ff ec 	sub	lr,r7,-20
8000b2c4:	a3 68       	lsl	r8,0x2
8000b2c6:	f4 08 00 0b 	add	r11,r10,r8
8000b2ca:	ee 08 00 08 	add	r8,r7,r8
8000b2ce:	11 4a       	ld.w	r10,--r8
8000b2d0:	17 49       	ld.w	r9,--r11
8000b2d2:	12 3a       	cp.w	r10,r9
8000b2d4:	c0 30       	breq	8000b2da <__mdiff+0x2a>
8000b2d6:	c0 e2       	brcc	8000b2f2 <__mdiff+0x42>
8000b2d8:	c0 78       	rjmp	8000b2e6 <__mdiff+0x36>
8000b2da:	1c 38       	cp.w	r8,lr
8000b2dc:	fe 9b ff f9 	brhi	8000b2ce <__mdiff+0x1e>
8000b2e0:	c4 98       	rjmp	8000b372 <__mdiff+0xc2>
8000b2e2:	58 05       	cp.w	r5,0
8000b2e4:	c0 64       	brge	8000b2f0 <__mdiff+0x40>
8000b2e6:	0e 98       	mov	r8,r7
8000b2e8:	30 15       	mov	r5,1
8000b2ea:	0c 97       	mov	r7,r6
8000b2ec:	10 96       	mov	r6,r8
8000b2ee:	c0 28       	rjmp	8000b2f2 <__mdiff+0x42>
8000b2f0:	30 05       	mov	r5,0
8000b2f2:	6e 1b       	ld.w	r11,r7[0x4]
8000b2f4:	c5 6f       	rcall	8000b1a0 <_Balloc>
8000b2f6:	6e 49       	ld.w	r9,r7[0x10]
8000b2f8:	6c 44       	ld.w	r4,r6[0x10]
8000b2fa:	99 35       	st.w	r12[0xc],r5
8000b2fc:	2f b4       	sub	r4,-5
8000b2fe:	f2 c5 ff fb 	sub	r5,r9,-5
8000b302:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000b306:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000b30a:	2e c6       	sub	r6,-20
8000b30c:	2e c7       	sub	r7,-20
8000b30e:	f8 c8 ff ec 	sub	r8,r12,-20
8000b312:	30 0a       	mov	r10,0
8000b314:	0f 0e       	ld.w	lr,r7++
8000b316:	0d 0b       	ld.w	r11,r6++
8000b318:	fc 02 16 10 	lsr	r2,lr,0x10
8000b31c:	f6 03 16 10 	lsr	r3,r11,0x10
8000b320:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000b324:	e4 03 01 03 	sub	r3,r2,r3
8000b328:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000b32c:	fc 0b 01 0b 	sub	r11,lr,r11
8000b330:	f6 0a 00 0a 	add	r10,r11,r10
8000b334:	b0 1a       	st.h	r8[0x2],r10
8000b336:	b1 4a       	asr	r10,0x10
8000b338:	e6 0a 00 0a 	add	r10,r3,r10
8000b33c:	b0 0a       	st.h	r8[0x0],r10
8000b33e:	2f c8       	sub	r8,-4
8000b340:	b1 4a       	asr	r10,0x10
8000b342:	08 36       	cp.w	r6,r4
8000b344:	ce 83       	brcs	8000b314 <__mdiff+0x64>
8000b346:	c0 d8       	rjmp	8000b360 <__mdiff+0xb0>
8000b348:	0f 0b       	ld.w	r11,r7++
8000b34a:	f6 0e 16 10 	lsr	lr,r11,0x10
8000b34e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000b352:	16 0a       	add	r10,r11
8000b354:	b0 1a       	st.h	r8[0x2],r10
8000b356:	b1 4a       	asr	r10,0x10
8000b358:	1c 0a       	add	r10,lr
8000b35a:	b0 0a       	st.h	r8[0x0],r10
8000b35c:	2f c8       	sub	r8,-4
8000b35e:	b1 4a       	asr	r10,0x10
8000b360:	0a 37       	cp.w	r7,r5
8000b362:	cf 33       	brcs	8000b348 <__mdiff+0x98>
8000b364:	c0 28       	rjmp	8000b368 <__mdiff+0xb8>
8000b366:	20 19       	sub	r9,1
8000b368:	11 4a       	ld.w	r10,--r8
8000b36a:	58 0a       	cp.w	r10,0
8000b36c:	cf d0       	breq	8000b366 <__mdiff+0xb6>
8000b36e:	99 49       	st.w	r12[0x10],r9
8000b370:	d8 32       	popm	r0-r7,pc
8000b372:	30 0b       	mov	r11,0
8000b374:	c1 6f       	rcall	8000b1a0 <_Balloc>
8000b376:	30 18       	mov	r8,1
8000b378:	99 48       	st.w	r12[0x10],r8
8000b37a:	30 08       	mov	r8,0
8000b37c:	99 58       	st.w	r12[0x14],r8
8000b37e:	d8 32       	popm	r0-r7,pc

8000b380 <__lshift>:
8000b380:	d4 31       	pushm	r0-r7,lr
8000b382:	16 97       	mov	r7,r11
8000b384:	76 46       	ld.w	r6,r11[0x10]
8000b386:	f4 02 14 05 	asr	r2,r10,0x5
8000b38a:	2f f6       	sub	r6,-1
8000b38c:	14 93       	mov	r3,r10
8000b38e:	18 94       	mov	r4,r12
8000b390:	04 06       	add	r6,r2
8000b392:	76 1b       	ld.w	r11,r11[0x4]
8000b394:	6e 28       	ld.w	r8,r7[0x8]
8000b396:	c0 38       	rjmp	8000b39c <__lshift+0x1c>
8000b398:	2f fb       	sub	r11,-1
8000b39a:	a1 78       	lsl	r8,0x1
8000b39c:	10 36       	cp.w	r6,r8
8000b39e:	fe 99 ff fd 	brgt	8000b398 <__lshift+0x18>
8000b3a2:	08 9c       	mov	r12,r4
8000b3a4:	cf ee       	rcall	8000b1a0 <_Balloc>
8000b3a6:	30 09       	mov	r9,0
8000b3a8:	18 95       	mov	r5,r12
8000b3aa:	f8 c8 ff ec 	sub	r8,r12,-20
8000b3ae:	12 9a       	mov	r10,r9
8000b3b0:	c0 38       	rjmp	8000b3b6 <__lshift+0x36>
8000b3b2:	10 aa       	st.w	r8++,r10
8000b3b4:	2f f9       	sub	r9,-1
8000b3b6:	04 39       	cp.w	r9,r2
8000b3b8:	cf d5       	brlt	8000b3b2 <__lshift+0x32>
8000b3ba:	6e 4b       	ld.w	r11,r7[0x10]
8000b3bc:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000b3c0:	2f bb       	sub	r11,-5
8000b3c2:	ee c9 ff ec 	sub	r9,r7,-20
8000b3c6:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000b3ca:	58 03       	cp.w	r3,0
8000b3cc:	c1 30       	breq	8000b3f2 <__lshift+0x72>
8000b3ce:	e6 0c 11 20 	rsub	r12,r3,32
8000b3d2:	30 0a       	mov	r10,0
8000b3d4:	72 02       	ld.w	r2,r9[0x0]
8000b3d6:	e4 03 09 42 	lsl	r2,r2,r3
8000b3da:	04 4a       	or	r10,r2
8000b3dc:	10 aa       	st.w	r8++,r10
8000b3de:	13 0a       	ld.w	r10,r9++
8000b3e0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b3e4:	16 39       	cp.w	r9,r11
8000b3e6:	cf 73       	brcs	8000b3d4 <__lshift+0x54>
8000b3e8:	91 0a       	st.w	r8[0x0],r10
8000b3ea:	58 0a       	cp.w	r10,0
8000b3ec:	c0 70       	breq	8000b3fa <__lshift+0x7a>
8000b3ee:	2f f6       	sub	r6,-1
8000b3f0:	c0 58       	rjmp	8000b3fa <__lshift+0x7a>
8000b3f2:	13 0a       	ld.w	r10,r9++
8000b3f4:	10 aa       	st.w	r8++,r10
8000b3f6:	16 39       	cp.w	r9,r11
8000b3f8:	cf d3       	brcs	8000b3f2 <__lshift+0x72>
8000b3fa:	08 9c       	mov	r12,r4
8000b3fc:	20 16       	sub	r6,1
8000b3fe:	0e 9b       	mov	r11,r7
8000b400:	8b 46       	st.w	r5[0x10],r6
8000b402:	cb 5e       	rcall	8000b16c <_Bfree>
8000b404:	0a 9c       	mov	r12,r5
8000b406:	d8 32       	popm	r0-r7,pc

8000b408 <__multiply>:
8000b408:	d4 31       	pushm	r0-r7,lr
8000b40a:	20 2d       	sub	sp,8
8000b40c:	76 49       	ld.w	r9,r11[0x10]
8000b40e:	74 48       	ld.w	r8,r10[0x10]
8000b410:	16 96       	mov	r6,r11
8000b412:	14 95       	mov	r5,r10
8000b414:	10 39       	cp.w	r9,r8
8000b416:	ec 08 17 50 	movlt	r8,r6
8000b41a:	ea 06 17 50 	movlt	r6,r5
8000b41e:	f0 05 17 50 	movlt	r5,r8
8000b422:	6c 28       	ld.w	r8,r6[0x8]
8000b424:	76 43       	ld.w	r3,r11[0x10]
8000b426:	74 42       	ld.w	r2,r10[0x10]
8000b428:	76 1b       	ld.w	r11,r11[0x4]
8000b42a:	e4 03 00 07 	add	r7,r2,r3
8000b42e:	10 37       	cp.w	r7,r8
8000b430:	f7 bb 09 ff 	subgt	r11,-1
8000b434:	cb 6e       	rcall	8000b1a0 <_Balloc>
8000b436:	ee c4 ff fb 	sub	r4,r7,-5
8000b43a:	f8 c9 ff ec 	sub	r9,r12,-20
8000b43e:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000b442:	30 0a       	mov	r10,0
8000b444:	12 98       	mov	r8,r9
8000b446:	c0 28       	rjmp	8000b44a <__multiply+0x42>
8000b448:	10 aa       	st.w	r8++,r10
8000b44a:	08 38       	cp.w	r8,r4
8000b44c:	cf e3       	brcs	8000b448 <__multiply+0x40>
8000b44e:	2f b3       	sub	r3,-5
8000b450:	2f b2       	sub	r2,-5
8000b452:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000b456:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000b45a:	ec cb ff ec 	sub	r11,r6,-20
8000b45e:	50 12       	stdsp	sp[0x4],r2
8000b460:	ea ca ff ec 	sub	r10,r5,-20
8000b464:	c4 48       	rjmp	8000b4ec <__multiply+0xe4>
8000b466:	94 95       	ld.uh	r5,r10[0x2]
8000b468:	58 05       	cp.w	r5,0
8000b46a:	c2 00       	breq	8000b4aa <__multiply+0xa2>
8000b46c:	12 98       	mov	r8,r9
8000b46e:	16 96       	mov	r6,r11
8000b470:	30 0e       	mov	lr,0
8000b472:	50 09       	stdsp	sp[0x0],r9
8000b474:	0d 02       	ld.w	r2,r6++
8000b476:	e4 00 16 10 	lsr	r0,r2,0x10
8000b47a:	70 01       	ld.w	r1,r8[0x0]
8000b47c:	70 09       	ld.w	r9,r8[0x0]
8000b47e:	b1 81       	lsr	r1,0x10
8000b480:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000b484:	e0 05 03 41 	mac	r1,r0,r5
8000b488:	ab 32       	mul	r2,r5
8000b48a:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000b48e:	00 02       	add	r2,r0
8000b490:	e4 0e 00 0e 	add	lr,r2,lr
8000b494:	b0 1e       	st.h	r8[0x2],lr
8000b496:	b1 8e       	lsr	lr,0x10
8000b498:	1c 01       	add	r1,lr
8000b49a:	b0 01       	st.h	r8[0x0],r1
8000b49c:	e2 0e 16 10 	lsr	lr,r1,0x10
8000b4a0:	2f c8       	sub	r8,-4
8000b4a2:	06 36       	cp.w	r6,r3
8000b4a4:	ce 83       	brcs	8000b474 <__multiply+0x6c>
8000b4a6:	40 09       	lddsp	r9,sp[0x0]
8000b4a8:	91 0e       	st.w	r8[0x0],lr
8000b4aa:	94 86       	ld.uh	r6,r10[0x0]
8000b4ac:	58 06       	cp.w	r6,0
8000b4ae:	c1 d0       	breq	8000b4e8 <__multiply+0xe0>
8000b4b0:	72 02       	ld.w	r2,r9[0x0]
8000b4b2:	12 98       	mov	r8,r9
8000b4b4:	16 9e       	mov	lr,r11
8000b4b6:	30 05       	mov	r5,0
8000b4b8:	b0 12       	st.h	r8[0x2],r2
8000b4ba:	1d 01       	ld.w	r1,lr++
8000b4bc:	90 82       	ld.uh	r2,r8[0x0]
8000b4be:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000b4c2:	ad 30       	mul	r0,r6
8000b4c4:	e0 02 00 02 	add	r2,r0,r2
8000b4c8:	e4 05 00 05 	add	r5,r2,r5
8000b4cc:	b0 05       	st.h	r8[0x0],r5
8000b4ce:	b1 85       	lsr	r5,0x10
8000b4d0:	b1 81       	lsr	r1,0x10
8000b4d2:	2f c8       	sub	r8,-4
8000b4d4:	ad 31       	mul	r1,r6
8000b4d6:	90 92       	ld.uh	r2,r8[0x2]
8000b4d8:	e2 02 00 02 	add	r2,r1,r2
8000b4dc:	0a 02       	add	r2,r5
8000b4de:	e4 05 16 10 	lsr	r5,r2,0x10
8000b4e2:	06 3e       	cp.w	lr,r3
8000b4e4:	ce a3       	brcs	8000b4b8 <__multiply+0xb0>
8000b4e6:	91 02       	st.w	r8[0x0],r2
8000b4e8:	2f ca       	sub	r10,-4
8000b4ea:	2f c9       	sub	r9,-4
8000b4ec:	40 18       	lddsp	r8,sp[0x4]
8000b4ee:	10 3a       	cp.w	r10,r8
8000b4f0:	cb b3       	brcs	8000b466 <__multiply+0x5e>
8000b4f2:	c0 28       	rjmp	8000b4f6 <__multiply+0xee>
8000b4f4:	20 17       	sub	r7,1
8000b4f6:	58 07       	cp.w	r7,0
8000b4f8:	e0 8a 00 05 	brle	8000b502 <__multiply+0xfa>
8000b4fc:	09 48       	ld.w	r8,--r4
8000b4fe:	58 08       	cp.w	r8,0
8000b500:	cf a0       	breq	8000b4f4 <__multiply+0xec>
8000b502:	99 47       	st.w	r12[0x10],r7
8000b504:	2f ed       	sub	sp,-8
8000b506:	d8 32       	popm	r0-r7,pc

8000b508 <__i2b>:
8000b508:	d4 21       	pushm	r4-r7,lr
8000b50a:	16 97       	mov	r7,r11
8000b50c:	30 1b       	mov	r11,1
8000b50e:	c4 9e       	rcall	8000b1a0 <_Balloc>
8000b510:	30 19       	mov	r9,1
8000b512:	99 57       	st.w	r12[0x14],r7
8000b514:	99 49       	st.w	r12[0x10],r9
8000b516:	d8 22       	popm	r4-r7,pc

8000b518 <__multadd>:
8000b518:	d4 31       	pushm	r0-r7,lr
8000b51a:	30 08       	mov	r8,0
8000b51c:	12 95       	mov	r5,r9
8000b51e:	16 97       	mov	r7,r11
8000b520:	18 96       	mov	r6,r12
8000b522:	76 44       	ld.w	r4,r11[0x10]
8000b524:	f6 c9 ff ec 	sub	r9,r11,-20
8000b528:	72 0b       	ld.w	r11,r9[0x0]
8000b52a:	f6 0c 16 10 	lsr	r12,r11,0x10
8000b52e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000b532:	f4 0c 02 4c 	mul	r12,r10,r12
8000b536:	f4 0b 03 45 	mac	r5,r10,r11
8000b53a:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000b53e:	b1 85       	lsr	r5,0x10
8000b540:	18 05       	add	r5,r12
8000b542:	ea 0c 15 10 	lsl	r12,r5,0x10
8000b546:	f8 0b 00 0b 	add	r11,r12,r11
8000b54a:	12 ab       	st.w	r9++,r11
8000b54c:	2f f8       	sub	r8,-1
8000b54e:	b1 85       	lsr	r5,0x10
8000b550:	08 38       	cp.w	r8,r4
8000b552:	ce b5       	brlt	8000b528 <__multadd+0x10>
8000b554:	58 05       	cp.w	r5,0
8000b556:	c1 c0       	breq	8000b58e <__multadd+0x76>
8000b558:	6e 28       	ld.w	r8,r7[0x8]
8000b55a:	10 34       	cp.w	r4,r8
8000b55c:	c1 35       	brlt	8000b582 <__multadd+0x6a>
8000b55e:	6e 1b       	ld.w	r11,r7[0x4]
8000b560:	0c 9c       	mov	r12,r6
8000b562:	2f fb       	sub	r11,-1
8000b564:	c1 ee       	rcall	8000b1a0 <_Balloc>
8000b566:	6e 4a       	ld.w	r10,r7[0x10]
8000b568:	ee cb ff f4 	sub	r11,r7,-12
8000b56c:	18 93       	mov	r3,r12
8000b56e:	2f ea       	sub	r10,-2
8000b570:	2f 4c       	sub	r12,-12
8000b572:	a3 6a       	lsl	r10,0x2
8000b574:	fe b0 dc ca 	rcall	80006f08 <memcpy>
8000b578:	0e 9b       	mov	r11,r7
8000b57a:	0c 9c       	mov	r12,r6
8000b57c:	fe b0 fd f8 	rcall	8000b16c <_Bfree>
8000b580:	06 97       	mov	r7,r3
8000b582:	e8 c8 ff ff 	sub	r8,r4,-1
8000b586:	2f b4       	sub	r4,-5
8000b588:	8f 48       	st.w	r7[0x10],r8
8000b58a:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000b58e:	0e 9c       	mov	r12,r7
8000b590:	d8 32       	popm	r0-r7,pc
8000b592:	d7 03       	nop

8000b594 <__pow5mult>:
8000b594:	d4 31       	pushm	r0-r7,lr
8000b596:	14 96       	mov	r6,r10
8000b598:	18 97       	mov	r7,r12
8000b59a:	16 94       	mov	r4,r11
8000b59c:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000b5a0:	c0 90       	breq	8000b5b2 <__pow5mult+0x1e>
8000b5a2:	20 18       	sub	r8,1
8000b5a4:	fe c9 e9 68 	sub	r9,pc,-5784
8000b5a8:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000b5ac:	30 09       	mov	r9,0
8000b5ae:	cb 5f       	rcall	8000b518 <__multadd>
8000b5b0:	18 94       	mov	r4,r12
8000b5b2:	a3 46       	asr	r6,0x2
8000b5b4:	c3 40       	breq	8000b61c <__pow5mult+0x88>
8000b5b6:	6e 95       	ld.w	r5,r7[0x24]
8000b5b8:	58 05       	cp.w	r5,0
8000b5ba:	c0 91       	brne	8000b5cc <__pow5mult+0x38>
8000b5bc:	31 0c       	mov	r12,16
8000b5be:	fe b0 da 81 	rcall	80006ac0 <malloc>
8000b5c2:	99 35       	st.w	r12[0xc],r5
8000b5c4:	8f 9c       	st.w	r7[0x24],r12
8000b5c6:	99 15       	st.w	r12[0x4],r5
8000b5c8:	99 25       	st.w	r12[0x8],r5
8000b5ca:	99 05       	st.w	r12[0x0],r5
8000b5cc:	6e 93       	ld.w	r3,r7[0x24]
8000b5ce:	66 25       	ld.w	r5,r3[0x8]
8000b5d0:	58 05       	cp.w	r5,0
8000b5d2:	c0 c1       	brne	8000b5ea <__pow5mult+0x56>
8000b5d4:	e0 6b 02 71 	mov	r11,625
8000b5d8:	0e 9c       	mov	r12,r7
8000b5da:	c9 7f       	rcall	8000b508 <__i2b>
8000b5dc:	87 2c       	st.w	r3[0x8],r12
8000b5de:	30 08       	mov	r8,0
8000b5e0:	18 95       	mov	r5,r12
8000b5e2:	99 08       	st.w	r12[0x0],r8
8000b5e4:	c0 38       	rjmp	8000b5ea <__pow5mult+0x56>
8000b5e6:	06 9c       	mov	r12,r3
8000b5e8:	18 95       	mov	r5,r12
8000b5ea:	ed b6 00 00 	bld	r6,0x0
8000b5ee:	c0 b1       	brne	8000b604 <__pow5mult+0x70>
8000b5f0:	08 9b       	mov	r11,r4
8000b5f2:	0a 9a       	mov	r10,r5
8000b5f4:	0e 9c       	mov	r12,r7
8000b5f6:	c0 9f       	rcall	8000b408 <__multiply>
8000b5f8:	08 9b       	mov	r11,r4
8000b5fa:	18 93       	mov	r3,r12
8000b5fc:	0e 9c       	mov	r12,r7
8000b5fe:	06 94       	mov	r4,r3
8000b600:	fe b0 fd b6 	rcall	8000b16c <_Bfree>
8000b604:	a1 56       	asr	r6,0x1
8000b606:	c0 b0       	breq	8000b61c <__pow5mult+0x88>
8000b608:	6a 03       	ld.w	r3,r5[0x0]
8000b60a:	58 03       	cp.w	r3,0
8000b60c:	ce d1       	brne	8000b5e6 <__pow5mult+0x52>
8000b60e:	0a 9a       	mov	r10,r5
8000b610:	0a 9b       	mov	r11,r5
8000b612:	0e 9c       	mov	r12,r7
8000b614:	cf ae       	rcall	8000b408 <__multiply>
8000b616:	8b 0c       	st.w	r5[0x0],r12
8000b618:	99 03       	st.w	r12[0x0],r3
8000b61a:	ce 7b       	rjmp	8000b5e8 <__pow5mult+0x54>
8000b61c:	08 9c       	mov	r12,r4
8000b61e:	d8 32       	popm	r0-r7,pc

8000b620 <_read_r>:
8000b620:	d4 21       	pushm	r4-r7,lr
8000b622:	16 98       	mov	r8,r11
8000b624:	18 97       	mov	r7,r12
8000b626:	10 9c       	mov	r12,r8
8000b628:	30 08       	mov	r8,0
8000b62a:	14 9b       	mov	r11,r10
8000b62c:	e0 66 07 fc 	mov	r6,2044
8000b630:	12 9a       	mov	r10,r9
8000b632:	8d 08       	st.w	r6[0x0],r8
8000b634:	fe b0 cd 92 	rcall	80005158 <_read>
8000b638:	5b fc       	cp.w	r12,-1
8000b63a:	c0 51       	brne	8000b644 <_read_r+0x24>
8000b63c:	6c 08       	ld.w	r8,r6[0x0]
8000b63e:	58 08       	cp.w	r8,0
8000b640:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b644:	d8 22       	popm	r4-r7,pc
8000b646:	d7 03       	nop

8000b648 <__isinfd>:
8000b648:	14 98       	mov	r8,r10
8000b64a:	fc 19 7f f0 	movh	r9,0x7ff0
8000b64e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000b652:	f0 0b 11 00 	rsub	r11,r8,0
8000b656:	f7 e8 10 08 	or	r8,r11,r8
8000b65a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000b65e:	f2 08 01 08 	sub	r8,r9,r8
8000b662:	f0 0c 11 00 	rsub	r12,r8,0
8000b666:	f9 e8 10 08 	or	r8,r12,r8
8000b66a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000b66e:	2f fc       	sub	r12,-1
8000b670:	5e fc       	retal	r12

8000b672 <__isnand>:
8000b672:	14 98       	mov	r8,r10
8000b674:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000b678:	f0 0c 11 00 	rsub	r12,r8,0
8000b67c:	10 4c       	or	r12,r8
8000b67e:	fc 18 7f f0 	movh	r8,0x7ff0
8000b682:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000b686:	f0 0c 01 0c 	sub	r12,r8,r12
8000b68a:	bf 9c       	lsr	r12,0x1f
8000b68c:	5e fc       	retal	r12

8000b68e <strlen>:
8000b68e:	30 09       	mov	r9,0
8000b690:	18 98       	mov	r8,r12
8000b692:	c0 28       	rjmp	8000b696 <strlen+0x8>
8000b694:	2f f8       	sub	r8,-1
8000b696:	11 8a       	ld.ub	r10,r8[0x0]
8000b698:	f2 0a 18 00 	cp.b	r10,r9
8000b69c:	cf c1       	brne	8000b694 <strlen+0x6>
8000b69e:	f0 0c 01 0c 	sub	r12,r8,r12
8000b6a2:	5e fc       	retal	r12

8000b6a4 <_calloc_r>:
8000b6a4:	d4 21       	pushm	r4-r7,lr
8000b6a6:	f4 0b 02 4b 	mul	r11,r10,r11
8000b6aa:	fe b0 da 13 	rcall	80006ad0 <_malloc_r>
8000b6ae:	18 97       	mov	r7,r12
8000b6b0:	c2 30       	breq	8000b6f6 <_calloc_r+0x52>
8000b6b2:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000b6b6:	e0 1a ff fc 	andl	r10,0xfffc
8000b6ba:	20 4a       	sub	r10,4
8000b6bc:	e0 4a 00 24 	cp.w	r10,36
8000b6c0:	e0 8b 00 18 	brhi	8000b6f0 <_calloc_r+0x4c>
8000b6c4:	18 98       	mov	r8,r12
8000b6c6:	59 3a       	cp.w	r10,19
8000b6c8:	e0 88 00 0f 	brls	8000b6e6 <_calloc_r+0x42>
8000b6cc:	30 09       	mov	r9,0
8000b6ce:	10 a9       	st.w	r8++,r9
8000b6d0:	10 a9       	st.w	r8++,r9
8000b6d2:	59 ba       	cp.w	r10,27
8000b6d4:	e0 88 00 09 	brls	8000b6e6 <_calloc_r+0x42>
8000b6d8:	10 a9       	st.w	r8++,r9
8000b6da:	10 a9       	st.w	r8++,r9
8000b6dc:	e0 4a 00 24 	cp.w	r10,36
8000b6e0:	c0 31       	brne	8000b6e6 <_calloc_r+0x42>
8000b6e2:	10 a9       	st.w	r8++,r9
8000b6e4:	10 a9       	st.w	r8++,r9
8000b6e6:	30 09       	mov	r9,0
8000b6e8:	10 a9       	st.w	r8++,r9
8000b6ea:	91 19       	st.w	r8[0x4],r9
8000b6ec:	91 09       	st.w	r8[0x0],r9
8000b6ee:	c0 48       	rjmp	8000b6f6 <_calloc_r+0x52>
8000b6f0:	30 0b       	mov	r11,0
8000b6f2:	fe b0 dc af 	rcall	80007050 <memset>
8000b6f6:	0e 9c       	mov	r12,r7
8000b6f8:	d8 22       	popm	r4-r7,pc
8000b6fa:	d7 03       	nop

8000b6fc <_fstat_r>:
8000b6fc:	d4 21       	pushm	r4-r7,lr
8000b6fe:	16 98       	mov	r8,r11
8000b700:	18 97       	mov	r7,r12
8000b702:	10 9c       	mov	r12,r8
8000b704:	30 08       	mov	r8,0
8000b706:	e0 66 07 fc 	mov	r6,2044
8000b70a:	14 9b       	mov	r11,r10
8000b70c:	8d 08       	st.w	r6[0x0],r8
8000b70e:	fe b0 de 5b 	rcall	800073c4 <_fstat>
8000b712:	5b fc       	cp.w	r12,-1
8000b714:	c0 51       	brne	8000b71e <_fstat_r+0x22>
8000b716:	6c 08       	ld.w	r8,r6[0x0]
8000b718:	58 08       	cp.w	r8,0
8000b71a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b71e:	d8 22       	popm	r4-r7,pc

8000b720 <__avr32_f64_mul>:
8000b720:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000b724:	e0 80 00 dc 	breq	8000b8dc <__avr32_f64_mul_op1_zero>
8000b728:	d4 21       	pushm	r4-r7,lr
8000b72a:	f7 e9 20 0e 	eor	lr,r11,r9
8000b72e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000b732:	30 15       	mov	r5,1
8000b734:	c4 30       	breq	8000b7ba <__avr32_f64_mul_op1_subnormal>
8000b736:	ab 6b       	lsl	r11,0xa
8000b738:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000b73c:	ab 6a       	lsl	r10,0xa
8000b73e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000b742:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000b746:	c5 c0       	breq	8000b7fe <__avr32_f64_mul_op2_subnormal>
8000b748:	a1 78       	lsl	r8,0x1
8000b74a:	5c f9       	rol	r9
8000b74c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000b750:	e0 47 07 ff 	cp.w	r7,2047
8000b754:	c7 70       	breq	8000b842 <__avr32_f64_mul_op_nan_or_inf>
8000b756:	e0 46 07 ff 	cp.w	r6,2047
8000b75a:	c7 40       	breq	8000b842 <__avr32_f64_mul_op_nan_or_inf>
8000b75c:	ee 06 00 0c 	add	r12,r7,r6
8000b760:	e0 2c 03 fe 	sub	r12,1022
8000b764:	f6 08 06 44 	mulu.d	r4,r11,r8
8000b768:	f4 09 07 44 	macu.d	r4,r10,r9
8000b76c:	f4 08 06 46 	mulu.d	r6,r10,r8
8000b770:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000b774:	08 07       	add	r7,r4
8000b776:	f4 05 00 4a 	adc	r10,r10,r5
8000b77a:	5c 0b       	acr	r11
8000b77c:	ed bb 00 14 	bld	r11,0x14
8000b780:	c0 50       	breq	8000b78a <__avr32_f64_mul+0x6a>
8000b782:	a1 77       	lsl	r7,0x1
8000b784:	5c fa       	rol	r10
8000b786:	5c fb       	rol	r11
8000b788:	20 1c       	sub	r12,1
8000b78a:	58 0c       	cp.w	r12,0
8000b78c:	e0 8a 00 6f 	brle	8000b86a <__avr32_f64_mul_res_subnormal>
8000b790:	e0 4c 07 ff 	cp.w	r12,2047
8000b794:	e0 84 00 9c 	brge	8000b8cc <__avr32_f64_mul_res_inf>
8000b798:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000b79c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000b7a0:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000b7a4:	ee 17 80 00 	eorh	r7,0x8000
8000b7a8:	f1 b7 04 20 	satu	r7,0x1
8000b7ac:	0e 0a       	add	r10,r7
8000b7ae:	5c 0b       	acr	r11
8000b7b0:	ed be 00 1f 	bld	lr,0x1f
8000b7b4:	ef bb 00 1f 	bst	r11,0x1f
8000b7b8:	d8 22       	popm	r4-r7,pc

8000b7ba <__avr32_f64_mul_op1_subnormal>:
8000b7ba:	e4 1b 00 0f 	andh	r11,0xf
8000b7be:	f4 0c 12 00 	clz	r12,r10
8000b7c2:	f6 06 12 00 	clz	r6,r11
8000b7c6:	f7 bc 03 e1 	sublo	r12,-31
8000b7ca:	f8 06 17 30 	movlo	r6,r12
8000b7ce:	f7 b6 02 01 	subhs	r6,1
8000b7d2:	e0 46 00 20 	cp.w	r6,32
8000b7d6:	c0 d4       	brge	8000b7f0 <__avr32_f64_mul_op1_subnormal+0x36>
8000b7d8:	ec 0c 11 20 	rsub	r12,r6,32
8000b7dc:	f6 06 09 4b 	lsl	r11,r11,r6
8000b7e0:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000b7e4:	18 4b       	or	r11,r12
8000b7e6:	f4 06 09 4a 	lsl	r10,r10,r6
8000b7ea:	20 b6       	sub	r6,11
8000b7ec:	0c 17       	sub	r7,r6
8000b7ee:	ca ab       	rjmp	8000b742 <__avr32_f64_mul+0x22>
8000b7f0:	f4 06 09 4b 	lsl	r11,r10,r6
8000b7f4:	c6 40       	breq	8000b8bc <__avr32_f64_mul_res_zero>
8000b7f6:	30 0a       	mov	r10,0
8000b7f8:	20 b6       	sub	r6,11
8000b7fa:	0c 17       	sub	r7,r6
8000b7fc:	ca 3b       	rjmp	8000b742 <__avr32_f64_mul+0x22>

8000b7fe <__avr32_f64_mul_op2_subnormal>:
8000b7fe:	e4 19 00 0f 	andh	r9,0xf
8000b802:	f0 0c 12 00 	clz	r12,r8
8000b806:	f2 05 12 00 	clz	r5,r9
8000b80a:	f7 bc 03 ea 	sublo	r12,-22
8000b80e:	f8 05 17 30 	movlo	r5,r12
8000b812:	f7 b5 02 0a 	subhs	r5,10
8000b816:	e0 45 00 20 	cp.w	r5,32
8000b81a:	c0 d4       	brge	8000b834 <__avr32_f64_mul_op2_subnormal+0x36>
8000b81c:	ea 0c 11 20 	rsub	r12,r5,32
8000b820:	f2 05 09 49 	lsl	r9,r9,r5
8000b824:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000b828:	18 49       	or	r9,r12
8000b82a:	f0 05 09 48 	lsl	r8,r8,r5
8000b82e:	20 25       	sub	r5,2
8000b830:	0a 16       	sub	r6,r5
8000b832:	c8 fb       	rjmp	8000b750 <__avr32_f64_mul+0x30>
8000b834:	f0 05 09 49 	lsl	r9,r8,r5
8000b838:	c4 20       	breq	8000b8bc <__avr32_f64_mul_res_zero>
8000b83a:	30 08       	mov	r8,0
8000b83c:	20 25       	sub	r5,2
8000b83e:	0a 16       	sub	r6,r5
8000b840:	c8 8b       	rjmp	8000b750 <__avr32_f64_mul+0x30>

8000b842 <__avr32_f64_mul_op_nan_or_inf>:
8000b842:	e4 19 00 0f 	andh	r9,0xf
8000b846:	e4 1b 00 0f 	andh	r11,0xf
8000b84a:	14 4b       	or	r11,r10
8000b84c:	10 49       	or	r9,r8
8000b84e:	e0 47 07 ff 	cp.w	r7,2047
8000b852:	c0 91       	brne	8000b864 <__avr32_f64_mul_op1_not_naninf>
8000b854:	58 0b       	cp.w	r11,0
8000b856:	c3 81       	brne	8000b8c6 <__avr32_f64_mul_res_nan>
8000b858:	e0 46 07 ff 	cp.w	r6,2047
8000b85c:	c3 81       	brne	8000b8cc <__avr32_f64_mul_res_inf>
8000b85e:	58 09       	cp.w	r9,0
8000b860:	c3 60       	breq	8000b8cc <__avr32_f64_mul_res_inf>
8000b862:	c3 28       	rjmp	8000b8c6 <__avr32_f64_mul_res_nan>

8000b864 <__avr32_f64_mul_op1_not_naninf>:
8000b864:	58 09       	cp.w	r9,0
8000b866:	c3 30       	breq	8000b8cc <__avr32_f64_mul_res_inf>
8000b868:	c2 f8       	rjmp	8000b8c6 <__avr32_f64_mul_res_nan>

8000b86a <__avr32_f64_mul_res_subnormal>:
8000b86a:	5c 3c       	neg	r12
8000b86c:	2f fc       	sub	r12,-1
8000b86e:	f1 bc 04 c0 	satu	r12,0x6
8000b872:	e0 4c 00 20 	cp.w	r12,32
8000b876:	c1 14       	brge	8000b898 <__avr32_f64_mul_res_subnormal+0x2e>
8000b878:	f8 08 11 20 	rsub	r8,r12,32
8000b87c:	0e 46       	or	r6,r7
8000b87e:	ee 0c 0a 47 	lsr	r7,r7,r12
8000b882:	f4 08 09 49 	lsl	r9,r10,r8
8000b886:	12 47       	or	r7,r9
8000b888:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b88c:	f6 08 09 49 	lsl	r9,r11,r8
8000b890:	12 4a       	or	r10,r9
8000b892:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000b896:	c8 3b       	rjmp	8000b79c <__avr32_f64_mul+0x7c>
8000b898:	f8 08 11 20 	rsub	r8,r12,32
8000b89c:	f9 b9 00 00 	moveq	r9,0
8000b8a0:	c0 30       	breq	8000b8a6 <__avr32_f64_mul_res_subnormal+0x3c>
8000b8a2:	f6 08 09 49 	lsl	r9,r11,r8
8000b8a6:	0e 46       	or	r6,r7
8000b8a8:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000b8ac:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b8b0:	f3 ea 10 07 	or	r7,r9,r10
8000b8b4:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000b8b8:	30 0b       	mov	r11,0
8000b8ba:	c7 1b       	rjmp	8000b79c <__avr32_f64_mul+0x7c>

8000b8bc <__avr32_f64_mul_res_zero>:
8000b8bc:	1c 9b       	mov	r11,lr
8000b8be:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b8c2:	30 0a       	mov	r10,0
8000b8c4:	d8 22       	popm	r4-r7,pc

8000b8c6 <__avr32_f64_mul_res_nan>:
8000b8c6:	3f fb       	mov	r11,-1
8000b8c8:	3f fa       	mov	r10,-1
8000b8ca:	d8 22       	popm	r4-r7,pc

8000b8cc <__avr32_f64_mul_res_inf>:
8000b8cc:	f0 6b 00 00 	mov	r11,-1048576
8000b8d0:	ed be 00 1f 	bld	lr,0x1f
8000b8d4:	ef bb 00 1f 	bst	r11,0x1f
8000b8d8:	30 0a       	mov	r10,0
8000b8da:	d8 22       	popm	r4-r7,pc

8000b8dc <__avr32_f64_mul_op1_zero>:
8000b8dc:	f7 e9 20 0b 	eor	r11,r11,r9
8000b8e0:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b8e4:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000b8e8:	e0 4c 07 ff 	cp.w	r12,2047
8000b8ec:	5e 1c       	retne	r12
8000b8ee:	3f fa       	mov	r10,-1
8000b8f0:	3f fb       	mov	r11,-1
8000b8f2:	5e fc       	retal	r12

8000b8f4 <__avr32_f64_sub_from_add>:
8000b8f4:	ee 19 80 00 	eorh	r9,0x8000

8000b8f8 <__avr32_f64_sub>:
8000b8f8:	f7 e9 20 0c 	eor	r12,r11,r9
8000b8fc:	e0 86 00 ca 	brmi	8000ba90 <__avr32_f64_add_from_sub>
8000b900:	eb cd 40 e0 	pushm	r5-r7,lr
8000b904:	16 9c       	mov	r12,r11
8000b906:	e6 1c 80 00 	andh	r12,0x8000,COH
8000b90a:	bf db       	cbr	r11,0x1f
8000b90c:	bf d9       	cbr	r9,0x1f
8000b90e:	10 3a       	cp.w	r10,r8
8000b910:	f2 0b 13 00 	cpc	r11,r9
8000b914:	c0 92       	brcc	8000b926 <__avr32_f64_sub+0x2e>
8000b916:	16 97       	mov	r7,r11
8000b918:	12 9b       	mov	r11,r9
8000b91a:	0e 99       	mov	r9,r7
8000b91c:	14 97       	mov	r7,r10
8000b91e:	10 9a       	mov	r10,r8
8000b920:	0e 98       	mov	r8,r7
8000b922:	ee 1c 80 00 	eorh	r12,0x8000
8000b926:	f6 07 16 14 	lsr	r7,r11,0x14
8000b92a:	ab 7b       	lsl	r11,0xb
8000b92c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000b930:	ab 7a       	lsl	r10,0xb
8000b932:	bf bb       	sbr	r11,0x1f
8000b934:	f2 06 16 14 	lsr	r6,r9,0x14
8000b938:	c4 40       	breq	8000b9c0 <__avr32_f64_sub_opL_subnormal>
8000b93a:	ab 79       	lsl	r9,0xb
8000b93c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000b940:	ab 78       	lsl	r8,0xb
8000b942:	bf b9       	sbr	r9,0x1f

8000b944 <__avr32_f64_sub_opL_subnormal_done>:
8000b944:	e0 47 07 ff 	cp.w	r7,2047
8000b948:	c4 f0       	breq	8000b9e6 <__avr32_f64_sub_opH_nan_or_inf>
8000b94a:	0e 26       	rsub	r6,r7
8000b94c:	c1 20       	breq	8000b970 <__avr32_f64_sub_shift_done>
8000b94e:	ec 05 11 20 	rsub	r5,r6,32
8000b952:	e0 46 00 20 	cp.w	r6,32
8000b956:	c7 c2       	brcc	8000ba4e <__avr32_f64_sub_longshift>
8000b958:	f0 05 09 4e 	lsl	lr,r8,r5
8000b95c:	f2 05 09 45 	lsl	r5,r9,r5
8000b960:	f0 06 0a 48 	lsr	r8,r8,r6
8000b964:	f2 06 0a 49 	lsr	r9,r9,r6
8000b968:	0a 48       	or	r8,r5
8000b96a:	58 0e       	cp.w	lr,0
8000b96c:	5f 1e       	srne	lr
8000b96e:	1c 48       	or	r8,lr

8000b970 <__avr32_f64_sub_shift_done>:
8000b970:	10 1a       	sub	r10,r8
8000b972:	f6 09 01 4b 	sbc	r11,r11,r9
8000b976:	f6 06 12 00 	clz	r6,r11
8000b97a:	c0 e0       	breq	8000b996 <__avr32_f64_sub_longnormalize_done>
8000b97c:	c7 83       	brcs	8000ba6c <__avr32_f64_sub_longnormalize>
8000b97e:	ec 0e 11 20 	rsub	lr,r6,32
8000b982:	f6 06 09 4b 	lsl	r11,r11,r6
8000b986:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000b98a:	1c 4b       	or	r11,lr
8000b98c:	f4 06 09 4a 	lsl	r10,r10,r6
8000b990:	0c 17       	sub	r7,r6
8000b992:	e0 8a 00 39 	brle	8000ba04 <__avr32_f64_sub_subnormal_result>

8000b996 <__avr32_f64_sub_longnormalize_done>:
8000b996:	f4 09 15 15 	lsl	r9,r10,0x15
8000b99a:	ab 9a       	lsr	r10,0xb
8000b99c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000b9a0:	ab 9b       	lsr	r11,0xb
8000b9a2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000b9a6:	18 4b       	or	r11,r12

8000b9a8 <__avr32_f64_sub_round>:
8000b9a8:	fc 17 80 00 	movh	r7,0x8000
8000b9ac:	ed ba 00 00 	bld	r10,0x0
8000b9b0:	f7 b7 01 ff 	subne	r7,-1
8000b9b4:	0e 39       	cp.w	r9,r7
8000b9b6:	5f 29       	srhs	r9
8000b9b8:	12 0a       	add	r10,r9
8000b9ba:	5c 0b       	acr	r11
8000b9bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b9c0 <__avr32_f64_sub_opL_subnormal>:
8000b9c0:	ab 79       	lsl	r9,0xb
8000b9c2:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000b9c6:	ab 78       	lsl	r8,0xb
8000b9c8:	f3 e8 10 0e 	or	lr,r9,r8
8000b9cc:	f9 b6 01 01 	movne	r6,1
8000b9d0:	ee 0e 11 00 	rsub	lr,r7,0
8000b9d4:	f9 b7 00 01 	moveq	r7,1
8000b9d8:	ef bb 00 1f 	bst	r11,0x1f
8000b9dc:	f7 ea 10 0e 	or	lr,r11,r10
8000b9e0:	f9 b7 00 00 	moveq	r7,0
8000b9e4:	cb 0b       	rjmp	8000b944 <__avr32_f64_sub_opL_subnormal_done>

8000b9e6 <__avr32_f64_sub_opH_nan_or_inf>:
8000b9e6:	bf db       	cbr	r11,0x1f
8000b9e8:	f7 ea 10 0e 	or	lr,r11,r10
8000b9ec:	c0 81       	brne	8000b9fc <__avr32_f64_sub_return_nan>
8000b9ee:	e0 46 07 ff 	cp.w	r6,2047
8000b9f2:	c0 50       	breq	8000b9fc <__avr32_f64_sub_return_nan>
8000b9f4:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000b9f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000b9fc <__avr32_f64_sub_return_nan>:
8000b9fc:	3f fa       	mov	r10,-1
8000b9fe:	3f fb       	mov	r11,-1
8000ba00:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000ba04 <__avr32_f64_sub_subnormal_result>:
8000ba04:	5c 37       	neg	r7
8000ba06:	2f f7       	sub	r7,-1
8000ba08:	f1 b7 04 c0 	satu	r7,0x6
8000ba0c:	e0 47 00 20 	cp.w	r7,32
8000ba10:	c1 14       	brge	8000ba32 <__avr32_f64_sub_subnormal_result+0x2e>
8000ba12:	ee 08 11 20 	rsub	r8,r7,32
8000ba16:	f4 08 09 49 	lsl	r9,r10,r8
8000ba1a:	5f 16       	srne	r6
8000ba1c:	f4 07 0a 4a 	lsr	r10,r10,r7
8000ba20:	0c 4a       	or	r10,r6
8000ba22:	f6 08 09 49 	lsl	r9,r11,r8
8000ba26:	f5 e9 10 0a 	or	r10,r10,r9
8000ba2a:	f4 07 0a 4b 	lsr	r11,r10,r7
8000ba2e:	30 07       	mov	r7,0
8000ba30:	cb 3b       	rjmp	8000b996 <__avr32_f64_sub_longnormalize_done>
8000ba32:	ee 08 11 40 	rsub	r8,r7,64
8000ba36:	f6 08 09 49 	lsl	r9,r11,r8
8000ba3a:	14 49       	or	r9,r10
8000ba3c:	5f 16       	srne	r6
8000ba3e:	f6 07 0a 4a 	lsr	r10,r11,r7
8000ba42:	0c 4a       	or	r10,r6
8000ba44:	30 0b       	mov	r11,0
8000ba46:	30 07       	mov	r7,0
8000ba48:	ca 7b       	rjmp	8000b996 <__avr32_f64_sub_longnormalize_done>
8000ba4a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000ba4e <__avr32_f64_sub_longshift>:
8000ba4e:	f1 b6 04 c0 	satu	r6,0x6
8000ba52:	f0 0e 17 00 	moveq	lr,r8
8000ba56:	c0 40       	breq	8000ba5e <__avr32_f64_sub_longshift+0x10>
8000ba58:	f2 05 09 4e 	lsl	lr,r9,r5
8000ba5c:	10 4e       	or	lr,r8
8000ba5e:	f2 06 0a 48 	lsr	r8,r9,r6
8000ba62:	30 09       	mov	r9,0
8000ba64:	58 0e       	cp.w	lr,0
8000ba66:	5f 1e       	srne	lr
8000ba68:	1c 48       	or	r8,lr
8000ba6a:	c8 3b       	rjmp	8000b970 <__avr32_f64_sub_shift_done>

8000ba6c <__avr32_f64_sub_longnormalize>:
8000ba6c:	f4 06 12 00 	clz	r6,r10
8000ba70:	f9 b7 03 00 	movlo	r7,0
8000ba74:	f9 b6 03 00 	movlo	r6,0
8000ba78:	f9 bc 03 00 	movlo	r12,0
8000ba7c:	f7 b6 02 e0 	subhs	r6,-32
8000ba80:	f4 06 09 4b 	lsl	r11,r10,r6
8000ba84:	30 0a       	mov	r10,0
8000ba86:	0c 17       	sub	r7,r6
8000ba88:	fe 9a ff be 	brle	8000ba04 <__avr32_f64_sub_subnormal_result>
8000ba8c:	c8 5b       	rjmp	8000b996 <__avr32_f64_sub_longnormalize_done>
8000ba8e:	d7 03       	nop

8000ba90 <__avr32_f64_add_from_sub>:
8000ba90:	ee 19 80 00 	eorh	r9,0x8000

8000ba94 <__avr32_f64_add>:
8000ba94:	f7 e9 20 0c 	eor	r12,r11,r9
8000ba98:	fe 96 ff 2e 	brmi	8000b8f4 <__avr32_f64_sub_from_add>
8000ba9c:	eb cd 40 e0 	pushm	r5-r7,lr
8000baa0:	16 9c       	mov	r12,r11
8000baa2:	e6 1c 80 00 	andh	r12,0x8000,COH
8000baa6:	bf db       	cbr	r11,0x1f
8000baa8:	bf d9       	cbr	r9,0x1f
8000baaa:	12 3b       	cp.w	r11,r9
8000baac:	c0 72       	brcc	8000baba <__avr32_f64_add+0x26>
8000baae:	16 97       	mov	r7,r11
8000bab0:	12 9b       	mov	r11,r9
8000bab2:	0e 99       	mov	r9,r7
8000bab4:	14 97       	mov	r7,r10
8000bab6:	10 9a       	mov	r10,r8
8000bab8:	0e 98       	mov	r8,r7
8000baba:	30 0e       	mov	lr,0
8000babc:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000bac0:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000bac4:	b5 ab       	sbr	r11,0x14
8000bac6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000baca:	c6 20       	breq	8000bb8e <__avr32_f64_add_op2_subnormal>
8000bacc:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000bad0:	b5 a9       	sbr	r9,0x14
8000bad2:	e0 47 07 ff 	cp.w	r7,2047
8000bad6:	c2 80       	breq	8000bb26 <__avr32_f64_add_opH_nan_or_inf>
8000bad8:	0e 26       	rsub	r6,r7
8000bada:	c1 20       	breq	8000bafe <__avr32_f64_add_shift_done>
8000badc:	e0 46 00 36 	cp.w	r6,54
8000bae0:	c1 52       	brcc	8000bb0a <__avr32_f64_add_res_of_done>
8000bae2:	ec 05 11 20 	rsub	r5,r6,32
8000bae6:	e0 46 00 20 	cp.w	r6,32
8000baea:	c3 52       	brcc	8000bb54 <__avr32_f64_add_longshift>
8000baec:	f0 05 09 4e 	lsl	lr,r8,r5
8000baf0:	f2 05 09 45 	lsl	r5,r9,r5
8000baf4:	f0 06 0a 48 	lsr	r8,r8,r6
8000baf8:	f2 06 0a 49 	lsr	r9,r9,r6
8000bafc:	0a 48       	or	r8,r5

8000bafe <__avr32_f64_add_shift_done>:
8000bafe:	10 0a       	add	r10,r8
8000bb00:	f6 09 00 4b 	adc	r11,r11,r9
8000bb04:	ed bb 00 15 	bld	r11,0x15
8000bb08:	c3 40       	breq	8000bb70 <__avr32_f64_add_res_of>

8000bb0a <__avr32_f64_add_res_of_done>:
8000bb0a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000bb0e:	18 4b       	or	r11,r12

8000bb10 <__avr32_f64_add_round>:
8000bb10:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000bb14:	18 4e       	or	lr,r12
8000bb16:	ee 1e 80 00 	eorh	lr,0x8000
8000bb1a:	f1 be 04 20 	satu	lr,0x1
8000bb1e:	1c 0a       	add	r10,lr
8000bb20:	5c 0b       	acr	r11
8000bb22:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000bb26 <__avr32_f64_add_opH_nan_or_inf>:
8000bb26:	b5 cb       	cbr	r11,0x14
8000bb28:	f7 ea 10 0e 	or	lr,r11,r10
8000bb2c:	c1 01       	brne	8000bb4c <__avr32_f64_add_return_nan>
8000bb2e:	e0 46 07 ff 	cp.w	r6,2047
8000bb32:	c0 30       	breq	8000bb38 <__avr32_f64_add_opL_nan_or_inf>
8000bb34:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000bb38 <__avr32_f64_add_opL_nan_or_inf>:
8000bb38:	b5 c9       	cbr	r9,0x14
8000bb3a:	f3 e8 10 0e 	or	lr,r9,r8
8000bb3e:	c0 71       	brne	8000bb4c <__avr32_f64_add_return_nan>
8000bb40:	30 0a       	mov	r10,0
8000bb42:	fc 1b 7f f0 	movh	r11,0x7ff0
8000bb46:	18 4b       	or	r11,r12
8000bb48:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000bb4c <__avr32_f64_add_return_nan>:
8000bb4c:	3f fa       	mov	r10,-1
8000bb4e:	3f fb       	mov	r11,-1
8000bb50:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000bb54 <__avr32_f64_add_longshift>:
8000bb54:	f1 b6 04 c0 	satu	r6,0x6
8000bb58:	f0 0e 17 00 	moveq	lr,r8
8000bb5c:	c0 60       	breq	8000bb68 <__avr32_f64_add_longshift+0x14>
8000bb5e:	f2 05 09 4e 	lsl	lr,r9,r5
8000bb62:	58 08       	cp.w	r8,0
8000bb64:	5f 18       	srne	r8
8000bb66:	10 4e       	or	lr,r8
8000bb68:	f2 06 0a 48 	lsr	r8,r9,r6
8000bb6c:	30 09       	mov	r9,0
8000bb6e:	cc 8b       	rjmp	8000bafe <__avr32_f64_add_shift_done>

8000bb70 <__avr32_f64_add_res_of>:
8000bb70:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000bb74:	a1 9b       	lsr	r11,0x1
8000bb76:	5d 0a       	ror	r10
8000bb78:	5d 0e       	ror	lr
8000bb7a:	2f f7       	sub	r7,-1
8000bb7c:	e0 47 07 ff 	cp.w	r7,2047
8000bb80:	f9 ba 00 00 	moveq	r10,0
8000bb84:	f9 bb 00 00 	moveq	r11,0
8000bb88:	f9 be 00 00 	moveq	lr,0
8000bb8c:	cb fb       	rjmp	8000bb0a <__avr32_f64_add_res_of_done>

8000bb8e <__avr32_f64_add_op2_subnormal>:
8000bb8e:	30 16       	mov	r6,1
8000bb90:	58 07       	cp.w	r7,0
8000bb92:	ca 01       	brne	8000bad2 <__avr32_f64_add+0x3e>
8000bb94:	b5 cb       	cbr	r11,0x14
8000bb96:	10 0a       	add	r10,r8
8000bb98:	f6 09 00 4b 	adc	r11,r11,r9
8000bb9c:	18 4b       	or	r11,r12
8000bb9e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000bba2:	d7 03       	nop

8000bba4 <__avr32_f64_to_u32>:
8000bba4:	58 0b       	cp.w	r11,0
8000bba6:	5e 6d       	retmi	0

8000bba8 <__avr32_f64_to_s32>:
8000bba8:	f6 0c 15 01 	lsl	r12,r11,0x1
8000bbac:	b5 9c       	lsr	r12,0x15
8000bbae:	e0 2c 03 ff 	sub	r12,1023
8000bbb2:	5e 3d       	retlo	0
8000bbb4:	f8 0c 11 1f 	rsub	r12,r12,31
8000bbb8:	16 99       	mov	r9,r11
8000bbba:	ab 7b       	lsl	r11,0xb
8000bbbc:	bf bb       	sbr	r11,0x1f
8000bbbe:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000bbc2:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000bbc6:	a1 79       	lsl	r9,0x1
8000bbc8:	5e 2b       	reths	r11
8000bbca:	5c 3b       	neg	r11
8000bbcc:	5e fb       	retal	r11

8000bbce <__avr32_u32_to_f64>:
8000bbce:	f8 cb 00 00 	sub	r11,r12,0
8000bbd2:	30 0c       	mov	r12,0
8000bbd4:	c0 38       	rjmp	8000bbda <__avr32_s32_to_f64+0x4>

8000bbd6 <__avr32_s32_to_f64>:
8000bbd6:	18 9b       	mov	r11,r12
8000bbd8:	5c 4b       	abs	r11
8000bbda:	30 0a       	mov	r10,0
8000bbdc:	5e 0b       	reteq	r11
8000bbde:	d4 01       	pushm	lr
8000bbe0:	e0 69 04 1e 	mov	r9,1054
8000bbe4:	f6 08 12 00 	clz	r8,r11
8000bbe8:	c1 70       	breq	8000bc16 <__avr32_s32_to_f64+0x40>
8000bbea:	c0 c3       	brcs	8000bc02 <__avr32_s32_to_f64+0x2c>
8000bbec:	f0 0e 11 20 	rsub	lr,r8,32
8000bbf0:	f6 08 09 4b 	lsl	r11,r11,r8
8000bbf4:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000bbf8:	1c 4b       	or	r11,lr
8000bbfa:	f4 08 09 4a 	lsl	r10,r10,r8
8000bbfe:	10 19       	sub	r9,r8
8000bc00:	c0 b8       	rjmp	8000bc16 <__avr32_s32_to_f64+0x40>
8000bc02:	f4 08 12 00 	clz	r8,r10
8000bc06:	f9 b8 03 00 	movlo	r8,0
8000bc0a:	f7 b8 02 e0 	subhs	r8,-32
8000bc0e:	f4 08 09 4b 	lsl	r11,r10,r8
8000bc12:	30 0a       	mov	r10,0
8000bc14:	10 19       	sub	r9,r8
8000bc16:	58 09       	cp.w	r9,0
8000bc18:	e0 89 00 30 	brgt	8000bc78 <__avr32_s32_to_f64+0xa2>
8000bc1c:	5c 39       	neg	r9
8000bc1e:	2f f9       	sub	r9,-1
8000bc20:	e0 49 00 36 	cp.w	r9,54
8000bc24:	c0 43       	brcs	8000bc2c <__avr32_s32_to_f64+0x56>
8000bc26:	30 0b       	mov	r11,0
8000bc28:	30 0a       	mov	r10,0
8000bc2a:	c2 68       	rjmp	8000bc76 <__avr32_s32_to_f64+0xa0>
8000bc2c:	2f 69       	sub	r9,-10
8000bc2e:	f2 08 11 20 	rsub	r8,r9,32
8000bc32:	e0 49 00 20 	cp.w	r9,32
8000bc36:	c0 b2       	brcc	8000bc4c <__avr32_s32_to_f64+0x76>
8000bc38:	f4 08 09 4e 	lsl	lr,r10,r8
8000bc3c:	f6 08 09 48 	lsl	r8,r11,r8
8000bc40:	f4 09 0a 4a 	lsr	r10,r10,r9
8000bc44:	f6 09 0a 4b 	lsr	r11,r11,r9
8000bc48:	10 4b       	or	r11,r8
8000bc4a:	c0 88       	rjmp	8000bc5a <__avr32_s32_to_f64+0x84>
8000bc4c:	f6 08 09 4e 	lsl	lr,r11,r8
8000bc50:	14 4e       	or	lr,r10
8000bc52:	16 9a       	mov	r10,r11
8000bc54:	30 0b       	mov	r11,0
8000bc56:	f4 09 0a 4a 	lsr	r10,r10,r9
8000bc5a:	ed ba 00 00 	bld	r10,0x0
8000bc5e:	c0 92       	brcc	8000bc70 <__avr32_s32_to_f64+0x9a>
8000bc60:	1c 7e       	tst	lr,lr
8000bc62:	c0 41       	brne	8000bc6a <__avr32_s32_to_f64+0x94>
8000bc64:	ed ba 00 01 	bld	r10,0x1
8000bc68:	c0 42       	brcc	8000bc70 <__avr32_s32_to_f64+0x9a>
8000bc6a:	2f fa       	sub	r10,-1
8000bc6c:	f7 bb 02 ff 	subhs	r11,-1
8000bc70:	5c fc       	rol	r12
8000bc72:	5d 0b       	ror	r11
8000bc74:	5d 0a       	ror	r10
8000bc76:	d8 02       	popm	pc
8000bc78:	e0 68 03 ff 	mov	r8,1023
8000bc7c:	ed ba 00 0b 	bld	r10,0xb
8000bc80:	f7 b8 00 ff 	subeq	r8,-1
8000bc84:	10 0a       	add	r10,r8
8000bc86:	5c 0b       	acr	r11
8000bc88:	f7 b9 03 fe 	sublo	r9,-2
8000bc8c:	e0 49 07 ff 	cp.w	r9,2047
8000bc90:	c0 55       	brlt	8000bc9a <__avr32_s32_to_f64+0xc4>
8000bc92:	30 0a       	mov	r10,0
8000bc94:	fc 1b ff e0 	movh	r11,0xffe0
8000bc98:	c0 c8       	rjmp	8000bcb0 <__floatsidf_return_op1>
8000bc9a:	ed bb 00 1f 	bld	r11,0x1f
8000bc9e:	f7 b9 01 01 	subne	r9,1
8000bca2:	ab 9a       	lsr	r10,0xb
8000bca4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000bca8:	a1 7b       	lsl	r11,0x1
8000bcaa:	ab 9b       	lsr	r11,0xb
8000bcac:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000bcb0 <__floatsidf_return_op1>:
8000bcb0:	a1 7c       	lsl	r12,0x1
8000bcb2:	5d 0b       	ror	r11
8000bcb4:	d8 02       	popm	pc

8000bcb6 <__avr32_f64_cmp_eq>:
8000bcb6:	10 3a       	cp.w	r10,r8
8000bcb8:	f2 0b 13 00 	cpc	r11,r9
8000bcbc:	c0 80       	breq	8000bccc <__avr32_f64_cmp_eq+0x16>
8000bcbe:	a1 7b       	lsl	r11,0x1
8000bcc0:	a1 79       	lsl	r9,0x1
8000bcc2:	14 4b       	or	r11,r10
8000bcc4:	12 4b       	or	r11,r9
8000bcc6:	10 4b       	or	r11,r8
8000bcc8:	5e 0f       	reteq	1
8000bcca:	5e fd       	retal	0
8000bccc:	a1 7b       	lsl	r11,0x1
8000bcce:	fc 1c ff e0 	movh	r12,0xffe0
8000bcd2:	58 0a       	cp.w	r10,0
8000bcd4:	f8 0b 13 00 	cpc	r11,r12
8000bcd8:	5e 8f       	retls	1
8000bcda:	5e fd       	retal	0

8000bcdc <__avr32_f64_cmp_ge>:
8000bcdc:	1a de       	st.w	--sp,lr
8000bcde:	1a d7       	st.w	--sp,r7
8000bce0:	a1 7b       	lsl	r11,0x1
8000bce2:	5f 3c       	srlo	r12
8000bce4:	a1 79       	lsl	r9,0x1
8000bce6:	5f 37       	srlo	r7
8000bce8:	5c fc       	rol	r12
8000bcea:	fc 1e ff e0 	movh	lr,0xffe0
8000bcee:	58 0a       	cp.w	r10,0
8000bcf0:	fc 0b 13 00 	cpc	r11,lr
8000bcf4:	e0 8b 00 1d 	brhi	8000bd2e <__avr32_f64_cmp_ge+0x52>
8000bcf8:	58 08       	cp.w	r8,0
8000bcfa:	fc 09 13 00 	cpc	r9,lr
8000bcfe:	e0 8b 00 18 	brhi	8000bd2e <__avr32_f64_cmp_ge+0x52>
8000bd02:	58 0b       	cp.w	r11,0
8000bd04:	f5 ba 00 00 	subfeq	r10,0
8000bd08:	c1 50       	breq	8000bd32 <__avr32_f64_cmp_ge+0x56>
8000bd0a:	1b 07       	ld.w	r7,sp++
8000bd0c:	1b 0e       	ld.w	lr,sp++
8000bd0e:	58 3c       	cp.w	r12,3
8000bd10:	c0 a0       	breq	8000bd24 <__avr32_f64_cmp_ge+0x48>
8000bd12:	58 1c       	cp.w	r12,1
8000bd14:	c0 33       	brcs	8000bd1a <__avr32_f64_cmp_ge+0x3e>
8000bd16:	5e 0f       	reteq	1
8000bd18:	5e 1d       	retne	0
8000bd1a:	10 3a       	cp.w	r10,r8
8000bd1c:	f2 0b 13 00 	cpc	r11,r9
8000bd20:	5e 2f       	reths	1
8000bd22:	5e 3d       	retlo	0
8000bd24:	14 38       	cp.w	r8,r10
8000bd26:	f6 09 13 00 	cpc	r9,r11
8000bd2a:	5e 2f       	reths	1
8000bd2c:	5e 3d       	retlo	0
8000bd2e:	1b 07       	ld.w	r7,sp++
8000bd30:	d8 0a       	popm	pc,r12=0
8000bd32:	58 17       	cp.w	r7,1
8000bd34:	5f 0c       	sreq	r12
8000bd36:	58 09       	cp.w	r9,0
8000bd38:	f5 b8 00 00 	subfeq	r8,0
8000bd3c:	1b 07       	ld.w	r7,sp++
8000bd3e:	1b 0e       	ld.w	lr,sp++
8000bd40:	5e 0f       	reteq	1
8000bd42:	5e fc       	retal	r12

8000bd44 <__avr32_f64_cmp_lt>:
8000bd44:	1a de       	st.w	--sp,lr
8000bd46:	1a d7       	st.w	--sp,r7
8000bd48:	a1 7b       	lsl	r11,0x1
8000bd4a:	5f 3c       	srlo	r12
8000bd4c:	a1 79       	lsl	r9,0x1
8000bd4e:	5f 37       	srlo	r7
8000bd50:	5c fc       	rol	r12
8000bd52:	fc 1e ff e0 	movh	lr,0xffe0
8000bd56:	58 0a       	cp.w	r10,0
8000bd58:	fc 0b 13 00 	cpc	r11,lr
8000bd5c:	e0 8b 00 1d 	brhi	8000bd96 <__avr32_f64_cmp_lt+0x52>
8000bd60:	58 08       	cp.w	r8,0
8000bd62:	fc 09 13 00 	cpc	r9,lr
8000bd66:	e0 8b 00 18 	brhi	8000bd96 <__avr32_f64_cmp_lt+0x52>
8000bd6a:	58 0b       	cp.w	r11,0
8000bd6c:	f5 ba 00 00 	subfeq	r10,0
8000bd70:	c1 50       	breq	8000bd9a <__avr32_f64_cmp_lt+0x56>
8000bd72:	1b 07       	ld.w	r7,sp++
8000bd74:	1b 0e       	ld.w	lr,sp++
8000bd76:	58 3c       	cp.w	r12,3
8000bd78:	c0 a0       	breq	8000bd8c <__avr32_f64_cmp_lt+0x48>
8000bd7a:	58 1c       	cp.w	r12,1
8000bd7c:	c0 33       	brcs	8000bd82 <__avr32_f64_cmp_lt+0x3e>
8000bd7e:	5e 0d       	reteq	0
8000bd80:	5e 1f       	retne	1
8000bd82:	10 3a       	cp.w	r10,r8
8000bd84:	f2 0b 13 00 	cpc	r11,r9
8000bd88:	5e 2d       	reths	0
8000bd8a:	5e 3f       	retlo	1
8000bd8c:	14 38       	cp.w	r8,r10
8000bd8e:	f6 09 13 00 	cpc	r9,r11
8000bd92:	5e 2d       	reths	0
8000bd94:	5e 3f       	retlo	1
8000bd96:	1b 07       	ld.w	r7,sp++
8000bd98:	d8 0a       	popm	pc,r12=0
8000bd9a:	58 17       	cp.w	r7,1
8000bd9c:	5f 1c       	srne	r12
8000bd9e:	58 09       	cp.w	r9,0
8000bda0:	f5 b8 00 00 	subfeq	r8,0
8000bda4:	1b 07       	ld.w	r7,sp++
8000bda6:	1b 0e       	ld.w	lr,sp++
8000bda8:	5e 0d       	reteq	0
8000bdaa:	5e fc       	retal	r12

8000bdac <__avr32_f64_div>:
8000bdac:	eb cd 40 ff 	pushm	r0-r7,lr
8000bdb0:	f7 e9 20 0e 	eor	lr,r11,r9
8000bdb4:	f6 07 16 14 	lsr	r7,r11,0x14
8000bdb8:	a9 7b       	lsl	r11,0x9
8000bdba:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000bdbe:	a9 7a       	lsl	r10,0x9
8000bdc0:	bd bb       	sbr	r11,0x1d
8000bdc2:	e4 1b 3f ff 	andh	r11,0x3fff
8000bdc6:	ab d7       	cbr	r7,0xb
8000bdc8:	e0 80 00 cc 	breq	8000bf60 <__avr32_f64_div_round_subnormal+0x54>
8000bdcc:	e0 47 07 ff 	cp.w	r7,2047
8000bdd0:	e0 84 00 b5 	brge	8000bf3a <__avr32_f64_div_round_subnormal+0x2e>
8000bdd4:	f2 06 16 14 	lsr	r6,r9,0x14
8000bdd8:	a9 79       	lsl	r9,0x9
8000bdda:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000bdde:	a9 78       	lsl	r8,0x9
8000bde0:	bd b9       	sbr	r9,0x1d
8000bde2:	e4 19 3f ff 	andh	r9,0x3fff
8000bde6:	ab d6       	cbr	r6,0xb
8000bde8:	e0 80 00 e2 	breq	8000bfac <__avr32_f64_div_round_subnormal+0xa0>
8000bdec:	e0 46 07 ff 	cp.w	r6,2047
8000bdf0:	e0 84 00 b2 	brge	8000bf54 <__avr32_f64_div_round_subnormal+0x48>
8000bdf4:	0c 17       	sub	r7,r6
8000bdf6:	fe 37 fc 01 	sub	r7,-1023
8000bdfa:	fc 1c 80 00 	movh	r12,0x8000
8000bdfe:	f8 03 16 01 	lsr	r3,r12,0x1
8000be02:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000be06:	5c d4       	com	r4
8000be08:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000be0c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000be10:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000be14:	e6 05 06 44 	mulu.d	r4,r3,r5
8000be18:	ea 03 15 02 	lsl	r3,r5,0x2
8000be1c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000be20:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000be24:	e6 05 06 44 	mulu.d	r4,r3,r5
8000be28:	ea 03 15 02 	lsl	r3,r5,0x2
8000be2c:	e6 09 06 44 	mulu.d	r4,r3,r9
8000be30:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000be34:	e6 05 06 44 	mulu.d	r4,r3,r5
8000be38:	ea 03 15 02 	lsl	r3,r5,0x2
8000be3c:	e6 08 06 40 	mulu.d	r0,r3,r8
8000be40:	e4 09 07 40 	macu.d	r0,r2,r9
8000be44:	e6 09 06 44 	mulu.d	r4,r3,r9
8000be48:	02 04       	add	r4,r1
8000be4a:	5c 05       	acr	r5
8000be4c:	a3 65       	lsl	r5,0x2
8000be4e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000be52:	a3 64       	lsl	r4,0x2
8000be54:	5c 34       	neg	r4
8000be56:	f8 05 01 45 	sbc	r5,r12,r5
8000be5a:	e6 04 06 40 	mulu.d	r0,r3,r4
8000be5e:	e4 05 07 40 	macu.d	r0,r2,r5
8000be62:	e6 05 06 44 	mulu.d	r4,r3,r5
8000be66:	02 04       	add	r4,r1
8000be68:	5c 05       	acr	r5
8000be6a:	ea 03 15 02 	lsl	r3,r5,0x2
8000be6e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000be72:	e8 02 15 02 	lsl	r2,r4,0x2
8000be76:	e6 08 06 40 	mulu.d	r0,r3,r8
8000be7a:	e4 09 07 40 	macu.d	r0,r2,r9
8000be7e:	e6 09 06 44 	mulu.d	r4,r3,r9
8000be82:	02 04       	add	r4,r1
8000be84:	5c 05       	acr	r5
8000be86:	a3 65       	lsl	r5,0x2
8000be88:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000be8c:	a3 64       	lsl	r4,0x2
8000be8e:	5c 34       	neg	r4
8000be90:	f8 05 01 45 	sbc	r5,r12,r5
8000be94:	e6 04 06 40 	mulu.d	r0,r3,r4
8000be98:	e4 05 07 40 	macu.d	r0,r2,r5
8000be9c:	e6 05 06 44 	mulu.d	r4,r3,r5
8000bea0:	02 04       	add	r4,r1
8000bea2:	5c 05       	acr	r5
8000bea4:	ea 03 15 02 	lsl	r3,r5,0x2
8000bea8:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000beac:	e8 02 15 02 	lsl	r2,r4,0x2
8000beb0:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000beb4:	e4 0b 07 40 	macu.d	r0,r2,r11
8000beb8:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000bebc:	02 02       	add	r2,r1
8000bebe:	5c 03       	acr	r3
8000bec0:	ed b3 00 1c 	bld	r3,0x1c
8000bec4:	c0 90       	breq	8000bed6 <__avr32_f64_div+0x12a>
8000bec6:	a1 72       	lsl	r2,0x1
8000bec8:	5c f3       	rol	r3
8000beca:	20 17       	sub	r7,1
8000becc:	a3 9a       	lsr	r10,0x3
8000bece:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000bed2:	a3 9b       	lsr	r11,0x3
8000bed4:	c0 58       	rjmp	8000bede <__avr32_f64_div+0x132>
8000bed6:	a5 8a       	lsr	r10,0x4
8000bed8:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000bedc:	a5 8b       	lsr	r11,0x4
8000bede:	58 07       	cp.w	r7,0
8000bee0:	e0 8a 00 8b 	brle	8000bff6 <__avr32_f64_div_res_subnormal>
8000bee4:	e0 12 ff 00 	andl	r2,0xff00
8000bee8:	e8 12 00 80 	orl	r2,0x80
8000beec:	e6 08 06 40 	mulu.d	r0,r3,r8
8000bef0:	e4 09 07 40 	macu.d	r0,r2,r9
8000bef4:	e4 08 06 44 	mulu.d	r4,r2,r8
8000bef8:	e6 09 06 48 	mulu.d	r8,r3,r9
8000befc:	00 05       	add	r5,r0
8000befe:	f0 01 00 48 	adc	r8,r8,r1
8000bf02:	5c 09       	acr	r9
8000bf04:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000bf08:	58 04       	cp.w	r4,0
8000bf0a:	5c 25       	cpc	r5

8000bf0c <__avr32_f64_div_round_subnormal>:
8000bf0c:	f4 08 13 00 	cpc	r8,r10
8000bf10:	f6 09 13 00 	cpc	r9,r11
8000bf14:	5f 36       	srlo	r6
8000bf16:	f8 06 17 00 	moveq	r6,r12
8000bf1a:	e4 0a 16 08 	lsr	r10,r2,0x8
8000bf1e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000bf22:	e6 0b 16 08 	lsr	r11,r3,0x8
8000bf26:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000bf2a:	ed be 00 1f 	bld	lr,0x1f
8000bf2e:	ef bb 00 1f 	bst	r11,0x1f
8000bf32:	0c 0a       	add	r10,r6
8000bf34:	5c 0b       	acr	r11
8000bf36:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000bf3a:	e4 1b 00 0f 	andh	r11,0xf
8000bf3e:	14 4b       	or	r11,r10
8000bf40:	e0 81 00 a7 	brne	8000c08e <__avr32_f64_div_res_subnormal+0x98>
8000bf44:	f2 06 16 14 	lsr	r6,r9,0x14
8000bf48:	ab d6       	cbr	r6,0xb
8000bf4a:	e0 46 07 ff 	cp.w	r6,2047
8000bf4e:	e0 81 00 a4 	brne	8000c096 <__avr32_f64_div_res_subnormal+0xa0>
8000bf52:	c9 e8       	rjmp	8000c08e <__avr32_f64_div_res_subnormal+0x98>
8000bf54:	e4 19 00 0f 	andh	r9,0xf
8000bf58:	10 49       	or	r9,r8
8000bf5a:	e0 81 00 9a 	brne	8000c08e <__avr32_f64_div_res_subnormal+0x98>
8000bf5e:	c9 28       	rjmp	8000c082 <__avr32_f64_div_res_subnormal+0x8c>
8000bf60:	a3 7b       	lsl	r11,0x3
8000bf62:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000bf66:	a3 7a       	lsl	r10,0x3
8000bf68:	f5 eb 10 04 	or	r4,r10,r11
8000bf6c:	e0 80 00 a0 	breq	8000c0ac <__avr32_f64_div_op1_zero>
8000bf70:	f6 04 12 00 	clz	r4,r11
8000bf74:	c1 70       	breq	8000bfa2 <__avr32_f64_div_round_subnormal+0x96>
8000bf76:	c0 c3       	brcs	8000bf8e <__avr32_f64_div_round_subnormal+0x82>
8000bf78:	e8 05 11 20 	rsub	r5,r4,32
8000bf7c:	f6 04 09 4b 	lsl	r11,r11,r4
8000bf80:	f4 05 0a 45 	lsr	r5,r10,r5
8000bf84:	0a 4b       	or	r11,r5
8000bf86:	f4 04 09 4a 	lsl	r10,r10,r4
8000bf8a:	08 17       	sub	r7,r4
8000bf8c:	c0 b8       	rjmp	8000bfa2 <__avr32_f64_div_round_subnormal+0x96>
8000bf8e:	f4 04 12 00 	clz	r4,r10
8000bf92:	f9 b4 03 00 	movlo	r4,0
8000bf96:	f7 b4 02 e0 	subhs	r4,-32
8000bf9a:	f4 04 09 4b 	lsl	r11,r10,r4
8000bf9e:	30 0a       	mov	r10,0
8000bfa0:	08 17       	sub	r7,r4
8000bfa2:	a3 8a       	lsr	r10,0x2
8000bfa4:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000bfa8:	a3 8b       	lsr	r11,0x2
8000bfaa:	c1 1b       	rjmp	8000bdcc <__avr32_f64_div+0x20>
8000bfac:	a3 79       	lsl	r9,0x3
8000bfae:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000bfb2:	a3 78       	lsl	r8,0x3
8000bfb4:	f3 e8 10 04 	or	r4,r9,r8
8000bfb8:	c6 f0       	breq	8000c096 <__avr32_f64_div_res_subnormal+0xa0>
8000bfba:	f2 04 12 00 	clz	r4,r9
8000bfbe:	c1 70       	breq	8000bfec <__avr32_f64_div_round_subnormal+0xe0>
8000bfc0:	c0 c3       	brcs	8000bfd8 <__avr32_f64_div_round_subnormal+0xcc>
8000bfc2:	e8 05 11 20 	rsub	r5,r4,32
8000bfc6:	f2 04 09 49 	lsl	r9,r9,r4
8000bfca:	f0 05 0a 45 	lsr	r5,r8,r5
8000bfce:	0a 49       	or	r9,r5
8000bfd0:	f0 04 09 48 	lsl	r8,r8,r4
8000bfd4:	08 16       	sub	r6,r4
8000bfd6:	c0 b8       	rjmp	8000bfec <__avr32_f64_div_round_subnormal+0xe0>
8000bfd8:	f0 04 12 00 	clz	r4,r8
8000bfdc:	f9 b4 03 00 	movlo	r4,0
8000bfe0:	f7 b4 02 e0 	subhs	r4,-32
8000bfe4:	f0 04 09 49 	lsl	r9,r8,r4
8000bfe8:	30 08       	mov	r8,0
8000bfea:	08 16       	sub	r6,r4
8000bfec:	a3 88       	lsr	r8,0x2
8000bfee:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000bff2:	a3 89       	lsr	r9,0x2
8000bff4:	cf ca       	rjmp	8000bdec <__avr32_f64_div+0x40>

8000bff6 <__avr32_f64_div_res_subnormal>:
8000bff6:	5c 37       	neg	r7
8000bff8:	2f f7       	sub	r7,-1
8000bffa:	f1 b7 04 c0 	satu	r7,0x6
8000bffe:	e0 47 00 20 	cp.w	r7,32
8000c002:	c1 54       	brge	8000c02c <__avr32_f64_div_res_subnormal+0x36>
8000c004:	ee 06 11 20 	rsub	r6,r7,32
8000c008:	e4 07 0a 42 	lsr	r2,r2,r7
8000c00c:	e6 06 09 4c 	lsl	r12,r3,r6
8000c010:	18 42       	or	r2,r12
8000c012:	e6 07 0a 43 	lsr	r3,r3,r7
8000c016:	f4 06 09 41 	lsl	r1,r10,r6
8000c01a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000c01e:	f6 06 09 4c 	lsl	r12,r11,r6
8000c022:	18 4a       	or	r10,r12
8000c024:	f6 07 0a 4b 	lsr	r11,r11,r7
8000c028:	30 00       	mov	r0,0
8000c02a:	c1 58       	rjmp	8000c054 <__avr32_f64_div_res_subnormal+0x5e>
8000c02c:	ee 06 11 20 	rsub	r6,r7,32
8000c030:	f9 b0 00 00 	moveq	r0,0
8000c034:	f9 bc 00 00 	moveq	r12,0
8000c038:	c0 50       	breq	8000c042 <__avr32_f64_div_res_subnormal+0x4c>
8000c03a:	f4 06 09 40 	lsl	r0,r10,r6
8000c03e:	f6 06 09 4c 	lsl	r12,r11,r6
8000c042:	e6 07 0a 42 	lsr	r2,r3,r7
8000c046:	30 03       	mov	r3,0
8000c048:	f4 07 0a 41 	lsr	r1,r10,r7
8000c04c:	18 41       	or	r1,r12
8000c04e:	f6 07 0a 4a 	lsr	r10,r11,r7
8000c052:	30 0b       	mov	r11,0
8000c054:	e0 12 ff 00 	andl	r2,0xff00
8000c058:	e8 12 00 80 	orl	r2,0x80
8000c05c:	e6 08 06 46 	mulu.d	r6,r3,r8
8000c060:	e4 09 07 46 	macu.d	r6,r2,r9
8000c064:	e4 08 06 44 	mulu.d	r4,r2,r8
8000c068:	e6 09 06 48 	mulu.d	r8,r3,r9
8000c06c:	0c 05       	add	r5,r6
8000c06e:	f0 07 00 48 	adc	r8,r8,r7
8000c072:	5c 09       	acr	r9
8000c074:	30 07       	mov	r7,0
8000c076:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000c07a:	00 34       	cp.w	r4,r0
8000c07c:	e2 05 13 00 	cpc	r5,r1
8000c080:	c4 6b       	rjmp	8000bf0c <__avr32_f64_div_round_subnormal>
8000c082:	1c 9b       	mov	r11,lr
8000c084:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c088:	30 0a       	mov	r10,0
8000c08a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000c08e:	3f fb       	mov	r11,-1
8000c090:	30 0a       	mov	r10,0
8000c092:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000c096:	f5 eb 10 04 	or	r4,r10,r11
8000c09a:	c0 90       	breq	8000c0ac <__avr32_f64_div_op1_zero>
8000c09c:	1c 9b       	mov	r11,lr
8000c09e:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c0a2:	ea 1b 7f f0 	orh	r11,0x7ff0
8000c0a6:	30 0a       	mov	r10,0
8000c0a8:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000c0ac <__avr32_f64_div_op1_zero>:
8000c0ac:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000c0b0:	ce f0       	breq	8000c08e <__avr32_f64_div_res_subnormal+0x98>
8000c0b2:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000c0b6:	e0 44 07 ff 	cp.w	r4,2047
8000c0ba:	ce 41       	brne	8000c082 <__avr32_f64_div_res_subnormal+0x8c>
8000c0bc:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000c0c0:	ce 10       	breq	8000c082 <__avr32_f64_div_res_subnormal+0x8c>
8000c0c2:	ce 6b       	rjmp	8000c08e <__avr32_f64_div_res_subnormal+0x98>

8000c0c4 <__avr32_umod64>:
8000c0c4:	d4 31       	pushm	r0-r7,lr
8000c0c6:	1a 97       	mov	r7,sp
8000c0c8:	20 3d       	sub	sp,12
8000c0ca:	10 9c       	mov	r12,r8
8000c0cc:	12 95       	mov	r5,r9
8000c0ce:	14 9e       	mov	lr,r10
8000c0d0:	16 91       	mov	r1,r11
8000c0d2:	16 96       	mov	r6,r11
8000c0d4:	58 09       	cp.w	r9,0
8000c0d6:	e0 81 00 81 	brne	8000c1d8 <__avr32_umod64+0x114>
8000c0da:	16 38       	cp.w	r8,r11
8000c0dc:	e0 88 00 12 	brls	8000c100 <__avr32_umod64+0x3c>
8000c0e0:	f0 08 12 00 	clz	r8,r8
8000c0e4:	c4 e0       	breq	8000c180 <__avr32_umod64+0xbc>
8000c0e6:	f6 08 09 46 	lsl	r6,r11,r8
8000c0ea:	f8 08 09 4c 	lsl	r12,r12,r8
8000c0ee:	f0 0b 11 20 	rsub	r11,r8,32
8000c0f2:	f4 08 09 4e 	lsl	lr,r10,r8
8000c0f6:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000c0fa:	f7 e6 10 06 	or	r6,r11,r6
8000c0fe:	c4 18       	rjmp	8000c180 <__avr32_umod64+0xbc>
8000c100:	58 08       	cp.w	r8,0
8000c102:	c0 51       	brne	8000c10c <__avr32_umod64+0x48>
8000c104:	30 19       	mov	r9,1
8000c106:	f2 08 0d 08 	divu	r8,r9,r8
8000c10a:	10 9c       	mov	r12,r8
8000c10c:	f8 08 12 00 	clz	r8,r12
8000c110:	c0 31       	brne	8000c116 <__avr32_umod64+0x52>
8000c112:	18 16       	sub	r6,r12
8000c114:	c3 68       	rjmp	8000c180 <__avr32_umod64+0xbc>
8000c116:	f0 03 11 20 	rsub	r3,r8,32
8000c11a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000c11e:	f8 08 09 4c 	lsl	r12,r12,r8
8000c122:	ec 08 09 49 	lsl	r9,r6,r8
8000c126:	ec 03 0a 43 	lsr	r3,r6,r3
8000c12a:	f7 e9 10 09 	or	r9,r11,r9
8000c12e:	f8 05 16 10 	lsr	r5,r12,0x10
8000c132:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000c136:	e6 05 0d 02 	divu	r2,r3,r5
8000c13a:	f2 0e 16 10 	lsr	lr,r9,0x10
8000c13e:	ec 02 02 4b 	mul	r11,r6,r2
8000c142:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000c146:	16 3e       	cp.w	lr,r11
8000c148:	c0 72       	brcc	8000c156 <__avr32_umod64+0x92>
8000c14a:	18 0e       	add	lr,r12
8000c14c:	18 3e       	cp.w	lr,r12
8000c14e:	c0 43       	brcs	8000c156 <__avr32_umod64+0x92>
8000c150:	16 3e       	cp.w	lr,r11
8000c152:	fd dc e3 0e 	addcs	lr,lr,r12
8000c156:	fc 0b 01 03 	sub	r3,lr,r11
8000c15a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000c15e:	e6 05 0d 02 	divu	r2,r3,r5
8000c162:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000c166:	a5 36       	mul	r6,r2
8000c168:	0c 39       	cp.w	r9,r6
8000c16a:	c0 72       	brcc	8000c178 <__avr32_umod64+0xb4>
8000c16c:	18 09       	add	r9,r12
8000c16e:	18 39       	cp.w	r9,r12
8000c170:	c0 43       	brcs	8000c178 <__avr32_umod64+0xb4>
8000c172:	0c 39       	cp.w	r9,r6
8000c174:	f3 dc e3 09 	addcs	r9,r9,r12
8000c178:	f2 06 01 06 	sub	r6,r9,r6
8000c17c:	f4 08 09 4e 	lsl	lr,r10,r8
8000c180:	f8 0a 16 10 	lsr	r10,r12,0x10
8000c184:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000c188:	ec 0a 0d 02 	divu	r2,r6,r10
8000c18c:	fc 09 16 10 	lsr	r9,lr,0x10
8000c190:	ea 02 02 4b 	mul	r11,r5,r2
8000c194:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000c198:	16 39       	cp.w	r9,r11
8000c19a:	c0 72       	brcc	8000c1a8 <__avr32_umod64+0xe4>
8000c19c:	18 09       	add	r9,r12
8000c19e:	18 39       	cp.w	r9,r12
8000c1a0:	c0 43       	brcs	8000c1a8 <__avr32_umod64+0xe4>
8000c1a2:	16 39       	cp.w	r9,r11
8000c1a4:	f3 dc e3 09 	addcs	r9,r9,r12
8000c1a8:	f2 0b 01 0b 	sub	r11,r9,r11
8000c1ac:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000c1b0:	f6 0a 0d 0a 	divu	r10,r11,r10
8000c1b4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000c1b8:	ea 0a 02 4a 	mul	r10,r5,r10
8000c1bc:	14 3e       	cp.w	lr,r10
8000c1be:	c0 72       	brcc	8000c1cc <__avr32_umod64+0x108>
8000c1c0:	18 0e       	add	lr,r12
8000c1c2:	18 3e       	cp.w	lr,r12
8000c1c4:	c0 43       	brcs	8000c1cc <__avr32_umod64+0x108>
8000c1c6:	14 3e       	cp.w	lr,r10
8000c1c8:	fd dc e3 0e 	addcs	lr,lr,r12
8000c1cc:	fc 0a 01 0a 	sub	r10,lr,r10
8000c1d0:	30 0b       	mov	r11,0
8000c1d2:	f4 08 0a 4a 	lsr	r10,r10,r8
8000c1d6:	c7 b8       	rjmp	8000c2cc <__avr32_umod64+0x208>
8000c1d8:	16 39       	cp.w	r9,r11
8000c1da:	e0 8b 00 79 	brhi	8000c2cc <__avr32_umod64+0x208>
8000c1de:	f2 09 12 00 	clz	r9,r9
8000c1e2:	c1 21       	brne	8000c206 <__avr32_umod64+0x142>
8000c1e4:	10 3a       	cp.w	r10,r8
8000c1e6:	5f 2b       	srhs	r11
8000c1e8:	0a 31       	cp.w	r1,r5
8000c1ea:	5f ba       	srhi	r10
8000c1ec:	f7 ea 10 0a 	or	r10,r11,r10
8000c1f0:	f2 0a 18 00 	cp.b	r10,r9
8000c1f4:	c0 60       	breq	8000c200 <__avr32_umod64+0x13c>
8000c1f6:	fc 08 01 0c 	sub	r12,lr,r8
8000c1fa:	e2 05 01 46 	sbc	r6,r1,r5
8000c1fe:	18 9e       	mov	lr,r12
8000c200:	0c 9b       	mov	r11,r6
8000c202:	1c 9a       	mov	r10,lr
8000c204:	c6 48       	rjmp	8000c2cc <__avr32_umod64+0x208>
8000c206:	ea 09 09 4c 	lsl	r12,r5,r9
8000c20a:	f2 06 11 20 	rsub	r6,r9,32
8000c20e:	f6 09 09 4b 	lsl	r11,r11,r9
8000c212:	f0 09 09 42 	lsl	r2,r8,r9
8000c216:	ef 46 ff f4 	st.w	r7[-12],r6
8000c21a:	f0 06 0a 48 	lsr	r8,r8,r6
8000c21e:	18 48       	or	r8,r12
8000c220:	e2 06 0a 4c 	lsr	r12,r1,r6
8000c224:	f4 09 09 43 	lsl	r3,r10,r9
8000c228:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000c22c:	f4 06 0a 4a 	lsr	r10,r10,r6
8000c230:	16 4a       	or	r10,r11
8000c232:	f0 0b 16 10 	lsr	r11,r8,0x10
8000c236:	f8 0b 0d 04 	divu	r4,r12,r11
8000c23a:	f4 0c 16 10 	lsr	r12,r10,0x10
8000c23e:	08 91       	mov	r1,r4
8000c240:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000c244:	e8 0e 02 46 	mul	r6,r4,lr
8000c248:	0c 3c       	cp.w	r12,r6
8000c24a:	c0 a2       	brcc	8000c25e <__avr32_umod64+0x19a>
8000c24c:	20 11       	sub	r1,1
8000c24e:	10 0c       	add	r12,r8
8000c250:	10 3c       	cp.w	r12,r8
8000c252:	c0 63       	brcs	8000c25e <__avr32_umod64+0x19a>
8000c254:	0c 3c       	cp.w	r12,r6
8000c256:	f7 b1 03 01 	sublo	r1,1
8000c25a:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000c25e:	0c 1c       	sub	r12,r6
8000c260:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000c264:	f8 0b 0d 04 	divu	r4,r12,r11
8000c268:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000c26c:	08 96       	mov	r6,r4
8000c26e:	e8 0e 02 4e 	mul	lr,r4,lr
8000c272:	1c 3b       	cp.w	r11,lr
8000c274:	c0 a2       	brcc	8000c288 <__avr32_umod64+0x1c4>
8000c276:	20 16       	sub	r6,1
8000c278:	10 0b       	add	r11,r8
8000c27a:	10 3b       	cp.w	r11,r8
8000c27c:	c0 63       	brcs	8000c288 <__avr32_umod64+0x1c4>
8000c27e:	1c 3b       	cp.w	r11,lr
8000c280:	f7 b6 03 01 	sublo	r6,1
8000c284:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000c288:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000c28c:	1c 1b       	sub	r11,lr
8000c28e:	e2 02 06 40 	mulu.d	r0,r1,r2
8000c292:	00 9e       	mov	lr,r0
8000c294:	02 9c       	mov	r12,r1
8000c296:	16 3c       	cp.w	r12,r11
8000c298:	e0 8b 00 08 	brhi	8000c2a8 <__avr32_umod64+0x1e4>
8000c29c:	5f 06       	sreq	r6
8000c29e:	06 30       	cp.w	r0,r3
8000c2a0:	5f ba       	srhi	r10
8000c2a2:	ed ea 00 0a 	and	r10,r6,r10
8000c2a6:	c0 60       	breq	8000c2b2 <__avr32_umod64+0x1ee>
8000c2a8:	fc 02 01 04 	sub	r4,lr,r2
8000c2ac:	f8 08 01 4c 	sbc	r12,r12,r8
8000c2b0:	08 9e       	mov	lr,r4
8000c2b2:	e6 0e 01 0a 	sub	r10,r3,lr
8000c2b6:	f6 0c 01 4c 	sbc	r12,r11,r12
8000c2ba:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000c2be:	f8 09 0a 4b 	lsr	r11,r12,r9
8000c2c2:	f4 09 0a 4a 	lsr	r10,r10,r9
8000c2c6:	f8 01 09 4c 	lsl	r12,r12,r1
8000c2ca:	18 4a       	or	r10,r12
8000c2cc:	2f dd       	sub	sp,-12
8000c2ce:	d8 32       	popm	r0-r7,pc

8000c2d0 <__do_global_ctors_aux>:
8000c2d0:	d4 21       	pushm	r4-r7,lr
8000c2d2:	30 c7       	mov	r7,12
8000c2d4:	c0 28       	rjmp	8000c2d8 <__do_global_ctors_aux+0x8>
8000c2d6:	5d 18       	icall	r8
8000c2d8:	20 47       	sub	r7,4
8000c2da:	6e 08       	ld.w	r8,r7[0x0]
8000c2dc:	5b f8       	cp.w	r8,-1
8000c2de:	cf c1       	brne	8000c2d6 <__do_global_ctors_aux+0x6>
8000c2e0:	d8 22       	popm	r4-r7,pc
8000c2e2:	d7 03       	nop

Disassembly of section .exception:

8000c400 <_evba>:
8000c400:	c0 08       	rjmp	8000c400 <_evba>
	...

8000c404 <_handle_TLB_Multiple_Hit>:
8000c404:	c0 08       	rjmp	8000c404 <_handle_TLB_Multiple_Hit>
	...

8000c408 <_handle_Bus_Error_Data_Fetch>:
8000c408:	c0 08       	rjmp	8000c408 <_handle_Bus_Error_Data_Fetch>
	...

8000c40c <_handle_Bus_Error_Instruction_Fetch>:
8000c40c:	c0 08       	rjmp	8000c40c <_handle_Bus_Error_Instruction_Fetch>
	...

8000c410 <_handle_NMI>:
8000c410:	c0 08       	rjmp	8000c410 <_handle_NMI>
	...

8000c414 <_handle_Instruction_Address>:
8000c414:	c0 08       	rjmp	8000c414 <_handle_Instruction_Address>
	...

8000c418 <_handle_ITLB_Protection>:
8000c418:	c0 08       	rjmp	8000c418 <_handle_ITLB_Protection>
	...

8000c41c <_handle_Breakpoint>:
8000c41c:	c0 08       	rjmp	8000c41c <_handle_Breakpoint>
	...

8000c420 <_handle_Illegal_Opcode>:
8000c420:	c0 08       	rjmp	8000c420 <_handle_Illegal_Opcode>
	...

8000c424 <_handle_Unimplemented_Instruction>:
8000c424:	c0 08       	rjmp	8000c424 <_handle_Unimplemented_Instruction>
	...

8000c428 <_handle_Privilege_Violation>:
8000c428:	c0 08       	rjmp	8000c428 <_handle_Privilege_Violation>
	...

8000c42c <_handle_Floating_Point>:
8000c42c:	c0 08       	rjmp	8000c42c <_handle_Floating_Point>
	...

8000c430 <_handle_Coprocessor_Absent>:
8000c430:	c0 08       	rjmp	8000c430 <_handle_Coprocessor_Absent>
	...

8000c434 <_handle_Data_Address_Read>:
8000c434:	c0 08       	rjmp	8000c434 <_handle_Data_Address_Read>
	...

8000c438 <_handle_Data_Address_Write>:
8000c438:	c0 08       	rjmp	8000c438 <_handle_Data_Address_Write>
	...

8000c43c <_handle_DTLB_Protection_Read>:
8000c43c:	c0 08       	rjmp	8000c43c <_handle_DTLB_Protection_Read>
	...

8000c440 <_handle_DTLB_Protection_Write>:
8000c440:	c0 08       	rjmp	8000c440 <_handle_DTLB_Protection_Write>
	...

8000c444 <_handle_DTLB_Modified>:
8000c444:	c0 08       	rjmp	8000c444 <_handle_DTLB_Modified>
	...

8000c450 <_handle_ITLB_Miss>:
8000c450:	c0 08       	rjmp	8000c450 <_handle_ITLB_Miss>
	...

8000c460 <_handle_DTLB_Miss_Read>:
8000c460:	c0 08       	rjmp	8000c460 <_handle_DTLB_Miss_Read>
	...

8000c470 <_handle_DTLB_Miss_Write>:
8000c470:	c0 08       	rjmp	8000c470 <_handle_DTLB_Miss_Write>
	...

8000c500 <_handle_Supervisor_Call>:
8000c500:	fe cf 76 cc 	sub	pc,pc,30412

8000c504 <_int0>:
8000c504:	30 0c       	mov	r12,0
8000c506:	fe b0 bf 27 	rcall	80004354 <_get_interrupt_handler>
8000c50a:	58 0c       	cp.w	r12,0
8000c50c:	f8 0f 17 10 	movne	pc,r12
8000c510:	d6 03       	rete

8000c512 <_int1>:
8000c512:	30 1c       	mov	r12,1
8000c514:	fe b0 bf 20 	rcall	80004354 <_get_interrupt_handler>
8000c518:	58 0c       	cp.w	r12,0
8000c51a:	f8 0f 17 10 	movne	pc,r12
8000c51e:	d6 03       	rete

8000c520 <_int2>:
8000c520:	30 2c       	mov	r12,2
8000c522:	fe b0 bf 19 	rcall	80004354 <_get_interrupt_handler>
8000c526:	58 0c       	cp.w	r12,0
8000c528:	f8 0f 17 10 	movne	pc,r12
8000c52c:	d6 03       	rete

8000c52e <_int3>:
8000c52e:	30 3c       	mov	r12,3
8000c530:	fe b0 bf 12 	rcall	80004354 <_get_interrupt_handler>
8000c534:	58 0c       	cp.w	r12,0
8000c536:	f8 0f 17 10 	movne	pc,r12
8000c53a:	d6 03       	rete
8000c53c:	d7 03       	nop
8000c53e:	d7 03       	nop
8000c540:	d7 03       	nop
8000c542:	d7 03       	nop
8000c544:	d7 03       	nop
8000c546:	d7 03       	nop
8000c548:	d7 03       	nop
8000c54a:	d7 03       	nop
8000c54c:	d7 03       	nop
8000c54e:	d7 03       	nop
8000c550:	d7 03       	nop
8000c552:	d7 03       	nop
8000c554:	d7 03       	nop
8000c556:	d7 03       	nop
8000c558:	d7 03       	nop
8000c55a:	d7 03       	nop
8000c55c:	d7 03       	nop
8000c55e:	d7 03       	nop
8000c560:	d7 03       	nop
8000c562:	d7 03       	nop
8000c564:	d7 03       	nop
8000c566:	d7 03       	nop
8000c568:	d7 03       	nop
8000c56a:	d7 03       	nop
8000c56c:	d7 03       	nop
8000c56e:	d7 03       	nop
8000c570:	d7 03       	nop
8000c572:	d7 03       	nop
8000c574:	d7 03       	nop
8000c576:	d7 03       	nop
8000c578:	d7 03       	nop
8000c57a:	d7 03       	nop
8000c57c:	d7 03       	nop
8000c57e:	d7 03       	nop
8000c580:	d7 03       	nop
8000c582:	d7 03       	nop
8000c584:	d7 03       	nop
8000c586:	d7 03       	nop
8000c588:	d7 03       	nop
8000c58a:	d7 03       	nop
8000c58c:	d7 03       	nop
8000c58e:	d7 03       	nop
8000c590:	d7 03       	nop
8000c592:	d7 03       	nop
8000c594:	d7 03       	nop
8000c596:	d7 03       	nop
8000c598:	d7 03       	nop
8000c59a:	d7 03       	nop
8000c59c:	d7 03       	nop
8000c59e:	d7 03       	nop
8000c5a0:	d7 03       	nop
8000c5a2:	d7 03       	nop
8000c5a4:	d7 03       	nop
8000c5a6:	d7 03       	nop
8000c5a8:	d7 03       	nop
8000c5aa:	d7 03       	nop
8000c5ac:	d7 03       	nop
8000c5ae:	d7 03       	nop
8000c5b0:	d7 03       	nop
8000c5b2:	d7 03       	nop
8000c5b4:	d7 03       	nop
8000c5b6:	d7 03       	nop
8000c5b8:	d7 03       	nop
8000c5ba:	d7 03       	nop
8000c5bc:	d7 03       	nop
8000c5be:	d7 03       	nop
8000c5c0:	d7 03       	nop
8000c5c2:	d7 03       	nop
8000c5c4:	d7 03       	nop
8000c5c6:	d7 03       	nop
8000c5c8:	d7 03       	nop
8000c5ca:	d7 03       	nop
8000c5cc:	d7 03       	nop
8000c5ce:	d7 03       	nop
8000c5d0:	d7 03       	nop
8000c5d2:	d7 03       	nop
8000c5d4:	d7 03       	nop
8000c5d6:	d7 03       	nop
8000c5d8:	d7 03       	nop
8000c5da:	d7 03       	nop
8000c5dc:	d7 03       	nop
8000c5de:	d7 03       	nop
8000c5e0:	d7 03       	nop
8000c5e2:	d7 03       	nop
8000c5e4:	d7 03       	nop
8000c5e6:	d7 03       	nop
8000c5e8:	d7 03       	nop
8000c5ea:	d7 03       	nop
8000c5ec:	d7 03       	nop
8000c5ee:	d7 03       	nop
8000c5f0:	d7 03       	nop
8000c5f2:	d7 03       	nop
8000c5f4:	d7 03       	nop
8000c5f6:	d7 03       	nop
8000c5f8:	d7 03       	nop
8000c5fa:	d7 03       	nop
8000c5fc:	d7 03       	nop
8000c5fe:	d7 03       	nop

Disassembly of section .fini:

8000c600 <_fini>:
8000c600:	eb cd 40 40 	pushm	r6,lr
8000c604:	48 26       	lddpc	r6,8000c60c <_fini+0xc>
8000c606:	1e 26       	rsub	r6,pc
8000c608:	c0 48       	rjmp	8000c610 <_fini+0x10>
8000c60a:	d7 03       	nop
8000c60c:	80 00       	ld.sh	r0,r0[0x0]
8000c60e:	c5 ea       	rjmp	8000c2ca <__avr32_umod64+0x206>
8000c610:	fe b0 ad 3e 	rcall	8000208c <__do_global_dtors_aux>
8000c614:	e3 cd 80 40 	ldm	sp++,r6,pc
