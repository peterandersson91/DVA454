
TC_EXAMPLE31.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001550  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80003600  80003600  00003a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000013c  80003800  80003800  00003c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000393c  8000393c  00003d3c  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000005  00000008  80003940  00004008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000003  0000000d  80003945  0000400d  2**0
                  ALLOC
  9 .bss          000000f8  00000010  00000010  00000000  2**2
                  ALLOC
 10 .heap         0000eef8  00000108  00000108  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000400d  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000768  00000000  00000000  00004040  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00001148  00000000  00000000  000047a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000a22c  00000000  00000000  000058f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 0000123f  00000000  00000000  0000fb1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005249  00000000  00000000  00010d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001670  00000000  00000000  00015fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002716  00000000  00000000  00017614  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00002117  00000000  00000000  00019d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 0085c58a  00000000  00000000  0001be41  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 000006d8  00000000  00000000  008783d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d1 c4 	sub	pc,pc,-11836

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f1 c8 	sub	pc,pc,-3640

Disassembly of section .text:

80002008 <LED_Toggle>:
80002008:	eb cd 40 80 	pushm	r7,lr
  }
}


void LED_Toggle(U32 leds)
{
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 4d       	sub	sp,16
80002010:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80002014:	4a 88       	lddpc	r8,800020b4 <LED_Toggle+0xac>
80002016:	21 08       	sub	r8,16
80002018:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000201c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002020:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002024:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
80002028:	4a 48       	lddpc	r8,800020b8 <LED_Toggle+0xb0>
8000202a:	70 09       	ld.w	r9,r8[0x0]
8000202c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002030:	10 59       	eor	r9,r8
80002032:	4a 28       	lddpc	r8,800020b8 <LED_Toggle+0xb0>
80002034:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002036:	c3 78       	rjmp	800020a4 <LED_Toggle+0x9c>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
80002038:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000203c:	5c 98       	brev	r8
8000203e:	f0 08 12 00 	clz	r8,r8
80002042:	5c 58       	castu.b	r8
80002044:	2f f8       	sub	r8,-1
80002046:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000204a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000204e:	a5 68       	lsl	r8,0x4
80002050:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002054:	f2 08 00 08 	add	r8,r9,r8
80002058:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000205c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002060:	70 08       	ld.w	r8,r8[0x0]
80002062:	a9 68       	lsl	r8,0x8
80002064:	e0 28 f0 00 	sub	r8,61440
80002068:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
8000206c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002070:	70 19       	ld.w	r9,r8[0x4]
80002072:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002076:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000207a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000207e:	70 19       	ld.w	r9,r8[0x4]
80002080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002084:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002088:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000208c:	70 19       	ld.w	r9,r8[0x4]
8000208e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002092:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80002094:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002098:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000209c:	f2 08 0a 48 	lsr	r8,r9,r8
800020a0:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800020a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800020a8:	58 08       	cp.w	r8,0
800020aa:	cc 71       	brne	80002038 <LED_Toggle+0x30>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800020ac:	2f cd       	sub	sp,-16
800020ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800020b2:	00 00       	add	r0,r0
800020b4:	80 00       	ld.sh	r0,r0[0x0]
800020b6:	38 00       	mov	r0,-128
800020b8:	00 00       	add	r0,r0
800020ba:	00 08       	add	r8,r0

800020bc <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
800020bc:	eb cd 40 80 	pushm	r7,lr
800020c0:	1a 97       	mov	r7,sp
800020c2:	20 2d       	sub	sp,8
800020c4:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800020c8:	fe 68 14 00 	mov	r8,-125952
800020cc:	70 08       	ld.w	r8,r8[0x0]
800020ce:	30 09       	mov	r9,0
800020d0:	ef 49 ff fc 	st.w	r7[-4],r9
800020d4:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800020d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020dc:	5c 58       	castu.b	r8
800020de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800020e2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800020e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020ea:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800020ee:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800020f2:	fe 68 14 00 	mov	r8,-125952
800020f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800020fa:	91 09       	st.w	r8[0x0],r9
}
800020fc:	2f ed       	sub	sp,-8
800020fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002102:	d7 03       	nop

80002104 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002104:	eb cd 40 80 	pushm	r7,lr
80002108:	1a 97       	mov	r7,sp
8000210a:	20 1d       	sub	sp,4
8000210c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80002110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002114:	e0 69 8a 3f 	mov	r9,35391
80002118:	ea 19 01 f7 	orh	r9,0x1f7
8000211c:	12 38       	cp.w	r8,r9
8000211e:	e0 88 00 06 	brls	8000212a <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
80002122:	30 1c       	mov	r12,1
80002124:	f0 1f 00 05 	mcall	80002138 <flashc_set_bus_freq+0x34>
80002128:	c0 48       	rjmp	80002130 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
8000212a:	30 0c       	mov	r12,0
8000212c:	f0 1f 00 03 	mcall	80002138 <flashc_set_bus_freq+0x34>
	}
}
80002130:	2f fd       	sub	sp,-4
80002132:	e3 cd 80 80 	ldm	sp++,r7,pc
80002136:	00 00       	add	r0,r0
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	20 bc       	sub	r12,11

8000213c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000213c:	eb cd 40 80 	pushm	r7,lr
80002140:	1a 97       	mov	r7,sp
80002142:	20 4d       	sub	sp,16
80002144:	ef 4c ff f4 	st.w	r7[-12],r12
80002148:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000214c:	30 08       	mov	r8,0
8000214e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80002152:	30 08       	mov	r8,0
80002154:	ef 48 ff fc 	st.w	r7[-4],r8
80002158:	c1 c8       	rjmp	80002190 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000215a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000215e:	70 19       	ld.w	r9,r8[0x4]
80002160:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002164:	70 08       	ld.w	r8,r8[0x0]
80002166:	12 9b       	mov	r11,r9
80002168:	10 9c       	mov	r12,r8
8000216a:	f0 1f 00 10 	mcall	800021a8 <gpio_enable_module+0x6c>
8000216e:	18 98       	mov	r8,r12
80002170:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002174:	f3 e8 10 08 	or	r8,r9,r8
80002178:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000217c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002180:	2f 88       	sub	r8,-8
80002182:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000218a:	2f f8       	sub	r8,-1
8000218c:	ef 48 ff fc 	st.w	r7[-4],r8
80002190:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002194:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002198:	10 39       	cp.w	r9,r8
8000219a:	ce 03       	brcs	8000215a <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000219c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800021a0:	10 9c       	mov	r12,r8
800021a2:	2f cd       	sub	sp,-16
800021a4:	e3 cd 80 80 	ldm	sp++,r7,pc
800021a8:	80 00       	ld.sh	r0,r0[0x0]
800021aa:	21 ac       	sub	r12,26

800021ac <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800021ac:	eb cd 40 80 	pushm	r7,lr
800021b0:	1a 97       	mov	r7,sp
800021b2:	20 3d       	sub	sp,12
800021b4:	ef 4c ff f8 	st.w	r7[-8],r12
800021b8:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021c0:	a5 98       	lsr	r8,0x5
800021c2:	a9 68       	lsl	r8,0x8
800021c4:	e0 28 f0 00 	sub	r8,61440
800021c8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
800021cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021d0:	58 18       	cp.w	r8,1
800021d2:	c1 e0       	breq	8000220e <gpio_enable_module_pin+0x62>
800021d4:	c0 63       	brcs	800021e0 <gpio_enable_module_pin+0x34>
800021d6:	58 28       	cp.w	r8,2
800021d8:	c3 20       	breq	8000223c <gpio_enable_module_pin+0x90>
800021da:	58 38       	cp.w	r8,3
800021dc:	c4 70       	breq	8000226a <gpio_enable_module_pin+0xbe>
800021de:	c5 d8       	rjmp	80002298 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800021e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800021e8:	30 19       	mov	r9,1
800021ea:	f2 08 09 48 	lsl	r8,r9,r8
800021ee:	10 99       	mov	r9,r8
800021f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021f4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800021f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021fa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800021fe:	30 19       	mov	r9,1
80002200:	f2 08 09 48 	lsl	r8,r9,r8
80002204:	10 99       	mov	r9,r8
80002206:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000220a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000220c:	c4 88       	rjmp	8000229c <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000220e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002212:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002216:	30 19       	mov	r9,1
80002218:	f2 08 09 48 	lsl	r8,r9,r8
8000221c:	10 99       	mov	r9,r8
8000221e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002222:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002224:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002228:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000222c:	30 19       	mov	r9,1
8000222e:	f2 08 09 48 	lsl	r8,r9,r8
80002232:	10 99       	mov	r9,r8
80002234:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002238:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000223a:	c3 18       	rjmp	8000229c <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000223c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002240:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002244:	30 19       	mov	r9,1
80002246:	f2 08 09 48 	lsl	r8,r9,r8
8000224a:	10 99       	mov	r9,r8
8000224c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002250:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002252:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002256:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000225a:	30 19       	mov	r9,1
8000225c:	f2 08 09 48 	lsl	r8,r9,r8
80002260:	10 99       	mov	r9,r8
80002262:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002266:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002268:	c1 a8       	rjmp	8000229c <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000226a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000226e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002272:	30 19       	mov	r9,1
80002274:	f2 08 09 48 	lsl	r8,r9,r8
80002278:	10 99       	mov	r9,r8
8000227a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000227e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002280:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002284:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002288:	30 19       	mov	r9,1
8000228a:	f2 08 09 48 	lsl	r8,r9,r8
8000228e:	10 99       	mov	r9,r8
80002290:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002294:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002296:	c0 38       	rjmp	8000229c <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80002298:	30 18       	mov	r8,1
8000229a:	c0 d8       	rjmp	800022b4 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000229c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800022a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800022a4:	30 19       	mov	r9,1
800022a6:	f2 08 09 48 	lsl	r8,r9,r8
800022aa:	10 99       	mov	r9,r8
800022ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022b0:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
800022b2:	30 08       	mov	r8,0
}
800022b4:	10 9c       	mov	r12,r8
800022b6:	2f dd       	sub	sp,-12
800022b8:	e3 cd 80 80 	ldm	sp++,r7,pc

800022bc <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800022bc:	eb cd 40 80 	pushm	r7,lr
800022c0:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
800022c2:	c0 08       	rjmp	800022c2 <_unhandled_interrupt+0x6>

800022c4 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
800022c4:	eb cd 40 80 	pushm	r7,lr
800022c8:	1a 97       	mov	r7,sp
800022ca:	20 3d       	sub	sp,12
800022cc:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800022d0:	fe 78 08 00 	mov	r8,-63488
800022d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800022d8:	f2 09 11 03 	rsub	r9,r9,3
800022dc:	28 09       	sub	r9,-128
800022de:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800022e2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800022e6:	fe 78 08 00 	mov	r8,-63488
800022ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800022ee:	2c 09       	sub	r9,-64
800022f0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800022f4:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800022f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022fc:	58 08       	cp.w	r8,0
800022fe:	c1 30       	breq	80002324 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002300:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002304:	48 b8       	lddpc	r8,80002330 <_get_interrupt_handler+0x6c>
80002306:	a1 79       	lsl	r9,0x1
80002308:	2f f9       	sub	r9,-1
8000230a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000230e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002312:	f0 08 12 00 	clz	r8,r8
80002316:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
8000231a:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000231c:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002320:	70 08       	ld.w	r8,r8[0x0]
80002322:	c0 28       	rjmp	80002326 <_get_interrupt_handler+0x62>
80002324:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002326:	10 9c       	mov	r12,r8
80002328:	2f dd       	sub	sp,-12
8000232a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000232e:	00 00       	add	r0,r0
80002330:	80 00       	ld.sh	r0,r0[0x0]
80002332:	38 80       	mov	r0,-120

80002334 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80002334:	eb cd 40 80 	pushm	r7,lr
80002338:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000233a:	48 38       	lddpc	r8,80002344 <INTC_init_evba+0x10>
8000233c:	e3 b8 00 01 	mtsr	0x4,r8
}
80002340:	e3 cd 80 80 	ldm	sp++,r7,pc
80002344:	80 00       	ld.sh	r0,r0[0x0]
80002346:	36 00       	mov	r0,96

80002348 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002348:	eb cd 40 80 	pushm	r7,lr
8000234c:	1a 97       	mov	r7,sp
8000234e:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80002350:	f0 1f 00 1f 	mcall	800023cc <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002354:	30 08       	mov	r8,0
80002356:	ef 48 ff f8 	st.w	r7[-8],r8
8000235a:	c3 18       	rjmp	800023bc <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000235c:	30 08       	mov	r8,0
8000235e:	ef 48 ff fc 	st.w	r7[-4],r8
80002362:	c1 48       	rjmp	8000238a <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002364:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002368:	49 a8       	lddpc	r8,800023d0 <INTC_init_interrupts+0x88>
8000236a:	a1 79       	lsl	r9,0x1
8000236c:	2f f9       	sub	r9,-1
8000236e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80002372:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002376:	a3 68       	lsl	r8,0x2
80002378:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000237c:	49 69       	lddpc	r9,800023d4 <INTC_init_interrupts+0x8c>
8000237e:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002384:	2f f8       	sub	r8,-1
80002386:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000238a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000238e:	49 18       	lddpc	r8,800023d0 <INTC_init_interrupts+0x88>
80002390:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002394:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002398:	10 39       	cp.w	r9,r8
8000239a:	fe 9b ff e5 	brhi	80002364 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000239e:	fe 78 08 00 	mov	r8,-63488
800023a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023a6:	48 db       	lddpc	r11,800023d8 <INTC_init_interrupts+0x90>
800023a8:	48 da       	lddpc	r10,800023dc <INTC_init_interrupts+0x94>
800023aa:	f6 0a 01 0a 	sub	r10,r11,r10
800023ae:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800023b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b6:	2f f8       	sub	r8,-1
800023b8:	ef 48 ff f8 	st.w	r7[-8],r8
800023bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023c0:	59 38       	cp.w	r8,19
800023c2:	fe 98 ff cd 	brls	8000235c <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
800023c6:	2f ed       	sub	sp,-8
800023c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800023cc:	80 00       	ld.sh	r0,r0[0x0]
800023ce:	23 34       	sub	r4,51
800023d0:	80 00       	ld.sh	r0,r0[0x0]
800023d2:	38 80       	mov	r0,-120
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	22 bc       	sub	r12,43
800023d8:	80 00       	ld.sh	r0,r0[0x0]
800023da:	37 04       	mov	r4,112
800023dc:	80 00       	ld.sh	r0,r0[0x0]
800023de:	36 00       	mov	r0,96

800023e0 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800023e0:	eb cd 40 80 	pushm	r7,lr
800023e4:	1a 97       	mov	r7,sp
800023e6:	20 4d       	sub	sp,16
800023e8:	ef 4c ff f8 	st.w	r7[-8],r12
800023ec:	ef 4b ff f4 	st.w	r7[-12],r11
800023f0:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800023f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800023f8:	a5 98       	lsr	r8,0x5
800023fa:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800023fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002402:	4a 78       	lddpc	r8,8000249c <INTC_register_interrupt+0xbc>
80002404:	a1 79       	lsl	r9,0x1
80002406:	2f f9       	sub	r9,-1
80002408:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000240c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002410:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002414:	a3 68       	lsl	r8,0x2
80002416:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
8000241a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000241e:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80002420:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002424:	58 08       	cp.w	r8,0
80002426:	c0 c1       	brne	8000243e <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002428:	fe 78 08 00 	mov	r8,-63488
8000242c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002430:	49 cb       	lddpc	r11,800024a0 <INTC_register_interrupt+0xc0>
80002432:	49 da       	lddpc	r10,800024a4 <INTC_register_interrupt+0xc4>
80002434:	f6 0a 01 0a 	sub	r10,r11,r10
80002438:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000243c:	c2 d8       	rjmp	80002496 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
8000243e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002442:	58 18       	cp.w	r8,1
80002444:	c0 d1       	brne	8000245e <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002446:	fe 78 08 00 	mov	r8,-63488
8000244a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000244e:	49 7b       	lddpc	r11,800024a8 <INTC_register_interrupt+0xc8>
80002450:	49 5a       	lddpc	r10,800024a4 <INTC_register_interrupt+0xc4>
80002452:	f6 0a 01 0a 	sub	r10,r11,r10
80002456:	bf aa       	sbr	r10,0x1e
80002458:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000245c:	c1 d8       	rjmp	80002496 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
8000245e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002462:	58 28       	cp.w	r8,2
80002464:	c0 d1       	brne	8000247e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80002466:	fe 78 08 00 	mov	r8,-63488
8000246a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000246e:	49 0b       	lddpc	r11,800024ac <INTC_register_interrupt+0xcc>
80002470:	48 da       	lddpc	r10,800024a4 <INTC_register_interrupt+0xc4>
80002472:	f6 0a 01 0a 	sub	r10,r11,r10
80002476:	bf ba       	sbr	r10,0x1f
80002478:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000247c:	c0 d8       	rjmp	80002496 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000247e:	fe 78 08 00 	mov	r8,-63488
80002482:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002486:	48 bb       	lddpc	r11,800024b0 <INTC_register_interrupt+0xd0>
80002488:	48 7a       	lddpc	r10,800024a4 <INTC_register_interrupt+0xc4>
8000248a:	f6 0a 01 0a 	sub	r10,r11,r10
8000248e:	ea 1a c0 00 	orh	r10,0xc000
80002492:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80002496:	2f cd       	sub	sp,-16
80002498:	e3 cd 80 80 	ldm	sp++,r7,pc
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	38 80       	mov	r0,-120
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	37 04       	mov	r4,112
800024a4:	80 00       	ld.sh	r0,r0[0x0]
800024a6:	36 00       	mov	r0,96
800024a8:	80 00       	ld.sh	r0,r0[0x0]
800024aa:	37 12       	mov	r2,113
800024ac:	80 00       	ld.sh	r0,r0[0x0]
800024ae:	37 20       	mov	r0,114
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	37 2e       	mov	lr,114

800024b4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800024b4:	eb cd 40 80 	pushm	r7,lr
800024b8:	1a 97       	mov	r7,sp
800024ba:	20 1d       	sub	sp,4
800024bc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800024c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024c4:	e6 18 00 01 	andh	r8,0x1,COH
800024c8:	5f 08       	sreq	r8
800024ca:	5c 58       	castu.b	r8
}
800024cc:	10 9c       	mov	r12,r8
800024ce:	2f fd       	sub	sp,-4
800024d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800024d4 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800024d4:	eb cd 40 80 	pushm	r7,lr
800024d8:	1a 97       	mov	r7,sp
800024da:	20 4d       	sub	sp,16
800024dc:	ef 4c ff f8 	st.w	r7[-8],r12
800024e0:	ef 4b ff f4 	st.w	r7[-12],r11
800024e4:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800024e8:	e1 b8 00 00 	mfsr	r8,0x0
800024ec:	10 9c       	mov	r12,r8
800024ee:	f0 1f 00 73 	mcall	800026b8 <tc_configure_interrupts+0x1e4>
800024f2:	18 98       	mov	r8,r12
800024f4:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800024f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800024fc:	58 28       	cp.w	r8,2
800024fe:	e0 88 00 04 	brls	80002506 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80002502:	3f f8       	mov	r8,-1
80002504:	cd 68       	rjmp	800026b0 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002506:	ee fb ff f4 	ld.w	r11,r7[-12]
8000250a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000250e:	70 08       	ld.w	r8,r8[0x0]
80002510:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80002514:	5c 58       	castu.b	r8
80002516:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000251a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000251e:	70 08       	ld.w	r8,r8[0x0]
80002520:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80002524:	5c 58       	castu.b	r8
80002526:	a7 68       	lsl	r8,0x6
80002528:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
8000252a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000252e:	70 08       	ld.w	r8,r8[0x0]
80002530:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002534:	5c 58       	castu.b	r8
80002536:	a5 78       	lsl	r8,0x5
80002538:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
8000253a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000253e:	70 08       	ld.w	r8,r8[0x0]
80002540:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002544:	5c 58       	castu.b	r8
80002546:	a5 68       	lsl	r8,0x4
80002548:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000254a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000254e:	70 08       	ld.w	r8,r8[0x0]
80002550:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002554:	5c 58       	castu.b	r8
80002556:	a3 78       	lsl	r8,0x3
80002558:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000255a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000255e:	70 08       	ld.w	r8,r8[0x0]
80002560:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80002564:	5c 58       	castu.b	r8
80002566:	a3 68       	lsl	r8,0x2
80002568:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
8000256a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000256e:	70 08       	ld.w	r8,r8[0x0]
80002570:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002574:	5c 58       	castu.b	r8
80002576:	a1 78       	lsl	r8,0x1
80002578:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
8000257a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000257e:	70 08       	ld.w	r8,r8[0x0]
80002580:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002584:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002586:	f3 e8 10 08 	or	r8,r9,r8
8000258a:	10 99       	mov	r9,r8
8000258c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002590:	f6 08 15 06 	lsl	r8,r11,0x6
80002594:	f4 08 00 08 	add	r8,r10,r8
80002598:	2d c8       	sub	r8,-36
8000259a:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000259c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800025a0:	30 08       	mov	r8,0
800025a2:	f0 09 18 00 	cp.b	r9,r8
800025a6:	c0 20       	breq	800025aa <tc_configure_interrupts+0xd6>
800025a8:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800025aa:	ee fb ff f4 	ld.w	r11,r7[-12]
800025ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
800025b2:	70 08       	ld.w	r8,r8[0x0]
800025b4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800025b8:	5c 58       	castu.b	r8
800025ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800025be:	c0 41       	brne	800025c6 <tc_configure_interrupts+0xf2>
800025c0:	e0 69 00 80 	mov	r9,128
800025c4:	c0 28       	rjmp	800025c8 <tc_configure_interrupts+0xf4>
800025c6:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800025c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800025cc:	70 08       	ld.w	r8,r8[0x0]
800025ce:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800025d2:	5c 58       	castu.b	r8
800025d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800025d8:	c0 31       	brne	800025de <tc_configure_interrupts+0x10a>
800025da:	34 08       	mov	r8,64
800025dc:	c0 28       	rjmp	800025e0 <tc_configure_interrupts+0x10c>
800025de:	30 08       	mov	r8,0
800025e0:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800025e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800025e6:	70 08       	ld.w	r8,r8[0x0]
800025e8:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
800025ec:	5c 58       	castu.b	r8
800025ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800025f2:	c0 31       	brne	800025f8 <tc_configure_interrupts+0x124>
800025f4:	32 08       	mov	r8,32
800025f6:	c0 28       	rjmp	800025fa <tc_configure_interrupts+0x126>
800025f8:	30 08       	mov	r8,0
800025fa:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
800025fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002600:	70 08       	ld.w	r8,r8[0x0]
80002602:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002606:	5c 58       	castu.b	r8
80002608:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000260c:	c0 31       	brne	80002612 <tc_configure_interrupts+0x13e>
8000260e:	31 08       	mov	r8,16
80002610:	c0 28       	rjmp	80002614 <tc_configure_interrupts+0x140>
80002612:	30 08       	mov	r8,0
80002614:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80002616:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000261a:	70 08       	ld.w	r8,r8[0x0]
8000261c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002620:	5c 58       	castu.b	r8
80002622:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002626:	c0 31       	brne	8000262c <tc_configure_interrupts+0x158>
80002628:	30 88       	mov	r8,8
8000262a:	c0 28       	rjmp	8000262e <tc_configure_interrupts+0x15a>
8000262c:	30 08       	mov	r8,0
8000262e:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002630:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002634:	70 08       	ld.w	r8,r8[0x0]
80002636:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000263a:	5c 58       	castu.b	r8
8000263c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002640:	c0 31       	brne	80002646 <tc_configure_interrupts+0x172>
80002642:	30 48       	mov	r8,4
80002644:	c0 28       	rjmp	80002648 <tc_configure_interrupts+0x174>
80002646:	30 08       	mov	r8,0
80002648:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000264a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000264e:	70 08       	ld.w	r8,r8[0x0]
80002650:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002654:	5c 58       	castu.b	r8
80002656:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000265a:	c0 31       	brne	80002660 <tc_configure_interrupts+0x18c>
8000265c:	30 28       	mov	r8,2
8000265e:	c0 28       	rjmp	80002662 <tc_configure_interrupts+0x18e>
80002660:	30 08       	mov	r8,0
80002662:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
80002664:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002668:	70 08       	ld.w	r8,r8[0x0]
8000266a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000266e:	5c 58       	castu.b	r8
80002670:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002674:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002676:	f3 e8 10 08 	or	r8,r9,r8
8000267a:	10 99       	mov	r9,r8
8000267c:	ee fa ff f8 	ld.w	r10,r7[-8]
80002680:	f6 08 15 06 	lsl	r8,r11,0x6
80002684:	f4 08 00 08 	add	r8,r10,r8
80002688:	2d 88       	sub	r8,-40
8000268a:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000268c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002690:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002694:	a1 78       	lsl	r8,0x1
80002696:	2f f8       	sub	r8,-1
80002698:	a5 78       	lsl	r8,0x5
8000269a:	f2 08 00 08 	add	r8,r9,r8
8000269e:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800026a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800026a4:	30 08       	mov	r8,0
800026a6:	f0 09 18 00 	cp.b	r9,r8
800026aa:	c0 20       	breq	800026ae <tc_configure_interrupts+0x1da>
800026ac:	d5 03       	csrf	0x10

  return 0;
800026ae:	30 08       	mov	r8,0
}
800026b0:	10 9c       	mov	r12,r8
800026b2:	2f cd       	sub	sp,-16
800026b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800026b8:	80 00       	ld.sh	r0,r0[0x0]
800026ba:	24 b4       	sub	r4,75

800026bc <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800026bc:	eb cd 40 80 	pushm	r7,lr
800026c0:	1a 97       	mov	r7,sp
800026c2:	20 2d       	sub	sp,8
800026c4:	ef 4c ff fc 	st.w	r7[-4],r12
800026c8:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
800026cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026d0:	70 08       	ld.w	r8,r8[0x0]
800026d2:	58 28       	cp.w	r8,2
800026d4:	e0 88 00 04 	brls	800026dc <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
800026d8:	3f f8       	mov	r8,-1
800026da:	c9 78       	rjmp	80002808 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800026dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026e0:	70 09       	ld.w	r9,r8[0x0]
800026e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026e6:	70 18       	ld.w	r8,r8[0x4]
800026e8:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
800026ec:	5c 58       	castu.b	r8
800026ee:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
800026f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026f6:	70 18       	ld.w	r8,r8[0x4]
800026f8:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
800026fc:	5c 58       	castu.b	r8
800026fe:	bd 68       	lsl	r8,0x1c
80002700:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80002702:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002706:	70 18       	ld.w	r8,r8[0x4]
80002708:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
8000270c:	5c 58       	castu.b	r8
8000270e:	bb 68       	lsl	r8,0x1a
80002710:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80002712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002716:	70 18       	ld.w	r8,r8[0x4]
80002718:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
8000271c:	5c 58       	castu.b	r8
8000271e:	b9 68       	lsl	r8,0x18
80002720:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80002722:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002726:	70 18       	ld.w	r8,r8[0x4]
80002728:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
8000272c:	5c 58       	castu.b	r8
8000272e:	b7 68       	lsl	r8,0x16
80002730:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80002732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002736:	70 18       	ld.w	r8,r8[0x4]
80002738:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
8000273c:	5c 58       	castu.b	r8
8000273e:	b5 68       	lsl	r8,0x14
80002740:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80002742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002746:	70 18       	ld.w	r8,r8[0x4]
80002748:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
8000274c:	5c 58       	castu.b	r8
8000274e:	b3 68       	lsl	r8,0x12
80002750:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80002752:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002756:	70 18       	ld.w	r8,r8[0x4]
80002758:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000275c:	5c 58       	castu.b	r8
8000275e:	b1 68       	lsl	r8,0x10
80002760:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
80002764:	10 9a       	mov	r10,r8
80002766:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
80002768:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000276c:	70 18       	ld.w	r8,r8[0x4]
8000276e:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
80002772:	5c 58       	castu.b	r8
80002774:	ad 78       	lsl	r8,0xd
80002776:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
80002778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000277c:	70 18       	ld.w	r8,r8[0x4]
8000277e:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
80002782:	5c 58       	castu.b	r8
80002784:	ad 68       	lsl	r8,0xc
80002786:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
80002788:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000278c:	70 18       	ld.w	r8,r8[0x4]
8000278e:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
80002792:	5c 58       	castu.b	r8
80002794:	ab 68       	lsl	r8,0xa
80002796:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
80002798:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000279c:	70 18       	ld.w	r8,r8[0x4]
8000279e:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800027a2:	5c 58       	castu.b	r8
800027a4:	a9 68       	lsl	r8,0x8
800027a6:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
800027a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027ac:	70 18       	ld.w	r8,r8[0x4]
800027ae:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800027b2:	5c 58       	castu.b	r8
800027b4:	a7 78       	lsl	r8,0x7
800027b6:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
800027b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027bc:	70 18       	ld.w	r8,r8[0x4]
800027be:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800027c2:	5c 58       	castu.b	r8
800027c4:	a7 68       	lsl	r8,0x6
800027c6:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
800027c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027cc:	70 18       	ld.w	r8,r8[0x4]
800027ce:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
800027d2:	5c 58       	castu.b	r8
800027d4:	a5 68       	lsl	r8,0x4
800027d6:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
800027d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027dc:	70 18       	ld.w	r8,r8[0x4]
800027de:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800027e2:	5c 58       	castu.b	r8
800027e4:	a3 78       	lsl	r8,0x3
800027e6:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
800027e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027ec:	70 18       	ld.w	r8,r8[0x4]
800027ee:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800027f2:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
800027f4:	f5 e8 10 08 	or	r8,r10,r8
800027f8:	10 9a       	mov	r10,r8
800027fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027fe:	a5 69       	lsl	r9,0x4
80002800:	2f f9       	sub	r9,-1
80002802:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80002806:	30 08       	mov	r8,0
}
80002808:	10 9c       	mov	r12,r8
8000280a:	2f ed       	sub	sp,-8
8000280c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002810 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80002810:	eb cd 40 80 	pushm	r7,lr
80002814:	1a 97       	mov	r7,sp
80002816:	20 2d       	sub	sp,8
80002818:	ef 4c ff fc 	st.w	r7[-4],r12
8000281c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002824:	58 28       	cp.w	r8,2
80002826:	e0 88 00 04 	brls	8000282e <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
8000282a:	3f f8       	mov	r8,-1
8000282c:	c0 b8       	rjmp	80002842 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
8000282e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002832:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002836:	a7 68       	lsl	r8,0x6
80002838:	f2 08 00 08 	add	r8,r9,r8
8000283c:	30 59       	mov	r9,5
8000283e:	91 09       	st.w	r8[0x0],r9

  return 0;
80002840:	30 08       	mov	r8,0
}
80002842:	10 9c       	mov	r12,r8
80002844:	2f ed       	sub	sp,-8
80002846:	e3 cd 80 80 	ldm	sp++,r7,pc

8000284a <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
8000284a:	eb cd 40 80 	pushm	r7,lr
8000284e:	1a 97       	mov	r7,sp
80002850:	20 2d       	sub	sp,8
80002852:	ef 4c ff fc 	st.w	r7[-4],r12
80002856:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000285a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000285e:	58 28       	cp.w	r8,2
80002860:	e0 88 00 04 	brls	80002868 <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
80002864:	3f f8       	mov	r8,-1
80002866:	c0 b8       	rjmp	8000287c <tc_read_sr+0x32>

  return tc->channel[channel].sr;
80002868:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000286c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002870:	a1 78       	lsl	r8,0x1
80002872:	2f f8       	sub	r8,-1
80002874:	a5 78       	lsl	r8,0x5
80002876:	f2 08 00 08 	add	r8,r9,r8
8000287a:	70 08       	ld.w	r8,r8[0x0]
}
8000287c:	10 9c       	mov	r12,r8
8000287e:	2f ed       	sub	sp,-8
80002880:	e3 cd 80 80 	ldm	sp++,r7,pc

80002884 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
80002884:	eb cd 40 80 	pushm	r7,lr
80002888:	1a 97       	mov	r7,sp
8000288a:	20 3d       	sub	sp,12
8000288c:	ef 4c ff fc 	st.w	r7[-4],r12
80002890:	ef 4b ff f8 	st.w	r7[-8],r11
80002894:	14 98       	mov	r8,r10
80002896:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000289a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000289e:	58 28       	cp.w	r8,2
800028a0:	e0 88 00 04 	brls	800028a8 <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
800028a4:	3f f8       	mov	r8,-1
800028a6:	c2 78       	rjmp	800028f4 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800028a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800028b0:	a5 69       	lsl	r9,0x4
800028b2:	2f f9       	sub	r9,-1
800028b4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800028b8:	e2 18 80 00 	andl	r8,0x8000,COH
800028bc:	c1 a0       	breq	800028f0 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800028be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028c6:	ee fa ff fc 	ld.w	r10,r7[-4]
800028ca:	a7 69       	lsl	r9,0x6
800028cc:	f4 09 00 09 	add	r9,r10,r9
800028d0:	2e 49       	sub	r9,-28
800028d2:	72 09       	ld.w	r9,r9[0x0]
800028d4:	12 9a       	mov	r10,r9
800028d6:	e0 1a 00 00 	andl	r10,0x0
800028da:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800028de:	f5 e9 10 09 	or	r9,r10,r9
800028e2:	ee fa ff fc 	ld.w	r10,r7[-4]
800028e6:	a7 68       	lsl	r8,0x6
800028e8:	f4 08 00 08 	add	r8,r10,r8
800028ec:	2e 48       	sub	r8,-28
800028ee:	91 09       	st.w	r8[0x0],r9

  return value;
800028f0:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
800028f4:	10 9c       	mov	r12,r8
800028f6:	2f dd       	sub	sp,-12
800028f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800028fc <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800028fc:	eb cd 40 80 	pushm	r7,lr
80002900:	1a 97       	mov	r7,sp
80002902:	20 1d       	sub	sp,4
80002904:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80002908:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000290c:	e6 18 00 01 	andh	r8,0x1,COH
80002910:	5f 08       	sreq	r8
80002912:	5c 58       	castu.b	r8
}
80002914:	10 9c       	mov	r12,r8
80002916:	2f fd       	sub	sp,-4
80002918:	e3 cd 80 80 	ldm	sp++,r7,pc

8000291c <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8000291c:	eb cd 40 80 	pushm	r7,lr
80002920:	1a 97       	mov	r7,sp
80002922:	20 7d       	sub	sp,28
80002924:	ef 4c ff ec 	st.w	r7[-20],r12
80002928:	ef 4b ff e8 	st.w	r7[-24],r11
8000292c:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80002930:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002934:	f0 09 15 04 	lsl	r9,r8,0x4
80002938:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000293c:	10 39       	cp.w	r9,r8
8000293e:	e0 8b 00 04 	brhi	80002946 <usart_set_async_baudrate+0x2a>
80002942:	31 08       	mov	r8,16
80002944:	c0 28       	rjmp	80002948 <usart_set_async_baudrate+0x2c>
80002946:	30 88       	mov	r8,8
80002948:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8000294c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002950:	f0 09 15 03 	lsl	r9,r8,0x3
80002954:	ee fa ff f0 	ld.w	r10,r7[-16]
80002958:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000295c:	f4 08 02 48 	mul	r8,r10,r8
80002960:	a1 98       	lsr	r8,0x1
80002962:	f2 08 00 08 	add	r8,r9,r8
80002966:	ee fa ff f0 	ld.w	r10,r7[-16]
8000296a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000296e:	f4 09 02 49 	mul	r9,r10,r9
80002972:	f0 09 0d 08 	divu	r8,r8,r9
80002976:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8000297a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000297e:	a3 98       	lsr	r8,0x3
80002980:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
80002984:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002988:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000298c:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80002990:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002994:	58 08       	cp.w	r8,0
80002996:	c0 70       	breq	800029a4 <usart_set_async_baudrate+0x88>
80002998:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000299c:	e0 48 ff ff 	cp.w	r8,65535
800029a0:	e0 88 00 04 	brls	800029a8 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
800029a4:	30 18       	mov	r8,1
800029a6:	c2 08       	rjmp	800029e6 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
800029a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029ac:	70 18       	ld.w	r8,r8[0x4]
800029ae:	10 99       	mov	r9,r8
800029b0:	e4 19 ff f7 	andh	r9,0xfff7
800029b4:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
800029b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029bc:	59 08       	cp.w	r8,16
800029be:	c0 40       	breq	800029c6 <usart_set_async_baudrate+0xaa>
800029c0:	e8 68 00 00 	mov	r8,524288
800029c4:	c0 28       	rjmp	800029c8 <usart_set_async_baudrate+0xac>
800029c6:	30 08       	mov	r8,0
800029c8:	10 49       	or	r9,r8
800029ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029ce:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
800029d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029d4:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
800029d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800029dc:	10 49       	or	r9,r8
800029de:	ee f8 ff ec 	ld.w	r8,r7[-20]
800029e2:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800029e4:	30 08       	mov	r8,0
}
800029e6:	10 9c       	mov	r12,r8
800029e8:	2f 9d       	sub	sp,-28
800029ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800029ee:	d7 03       	nop

800029f0 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800029f0:	eb cd 40 80 	pushm	r7,lr
800029f4:	1a 97       	mov	r7,sp
800029f6:	20 2d       	sub	sp,8
800029f8:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800029fc:	e1 b8 00 00 	mfsr	r8,0x0
80002a00:	10 9c       	mov	r12,r8
80002a02:	f0 1f 00 18 	mcall	80002a60 <usart_reset+0x70>
80002a06:	18 98       	mov	r8,r12
80002a08:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
80002a0c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002a10:	30 08       	mov	r8,0
80002a12:	f0 09 18 00 	cp.b	r9,r8
80002a16:	c0 20       	breq	80002a1a <usart_reset+0x2a>
80002a18:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
80002a1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a1e:	3f f9       	mov	r9,-1
80002a20:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80002a22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a26:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80002a28:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002a2c:	30 08       	mov	r8,0
80002a2e:	f0 09 18 00 	cp.b	r9,r8
80002a32:	c0 20       	breq	80002a36 <usart_reset+0x46>
80002a34:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80002a36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a3a:	30 09       	mov	r9,0
80002a3c:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
80002a3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a42:	30 09       	mov	r9,0
80002a44:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
80002a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a4a:	30 09       	mov	r9,0
80002a4c:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80002a4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a52:	ea 69 61 0c 	mov	r9,680204
80002a56:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
80002a58:	2f ed       	sub	sp,-8
80002a5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a5e:	00 00       	add	r0,r0
80002a60:	80 00       	ld.sh	r0,r0[0x0]
80002a62:	28 fc       	sub	r12,-113

80002a64 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80002a64:	eb cd 40 80 	pushm	r7,lr
80002a68:	1a 97       	mov	r7,sp
80002a6a:	20 3d       	sub	sp,12
80002a6c:	ef 4c ff fc 	st.w	r7[-4],r12
80002a70:	ef 4b ff f8 	st.w	r7[-8],r11
80002a74:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80002a78:	ee fc ff fc 	ld.w	r12,r7[-4]
80002a7c:	f0 1f 00 54 	mcall	80002bcc <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
80002a80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a84:	58 08       	cp.w	r8,0
80002a86:	c3 90       	breq	80002af8 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80002a88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a8c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002a8e:	30 48       	mov	r8,4
80002a90:	f0 09 18 00 	cp.b	r9,r8
80002a94:	e0 88 00 32 	brls	80002af8 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
80002a98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a9c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002a9e:	30 98       	mov	r8,9
80002aa0:	f0 09 18 00 	cp.b	r9,r8
80002aa4:	e0 8b 00 2a 	brhi	80002af8 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80002aa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002aac:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002aae:	30 78       	mov	r8,7
80002ab0:	f0 09 18 00 	cp.b	r9,r8
80002ab4:	e0 8b 00 22 	brhi	80002af8 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80002ab8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002abc:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002abe:	e0 68 01 01 	mov	r8,257
80002ac2:	f0 09 19 00 	cp.h	r9,r8
80002ac6:	e0 8b 00 19 	brhi	80002af8 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
80002aca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ace:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002ad2:	30 38       	mov	r8,3
80002ad4:	f0 09 18 00 	cp.b	r9,r8
80002ad8:	e0 8b 00 10 	brhi	80002af8 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002adc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002ae0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ae4:	70 08       	ld.w	r8,r8[0x0]
80002ae6:	12 9a       	mov	r10,r9
80002ae8:	10 9b       	mov	r11,r8
80002aea:	ee fc ff fc 	ld.w	r12,r7[-4]
80002aee:	f0 1f 00 39 	mcall	80002bd0 <usart_init_rs232+0x16c>
80002af2:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002af4:	58 18       	cp.w	r8,1
80002af6:	c0 31       	brne	80002afc <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80002af8:	30 18       	mov	r8,1
80002afa:	c6 48       	rjmp	80002bc2 <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
80002afc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b00:	11 c9       	ld.ub	r9,r8[0x4]
80002b02:	30 98       	mov	r8,9
80002b04:	f0 09 18 00 	cp.b	r9,r8
80002b08:	c0 a1       	brne	80002b1c <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
80002b0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b0e:	70 18       	ld.w	r8,r8[0x4]
80002b10:	10 99       	mov	r9,r8
80002b12:	b1 b9       	sbr	r9,0x11
80002b14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b18:	91 19       	st.w	r8[0x4],r9
80002b1a:	c0 d8       	rjmp	80002b34 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002b1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b20:	70 19       	ld.w	r9,r8[0x4]
80002b22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b26:	11 c8       	ld.ub	r8,r8[0x4]
80002b28:	20 58       	sub	r8,5
80002b2a:	a7 68       	lsl	r8,0x6
80002b2c:	10 49       	or	r9,r8
80002b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b32:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002b34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b38:	70 19       	ld.w	r9,r8[0x4]
80002b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b3e:	11 d8       	ld.ub	r8,r8[0x5]
80002b40:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
80002b44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b48:	f1 38 00 08 	ld.ub	r8,r8[8]
80002b4c:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80002b4e:	f5 e8 10 08 	or	r8,r10,r8
80002b52:	10 49       	or	r9,r8
80002b54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b58:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002b5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b5e:	90 39       	ld.sh	r9,r8[0x6]
80002b60:	30 28       	mov	r8,2
80002b62:	f0 09 19 00 	cp.h	r9,r8
80002b66:	e0 88 00 14 	brls	80002b8e <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
80002b6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b6e:	70 18       	ld.w	r8,r8[0x4]
80002b70:	10 99       	mov	r9,r8
80002b72:	ad b9       	sbr	r9,0xd
80002b74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b78:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002b7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b7e:	90 38       	ld.sh	r8,r8[0x6]
80002b80:	5c 78       	castu.h	r8
80002b82:	20 28       	sub	r8,2
80002b84:	10 99       	mov	r9,r8
80002b86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b8a:	91 a9       	st.w	r8[0x28],r9
80002b8c:	c0 d8       	rjmp	80002ba6 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80002b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b92:	70 19       	ld.w	r9,r8[0x4]
80002b94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002b98:	90 38       	ld.sh	r8,r8[0x6]
80002b9a:	5c 78       	castu.h	r8
80002b9c:	ad 68       	lsl	r8,0xc
80002b9e:	10 49       	or	r9,r8
80002ba0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ba4:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80002ba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002baa:	70 18       	ld.w	r8,r8[0x4]
80002bac:	10 99       	mov	r9,r8
80002bae:	e0 19 ff f0 	andl	r9,0xfff0
80002bb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bb6:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80002bb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bbc:	35 09       	mov	r9,80
80002bbe:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80002bc0:	30 08       	mov	r8,0
}
80002bc2:	10 9c       	mov	r12,r8
80002bc4:	2f dd       	sub	sp,-12
80002bc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bca:	00 00       	add	r0,r0
80002bcc:	80 00       	ld.sh	r0,r0[0x0]
80002bce:	29 f0       	sub	r0,-97
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	29 1c       	sub	r12,-111

80002bd4 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80002bd4:	eb cd 40 80 	pushm	r7,lr
80002bd8:	1a 97       	mov	r7,sp
80002bda:	20 3d       	sub	sp,12
80002bdc:	ef 4c ff f8 	st.w	r7[-8],r12
80002be0:	ef 4b ff f4 	st.w	r7[-12],r11
80002be4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002be8:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bf0:	70 58       	ld.w	r8,r8[0x14]
80002bf2:	e2 18 00 02 	andl	r8,0x2,COH
80002bf6:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80002bf8:	58 08       	cp.w	r8,0
80002bfa:	c0 a0       	breq	80002c0e <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
80002bfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c00:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80002c04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c08:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
80002c0a:	30 08       	mov	r8,0
80002c0c:	c0 28       	rjmp	80002c10 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
80002c0e:	30 28       	mov	r8,2
}
80002c10:	10 9c       	mov	r12,r8
80002c12:	2f dd       	sub	sp,-12
80002c14:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c18 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002c18:	eb cd 40 80 	pushm	r7,lr
80002c1c:	1a 97       	mov	r7,sp
80002c1e:	20 3d       	sub	sp,12
80002c20:	ef 4c ff f8 	st.w	r7[-8],r12
80002c24:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80002c28:	e0 68 27 10 	mov	r8,10000
80002c2c:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80002c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c34:	58 08       	cp.w	r8,0
80002c36:	5f 08       	sreq	r8
80002c38:	5c 58       	castu.b	r8
80002c3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c3e:	20 19       	sub	r9,1
80002c40:	ef 49 ff fc 	st.w	r7[-4],r9
80002c44:	58 08       	cp.w	r8,0
80002c46:	c0 30       	breq	80002c4c <usart_putchar+0x34>
80002c48:	3f f8       	mov	r8,-1
80002c4a:	c0 b8       	rjmp	80002c60 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002c4c:	ee fb ff f4 	ld.w	r11,r7[-12]
80002c50:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c54:	f0 1f 00 05 	mcall	80002c68 <usart_putchar+0x50>
80002c58:	18 98       	mov	r8,r12
80002c5a:	58 08       	cp.w	r8,0
80002c5c:	ce a1       	brne	80002c30 <usart_putchar+0x18>

  return USART_SUCCESS;
80002c5e:	30 08       	mov	r8,0
}
80002c60:	10 9c       	mov	r12,r8
80002c62:	2f dd       	sub	sp,-12
80002c64:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c68:	80 00       	ld.sh	r0,r0[0x0]
80002c6a:	2b d4       	sub	r4,-67

80002c6c <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
80002c6c:	eb cd 40 80 	pushm	r7,lr
80002c70:	1a 97       	mov	r7,sp
80002c72:	20 2d       	sub	sp,8
80002c74:	ef 4c ff fc 	st.w	r7[-4],r12
80002c78:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
80002c7c:	c0 e8       	rjmp	80002c98 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
80002c7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c82:	11 88       	ld.ub	r8,r8[0x0]
80002c84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c88:	2f f9       	sub	r9,-1
80002c8a:	ef 49 ff f8 	st.w	r7[-8],r9
80002c8e:	10 9b       	mov	r11,r8
80002c90:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c94:	f0 1f 00 05 	mcall	80002ca8 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
80002c98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c9c:	11 88       	ld.ub	r8,r8[0x0]
80002c9e:	58 08       	cp.w	r8,0
80002ca0:	ce f1       	brne	80002c7e <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
80002ca2:	2f ed       	sub	sp,-8
80002ca4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ca8:	80 00       	ld.sh	r0,r0[0x0]
80002caa:	2c 18       	sub	r8,-63

80002cac <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80002cac:	eb cd 40 80 	pushm	r7,lr
80002cb0:	1a 97       	mov	r7,sp
80002cb2:	20 1d       	sub	sp,4
80002cb4:	ef 4c ff fc 	st.w	r7[-4],r12
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80002cb8:	ee fb ff fc 	ld.w	r11,r7[-4]
80002cbc:	e0 6c e1 00 	mov	r12,57600
80002cc0:	f0 1f 00 03 	mcall	80002ccc <init_dbg_rs232+0x20>
}
80002cc4:	2f fd       	sub	sp,-4
80002cc6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cca:	00 00       	add	r0,r0
80002ccc:	80 00       	ld.sh	r0,r0[0x0]
80002cce:	2c d0       	sub	r0,-51

80002cd0 <init_dbg_rs232_ex>:


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80002cd0:	eb cd 40 80 	pushm	r7,lr
80002cd4:	1a 97       	mov	r7,sp
80002cd6:	20 5d       	sub	sp,20
80002cd8:	ef 4c ff f0 	st.w	r7[-16],r12
80002cdc:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80002ce0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ce4:	ef 48 ff f4 	st.w	r7[-12],r8
80002ce8:	30 88       	mov	r8,8
80002cea:	ef 68 ff f8 	st.b	r7[-8],r8
80002cee:	30 48       	mov	r8,4
80002cf0:	ef 68 ff f9 	st.b	r7[-7],r8
80002cf4:	30 08       	mov	r8,0
80002cf6:	ef 58 ff fa 	st.h	r7[-6],r8
80002cfa:	30 08       	mov	r8,0
80002cfc:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80002d00:	30 2b       	mov	r11,2
80002d02:	48 8c       	lddpc	r12,80002d20 <init_dbg_rs232_ex+0x50>
80002d04:	f0 1f 00 08 	mcall	80002d24 <init_dbg_rs232_ex+0x54>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80002d08:	ee c8 00 0c 	sub	r8,r7,12
80002d0c:	ee fa ff ec 	ld.w	r10,r7[-20]
80002d10:	10 9b       	mov	r11,r8
80002d12:	fe 7c 18 00 	mov	r12,-59392
80002d16:	f0 1f 00 05 	mcall	80002d28 <init_dbg_rs232_ex+0x58>
}
80002d1a:	2f bd       	sub	sp,-20
80002d1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	39 20       	mov	r0,-110
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	21 3c       	sub	r12,19
80002d28:	80 00       	ld.sh	r0,r0[0x0]
80002d2a:	2a 64       	sub	r4,-90

80002d2c <print_dbg>:


void print_dbg(const char *str)
{
80002d2c:	eb cd 40 80 	pushm	r7,lr
80002d30:	1a 97       	mov	r7,sp
80002d32:	20 1d       	sub	sp,4
80002d34:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(DBG_USART, str);
80002d38:	ee fb ff fc 	ld.w	r11,r7[-4]
80002d3c:	fe 7c 18 00 	mov	r12,-59392
80002d40:	f0 1f 00 03 	mcall	80002d4c <print_dbg+0x20>
}
80002d44:	2f fd       	sub	sp,-4
80002d46:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d4a:	00 00       	add	r0,r0
80002d4c:	80 00       	ld.sh	r0,r0[0x0]
80002d4e:	2d 74       	sub	r4,-41

80002d50 <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
80002d50:	eb cd 40 80 	pushm	r7,lr
80002d54:	1a 97       	mov	r7,sp
80002d56:	20 1d       	sub	sp,4
80002d58:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
80002d5c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002d60:	fe 7c 18 00 	mov	r12,-59392
80002d64:	f0 1f 00 03 	mcall	80002d70 <print_dbg_ulong+0x20>
}
80002d68:	2f fd       	sub	sp,-4
80002d6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d6e:	00 00       	add	r0,r0
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	2d 9c       	sub	r12,-39

80002d74 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
80002d74:	eb cd 40 80 	pushm	r7,lr
80002d78:	1a 97       	mov	r7,sp
80002d7a:	20 2d       	sub	sp,8
80002d7c:	ef 4c ff fc 	st.w	r7[-4],r12
80002d80:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80002d84:	ee fb ff f8 	ld.w	r11,r7[-8]
80002d88:	ee fc ff fc 	ld.w	r12,r7[-4]
80002d8c:	f0 1f 00 03 	mcall	80002d98 <print+0x24>
}
80002d90:	2f ed       	sub	sp,-8
80002d92:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d96:	00 00       	add	r0,r0
80002d98:	80 00       	ld.sh	r0,r0[0x0]
80002d9a:	2c 6c       	sub	r12,-58

80002d9c <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80002d9c:	eb cd 40 80 	pushm	r7,lr
80002da0:	1a 97       	mov	r7,sp
80002da2:	20 6d       	sub	sp,24
80002da4:	ef 4c ff ec 	st.w	r7[-20],r12
80002da8:	ef 4b ff e8 	st.w	r7[-24],r11
  char tmp[11];
  int i = sizeof(tmp) - 1;
80002dac:	30 a8       	mov	r8,10
80002dae:	ef 48 ff fc 	st.w	r7[-4],r8

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
80002db2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002db6:	ee 08 00 09 	add	r9,r7,r8
80002dba:	30 08       	mov	r8,0
80002dbc:	f3 68 ff f0 	st.b	r9[-16],r8
  do
  {
    tmp[--i] = '0' + n % 10;
80002dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002dc4:	20 18       	sub	r8,1
80002dc6:	ef 48 ff fc 	st.w	r7[-4],r8
80002dca:	ee fb ff fc 	ld.w	r11,r7[-4]
80002dce:	ee fa ff e8 	ld.w	r10,r7[-24]
80002dd2:	e0 68 cc cd 	mov	r8,52429
80002dd6:	ea 18 cc cc 	orh	r8,0xcccc
80002dda:	f4 08 06 48 	mulu.d	r8,r10,r8
80002dde:	a3 99       	lsr	r9,0x3
80002de0:	12 98       	mov	r8,r9
80002de2:	a3 68       	lsl	r8,0x2
80002de4:	12 08       	add	r8,r9
80002de6:	a1 78       	lsl	r8,0x1
80002de8:	f4 08 01 09 	sub	r9,r10,r8
80002dec:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80002df0:	2d 08       	sub	r8,-48
80002df2:	5c 58       	castu.b	r8
80002df4:	ee 0b 00 09 	add	r9,r7,r11
80002df8:	f3 68 ff f0 	st.b	r9[-16],r8
    n /= 10;
80002dfc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002e00:	e0 68 cc cd 	mov	r8,52429
80002e04:	ea 18 cc cc 	orh	r8,0xcccc
80002e08:	f2 08 06 48 	mulu.d	r8,r9,r8
80002e0c:	f2 08 16 03 	lsr	r8,r9,0x3
80002e10:	ef 48 ff e8 	st.w	r7[-24],r8
  } while (n);
80002e14:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002e18:	58 08       	cp.w	r8,0
80002e1a:	cd 31       	brne	80002dc0 <print_ulong+0x24>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
80002e1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002e20:	ee c8 00 10 	sub	r8,r7,16
80002e24:	12 08       	add	r8,r9
80002e26:	10 9b       	mov	r11,r8
80002e28:	ee fc ff ec 	ld.w	r12,r7[-20]
80002e2c:	f0 1f 00 03 	mcall	80002e38 <print_ulong+0x9c>
}
80002e30:	2f ad       	sub	sp,-24
80002e32:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e36:	00 00       	add	r0,r0
80002e38:	80 00       	ld.sh	r0,r0[0x0]
80002e3a:	2d 74       	sub	r4,-41

80002e3c <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002e3c:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002e40:	fe c0 f8 40 	sub	r0,pc,-1984

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002e44:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002e48:	d5 53       	csrf	0x15
  cp      r0, r1
80002e4a:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002e4c:	31 01       	mov	r1,16
  lda.w   r2, _data_lma
80002e4e:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002e50:	c0 72       	brcc	80002e5e <idata_load_loop_end>
  st.d    r0++, r4
80002e52:	fe c2 f5 12 	sub	r2,pc,-2798

80002e56 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80002e56:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002e58:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80002e5a:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002e5c:	cf d3       	brcs	80002e56 <idata_load_loop>

80002e5e <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002e5e:	31 00       	mov	r0,16
  mov     r2, 0
80002e60:	e0 61 01 08 	mov	r1,264
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80002e64:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002e66:	c0 62       	brcc	80002e72 <udata_clear_loop_end>
  brlo    udata_clear_loop
80002e68:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002e6a:	30 03       	mov	r3,0

80002e6c <udata_clear_loop>:
80002e6c:	a1 22       	st.d	r0++,r2
80002e6e:	02 30       	cp.w	r0,r1
80002e70:	cf e3       	brcs	80002e6c <udata_clear_loop>

80002e72 <udata_clear_loop_end>:
80002e72:	fe cf f9 fe 	sub	pc,pc,-1538
80002e76:	d7 03       	nop

80002e78 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80002e78:	eb cd 40 80 	pushm	r7,lr
80002e7c:	1a 97       	mov	r7,sp
80002e7e:	20 1d       	sub	sp,4
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e80:	e1 b8 00 00 	mfsr	r8,0x0
80002e84:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80002e88:	d3 03       	ssrf	0x10

	return flags;
80002e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002e8e:	10 9c       	mov	r12,r8
80002e90:	2f fd       	sub	sp,-4
80002e92:	e3 cd 80 80 	ldm	sp++,r7,pc

80002e96 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80002e96:	eb cd 40 80 	pushm	r7,lr
80002e9a:	1a 97       	mov	r7,sp
80002e9c:	20 1d       	sub	sp,4
80002e9e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80002ea2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ea6:	e6 18 00 01 	andh	r8,0x1,COH
80002eaa:	5f 08       	sreq	r8
80002eac:	5c 58       	castu.b	r8
}
80002eae:	10 9c       	mov	r12,r8
80002eb0:	2f fd       	sub	sp,-4
80002eb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eb6:	d7 03       	nop

80002eb8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80002eb8:	eb cd 40 80 	pushm	r7,lr
80002ebc:	1a 97       	mov	r7,sp
80002ebe:	20 1d       	sub	sp,4
80002ec0:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002ec4:	ee fc ff fc 	ld.w	r12,r7[-4]
80002ec8:	f0 1f 00 05 	mcall	80002edc <cpu_irq_restore+0x24>
80002ecc:	18 98       	mov	r8,r12
80002ece:	58 08       	cp.w	r8,0
80002ed0:	c0 20       	breq	80002ed4 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
80002ed2:	d5 03       	csrf	0x10
   }

	barrier();
}
80002ed4:	2f fd       	sub	sp,-4
80002ed6:	e3 cd 80 80 	ldm	sp++,r7,pc
80002eda:	00 00       	add	r0,r0
80002edc:	80 00       	ld.sh	r0,r0[0x0]
80002ede:	2e 96       	sub	r6,-23

80002ee0 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
80002ee0:	eb cd 40 80 	pushm	r7,lr
80002ee4:	1a 97       	mov	r7,sp
80002ee6:	20 3d       	sub	sp,12
80002ee8:	18 98       	mov	r8,r12
80002eea:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
80002eee:	f0 1f 00 1f 	mcall	80002f68 <osc_enable+0x88>
80002ef2:	18 98       	mov	r8,r12
80002ef4:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
80002ef8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002efc:	58 08       	cp.w	r8,0
80002efe:	c0 40       	breq	80002f06 <osc_enable+0x26>
80002f00:	58 28       	cp.w	r8,2
80002f02:	c1 90       	breq	80002f34 <osc_enable+0x54>
80002f04:	c2 b8       	rjmp	80002f5a <osc_enable+0x7a>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
80002f06:	e0 68 03 00 	mov	r8,768
80002f0a:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
80002f0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f12:	e8 18 00 07 	orl	r8,0x7
80002f16:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
80002f1a:	fe 78 0c 00 	mov	r8,-62464
80002f1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002f22:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80002f24:	fe 78 0c 00 	mov	r8,-62464
80002f28:	fe 79 0c 00 	mov	r9,-62464
80002f2c:	72 09       	ld.w	r9,r9[0x0]
80002f2e:	a3 a9       	sbr	r9,0x2
80002f30:	91 09       	st.w	r8[0x0],r9
		break;
80002f32:	c1 48       	rjmp	80002f5a <osc_enable+0x7a>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
80002f34:	e2 68 00 00 	mov	r8,131072
80002f38:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
80002f3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f40:	a9 a8       	sbr	r8,0x8
80002f42:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
80002f46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f4a:	a1 a8       	sbr	r8,0x0
80002f4c:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
80002f50:	fe 78 0c 00 	mov	r8,-62464
80002f54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002f58:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
80002f5a:	ee fc ff f8 	ld.w	r12,r7[-8]
80002f5e:	f0 1f 00 04 	mcall	80002f6c <osc_enable+0x8c>
}
80002f62:	2f dd       	sub	sp,-12
80002f64:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f68:	80 00       	ld.sh	r0,r0[0x0]
80002f6a:	2e 78       	sub	r8,-25
80002f6c:	80 00       	ld.sh	r0,r0[0x0]
80002f6e:	2e b8       	sub	r8,-21

80002f70 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
80002f70:	eb cd 40 80 	pushm	r7,lr
80002f74:	1a 97       	mov	r7,sp
80002f76:	20 1d       	sub	sp,4
80002f78:	18 98       	mov	r8,r12
80002f7a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80002f7e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002f82:	58 08       	cp.w	r8,0
80002f84:	c0 40       	breq	80002f8c <osc_is_ready+0x1c>
80002f86:	58 28       	cp.w	r8,2
80002f88:	c0 a0       	breq	80002f9c <osc_is_ready+0x2c>
80002f8a:	c1 18       	rjmp	80002fac <osc_is_ready+0x3c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80002f8c:	fe 78 0c 00 	mov	r8,-62464
80002f90:	71 58       	ld.w	r8,r8[0x54]
80002f92:	e2 18 00 80 	andl	r8,0x80,COH
80002f96:	5f 18       	srne	r8
80002f98:	5c 58       	castu.b	r8
80002f9a:	c0 a8       	rjmp	80002fae <osc_is_ready+0x3e>
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
80002f9c:	fe 78 0c 00 	mov	r8,-62464
80002fa0:	71 58       	ld.w	r8,r8[0x54]
80002fa2:	e2 18 02 00 	andl	r8,0x200,COH
80002fa6:	5f 18       	srne	r8
80002fa8:	5c 58       	castu.b	r8
80002faa:	c0 28       	rjmp	80002fae <osc_is_ready+0x3e>
#endif

	default:
		/* unhandled_case(id); */
		return false;
80002fac:	30 08       	mov	r8,0
	}
}
80002fae:	10 9c       	mov	r12,r8
80002fb0:	2f fd       	sub	sp,-4
80002fb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fb6:	d7 03       	nop

80002fb8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
80002fb8:	eb cd 40 80 	pushm	r7,lr
80002fbc:	1a 97       	mov	r7,sp
80002fbe:	20 1d       	sub	sp,4
80002fc0:	18 98       	mov	r8,r12
80002fc2:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
80002fc6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80002fca:	10 9c       	mov	r12,r8
80002fcc:	f0 1f 00 05 	mcall	80002fe0 <osc_wait_ready+0x28>
80002fd0:	18 98       	mov	r8,r12
80002fd2:	ec 18 00 01 	eorl	r8,0x1
80002fd6:	5c 58       	castu.b	r8
80002fd8:	cf 71       	brne	80002fc6 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
80002fda:	2f fd       	sub	sp,-4
80002fdc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fe0:	80 00       	ld.sh	r0,r0[0x0]
80002fe2:	2f 70       	sub	r0,-9

80002fe4 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
80002fe4:	eb cd 40 80 	pushm	r7,lr
80002fe8:	1a 97       	mov	r7,sp
80002fea:	20 1d       	sub	sp,4
80002fec:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80002ff0:	ee fb ff fc 	ld.w	r11,r7[-4]
80002ff4:	30 1c       	mov	r12,1
80002ff6:	f0 1f 00 03 	mcall	80003000 <sysclk_enable_hsb_module+0x1c>
}
80002ffa:	2f fd       	sub	sp,-4
80002ffc:	e3 cd 80 80 	ldm	sp++,r7,pc
80003000:	80 00       	ld.sh	r0,r0[0x0]
80003002:	30 58       	mov	r8,5

80003004 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
80003004:	eb cd 40 80 	pushm	r7,lr
80003008:	1a 97       	mov	r7,sp
8000300a:	20 3d       	sub	sp,12
8000300c:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
80003010:	f0 1f 00 10 	mcall	80003050 <sysclk_set_source+0x4c>
80003014:	18 98       	mov	r8,r12
80003016:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000301a:	fe 78 0c 00 	mov	r8,-62464
8000301e:	70 08       	ld.w	r8,r8[0x0]
80003020:	e0 18 ff fc 	andl	r8,0xfffc
80003024:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80003028:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000302c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003030:	f3 e8 10 08 	or	r8,r9,r8
80003034:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
80003038:	fe 78 0c 00 	mov	r8,-62464
8000303c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003040:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80003042:	ee fc ff f8 	ld.w	r12,r7[-8]
80003046:	f0 1f 00 04 	mcall	80003054 <sysclk_set_source+0x50>
}
8000304a:	2f dd       	sub	sp,-12
8000304c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003050:	80 00       	ld.sh	r0,r0[0x0]
80003052:	2e 78       	sub	r8,-25
80003054:	80 00       	ld.sh	r0,r0[0x0]
80003056:	2e b8       	sub	r8,-21

80003058 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
80003058:	eb cd 40 80 	pushm	r7,lr
8000305c:	1a 97       	mov	r7,sp
8000305e:	20 4d       	sub	sp,16
80003060:	ef 4c ff f4 	st.w	r7[-12],r12
80003064:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
80003068:	f0 1f 00 17 	mcall	800030c4 <sysclk_priv_enable_module+0x6c>
8000306c:	18 98       	mov	r8,r12
8000306e:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80003072:	fe 78 0c 00 	mov	r8,-62464
80003076:	71 58       	ld.w	r8,r8[0x54]
80003078:	e2 18 00 40 	andl	r8,0x40,COH
8000307c:	cf b0       	breq	80003072 <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000307e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003082:	a3 68       	lsl	r8,0x2
80003084:	e0 28 f3 f8 	sub	r8,62456
80003088:	70 08       	ld.w	r8,r8[0x0]
8000308a:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000308e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003092:	30 19       	mov	r9,1
80003094:	f2 08 09 48 	lsl	r8,r9,r8
80003098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000309c:	f3 e8 10 08 	or	r8,r9,r8
800030a0:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
800030a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030a8:	a3 68       	lsl	r8,0x2
800030aa:	e0 28 f3 f8 	sub	r8,62456
800030ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030b2:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
800030b4:	ee fc ff f8 	ld.w	r12,r7[-8]
800030b8:	f0 1f 00 04 	mcall	800030c8 <sysclk_priv_enable_module+0x70>
}
800030bc:	2f cd       	sub	sp,-16
800030be:	e3 cd 80 80 	ldm	sp++,r7,pc
800030c2:	00 00       	add	r0,r0
800030c4:	80 00       	ld.sh	r0,r0[0x0]
800030c6:	2e 78       	sub	r8,-25
800030c8:	80 00       	ld.sh	r0,r0[0x0]
800030ca:	2e b8       	sub	r8,-21

800030cc <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
800030cc:	eb cd 40 80 	pushm	r7,lr
800030d0:	1a 97       	mov	r7,sp
800030d2:	20 2d       	sub	sp,8
800030d4:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
800030d8:	f0 1f 00 0f 	mcall	80003114 <sysclk_enable_pbb_module+0x48>
800030dc:	18 98       	mov	r8,r12
800030de:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_pbb_refcount)
800030e2:	48 e8       	lddpc	r8,80003118 <sysclk_enable_pbb_module+0x4c>
800030e4:	11 88       	ld.ub	r8,r8[0x0]
800030e6:	58 08       	cp.w	r8,0
800030e8:	c0 41       	brne	800030f0 <sysclk_enable_pbb_module+0x24>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
800030ea:	30 2c       	mov	r12,2
800030ec:	f0 1f 00 0c 	mcall	8000311c <sysclk_enable_pbb_module+0x50>

	sysclk_pbb_refcount++;
800030f0:	48 a8       	lddpc	r8,80003118 <sysclk_enable_pbb_module+0x4c>
800030f2:	11 88       	ld.ub	r8,r8[0x0]
800030f4:	2f f8       	sub	r8,-1
800030f6:	5c 58       	castu.b	r8
800030f8:	48 89       	lddpc	r9,80003118 <sysclk_enable_pbb_module+0x4c>
800030fa:	b2 88       	st.b	r9[0x0],r8

	cpu_irq_restore(flags);
800030fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80003100:	f0 1f 00 08 	mcall	80003120 <sysclk_enable_pbb_module+0x54>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80003104:	ee fb ff f8 	ld.w	r11,r7[-8]
80003108:	30 3c       	mov	r12,3
8000310a:	f0 1f 00 07 	mcall	80003124 <sysclk_enable_pbb_module+0x58>
}
8000310e:	2f ed       	sub	sp,-8
80003110:	e3 cd 80 80 	ldm	sp++,r7,pc
80003114:	80 00       	ld.sh	r0,r0[0x0]
80003116:	2e 78       	sub	r8,-25
80003118:	00 00       	add	r0,r0
8000311a:	00 fc       	st.b	--r0,r12
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	2f e4       	sub	r4,-2
80003120:	80 00       	ld.sh	r0,r0[0x0]
80003122:	2e b8       	sub	r8,-21
80003124:	80 00       	ld.sh	r0,r0[0x0]
80003126:	30 58       	mov	r8,5

80003128 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80003128:	eb cd 40 80 	pushm	r7,lr
8000312c:	1a 97       	mov	r7,sp
		/* Already running from RCOSC */
		break;

#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
8000312e:	30 0c       	mov	r12,0
80003130:	f0 1f 00 0b 	mcall	8000315c <sysclk_init+0x34>
		osc_wait_ready(OSC_ID_OSC0);
80003134:	30 0c       	mov	r12,0
80003136:	f0 1f 00 0b 	mcall	80003160 <sysclk_init+0x38>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
8000313a:	e0 6c 1b 00 	mov	r12,6912
8000313e:	ea 1c 00 b7 	orh	r12,0xb7
80003142:	f0 1f 00 09 	mcall	80003164 <sysclk_init+0x3c>
		sysclk_set_source(SYSCLK_SRC_OSC0);
80003146:	30 1c       	mov	r12,1
80003148:	f0 1f 00 08 	mcall	80003168 <sysclk_init+0x40>
	/* If the user has specified clock masks, enable only requested clocks */
#if defined(CONFIG_SYSCLK_INIT_CPUMASK)
	AVR32_PM.cpumask = SYSCLK_INIT_MINIMAL_CPUMASK | CONFIG_SYSCLK_INIT_CPUMASK;
#endif
#if defined(CONFIG_SYSCLK_INIT_PBAMASK)
	AVR32_PM.pbamask = SYSCLK_INIT_MINIMAL_PBAMASK | CONFIG_SYSCLK_INIT_PBAMASK;
8000314c:	fe 78 0c 00 	mov	r8,-62464
80003150:	e0 69 02 0b 	mov	r9,523
80003154:	91 49       	st.w	r8[0x10],r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80003156:	e3 cd 80 80 	ldm	sp++,r7,pc
8000315a:	00 00       	add	r0,r0
8000315c:	80 00       	ld.sh	r0,r0[0x0]
8000315e:	2e e0       	sub	r0,-18
80003160:	80 00       	ld.sh	r0,r0[0x0]
80003162:	2f b8       	sub	r8,-5
80003164:	80 00       	ld.sh	r0,r0[0x0]
80003166:	21 04       	sub	r4,16
80003168:	80 00       	ld.sh	r0,r0[0x0]
8000316a:	30 04       	mov	r4,0
8000316c:	1b 5b       	ld.sh	r11,--sp
8000316e:	35 3b       	mov	r11,83
80003170:	31 48       	mov	r8,20
80003172:	00 00       	add	r0,r0
80003174:	41 54       	lddsp	r4,sp[0x54]
80003176:	4d 45       	lddpc	r5,800032c4 <sysclk_enable_peripheral_clock+0xac>
80003178:	4c 20       	lddpc	r0,80003280 <sysclk_enable_peripheral_clock+0x68>
8000317a:	41 56       	lddsp	r6,sp[0x54]
8000317c:	52 20       	stdsp	sp[0x88],r0
8000317e:	55 43       	stdsp	sp[0x150],r3
80003180:	33 20       	mov	r0,50
80003182:	2d 20       	sub	r0,-46
80003184:	54 69       	stdsp	sp[0x118],r9
80003186:	6d 65       	ld.w	r5,r6[0x58]
80003188:	72 2f       	ld.w	pc,r9[0x8]
8000318a:	43 6f       	lddsp	pc,sp[0xd8]
8000318c:	75 6e       	ld.w	lr,r10[0x58]
8000318e:	74 65       	ld.w	r5,r10[0x18]
80003190:	72 20       	ld.w	r0,r9[0x8]
80003192:	45 78       	lddsp	r8,sp[0x15c]
80003194:	61 6d       	ld.w	sp,r0[0x58]
80003196:	70 6c       	ld.w	r12,r8[0x18]
80003198:	65 20       	ld.w	r0,r2[0x48]
8000319a:	33 0a       	mov	r10,48
8000319c:	0d 54       	ld.sh	r4,--r6
8000319e:	69 6d       	ld.w	sp,r4[0x58]
800031a0:	65 72       	ld.w	r2,r2[0x5c]
800031a2:	3a 20       	mov	r0,-94
800031a4:	00 00       	add	r0,r0
800031a6:	00 00       	add	r0,r0
800031a8:	20 73       	sub	r3,7
	...

800031ac <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
800031ac:	eb cd 40 80 	pushm	r7,lr
800031b0:	1a 97       	mov	r7,sp
	case SYSCLK_SRC_RCSYS:
		return OSC_SLOW_NOMINAL_HZ;

#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		return BOARD_OSC0_HZ;
800031b2:	e0 68 1b 00 	mov	r8,6912
800031b6:	ea 18 00 b7 	orh	r8,0xb7

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
800031ba:	10 9c       	mov	r12,r8
800031bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800031c0 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
800031c0:	eb cd 40 80 	pushm	r7,lr
800031c4:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
800031c6:	f0 1f 00 04 	mcall	800031d4 <sysclk_get_pba_hz+0x14>
800031ca:	18 98       	mov	r8,r12
}
800031cc:	10 9c       	mov	r12,r8
800031ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800031d2:	00 00       	add	r0,r0
800031d4:	80 00       	ld.sh	r0,r0[0x0]
800031d6:	31 ac       	mov	r12,26

800031d8 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
800031d8:	eb cd 40 80 	pushm	r7,lr
800031dc:	1a 97       	mov	r7,sp
800031de:	20 1d       	sub	sp,4
800031e0:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800031e4:	ee fb ff fc 	ld.w	r11,r7[-4]
800031e8:	30 1c       	mov	r12,1
800031ea:	f0 1f 00 03 	mcall	800031f4 <sysclk_enable_hsb_module+0x1c>
}
800031ee:	2f fd       	sub	sp,-4
800031f0:	e3 cd 80 80 	ldm	sp++,r7,pc
800031f4:	80 00       	ld.sh	r0,r0[0x0]
800031f6:	30 58       	mov	r8,5

800031f8 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
800031f8:	eb cd 40 80 	pushm	r7,lr
800031fc:	1a 97       	mov	r7,sp
800031fe:	20 1d       	sub	sp,4
80003200:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80003204:	ee fb ff fc 	ld.w	r11,r7[-4]
80003208:	30 2c       	mov	r12,2
8000320a:	f0 1f 00 03 	mcall	80003214 <sysclk_enable_pba_module+0x1c>
}
8000320e:	2f fd       	sub	sp,-4
80003210:	e3 cd 80 80 	ldm	sp++,r7,pc
80003214:	80 00       	ld.sh	r0,r0[0x0]
80003216:	30 58       	mov	r8,5

80003218 <sysclk_enable_peripheral_clock>:
 *  has an associated clock on the HSB bus, this will be enabled also.
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
80003218:	eb cd 40 80 	pushm	r7,lr
8000321c:	1a 97       	mov	r7,sp
8000321e:	20 1d       	sub	sp,4
80003220:	ef 4c ff fc 	st.w	r7[-4],r12
	switch ((uintptr_t)module) {
80003224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003228:	fe 58 14 00 	cp.w	r8,-60416
8000322c:	c7 f0       	breq	8000332a <sysclk_enable_peripheral_clock+0x112>
8000322e:	e0 8b 00 30 	brhi	8000328e <sysclk_enable_peripheral_clock+0x76>
80003232:	fe 48 1c 00 	cp.w	r8,-123904
80003236:	e0 80 00 b3 	breq	8000339c <sysclk_enable_peripheral_clock+0x184>
8000323a:	e0 8b 00 16 	brhi	80003266 <sysclk_enable_peripheral_clock+0x4e>
8000323e:	fe 48 10 00 	cp.w	r8,-126976
80003242:	e0 80 00 94 	breq	8000336a <sysclk_enable_peripheral_clock+0x152>
80003246:	e0 8b 00 07 	brhi	80003254 <sysclk_enable_peripheral_clock+0x3c>
8000324a:	fe 48 00 00 	cp.w	r8,-131072
8000324e:	e0 80 00 92 	breq	80003372 <sysclk_enable_peripheral_clock+0x15a>
		break;
#endif

	default:
		Assert(false);
		return;
80003252:	ca d8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003254:	fe 48 14 00 	cp.w	r8,-125952
80003258:	e0 80 00 94 	breq	80003380 <sysclk_enable_peripheral_clock+0x168>
8000325c:	fe 48 18 00 	cp.w	r8,-124928
80003260:	e0 80 00 97 	breq	8000338e <sysclk_enable_peripheral_clock+0x176>
		break;
#endif

	default:
		Assert(false);
		return;
80003264:	ca 48       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003266:	fe 58 08 00 	cp.w	r8,-63488
8000326a:	c3 d0       	breq	800032e4 <sysclk_enable_peripheral_clock+0xcc>
8000326c:	e0 8b 00 0a 	brhi	80003280 <sysclk_enable_peripheral_clock+0x68>
80003270:	fe 48 20 00 	cp.w	r8,-122880
80003274:	e0 80 00 98 	breq	800033a4 <sysclk_enable_peripheral_clock+0x18c>
80003278:	fe 58 00 00 	cp.w	r8,-65536
8000327c:	c3 c0       	breq	800032f4 <sysclk_enable_peripheral_clock+0xdc>
		break;
#endif

	default:
		Assert(false);
		return;
8000327e:	c9 78       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
80003280:	fe 58 0c 00 	cp.w	r8,-62464
80003284:	c3 f0       	breq	80003302 <sysclk_enable_peripheral_clock+0xea>
80003286:	fe 58 10 00 	cp.w	r8,-61440
8000328a:	c3 10       	breq	800032ec <sysclk_enable_peripheral_clock+0xd4>
		break;
#endif

	default:
		Assert(false);
		return;
8000328c:	c9 08       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
8000328e:	fe 58 2c 00 	cp.w	r8,-54272
80003292:	c4 80       	breq	80003322 <sysclk_enable_peripheral_clock+0x10a>
80003294:	e0 8b 00 15 	brhi	800032be <sysclk_enable_peripheral_clock+0xa6>
80003298:	fe 58 20 00 	cp.w	r8,-57344
8000329c:	c5 30       	breq	80003342 <sysclk_enable_peripheral_clock+0x12a>
8000329e:	e0 8b 00 09 	brhi	800032b0 <sysclk_enable_peripheral_clock+0x98>
800032a2:	fe 58 18 00 	cp.w	r8,-59392
800032a6:	c4 60       	breq	80003332 <sysclk_enable_peripheral_clock+0x11a>
800032a8:	fe 58 1c 00 	cp.w	r8,-58368
800032ac:	c4 70       	breq	8000333a <sysclk_enable_peripheral_clock+0x122>
		break;
#endif

	default:
		Assert(false);
		return;
800032ae:	c7 f8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800032b0:	fe 58 24 00 	cp.w	r8,-56320
800032b4:	c2 f0       	breq	80003312 <sysclk_enable_peripheral_clock+0xfa>
800032b6:	fe 58 28 00 	cp.w	r8,-55296
800032ba:	c3 00       	breq	8000331a <sysclk_enable_peripheral_clock+0x102>
		break;
#endif

	default:
		Assert(false);
		return;
800032bc:	c7 88       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800032be:	fe 58 38 00 	cp.w	r8,-51200
800032c2:	c4 c0       	breq	8000335a <sysclk_enable_peripheral_clock+0x142>
800032c4:	e0 8b 00 09 	brhi	800032d6 <sysclk_enable_peripheral_clock+0xbe>
800032c8:	fe 58 30 00 	cp.w	r8,-53248
800032cc:	c3 f0       	breq	8000334a <sysclk_enable_peripheral_clock+0x132>
800032ce:	fe 58 34 00 	cp.w	r8,-52224
800032d2:	c4 00       	breq	80003352 <sysclk_enable_peripheral_clock+0x13a>
		break;
#endif

	default:
		Assert(false);
		return;
800032d4:	c6 c8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
800032d6:	fe 58 3c 00 	cp.w	r8,-50176
800032da:	c1 80       	breq	8000330a <sysclk_enable_peripheral_clock+0xf2>
800032dc:	fe 58 40 00 	cp.w	r8,-49152
800032e0:	c4 10       	breq	80003362 <sysclk_enable_peripheral_clock+0x14a>
		break;
#endif

	default:
		Assert(false);
		return;
800032e2:	c6 58       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	switch ((uintptr_t)module) {
	case AVR32_INTC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_INTC);
800032e4:	30 0c       	mov	r12,0
800032e6:	f0 1f 00 34 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
800032ea:	c6 18       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_GPIO_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_GPIO);
800032ec:	30 1c       	mov	r12,1
800032ee:	f0 1f 00 32 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
800032f2:	c5 d8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_PDCA_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_PDCA_HSB);
800032f4:	30 5c       	mov	r12,5
800032f6:	f0 1f 00 31 	mcall	800033b8 <sysclk_enable_peripheral_clock+0x1a0>
		sysclk_enable_pba_module(SYSCLK_PDCA_PB);
800032fa:	30 2c       	mov	r12,2
800032fc:	f0 1f 00 2e 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003300:	c5 68       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_PM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PM);
80003302:	30 3c       	mov	r12,3
80003304:	f0 1f 00 2c 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003308:	c5 28       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_ADC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_ADC);
8000330a:	30 4c       	mov	r12,4
8000330c:	f0 1f 00 2a 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003310:	c4 e8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_SPI0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI0);
80003312:	30 5c       	mov	r12,5
80003314:	f0 1f 00 28 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003318:	c4 a8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_SPI1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SPI1);
8000331a:	30 6c       	mov	r12,6
8000331c:	f0 1f 00 26 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003320:	c4 68       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_TWI_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TWI);
80003322:	30 7c       	mov	r12,7
80003324:	f0 1f 00 24 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003328:	c4 28       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_USART0_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART0);
8000332a:	30 8c       	mov	r12,8
8000332c:	f0 1f 00 22 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003330:	c3 e8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_USART1_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART1);
80003332:	30 9c       	mov	r12,9
80003334:	f0 1f 00 20 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003338:	c3 a8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_USART2_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART2);
8000333a:	30 ac       	mov	r12,10
8000333c:	f0 1f 00 1e 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003340:	c3 68       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_USART3_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_USART3);
80003342:	30 bc       	mov	r12,11
80003344:	f0 1f 00 1c 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003348:	c3 28       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_PWM_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_PWM);
8000334a:	30 cc       	mov	r12,12
8000334c:	f0 1f 00 1a 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003350:	c2 e8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_SSC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_SSC);
80003352:	30 dc       	mov	r12,13
80003354:	f0 1f 00 18 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003358:	c2 a8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_TC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_TC);
8000335a:	30 ec       	mov	r12,14
8000335c:	f0 1f 00 16 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003360:	c2 68       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_ABDAC_ADDRESS:
		sysclk_enable_pba_module(SYSCLK_DAC);
80003362:	30 fc       	mov	r12,15
80003364:	f0 1f 00 14 	mcall	800033b4 <sysclk_enable_peripheral_clock+0x19c>
		break;
80003368:	c2 28       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_HMATRIX_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_HMATRIX);
8000336a:	30 0c       	mov	r12,0
8000336c:	f0 1f 00 14 	mcall	800033bc <sysclk_enable_peripheral_clock+0x1a4>
		break;
80003370:	c1 e8       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_USBB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
80003372:	30 3c       	mov	r12,3
80003374:	f0 1f 00 11 	mcall	800033b8 <sysclk_enable_peripheral_clock+0x1a0>
		sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003378:	30 1c       	mov	r12,1
8000337a:	f0 1f 00 11 	mcall	800033bc <sysclk_enable_peripheral_clock+0x1a4>
		break;
8000337e:	c1 78       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_FLASHC_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_FLASHC_DATA);
80003380:	30 0c       	mov	r12,0
80003382:	f0 1f 00 0e 	mcall	800033b8 <sysclk_enable_peripheral_clock+0x1a0>
		sysclk_enable_pbb_module(SYSCLK_FLASHC_REGS);
80003386:	30 2c       	mov	r12,2
80003388:	f0 1f 00 0d 	mcall	800033bc <sysclk_enable_peripheral_clock+0x1a4>
		break;
8000338c:	c1 08       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

	case AVR32_MACB_ADDRESS:
		sysclk_enable_hsb_module(SYSCLK_MACB_DATA);
8000338e:	30 4c       	mov	r12,4
80003390:	f0 1f 00 0a 	mcall	800033b8 <sysclk_enable_peripheral_clock+0x1a0>
		sysclk_enable_pbb_module(SYSCLK_MACB_REGS);
80003394:	30 3c       	mov	r12,3
80003396:	f0 1f 00 0a 	mcall	800033bc <sysclk_enable_peripheral_clock+0x1a4>
		break;
8000339a:	c0 98       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>

#if defined(AVR32_SMC_ADDRESS)
	case AVR32_SMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SMC_REGS);
8000339c:	30 4c       	mov	r12,4
8000339e:	f0 1f 00 08 	mcall	800033bc <sysclk_enable_peripheral_clock+0x1a4>
		break;
800033a2:	c0 58       	rjmp	800033ac <sysclk_enable_peripheral_clock+0x194>
#endif

#if defined(AVR32_SDRAMC_ADDRESS)
	case AVR32_SDRAMC_ADDRESS:
		sysclk_enable_pbb_module(SYSCLK_SDRAMC_REGS);
800033a4:	30 5c       	mov	r12,5
800033a6:	f0 1f 00 06 	mcall	800033bc <sysclk_enable_peripheral_clock+0x1a4>
		break;
800033aa:	d7 03       	nop

	default:
		Assert(false);
		return;
	}
}
800033ac:	2f fd       	sub	sp,-4
800033ae:	e3 cd 80 80 	ldm	sp++,r7,pc
800033b2:	00 00       	add	r0,r0
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	31 f8       	mov	r8,31
800033b8:	80 00       	ld.sh	r0,r0[0x0]
800033ba:	31 d8       	mov	r8,29
800033bc:	80 00       	ld.sh	r0,r0[0x0]
800033be:	30 cc       	mov	r12,12

800033c0 <tc_irq>:
#elif defined (__ICCAVR32__)
#pragma handler = EXAMPLE_TC_IRQ_GROUP, 1
__interrupt
#endif
static void tc_irq(void)
{
800033c0:	eb cd 40 80 	pushm	r7,lr
800033c4:	1a 97       	mov	r7,sp
	// Increment the ms seconds counter
	tc_tick++;
800033c6:	48 b8       	lddpc	r8,800033f0 <tc_irq+0x30>
800033c8:	70 08       	ld.w	r8,r8[0x0]
800033ca:	f0 c9 ff ff 	sub	r9,r8,-1
800033ce:	48 98       	lddpc	r8,800033f0 <tc_irq+0x30>
800033d0:	91 09       	st.w	r8[0x0],r9

	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800033d2:	30 0b       	mov	r11,0
800033d4:	fe 7c 38 00 	mov	r12,-51200
800033d8:	f0 1f 00 07 	mcall	800033f4 <tc_irq+0x34>

	// specify that an interrupt has been raised
	update_timer = true;
800033dc:	48 79       	lddpc	r9,800033f8 <tc_irq+0x38>
800033de:	30 18       	mov	r8,1
800033e0:	b2 88       	st.b	r9[0x0],r8
	// Toggle a GPIO pin (this pin is used as a regular GPIO pin).
	LED_Toggle(LED0);
800033e2:	30 1c       	mov	r12,1
800033e4:	f0 1f 00 06 	mcall	800033fc <tc_irq+0x3c>
}
800033e8:	e3 cd 40 80 	ldm	sp++,r7,lr
800033ec:	d6 03       	rete
800033ee:	00 00       	add	r0,r0
800033f0:	00 00       	add	r0,r0
800033f2:	01 00       	ld.w	r0,r0++
800033f4:	80 00       	ld.sh	r0,r0[0x0]
800033f6:	28 4a       	sub	r10,-124
800033f8:	00 00       	add	r0,r0
800033fa:	00 0c       	add	r12,r0
800033fc:	80 00       	ld.sh	r0,r0[0x0]
800033fe:	20 08       	sub	r8,0

80003400 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc)
{
80003400:	eb cd 40 80 	pushm	r7,lr
80003404:	1a 97       	mov	r7,sp
80003406:	20 1d       	sub	sp,4
80003408:	ef 4c ff fc 	st.w	r7[-4],r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
8000340c:	49 3b       	lddpc	r11,80003458 <tc_init+0x58>
8000340e:	ee fc ff fc 	ld.w	r12,r7[-4]
80003412:	f0 1f 00 13 	mcall	8000345c <tc_init+0x5c>
	 * Set the compare triggers.
	 * We configure it to count every 1 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 1 ms, hence RC = (fPBA / 8) / 1000
	 * to get an interrupt every 10 ms.
	 */
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, (sysclk_get_pba_hz() / 8 / 1000));
80003416:	f0 1f 00 13 	mcall	80003460 <tc_init+0x60>
8000341a:	18 99       	mov	r9,r12
8000341c:	e0 68 4d d3 	mov	r8,19923
80003420:	ea 18 10 62 	orh	r8,0x1062
80003424:	f2 08 06 48 	mulu.d	r8,r9,r8
80003428:	f2 08 16 09 	lsr	r8,r9,0x9
8000342c:	5c 88       	casts.h	r8
8000342e:	5c 78       	castu.h	r8
80003430:	10 9a       	mov	r10,r8
80003432:	30 0b       	mov	r11,0
80003434:	ee fc ff fc 	ld.w	r12,r7[-4]
80003438:	f0 1f 00 0b 	mcall	80003464 <tc_init+0x64>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
8000343c:	48 ba       	lddpc	r10,80003468 <tc_init+0x68>
8000343e:	30 0b       	mov	r11,0
80003440:	ee fc ff fc 	ld.w	r12,r7[-4]
80003444:	f0 1f 00 0a 	mcall	8000346c <tc_init+0x6c>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80003448:	30 0b       	mov	r11,0
8000344a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000344e:	f0 1f 00 09 	mcall	80003470 <tc_init+0x70>
}
80003452:	2f fd       	sub	sp,-4
80003454:	e3 cd 80 80 	ldm	sp++,r7,pc
80003458:	80 00       	ld.sh	r0,r0[0x0]
8000345a:	39 30       	mov	r0,-109
8000345c:	80 00       	ld.sh	r0,r0[0x0]
8000345e:	26 bc       	sub	r12,107
80003460:	80 00       	ld.sh	r0,r0[0x0]
80003462:	31 c0       	mov	r0,28
80003464:	80 00       	ld.sh	r0,r0[0x0]
80003466:	28 84       	sub	r4,-120
80003468:	80 00       	ld.sh	r0,r0[0x0]
8000346a:	39 38       	mov	r8,-109
8000346c:	80 00       	ld.sh	r0,r0[0x0]
8000346e:	24 d4       	sub	r4,77
80003470:	80 00       	ld.sh	r0,r0[0x0]
80003472:	28 10       	sub	r0,-127

80003474 <main>:
 *  - Configure, enable the CPCS (RC compare match) interrupt, and start a
 *    TC channel in waveform mode
 *  - In an infinite loop, update the USART message every second.
 */
int main(void)
{
80003474:	eb cd 40 80 	pushm	r7,lr
80003478:	1a 97       	mov	r7,sp
8000347a:	20 2d       	sub	sp,8
	volatile avr32_tc_t *tc = EXAMPLE_TC;
8000347c:	fe 78 38 00 	mov	r8,-51200
80003480:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t timer = 0;
80003484:	30 08       	mov	r8,0
80003486:	ef 48 ff fc 	st.w	r7[-4],r8
	/**
	 * \note the call to sysclk_init() will disable all non-vital
	 * peripheral clocks, except for the peripheral clocks explicitly
	 * enabled in conf_clock.h.
	 */
	sysclk_init();
8000348a:	f0 1f 00 25 	mcall	8000351c <main+0xa8>
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
8000348e:	fe 7c 38 00 	mov	r12,-51200
80003492:	f0 1f 00 24 	mcall	80003520 <main+0xac>
	// Initialize the USART module for trace messages
	init_dbg_rs232(sysclk_get_pba_hz());
80003496:	f0 1f 00 24 	mcall	80003524 <main+0xb0>
8000349a:	18 98       	mov	r8,r12
8000349c:	10 9c       	mov	r12,r8
8000349e:	f0 1f 00 23 	mcall	80003528 <main+0xb4>
	// Disable the interrupts
	cpu_irq_disable();
800034a2:	d3 03       	ssrf	0x10

#if defined (__GNUC__)
	// Initialize interrupt vectors.
	INTC_init_interrupts();
800034a4:	f0 1f 00 22 	mcall	8000352c <main+0xb8>
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
800034a8:	30 0a       	mov	r10,0
800034aa:	e0 6b 01 c0 	mov	r11,448
800034ae:	4a 1c       	lddpc	r12,80003530 <main+0xbc>
800034b0:	f0 1f 00 21 	mcall	80003534 <main+0xc0>
#endif
	// Enable the interrupts
	cpu_irq_enable();
800034b4:	d5 03       	csrf	0x10
	// Initialize the timer module
	tc_init(tc);
800034b6:	ee fc ff f8 	ld.w	r12,r7[-8]
800034ba:	f0 1f 00 20 	mcall	80003538 <main+0xc4>
800034be:	c0 48       	rjmp	800034c6 <main+0x52>
			print_dbg_ulong(timer);
			print_dbg(" s");
			// Reset the timer update flag to wait till next timer interrupt
			update_timer = false;
		}
	}
800034c0:	d7 03       	nop
800034c2:	c0 28       	rjmp	800034c6 <main+0x52>
800034c4:	d7 03       	nop
	// Initialize the timer module
	tc_init(tc);

	while (1) {
		// Update the display on USART every second.
		if ((update_timer) && (!(tc_tick%1000))) {
800034c6:	49 e8       	lddpc	r8,8000353c <main+0xc8>
800034c8:	11 88       	ld.ub	r8,r8[0x0]
800034ca:	5c 58       	castu.b	r8
800034cc:	cf a0       	breq	800034c0 <main+0x4c>
800034ce:	49 d8       	lddpc	r8,80003540 <main+0xcc>
800034d0:	70 0a       	ld.w	r10,r8[0x0]
800034d2:	e0 68 4d d3 	mov	r8,19923
800034d6:	ea 18 10 62 	orh	r8,0x1062
800034da:	f4 08 06 48 	mulu.d	r8,r10,r8
800034de:	f2 08 16 06 	lsr	r8,r9,0x6
800034e2:	e0 69 03 e8 	mov	r9,1000
800034e6:	b3 38       	mul	r8,r9
800034e8:	f4 08 01 08 	sub	r8,r10,r8
800034ec:	ce c1       	brne	800034c4 <main+0x50>
			timer++;
800034ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034f2:	2f f8       	sub	r8,-1
800034f4:	ef 48 ff fc 	st.w	r7[-4],r8
			// Set cursor to the position (1; 5)
			print_dbg("\x1B[5;1H");
800034f8:	49 3c       	lddpc	r12,80003544 <main+0xd0>
800034fa:	f0 1f 00 14 	mcall	80003548 <main+0xd4>
			// Print the timer value
			print_dbg("ATMEL AVR UC3 - Timer/Counter Example 3\n\rTimer: ");
800034fe:	49 4c       	lddpc	r12,8000354c <main+0xd8>
80003500:	f0 1f 00 12 	mcall	80003548 <main+0xd4>
			print_dbg_ulong(timer);
80003504:	ee fc ff fc 	ld.w	r12,r7[-4]
80003508:	f0 1f 00 12 	mcall	80003550 <main+0xdc>
			print_dbg(" s");
8000350c:	49 2c       	lddpc	r12,80003554 <main+0xe0>
8000350e:	f0 1f 00 0f 	mcall	80003548 <main+0xd4>
			// Reset the timer update flag to wait till next timer interrupt
			update_timer = false;
80003512:	48 b9       	lddpc	r9,8000353c <main+0xc8>
80003514:	30 08       	mov	r8,0
80003516:	b2 88       	st.b	r9[0x0],r8
		}
	}
80003518:	cd 7b       	rjmp	800034c6 <main+0x52>
8000351a:	00 00       	add	r0,r0
8000351c:	80 00       	ld.sh	r0,r0[0x0]
8000351e:	31 28       	mov	r8,18
80003520:	80 00       	ld.sh	r0,r0[0x0]
80003522:	32 18       	mov	r8,33
80003524:	80 00       	ld.sh	r0,r0[0x0]
80003526:	31 c0       	mov	r0,28
80003528:	80 00       	ld.sh	r0,r0[0x0]
8000352a:	2c ac       	sub	r12,-54
8000352c:	80 00       	ld.sh	r0,r0[0x0]
8000352e:	23 48       	sub	r8,52
80003530:	80 00       	ld.sh	r0,r0[0x0]
80003532:	33 c0       	mov	r0,60
80003534:	80 00       	ld.sh	r0,r0[0x0]
80003536:	23 e0       	sub	r0,62
80003538:	80 00       	ld.sh	r0,r0[0x0]
8000353a:	34 00       	mov	r0,64
8000353c:	00 00       	add	r0,r0
8000353e:	00 0c       	add	r12,r0
80003540:	00 00       	add	r0,r0
80003542:	01 00       	ld.w	r0,r0++
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	31 6c       	mov	r12,22
80003548:	80 00       	ld.sh	r0,r0[0x0]
8000354a:	2d 2c       	sub	r12,-46
8000354c:	80 00       	ld.sh	r0,r0[0x0]
8000354e:	31 74       	mov	r4,23
80003550:	80 00       	ld.sh	r0,r0[0x0]
80003552:	2d 50       	sub	r0,-43
80003554:	80 00       	ld.sh	r0,r0[0x0]
80003556:	31 a8       	mov	r8,26

Disassembly of section .exception:

80003600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80003600:	c0 08       	rjmp	80003600 <_evba>
	...

80003604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80003604:	c0 08       	rjmp	80003604 <_handle_TLB_Multiple_Hit>
	...

80003608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80003608:	c0 08       	rjmp	80003608 <_handle_Bus_Error_Data_Fetch>
	...

8000360c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000360c:	c0 08       	rjmp	8000360c <_handle_Bus_Error_Instruction_Fetch>
	...

80003610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80003610:	c0 08       	rjmp	80003610 <_handle_NMI>
	...

80003614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80003614:	c0 08       	rjmp	80003614 <_handle_Instruction_Address>
	...

80003618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80003618:	c0 08       	rjmp	80003618 <_handle_ITLB_Protection>
	...

8000361c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000361c:	c0 08       	rjmp	8000361c <_handle_Breakpoint>
	...

80003620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80003620:	c0 08       	rjmp	80003620 <_handle_Illegal_Opcode>
	...

80003624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80003624:	c0 08       	rjmp	80003624 <_handle_Unimplemented_Instruction>
	...

80003628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80003628:	c0 08       	rjmp	80003628 <_handle_Privilege_Violation>
	...

8000362c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000362c:	c0 08       	rjmp	8000362c <_handle_Floating_Point>
	...

80003630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80003630:	c0 08       	rjmp	80003630 <_handle_Coprocessor_Absent>
	...

80003634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80003634:	c0 08       	rjmp	80003634 <_handle_Data_Address_Read>
	...

80003638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80003638:	c0 08       	rjmp	80003638 <_handle_Data_Address_Write>
	...

8000363c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000363c:	c0 08       	rjmp	8000363c <_handle_DTLB_Protection_Read>
	...

80003640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80003640:	c0 08       	rjmp	80003640 <_handle_DTLB_Protection_Write>
	...

80003644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80003644:	c0 08       	rjmp	80003644 <_handle_DTLB_Modified>
	...

80003650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80003650:	c0 08       	rjmp	80003650 <_handle_ITLB_Miss>
	...

80003660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80003660:	c0 08       	rjmp	80003660 <_handle_DTLB_Miss_Read>
	...

80003670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80003670:	c0 08       	rjmp	80003670 <_handle_DTLB_Miss_Write>
	...

80003700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80003700:	c0 08       	rjmp	80003700 <_handle_Supervisor_Call>
80003702:	d7 03       	nop

80003704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003704:	30 0c       	mov	r12,0
80003706:	fe b0 f5 df 	rcall	800022c4 <_get_interrupt_handler>
8000370a:	58 0c       	cp.w	r12,0
8000370c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80003710:	d6 03       	rete

80003712 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003712:	30 1c       	mov	r12,1
80003714:	fe b0 f5 d8 	rcall	800022c4 <_get_interrupt_handler>
80003718:	58 0c       	cp.w	r12,0
8000371a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000371e:	d6 03       	rete

80003720 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80003720:	30 2c       	mov	r12,2
80003722:	fe b0 f5 d1 	rcall	800022c4 <_get_interrupt_handler>
80003726:	58 0c       	cp.w	r12,0
80003728:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000372c:	d6 03       	rete

8000372e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000372e:	30 3c       	mov	r12,3
80003730:	fe b0 f5 ca 	rcall	800022c4 <_get_interrupt_handler>
80003734:	58 0c       	cp.w	r12,0
80003736:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000373a:	d6 03       	rete
8000373c:	d7 03       	nop
8000373e:	d7 03       	nop
80003740:	d7 03       	nop
80003742:	d7 03       	nop
80003744:	d7 03       	nop
80003746:	d7 03       	nop
80003748:	d7 03       	nop
8000374a:	d7 03       	nop
8000374c:	d7 03       	nop
8000374e:	d7 03       	nop
80003750:	d7 03       	nop
80003752:	d7 03       	nop
80003754:	d7 03       	nop
80003756:	d7 03       	nop
80003758:	d7 03       	nop
8000375a:	d7 03       	nop
8000375c:	d7 03       	nop
8000375e:	d7 03       	nop
80003760:	d7 03       	nop
80003762:	d7 03       	nop
80003764:	d7 03       	nop
80003766:	d7 03       	nop
80003768:	d7 03       	nop
8000376a:	d7 03       	nop
8000376c:	d7 03       	nop
8000376e:	d7 03       	nop
80003770:	d7 03       	nop
80003772:	d7 03       	nop
80003774:	d7 03       	nop
80003776:	d7 03       	nop
80003778:	d7 03       	nop
8000377a:	d7 03       	nop
8000377c:	d7 03       	nop
8000377e:	d7 03       	nop
80003780:	d7 03       	nop
80003782:	d7 03       	nop
80003784:	d7 03       	nop
80003786:	d7 03       	nop
80003788:	d7 03       	nop
8000378a:	d7 03       	nop
8000378c:	d7 03       	nop
8000378e:	d7 03       	nop
80003790:	d7 03       	nop
80003792:	d7 03       	nop
80003794:	d7 03       	nop
80003796:	d7 03       	nop
80003798:	d7 03       	nop
8000379a:	d7 03       	nop
8000379c:	d7 03       	nop
8000379e:	d7 03       	nop
800037a0:	d7 03       	nop
800037a2:	d7 03       	nop
800037a4:	d7 03       	nop
800037a6:	d7 03       	nop
800037a8:	d7 03       	nop
800037aa:	d7 03       	nop
800037ac:	d7 03       	nop
800037ae:	d7 03       	nop
800037b0:	d7 03       	nop
800037b2:	d7 03       	nop
800037b4:	d7 03       	nop
800037b6:	d7 03       	nop
800037b8:	d7 03       	nop
800037ba:	d7 03       	nop
800037bc:	d7 03       	nop
800037be:	d7 03       	nop
800037c0:	d7 03       	nop
800037c2:	d7 03       	nop
800037c4:	d7 03       	nop
800037c6:	d7 03       	nop
800037c8:	d7 03       	nop
800037ca:	d7 03       	nop
800037cc:	d7 03       	nop
800037ce:	d7 03       	nop
800037d0:	d7 03       	nop
800037d2:	d7 03       	nop
800037d4:	d7 03       	nop
800037d6:	d7 03       	nop
800037d8:	d7 03       	nop
800037da:	d7 03       	nop
800037dc:	d7 03       	nop
800037de:	d7 03       	nop
800037e0:	d7 03       	nop
800037e2:	d7 03       	nop
800037e4:	d7 03       	nop
800037e6:	d7 03       	nop
800037e8:	d7 03       	nop
800037ea:	d7 03       	nop
800037ec:	d7 03       	nop
800037ee:	d7 03       	nop
800037f0:	d7 03       	nop
800037f2:	d7 03       	nop
800037f4:	d7 03       	nop
800037f6:	d7 03       	nop
800037f8:	d7 03       	nop
800037fa:	d7 03       	nop
800037fc:	d7 03       	nop
800037fe:	d7 03       	nop
